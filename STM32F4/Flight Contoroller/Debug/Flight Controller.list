
Flight Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08010158  08010158  00020158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010974  08010974  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010974  08010974  00020974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801097c  0801097c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801097c  0801097c  0002097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010980  08010980  00020980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010984  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200001e8  08010b68  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08010b68  000308c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3fe  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472e  00000000  00000000  0004b612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0004fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  000513d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026059  00000000  00000000  000528c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a532  00000000  00000000  00078921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfcbd  00000000  00000000  00092e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa0  00000000  00000000  00162b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010140 	.word	0x08010140

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08010140 	.word	0x08010140

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	619a      	str	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <AT24C08_Page_Write>:
 */
#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	  unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	121b      	asrs	r3, r3, #8
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	73fb      	strb	r3, [r7, #15]
	  unsigned char wordAddress = (page*16) & 0xff;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	73bb      	strb	r3, [r7, #14]

	  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <AT24C08_Page_Write+0x68>)
 8000f4a:	f7ff ffd7 	bl	8000efc <LL_GPIO_ResetOutputPin>
	  HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	2301      	movs	r3, #1
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <AT24C08_Page_Write+0x6c>)
 8000f66:	f008 fa87 	bl	8009478 <HAL_I2C_Mem_Write>
	  HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f007 faf2 	bl	8008554 <HAL_Delay>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <AT24C08_Page_Write+0x68>)
 8000f76:	f7ff ffb3 	bl	8000ee0 <LL_GPIO_SetOutputPin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020800 	.word	0x40020800
 8000f88:	200006f4 	.word	0x200006f4

08000f8c <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	  unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	121b      	asrs	r3, r3, #8
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
	  unsigned char wordAddress = (page*16) & 0xff;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	73bb      	strb	r3, [r7, #14]

	  HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <AT24C08_Page_Read+0x4c>)
 8000fcc:	f008 fb4e 	bl	800966c <HAL_I2C_Mem_Read>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200006f4 	.word	0x200006f4

08000fdc <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe8:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fec:	ed87 1a00 	vstr	s2, [r7]
 8000ff0:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8000ff2:	2345      	movs	r3, #69	; 0x45
 8000ff4:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000ff6:	2350      	movs	r3, #80	; 0x50
 8000ff8:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8001016:	7d3b      	ldrb	r3, [r7, #20]
 8001018:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 800101a:	7d7b      	ldrb	r3, [r7, #21]
 800101c:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001020:	7dbb      	ldrb	r3, [r7, #22]
 8001022:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 800103c:	7dbb      	ldrb	r3, [r7, #22]
 800103e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
 8001052:	e00c      	b.n	800106e <EP_PIDGain_Write+0x92>
	{
		chksum -= buf_write[i];
 8001054:	f107 0218 	add.w	r2, r7, #24
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106a:	3301      	adds	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	2b0e      	cmp	r3, #14
 8001072:	ddef      	ble.n	8001054 <EP_PIDGain_Write+0x78>
	}
	buf_write[15] = chksum;
 8001074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(id)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d83e      	bhi.n	8001100 <EP_PIDGain_Write+0x124>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <EP_PIDGain_Write+0xac>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010a1 	.word	0x080010a1
 800108c:	080010b1 	.word	0x080010b1
 8001090:	080010c1 	.word	0x080010c1
 8001094:	080010d1 	.word	0x080010d1
 8001098:	080010e1 	.word	0x080010e1
 800109c:	080010f1 	.word	0x080010f1
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	2210      	movs	r2, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff37 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ae:	e027      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	2210      	movs	r2, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff ff2f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010be:	e01f      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	2210      	movs	r2, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff ff27 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ce:	e017      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2210      	movs	r2, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	2003      	movs	r0, #3
 80010da:	f7ff ff1f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010de:	e00f      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2210      	movs	r2, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff ff17 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ee:	e007      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	2210      	movs	r2, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	2005      	movs	r0, #5
 80010fa:	f7ff ff0f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010fe:	bf00      	nop
	}
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d83e      	bhi.n	800119c <EP_PIDGain_Read+0x94>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <EP_PIDGain_Read+0x1c>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	0800113d 	.word	0x0800113d
 8001128:	0800114d 	.word	0x0800114d
 800112c:	0800115d 	.word	0x0800115d
 8001130:	0800116d 	.word	0x0800116d
 8001134:	0800117d 	.word	0x0800117d
 8001138:	0800118d 	.word	0x0800118d
		{
		case 0:
			AT24C08_Page_Read(0, &buf_read[0], 16);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	2210      	movs	r2, #16
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff ff21 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800114a:	e027      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 1:
			AT24C08_Page_Read(1, &buf_read[0], 16);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2210      	movs	r2, #16
 8001152:	4619      	mov	r1, r3
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff19 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800115a:	e01f      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 2:
			AT24C08_Page_Read(2, &buf_read[0], 16);
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2210      	movs	r2, #16
 8001162:	4619      	mov	r1, r3
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ff11 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800116a:	e017      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 3:
			AT24C08_Page_Read(3, &buf_read[0], 16);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	2210      	movs	r2, #16
 8001172:	4619      	mov	r1, r3
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff ff09 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800117a:	e00f      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 4:
			AT24C08_Page_Read(4, &buf_read[0], 16);
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	2210      	movs	r2, #16
 8001182:	4619      	mov	r1, r3
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff ff01 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800118a:	e007      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 5:
			AT24C08_Page_Read(5, &buf_read[0], 16);
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2210      	movs	r2, #16
 8001192:	4619      	mov	r1, r3
 8001194:	2005      	movs	r0, #5
 8001196:	f7ff fef9 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800119a:	bf00      	nop
		}

	unsigned char chksum = 0xff;
 800119c:	23ff      	movs	r3, #255	; 0xff
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for(int i=0; i<15; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a6:	e00c      	b.n	80011c2 <EP_PIDGain_Read+0xba>
	{
		chksum -= buf_read[i];
 80011a8:	f107 0218 	add.w	r2, r7, #24
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	3301      	adds	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	2b0e      	cmp	r3, #14
 80011c6:	ddef      	ble.n	80011a8 <EP_PIDGain_Read+0xa0>
	}

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d12f      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
 80011d4:	7e3b      	ldrb	r3, [r7, #24]
 80011d6:	2b45      	cmp	r3, #69	; 0x45
 80011d8:	d12c      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
 80011da:	7e7b      	ldrb	r3, [r7, #25]
 80011dc:	2b50      	cmp	r3, #80	; 0x50
 80011de:	d129      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 80011e0:	7efb      	ldrb	r3, [r7, #27]
 80011e2:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 80011e4:	7f3b      	ldrb	r3, [r7, #28]
 80011e6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011ec:	7fbb      	ldrb	r3, [r7, #30]
 80011ee:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011fe:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8001200:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001204:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800120a:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 8001212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001216:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800121c:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 8001224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001228:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]

		return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <EP_PIDGain_Read+0x12e>
	}

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop

08001240 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f023 0210 	bic.w	r2, r3, #16
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d101      	bne.n	80012c4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	330c      	adds	r3, #12
 80012fc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_GPIO_IsInputPinSet>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4013      	ands	r3, r2
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_SetOutputPin>:
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_GPIO_ResetOutputPin>:
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800

080013d4 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2228      	movs	r2, #40	; 0x28
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b fa72 	bl	800c8cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013fc:	f7ff ffd2 	bl	80013a4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001400:	2002      	movs	r0, #2
 8001402:	f7ff ffb7 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001406:	2004      	movs	r0, #4
 8001408:	f7ff ffb4 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff ffb1 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001412:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001416:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001418:	2302      	movs	r3, #2
 800141a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001428:	2305      	movs	r3, #5
 800142a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4841      	ldr	r0, [pc, #260]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001432:	f00a fac2 	bl	800b9ba <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800143a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800143e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001452:	2318      	movs	r3, #24
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 800146a:	f00a fc76 	bl	800bd5a <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800146e:	2100      	movs	r1, #0
 8001470:	4832      	ldr	r0, [pc, #200]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 8001472:	f7ff fef5 	bl	8001260 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	4831      	ldr	r0, [pc, #196]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800147c:	f7ff ff6b 	bl	8001356 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001484:	482c      	ldr	r0, [pc, #176]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001486:	f7ff ff66 	bl	8001356 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	482d      	ldr	r0, [pc, #180]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001490:	f7ff ff61 	bl	8001356 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800149a:	2301      	movs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4822      	ldr	r0, [pc, #136]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014b0:	f00a fa83 	bl	800b9ba <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ba:	2301      	movs	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	481c      	ldr	r0, [pc, #112]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014d0:	f00a fa73 	bl	800b9ba <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014f0:	f00a fa63 	bl	800b9ba <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001508:	f00a fa57 	bl	800b9ba <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 800150e:	f7ff fe97 	bl	8001240 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001518:	f7ff ff0f 	bl	800133a <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800151c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001522:	f7ff ff0a 	bl	800133a <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800152c:	f7ff ff05 	bl	800133a <LL_GPIO_SetOutputPin>
}
 8001530:	bf00      	nop
 8001532:	3740      	adds	r7, #64	; 0x40
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020400 	.word	0x40020400
 800153c:	40003800 	.word	0x40003800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800154e:	f7ff ff41 	bl	80013d4 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8001552:	482e      	ldr	r0, [pc, #184]	; (800160c <BNO080_Initialization+0xc4>)
 8001554:	f00b fe2c 	bl	800d1b0 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <BNO080_Initialization+0xc8>)
 800155e:	f7ff feec 	bl	800133a <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	482b      	ldr	r0, [pc, #172]	; (8001614 <BNO080_Initialization+0xcc>)
 8001568:	f7ff fee7 	bl	800133a <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4829      	ldr	r0, [pc, #164]	; (8001618 <BNO080_Initialization+0xd0>)
 8001572:	f7ff fef0 	bl	8001356 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001576:	20c8      	movs	r0, #200	; 0xc8
 8001578:	f006 ffec 	bl	8008554 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	4825      	ldr	r0, [pc, #148]	; (8001618 <BNO080_Initialization+0xd0>)
 8001582:	f7ff feda 	bl	800133a <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001586:	f000 fc53 	bl	8001e30 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800158a:	f000 fc51 	bl	8001e30 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800158e:	f000 fc73 	bl	8001e78 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001592:	f000 fc4d 	bl	8001e30 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001596:	f000 fc6f 	bl	8001e78 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <BNO080_Initialization+0xd4>)
 800159c:	22f9      	movs	r2, #249	; 0xf9
 800159e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <BNO080_Initialization+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80015a6:	2102      	movs	r1, #2
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 fcd5 	bl	8001f58 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80015ae:	f000 fc3f 	bl	8001e30 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80015b2:	f000 fc61 	bl	8001e78 <BNO080_receivePacket>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d11b      	bne.n	80015f4 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <BNO080_Initialization+0xd8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <BNO080_Initialization+0xd8>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <BNO080_Initialization+0xd8>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	4618      	mov	r0, r3
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <BNO080_Initialization+0xd8>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4603      	mov	r3, r0
 80015d6:	4813      	ldr	r0, [pc, #76]	; (8001624 <BNO080_Initialization+0xdc>)
 80015d8:	f00b fdea 	bl	800d1b0 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <BNO080_Initialization+0xd4>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2bf8      	cmp	r3, #248	; 0xf8
 80015e2:	d107      	bne.n	80015f4 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <BNO080_Initialization+0xd4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <BNO080_Initialization+0xe0>)
 80015ec:	f00b fde0 	bl	800d1b0 <iprintf>
			return (0);
 80015f0:	2300      	movs	r3, #0
 80015f2:	e007      	b.n	8001604 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <BNO080_Initialization+0xd4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	22f8      	movs	r2, #248	; 0xf8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <BNO080_Initialization+0xe4>)
 80015fe:	f00b fdd7 	bl	800d1b0 <iprintf>
	return (1); //Something went wrong
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08010158 	.word	0x08010158
 8001610:	40020400 	.word	0x40020400
 8001614:	40020000 	.word	0x40020000
 8001618:	40020800 	.word	0x40020800
 800161c:	200002f4 	.word	0x200002f4
 8001620:	200002a0 	.word	0x200002a0
 8001624:	0801016c 	.word	0x0801016c
 8001628:	08010184 	.word	0x08010184
 800162c:	080101a4 	.word	0x080101a4

08001630 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800163a:	bf00      	nop
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <SPI2_SendByte+0x40>)
 800163e:	f7ff fe35 	bl	80012ac <LL_SPI_IsActiveFlag_TXE>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f9      	beq.n	800163c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4619      	mov	r1, r3
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <SPI2_SendByte+0x40>)
 800164e:	f7ff fe4d 	bl	80012ec <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001652:	bf00      	nop
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <SPI2_SendByte+0x40>)
 8001656:	f7ff fe16 	bl	8001286 <LL_SPI_IsActiveFlag_RXNE>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f9      	beq.n	8001654 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <SPI2_SendByte+0x40>)
 8001662:	f7ff fe36 	bl	80012d2 <LL_SPI_ReceiveData8>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40003800 	.word	0x40003800

08001674 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <BNO080_dataAvailable+0x50>)
 800167e:	f7ff fe47 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <BNO080_dataAvailable+0x18>
		return (0);
 8001688:	2300      	movs	r3, #0
 800168a:	e019      	b.n	80016c0 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800168c:	f000 fbf4 	bl	8001e78 <BNO080_receivePacket>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d113      	bne.n	80016be <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <BNO080_dataAvailable+0x54>)
 8001698:	789b      	ldrb	r3, [r3, #2]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <BNO080_dataAvailable+0x3a>
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <BNO080_dataAvailable+0x58>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2bfb      	cmp	r3, #251	; 0xfb
 80016a4:	d103      	bne.n	80016ae <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80016a6:	f000 f82f 	bl	8001708 <BNO080_parseInputReport>
			return (1);
 80016aa:	2301      	movs	r3, #1
 80016ac:	e008      	b.n	80016c0 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <BNO080_dataAvailable+0x54>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d103      	bne.n	80016be <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80016b6:	f000 f80b 	bl	80016d0 <BNO080_parseCommandReport>
			return (1);
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800
 80016c8:	200002a0 	.word	0x200002a0
 80016cc:	200002f4 	.word	0x200002f4

080016d0 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2bf1      	cmp	r3, #241	; 0xf1
 80016dc:	d109      	bne.n	80016f2 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d103      	bne.n	80016f2 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016ec:	795a      	ldrb	r2, [r3, #5]
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <BNO080_parseCommandReport+0x34>)
 80016f0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200002f4 	.word	0x200002f4
 8001704:	20000377 	.word	0x20000377

08001708 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800170e:	4b98      	ldr	r3, [pc, #608]	; (8001970 <BNO080_parseInputReport+0x268>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b96      	ldr	r3, [pc, #600]	; (8001970 <BNO080_parseInputReport+0x268>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001720:	8a3b      	ldrh	r3, [r7, #16]
 8001722:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001726:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001728:	8a3b      	ldrh	r3, [r7, #16]
 800172a:	3b04      	subs	r3, #4
 800172c:	b29b      	uxth	r3, r3
 800172e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001730:	4b90      	ldr	r3, [pc, #576]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4a8f      	ldr	r2, [pc, #572]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001738:	78d2      	ldrb	r2, [r2, #3]
 800173a:	0412      	lsls	r2, r2, #16
 800173c:	4313      	orrs	r3, r2
 800173e:	4a8d      	ldr	r2, [pc, #564]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001740:	7892      	ldrb	r2, [r2, #2]
 8001742:	0212      	lsls	r2, r2, #8
 8001744:	4313      	orrs	r3, r2
 8001746:	4a8b      	ldr	r2, [pc, #556]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001748:	7852      	ldrb	r2, [r2, #1]
 800174a:	4313      	orrs	r3, r2
 800174c:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <BNO080_parseInputReport+0x270>)
 800174e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001750:	4b88      	ldr	r3, [pc, #544]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001752:	79db      	ldrb	r3, [r3, #7]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 800175a:	4b86      	ldr	r3, [pc, #536]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800175c:	7a9b      	ldrb	r3, [r3, #10]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b84      	ldr	r3, [pc, #528]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001764:	7a5b      	ldrb	r3, [r3, #9]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800176e:	4b81      	ldr	r3, [pc, #516]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001778:	7adb      	ldrb	r3, [r3, #11]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001782:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001784:	7b9b      	ldrb	r3, [r3, #14]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b7a      	ldr	r3, [pc, #488]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800179e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017a2:	2b0e      	cmp	r3, #14
 80017a4:	dd09      	ble.n	80017ba <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017a8:	7c1b      	ldrb	r3, [r3, #16]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017b0:	7bdb      	ldrb	r3, [r3, #15]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80017ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	dd09      	ble.n	80017d6 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80017c2:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017c4:	7c9b      	ldrb	r3, [r3, #18]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017cc:	7c5b      	ldrb	r3, [r3, #17]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017d8:	795b      	ldrb	r3, [r3, #5]
 80017da:	2b1e      	cmp	r3, #30
 80017dc:	dc46      	bgt.n	800186c <BNO080_parseInputReport+0x164>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f340 80bf 	ble.w	8001962 <BNO080_parseInputReport+0x25a>
 80017e4:	3b01      	subs	r3, #1
 80017e6:	2b1d      	cmp	r3, #29
 80017e8:	f200 80bb 	bhi.w	8001962 <BNO080_parseInputReport+0x25a>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <BNO080_parseInputReport+0xec>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001873 	.word	0x08001873
 80017f8:	080018ab 	.word	0x080018ab
 80017fc:	080018c7 	.word	0x080018c7
 8001800:	0800188f 	.word	0x0800188f
 8001804:	080018e3 	.word	0x080018e3
 8001808:	08001963 	.word	0x08001963
 800180c:	08001963 	.word	0x08001963
 8001810:	080018e3 	.word	0x080018e3
 8001814:	08001963 	.word	0x08001963
 8001818:	08001963 	.word	0x08001963
 800181c:	08001963 	.word	0x08001963
 8001820:	08001963 	.word	0x08001963
 8001824:	08001963 	.word	0x08001963
 8001828:	08001963 	.word	0x08001963
 800182c:	08001963 	.word	0x08001963
 8001830:	08001963 	.word	0x08001963
 8001834:	0800190b 	.word	0x0800190b
 8001838:	08001963 	.word	0x08001963
 800183c:	08001913 	.word	0x08001913
 8001840:	08001963 	.word	0x08001963
 8001844:	08001963 	.word	0x08001963
 8001848:	08001963 	.word	0x08001963
 800184c:	08001963 	.word	0x08001963
 8001850:	08001963 	.word	0x08001963
 8001854:	08001963 	.word	0x08001963
 8001858:	08001963 	.word	0x08001963
 800185c:	08001963 	.word	0x08001963
 8001860:	08001963 	.word	0x08001963
 8001864:	08001963 	.word	0x08001963
 8001868:	0800191d 	.word	0x0800191d
 800186c:	2bf1      	cmp	r3, #241	; 0xf1
 800186e:	d06d      	beq.n	800194c <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001870:	e077      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <BNO080_parseInputReport+0x274>)
 8001878:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800187a:	4a41      	ldr	r2, [pc, #260]	; (8001980 <BNO080_parseInputReport+0x278>)
 800187c:	89bb      	ldrh	r3, [r7, #12]
 800187e:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <BNO080_parseInputReport+0x27c>)
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001886:	4a40      	ldr	r2, [pc, #256]	; (8001988 <BNO080_parseInputReport+0x280>)
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	8013      	strh	r3, [r2, #0]
			break;
 800188c:	e069      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <BNO080_parseInputReport+0x284>)
 8001894:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001896:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <BNO080_parseInputReport+0x288>)
 8001898:	89bb      	ldrh	r3, [r7, #12]
 800189a:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 800189c:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <BNO080_parseInputReport+0x28c>)
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <BNO080_parseInputReport+0x290>)
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	8013      	strh	r3, [r2, #0]
			break;
 80018a8:	e05b      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <BNO080_parseInputReport+0x294>)
 80018b0:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80018b2:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <BNO080_parseInputReport+0x298>)
 80018b4:	89bb      	ldrh	r3, [r7, #12]
 80018b6:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80018b8:	4a3a      	ldr	r2, [pc, #232]	; (80019a4 <BNO080_parseInputReport+0x29c>)
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <BNO080_parseInputReport+0x2a0>)
 80018c0:	893b      	ldrh	r3, [r7, #8]
 80018c2:	8013      	strh	r3, [r2, #0]
			break;
 80018c4:	e04d      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <BNO080_parseInputReport+0x2a4>)
 80018cc:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80018ce:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <BNO080_parseInputReport+0x2a8>)
 80018d0:	89bb      	ldrh	r3, [r7, #12]
 80018d2:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <BNO080_parseInputReport+0x2ac>)
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80018da:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <BNO080_parseInputReport+0x2b0>)
 80018dc:	893b      	ldrh	r3, [r7, #8]
 80018de:	8013      	strh	r3, [r2, #0]
			break;
 80018e0:	e03f      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <BNO080_parseInputReport+0x2b4>)
 80018e8:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018ea:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <BNO080_parseInputReport+0x2b8>)
 80018ec:	89bb      	ldrh	r3, [r7, #12]
 80018ee:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018f0:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <BNO080_parseInputReport+0x2bc>)
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018f6:	4a34      	ldr	r2, [pc, #208]	; (80019c8 <BNO080_parseInputReport+0x2c0>)
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80018fc:	4a33      	ldr	r2, [pc, #204]	; (80019cc <BNO080_parseInputReport+0x2c4>)
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <BNO080_parseInputReport+0x2c8>)
 8001904:	8abb      	ldrh	r3, [r7, #20]
 8001906:	8013      	strh	r3, [r2, #0]
			break;
 8001908:	e02b      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <BNO080_parseInputReport+0x2cc>)
 800190c:	893b      	ldrh	r3, [r7, #8]
 800190e:	8013      	strh	r3, [r2, #0]
			break;
 8001910:	e027      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001914:	7a5a      	ldrb	r2, [r3, #9]
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <BNO080_parseInputReport+0x2d0>)
 8001918:	701a      	strb	r2, [r3, #0]
			break;
 800191a:	e022      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800191e:	7a9a      	ldrb	r2, [r3, #10]
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <BNO080_parseInputReport+0x2d4>)
 8001922:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001924:	2300      	movs	r3, #0
 8001926:	74fb      	strb	r3, [r7, #19]
 8001928:	e00c      	b.n	8001944 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	f103 020b 	add.w	r2, r3, #11
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <BNO080_parseInputReport+0x2d8>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	440b      	add	r3, r1
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800193a:	5c8a      	ldrb	r2, [r1, r2]
 800193c:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	3301      	adds	r3, #1
 8001942:	74fb      	strb	r3, [r7, #19]
 8001944:	7cfb      	ldrb	r3, [r7, #19]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d9ef      	bls.n	800192a <BNO080_parseInputReport+0x222>
			break;
 800194a:	e00a      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800194e:	79db      	ldrb	r3, [r3, #7]
 8001950:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b07      	cmp	r3, #7
 8001956:	d103      	bne.n	8001960 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800195a:	7a9a      	ldrb	r2, [r3, #10]
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <BNO080_parseInputReport+0x2dc>)
 800195e:	701a      	strb	r2, [r3, #0]
			break;
 8001960:	bf00      	nop
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200002a0 	.word	0x200002a0
 8001974:	200002f4 	.word	0x200002f4
 8001978:	200002a8 	.word	0x200002a8
 800197c:	2000037c 	.word	0x2000037c
 8001980:	20000374 	.word	0x20000374
 8001984:	20000380 	.word	0x20000380
 8001988:	200002de 	.word	0x200002de
 800198c:	200002da 	.word	0x200002da
 8001990:	200002ae 	.word	0x200002ae
 8001994:	20000378 	.word	0x20000378
 8001998:	200002ea 	.word	0x200002ea
 800199c:	200002ec 	.word	0x200002ec
 80019a0:	200002ee 	.word	0x200002ee
 80019a4:	200002d6 	.word	0x200002d6
 80019a8:	200002d4 	.word	0x200002d4
 80019ac:	200002a4 	.word	0x200002a4
 80019b0:	200002d8 	.word	0x200002d8
 80019b4:	2000037a 	.word	0x2000037a
 80019b8:	200002dc 	.word	0x200002dc
 80019bc:	200002ac 	.word	0x200002ac
 80019c0:	2000037e 	.word	0x2000037e
 80019c4:	200002e8 	.word	0x200002e8
 80019c8:	2000029c 	.word	0x2000029c
 80019cc:	200002a6 	.word	0x200002a6
 80019d0:	200002e0 	.word	0x200002e0
 80019d4:	20000382 	.word	0x20000382
 80019d8:	200002f0 	.word	0x200002f0
 80019dc:	20000376 	.word	0x20000376
 80019e0:	200002e4 	.word	0x200002e4
 80019e4:	20000377 	.word	0x20000377

080019e8 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <BNO080_getQuatI+0x24>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <BNO080_getQuatI+0x28>)
 80019f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8bb 	bl	8001b78 <BNO080_qToFloat>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000037e 	.word	0x2000037e
 8001a10:	20000000 	.word	0x20000000

08001a14 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <BNO080_getQuatJ+0x24>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <BNO080_getQuatJ+0x28>)
 8001a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f8a5 	bl	8001b78 <BNO080_qToFloat>
 8001a2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200002e8 	.word	0x200002e8
 8001a3c:	20000000 	.word	0x20000000

08001a40 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <BNO080_getQuatK+0x24>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <BNO080_getQuatK+0x28>)
 8001a4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f88f 	bl	8001b78 <BNO080_qToFloat>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000029c 	.word	0x2000029c
 8001a68:	20000000 	.word	0x20000000

08001a6c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <BNO080_getQuatReal+0x24>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <BNO080_getQuatReal+0x28>)
 8001a78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f879 	bl	8001b78 <BNO080_qToFloat>
 8001a86:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200002a6 	.word	0x200002a6
 8001a94:	20000000 	.word	0x20000000

08001a98 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <BNO080_getQuatRadianAccuracy+0x24>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <BNO080_getQuatRadianAccuracy+0x28>)
 8001aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f863 	bl	8001b78 <BNO080_qToFloat>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002e0 	.word	0x200002e0
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <BNO080_getQuatAccuracy+0x14>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002ac 	.word	0x200002ac

08001adc <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <BNO080_getMagX+0x24>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <BNO080_getMagX+0x28>)
 8001ae8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f841 	bl	8001b78 <BNO080_qToFloat>
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	20000002 	.word	0x20000002

08001b08 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <BNO080_getMagY+0x24>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <BNO080_getMagY+0x28>)
 8001b14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f82b 	bl	8001b78 <BNO080_qToFloat>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000037a 	.word	0x2000037a
 8001b30:	20000002 	.word	0x20000002

08001b34 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <BNO080_getMagZ+0x24>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <BNO080_getMagZ+0x28>)
 8001b40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f815 	bl	8001b78 <BNO080_qToFloat>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200002dc 	.word	0x200002dc
 8001b5c:	20000002 	.word	0x20000002

08001b60 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <BNO080_getMagAccuracy+0x14>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	200002a4 	.word	0x200002a4

08001b78 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	80fb      	strh	r3, [r7, #6]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	eef0 0a67 	vmov.f32	s1, s15
 8001ba8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bac:	f00d fc2a 	bl	800f404 <powf>
 8001bb0:	eef0 7a40 	vmov.f32	s15, s0
 8001bb4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	ecbd 8b02 	vpop	{d8}
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2005      	movs	r0, #5
 8001bd8:	f000 f83a 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f000 f82b 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f81c 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001c24:	2004      	movs	r0, #4
 8001c26:	f000 f885 	bl	8001d34 <BNO080_sendCalibrateCommand>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <BNO080_calibrationComplete+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <BNO080_calibrationComplete+0x10>
		return (1);
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <BNO080_calibrationComplete+0x12>
	return (0);
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000377 	.word	0x20000377

08001c50 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c60:	22fd      	movs	r2, #253	; 0xfd
 8001c62:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c82:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c8c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c96:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0e1b      	lsrs	r3, r3, #24
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001ca0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cc0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cca:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cd4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0e1b      	lsrs	r3, r3, #24
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cde:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001ce0:	2111      	movs	r1, #17
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f000 f938 	bl	8001f58 <BNO080_sendPacket>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002f4 	.word	0x200002f4

08001cf4 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d00:	22f2      	movs	r2, #242	; 0xf2
 8001d02:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <BNO080_sendCommand+0x3c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	b2d1      	uxtb	r1, r2
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <BNO080_sendCommand+0x3c>)
 8001d0e:	7011      	strb	r1, [r2, #0]
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d12:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001d14:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001d1a:	210c      	movs	r1, #12
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f000 f91b 	bl	8001f58 <BNO080_sendPacket>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002f4 	.word	0x200002f4
 8001d30:	2000020a 	.word	0x2000020a

08001d34 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d3e:	2303      	movs	r3, #3
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e006      	b.n	8001d52 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b0b      	cmp	r3, #11
 8001d56:	d9f5      	bls.n	8001d44 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	70da      	strb	r2, [r3, #3]
 8001d64:	e020      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d103      	bne.n	8001d74 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	711a      	strb	r2, [r3, #4]
 8001d72:	e019      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d103      	bne.n	8001d82 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	715a      	strb	r2, [r3, #5]
 8001d80:	e012      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d103      	bne.n	8001d90 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	71da      	strb	r2, [r3, #7]
 8001d8e:	e00b      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d108      	bne.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <BNO080_sendCalibrateCommand+0x8c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001dae:	2007      	movs	r0, #7
 8001db0:	f7ff ffa0 	bl	8001cf4 <BNO080_sendCommand>
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200002f4 	.word	0x200002f4
 8001dc0:	20000377 	.word	0x20000377

08001dc4 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dca:	2303      	movs	r3, #3
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	e006      	b.n	8001dde <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <BNO080_requestCalibrationStatus+0x34>)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	d9f5      	bls.n	8001dd0 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <BNO080_requestCalibrationStatus+0x34>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001dea:	2007      	movs	r0, #7
 8001dec:	f7ff ff82 	bl	8001cf4 <BNO080_sendCommand>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200002f4 	.word	0x200002f4

08001dfc <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001e02:	2303      	movs	r3, #3
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e006      	b.n	8001e16 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <BNO080_saveCalibration+0x30>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	3301      	adds	r3, #1
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b0b      	cmp	r3, #11
 8001e1a:	d9f5      	bls.n	8001e08 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001e1c:	2006      	movs	r0, #6
 8001e1e:	f7ff ff69 	bl	8001cf4 <BNO080_sendCommand>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200002f4 	.word	0x200002f4

08001e30 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e00c      	b.n	8001e56 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <BNO080_waitForSPI+0x40>)
 8001e42:	f7ff fa65 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00a      	b.n	8001e66 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d1ee      	bne.n	8001e3c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <BNO080_waitForSPI+0x44>)
 8001e60:	f00b fa2c 	bl	800d2bc <puts>
	return (0);
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40020800 	.word	0x40020800
 8001e74:	080101f0 	.word	0x080101f0

08001e78 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e82:	4831      	ldr	r0, [pc, #196]	; (8001f48 <BNO080_receivePacket+0xd0>)
 8001e84:	f7ff fa44 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e056      	b.n	8001f40 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e96:	482d      	ldr	r0, [pc, #180]	; (8001f4c <BNO080_receivePacket+0xd4>)
 8001e98:	f7ff fa5d 	bl	8001356 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fbc7 	bl	8001630 <SPI2_SendByte>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fbc2 	bl	8001630 <SPI2_SendByte>
 8001eac:	4603      	mov	r3, r0
 8001eae:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fbbd 	bl	8001630 <SPI2_SendByte>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fbb8 	bl	8001630 <SPI2_SendByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ec6:	7b7b      	ldrb	r3, [r7, #13]
 8001ec8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ed8:	7abb      	ldrb	r3, [r7, #10]
 8001eda:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ef0:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001ef2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001efa:	2300      	movs	r3, #0
 8001efc:	e020      	b.n	8001f40 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001efe:	893b      	ldrh	r3, [r7, #8]
 8001f00:	3b04      	subs	r3, #4
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	e00e      	b.n	8001f2a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001f0c:	20ff      	movs	r0, #255	; 0xff
 8001f0e:	f7ff fb8f 	bl	8001630 <SPI2_SendByte>
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	2b7f      	cmp	r3, #127	; 0x7f
 8001f1a:	d803      	bhi.n	8001f24 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <BNO080_receivePacket+0xdc>)
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	3301      	adds	r3, #1
 8001f28:	81fb      	strh	r3, [r7, #14]
 8001f2a:	89fa      	ldrh	r2, [r7, #14]
 8001f2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbeb      	blt.n	8001f0c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <BNO080_receivePacket+0xd4>)
 8001f3a:	f7ff f9fe 	bl	800133a <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	200002a0 	.word	0x200002a0
 8001f54:	200002f4 	.word	0x200002f4

08001f58 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f6e:	f7ff ff5f 	bl	8001e30 <BNO080_waitForSPI>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e032      	b.n	8001fe2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <BNO080_sendPacket+0x94>)
 8001f82:	f7ff f9e8 	bl	8001356 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb51 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fb4b 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb47 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <BNO080_sendPacket+0x98>)
 8001fa6:	5cd2      	ldrb	r2, [r2, r3]
 8001fa8:	1c51      	adds	r1, r2, #1
 8001faa:	b2c8      	uxtb	r0, r1
 8001fac:	4910      	ldr	r1, [pc, #64]	; (8001ff0 <BNO080_sendPacket+0x98>)
 8001fae:	54c8      	strb	r0, [r1, r3]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff fb3d 	bl	8001630 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e008      	b.n	8001fce <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <BNO080_sendPacket+0x9c>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb34 	bl	8001630 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3f2      	bcc.n	8001fbc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <BNO080_sendPacket+0x94>)
 8001fdc:	f7ff f9ad 	bl	800133a <LL_GPIO_SetOutputPin>

	return (1);
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	20000204 	.word	0x20000204
 8001ff4:	200002f4 	.word	0x200002f4

08001ff8 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002008:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	e00a      	b.n	8002026 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	89fa      	ldrh	r2, [r7, #14]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	3b02      	subs	r3, #2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbef      	blt.n	8002010 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	321e      	adds	r2, #30
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d10b      	bne.n	8002056 <iBus_Check_CHKSUM+0x5e>
 800203e:	89fb      	ldrh	r3, [r7, #14]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <iBus_Check_CHKSUM+0x5e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	331f      	adds	r3, #31
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <iBus_Check_CHKSUM+0x5e>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <iBus_Check_CHKSUM+0x60>
 8002056:	2300      	movs	r3, #0
 8002058:	b2db      	uxtb	r3, r3

}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3302      	adds	r3, #2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b21a      	sxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3303      	adds	r3, #3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21b      	sxth	r3, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	b29a      	uxth	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b21a      	sxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3305      	adds	r3, #5
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3306      	adds	r3, #6
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3307      	adds	r3, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3308      	adds	r3, #8
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b21a      	sxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3309      	adds	r3, #9
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	330a      	adds	r3, #10
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b21a      	sxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	330b      	adds	r3, #11
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	b29b      	uxth	r3, r3
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	b29a      	uxth	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0FFF;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	330c      	adds	r3, #12
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21a      	sxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	330d      	adds	r3, #13
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21b      	sxth	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b21b      	sxth	r3, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	b29a      	uxth	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	819a      	strh	r2, [r3, #12]
	iBus->SwB = (data[14] | data[15]<<8) & 0x0FFF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	330e      	adds	r3, #14
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b21a      	sxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	330f      	adds	r3, #15
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21b      	sxth	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b21b      	sxth	r3, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	b29a      	uxth	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	815a      	strh	r2, [r3, #10]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0FFF;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3310      	adds	r3, #16
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b21a      	sxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3311      	adds	r3, #17
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	b29a      	uxth	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0FFF;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3312      	adds	r3, #18
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3313      	adds	r3, #19
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	b29a      	uxth	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0FFF;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3314      	adds	r3, #20
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3315      	adds	r3, #21
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	b29a      	uxth	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13]>>4);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	330d      	adds	r3, #13
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	751a      	strb	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7d1b      	ldrb	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_SPI_Enable>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_SPI_SetStandard>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0210 	bic.w	r2, r3, #16
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	605a      	str	r2, [r3, #4]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_SPI_IsActiveFlag_TXE>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d101      	bne.n	8002284 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_SPI_ReceiveData8>:
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	b2db      	uxtb	r3, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_SPI_TransmitData8>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	330c      	adds	r3, #12
 80022bc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_GPIO_IsInputPinSet>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	4013      	ands	r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_GPIO_SetOutputPin>:
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_GPIO_ResetOutputPin>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_AHB1_GRP1_EnableClock>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40023800 	.word	0x40023800

08002364 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 800236e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 800237a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40023800 	.word	0x40023800

08002394 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	; 0x40
 8002398:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	2228      	movs	r2, #40	; 0x28
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00a fa92 	bl	800c8cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80023b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023bc:	f7ff ffd2 	bl	8002364 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff ffb7 	bl	8002334 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80023c6:	2004      	movs	r0, #4
 80023c8:	f7ff ffb4 	bl	8002334 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80023cc:	23e0      	movs	r3, #224	; 0xe0
 80023ce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023d0:	2302      	movs	r3, #2
 80023d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80023e0:	2305      	movs	r3, #5
 80023e2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4825      	ldr	r0, [pc, #148]	; (8002480 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80023ea:	f009 fae6 	bl	800b9ba <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023f6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023fc:	2302      	movs	r3, #2
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002400:	2301      	movs	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800240a:	2310      	movs	r3, #16
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002416:	230a      	movs	r3, #10
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800241a:	f107 0318 	add.w	r3, r7, #24
 800241e:	4619      	mov	r1, r3
 8002420:	4818      	ldr	r0, [pc, #96]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002422:	f009 fc9a 	bl	800bd5a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002426:	2100      	movs	r1, #0
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800242a:	f7ff fef9 	bl	8002220 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800242e:	2110      	movs	r1, #16
 8002430:	4815      	ldr	r0, [pc, #84]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002432:	f7ff ff70 	bl	8002316 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002436:	2310      	movs	r3, #16
 8002438:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800243a:	2301      	movs	r3, #1
 800243c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	480e      	ldr	r0, [pc, #56]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002450:	f009 fab3 	bl	800b9ba <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002454:	2320      	movs	r3, #32
 8002456:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4808      	ldr	r0, [pc, #32]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002466:	f009 faa8 	bl	800b9ba <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800246c:	f7ff fec8 	bl	8002200 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002470:	2110      	movs	r1, #16
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002474:	f7ff ff41 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 8002478:	bf00      	nop
 800247a:	3740      	adds	r7, #64	; 0x40
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020000 	.word	0x40020000
 8002484:	40013000 	.word	0x40013000
 8002488:	40020800 	.word	0x40020800

0800248c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002496:	bf00      	nop
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <SPI1_SendByte+0x40>)
 800249a:	f7ff fee7 	bl	800226c <LL_SPI_IsActiveFlag_TXE>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f9      	beq.n	8002498 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <SPI1_SendByte+0x40>)
 80024aa:	f7ff feff 	bl	80022ac <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80024ae:	bf00      	nop
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <SPI1_SendByte+0x40>)
 80024b2:	f7ff fec8 	bl	8002246 <LL_SPI_IsActiveFlag_RXNE>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f9      	beq.n	80024b0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <SPI1_SendByte+0x40>)
 80024be:	f7ff fee8 	bl	8002292 <LL_SPI_ReceiveData8>
 80024c2:	4603      	mov	r3, r0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013000 	.word	0x40013000

080024d0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80024da:	2110      	movs	r1, #16
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <ICM20602_Readbyte+0x3c>)
 80024de:	f7ff ff1a 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffce 	bl	800248c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff ffcb 	bl	800248c <SPI1_SendByte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80024fa:	2110      	movs	r1, #16
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <ICM20602_Readbyte+0x3c>)
 80024fe:	f7ff fefc 	bl	80022fa <LL_GPIO_SetOutputPin>
	
	return val;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40020800 	.word	0x40020800

08002510 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	603a      	str	r2, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	460b      	mov	r3, r1
 800251e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002524:	2110      	movs	r1, #16
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <ICM20602_Readbytes+0x58>)
 8002528:	f7ff fef5 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ffa9 	bl	800248c <SPI1_SendByte>
	while(i < len)
 800253a:	e009      	b.n	8002550 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60fa      	str	r2, [r7, #12]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	18d4      	adds	r4, r2, r3
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff ffa0 	bl	800248c <SPI1_SendByte>
 800254c:	4603      	mov	r3, r0
 800254e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3f1      	bcc.n	800253c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002558:	2110      	movs	r1, #16
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <ICM20602_Readbytes+0x58>)
 800255c:	f7ff fecd 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40020800 	.word	0x40020800

0800256c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800257c:	2110      	movs	r1, #16
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <ICM20602_Writebyte+0x40>)
 8002580:	f7ff fec9 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff7d 	bl	800248c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff79 	bl	800248c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800259a:	2110      	movs	r1, #16
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <ICM20602_Writebyte+0x40>)
 800259e:	f7ff feac 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40020800 	.word	0x40020800

080025b0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80025c4:	463b      	mov	r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80025cc:	f7ff fee2 	bl	8002394 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80025d0:	4833      	ldr	r0, [pc, #204]	; (80026a0 <ICM20602_Initialization+0xf0>)
 80025d2:	f00a fded 	bl	800d1b0 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80025d6:	2075      	movs	r0, #117	; 0x75
 80025d8:	f7ff ff7a 	bl	80024d0 <ICM20602_Readbyte>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d105      	bne.n	80025f2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	4619      	mov	r1, r3
 80025ea:	482e      	ldr	r0, [pc, #184]	; (80026a4 <ICM20602_Initialization+0xf4>)
 80025ec:	f00a fde0 	bl	800d1b0 <iprintf>
 80025f0:	e012      	b.n	8002618 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d00f      	beq.n	8002618 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80025f8:	2075      	movs	r0, #117	; 0x75
 80025fa:	f7ff ff69 	bl	80024d0 <ICM20602_Readbyte>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b12      	cmp	r3, #18
 8002606:	d007      	beq.n	8002618 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2212      	movs	r2, #18
 800260c:	4619      	mov	r1, r3
 800260e:	4826      	ldr	r0, [pc, #152]	; (80026a8 <ICM20602_Initialization+0xf8>)
 8002610:	f00a fdce 	bl	800d1b0 <iprintf>
			return 1; //ERROR
 8002614:	2301      	movs	r3, #1
 8002616:	e03f      	b.n	8002698 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	206b      	movs	r0, #107	; 0x6b
 800261c:	f7ff ffa6 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002620:	2032      	movs	r0, #50	; 0x32
 8002622:	f005 ff97 	bl	8008554 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002626:	2101      	movs	r1, #1
 8002628:	206b      	movs	r0, #107	; 0x6b
 800262a:	f7ff ff9f 	bl	800256c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800262e:	2032      	movs	r0, #50	; 0x32
 8002630:	f005 ff90 	bl	8008554 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002634:	2138      	movs	r1, #56	; 0x38
 8002636:	206c      	movs	r0, #108	; 0x6c
 8002638:	f7ff ff98 	bl	800256c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800263c:	2032      	movs	r0, #50	; 0x32
 800263e:	f005 ff89 	bl	8008554 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002642:	2100      	movs	r1, #0
 8002644:	2019      	movs	r0, #25
 8002646:	f7ff ff91 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 800264a:	2032      	movs	r0, #50	; 0x32
 800264c:	f005 ff82 	bl	8008554 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002650:	2105      	movs	r1, #5
 8002652:	201a      	movs	r0, #26
 8002654:	f7ff ff8a 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002658:	2032      	movs	r0, #50	; 0x32
 800265a:	f005 ff7b 	bl	8008554 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x08); // Gyro sensitivity 500 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800265e:	2108      	movs	r1, #8
 8002660:	201b      	movs	r0, #27
 8002662:	f7ff ff83 	bl	800256c <ICM20602_Writebyte>
//	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
	HAL_Delay(50);
 8002666:	2032      	movs	r0, #50	; 0x32
 8002668:	f005 ff74 	bl	8008554 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800266c:	2118      	movs	r1, #24
 800266e:	201c      	movs	r0, #28
 8002670:	f7ff ff7c 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002674:	2032      	movs	r0, #50	; 0x32
 8002676:	f005 ff6d 	bl	8008554 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800267a:	2103      	movs	r1, #3
 800267c:	201d      	movs	r0, #29
 800267e:	f7ff ff75 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002682:	2032      	movs	r0, #50	; 0x32
 8002684:	f005 ff66 	bl	8008554 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002688:	2101      	movs	r1, #1
 800268a:	2038      	movs	r0, #56	; 0x38
 800268c:	f7ff ff6e 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002690:	2032      	movs	r0, #50	; 0x32
 8002692:	f005 ff5f 	bl	8008554 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	08010204 	.word	0x08010204
 80026a4:	0801021c 	.word	0x0801021c
 80026a8:	08010240 	.word	0x08010240

080026ac <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	461a      	mov	r2, r3
 80026ba:	2106      	movs	r1, #6
 80026bc:	2043      	movs	r0, #67	; 0x43
 80026be:	f7ff ff27 	bl	8002510 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80026c2:	7a3b      	ldrb	r3, [r7, #8]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80026d4:	7abb      	ldrb	r3, [r7, #10]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b219      	sxth	r1, r3
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	b21a      	sxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3302      	adds	r3, #2
 80026e2:	430a      	orrs	r2, r1
 80026e4:	b212      	sxth	r2, r2
 80026e6:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	b219      	sxth	r1, r3
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	430a      	orrs	r2, r1
 80026f8:	b212      	sxth	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002708:	2120      	movs	r1, #32
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <ICM20602_DataReady+0x14>)
 800270c:	f7ff fde0 	bl	80022d0 <LL_GPIO_IsInputPinSet>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020800 	.word	0x40020800

0800271c <LL_SPI_Enable>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_SPI_SetStandard>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_SPI_IsActiveFlag_TXE>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d101      	bne.n	80027a0 <LL_SPI_IsActiveFlag_TXE+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_SPI_ReceiveData8>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	b2db      	uxtb	r3, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_SPI_TransmitData8>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	330c      	adds	r3, #12
 80027d8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	701a      	strb	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_GPIO_IsInputPinSet>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_GPIO_SetOutputPin>:
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_GPIO_ResetOutputPin>:
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_AHB1_GRP1_EnableClock>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40023800 	.word	0x40023800

08002880 <LL_APB1_GRP1_EnableClock>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40023800 	.word	0x40023800

080028b0 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b090      	sub	sp, #64	; 0x40
 80028b4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028b6:	f107 0318 	add.w	r3, r7, #24
 80028ba:	2228      	movs	r2, #40	; 0x28
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f00a f804 	bl	800c8cc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	463b      	mov	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80028d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028d8:	f7ff ffd2 	bl	8002880 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028dc:	2002      	movs	r0, #2
 80028de:	f7ff ffb7 	bl	8002850 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80028e2:	2338      	movs	r3, #56	; 0x38
 80028e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028e6:	2302      	movs	r3, #2
 80028e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80028f6:	2306      	movs	r3, #6
 80028f8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	463b      	mov	r3, r7
 80028fc:	4619      	mov	r1, r3
 80028fe:	4826      	ldr	r0, [pc, #152]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002900:	f009 f85b 	bl	800b9ba <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002908:	f44f 7382 	mov.w	r3, #260	; 0x104
 800290c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002912:	2302      	movs	r3, #2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002916:	2301      	movs	r3, #1
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800291a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002920:	2308      	movs	r3, #8
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800292c:	230a      	movs	r3, #10
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4619      	mov	r1, r3
 8002936:	4819      	ldr	r0, [pc, #100]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002938:	f009 fa0f 	bl	800bd5a <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800293c:	2100      	movs	r1, #0
 800293e:	4817      	ldr	r0, [pc, #92]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002940:	f7ff fefc 	bl	800273c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002948:	f7ff ff73 	bl	8002832 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002950:	2301      	movs	r3, #1
 8002952:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002960:	463b      	mov	r3, r7
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002966:	f009 f828 	bl	800b9ba <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002972:	2301      	movs	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002976:	463b      	mov	r3, r7
 8002978:	4619      	mov	r1, r3
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800297c:	f009 f81d 	bl	800b9ba <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002982:	f7ff fecb 	bl	800271c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800298a:	f7ff ff44 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 800298e:	bf00      	nop
 8002990:	3740      	adds	r7, #64	; 0x40
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020400 	.word	0x40020400
 800299c:	40003c00 	.word	0x40003c00

080029a0 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80029aa:	bf00      	nop
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <SPI3_SendByte+0x40>)
 80029ae:	f7ff feeb 	bl	8002788 <LL_SPI_IsActiveFlag_TXE>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f9      	beq.n	80029ac <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <SPI3_SendByte+0x40>)
 80029be:	f7ff ff03 	bl	80027c8 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80029c2:	bf00      	nop
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <SPI3_SendByte+0x40>)
 80029c6:	f7ff fecc 	bl	8002762 <LL_SPI_IsActiveFlag_RXNE>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f9      	beq.n	80029c4 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <SPI3_SendByte+0x40>)
 80029d2:	f7ff feec 	bl	80027ae <LL_SPI_ReceiveData8>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40003c00 	.word	0x40003c00

080029e4 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <LPS22HH_Readbyte+0x3c>)
 80029f2:	f7ff ff1e 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ffce 	bl	80029a0 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7ff ffcb 	bl	80029a0 <SPI3_SendByte>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <LPS22HH_Readbyte+0x3c>)
 8002a12:	f7ff ff00 	bl	8002816 <LL_GPIO_SetOutputPin>
	
	return val;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40020400 	.word	0x40020400

08002a24 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	603a      	str	r2, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	460b      	mov	r3, r1
 8002a32:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4810      	ldr	r0, [pc, #64]	; (8002a7c <LPS22HH_Readbytes+0x58>)
 8002a3c:	f7ff fef9 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffa9 	bl	80029a0 <SPI3_SendByte>
	while(i < len)
 8002a4e:	e009      	b.n	8002a64 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60fa      	str	r2, [r7, #12]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	18d4      	adds	r4, r2, r3
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff ffa0 	bl	80029a0 <SPI3_SendByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002a64:	79bb      	ldrb	r3, [r7, #6]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3f1      	bcc.n	8002a50 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <LPS22HH_Readbytes+0x58>)
 8002a70:	f7ff fed1 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	40020400 	.word	0x40020400

08002a80 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	460a      	mov	r2, r1
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <LPS22HH_Writebyte+0x40>)
 8002a94:	f7ff fecd 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff7d 	bl	80029a0 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff79 	bl	80029a0 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <LPS22HH_Writebyte+0x40>)
 8002ab2:	f7ff feb0 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40020400 	.word	0x40020400

08002ac4 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002ace:	f7ff feef 	bl	80028b0 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002ad2:	4841      	ldr	r0, [pc, #260]	; (8002bd8 <LPS22HH_Initialization+0x114>)
 8002ad4:	f00a fb6c 	bl	800d1b0 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002ad8:	200f      	movs	r0, #15
 8002ada:	f7ff ff83 	bl	80029e4 <LPS22HH_Readbyte>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2bb3      	cmp	r3, #179	; 0xb3
 8002ae6:	d105      	bne.n	8002af4 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4619      	mov	r1, r3
 8002aec:	483b      	ldr	r0, [pc, #236]	; (8002bdc <LPS22HH_Initialization+0x118>)
 8002aee:	f00a fb5f 	bl	800d1b0 <iprintf>
 8002af2:	e012      	b.n	8002b1a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2bb3      	cmp	r3, #179	; 0xb3
 8002af8:	d00f      	beq.n	8002b1a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff ff72 	bl	80029e4 <LPS22HH_Readbyte>
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2bb3      	cmp	r3, #179	; 0xb3
 8002b08:	d007      	beq.n	8002b1a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	22b3      	movs	r2, #179	; 0xb3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4833      	ldr	r0, [pc, #204]	; (8002be0 <LPS22HH_Initialization+0x11c>)
 8002b12:	f00a fb4d 	bl	800d1b0 <iprintf>
			return 1; //ERROR
 8002b16:	2301      	movs	r3, #1
 8002b18:	e059      	b.n	8002bce <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	2011      	movs	r0, #17
 8002b1e:	f7ff ffaf 	bl	8002a80 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002b22:	2011      	movs	r0, #17
 8002b24:	f7ff ff5e 	bl	80029e4 <LPS22HH_Readbyte>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f7      	bne.n	8002b22 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b32:	2010      	movs	r0, #16
 8002b34:	f7ff ff56 	bl	80029e4 <LPS22HH_Readbyte>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b42:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	4619      	mov	r1, r3
 8002b48:	2010      	movs	r0, #16
 8002b4a:	f7ff ff99 	bl	8002a80 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b52:	2010      	movs	r0, #16
 8002b54:	f7ff ff46 	bl	80029e4 <LPS22HH_Readbyte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f7ff ff41 	bl	80029e4 <LPS22HH_Readbyte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	f043 030c 	orr.w	r3, r3, #12
 8002b6c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	4619      	mov	r1, r3
 8002b72:	2010      	movs	r0, #16
 8002b74:	f7ff ff84 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b78:	2010      	movs	r0, #16
 8002b7a:	f7ff ff33 	bl	80029e4 <LPS22HH_Readbyte>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b8a:	79bb      	ldrb	r3, [r7, #6]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	2010      	movs	r0, #16
 8002b90:	f7ff ff76 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002b94:	2011      	movs	r0, #17
 8002b96:	f7ff ff25 	bl	80029e4 <LPS22HH_Readbyte>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	2011      	movs	r0, #17
 8002bac:	f7ff ff68 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002bb0:	2012      	movs	r0, #18
 8002bb2:	f7ff ff17 	bl	80029e4 <LPS22HH_Readbyte>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	2012      	movs	r0, #18
 8002bc8:	f7ff ff5a 	bl	8002a80 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	0801026c 	.word	0x0801026c
 8002bdc:	08010280 	.word	0x08010280
 8002be0:	080102a4 	.word	0x080102a4

08002be4 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <LPS22HH_DataReady+0x14>)
 8002bec:	f7ff fdfe 	bl	80027ec <LL_GPIO_IsInputPinSet>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40020400 	.word	0x40020400

08002bfc <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	2103      	movs	r1, #3
 8002c08:	2028      	movs	r0, #40	; 0x28
 8002c0a:	f7ff ff0b 	bl	8002a24 <LPS22HH_Readbytes>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	2102      	movs	r1, #2
 8002c22:	202b      	movs	r0, #43	; 0x2b
 8002c24:	f7ff fefe 	bl	8002a24 <LPS22HH_Readbytes>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c3a:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c42:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002c88 <getAltitude2+0x58>
 8002c46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c4a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002c8c <getAltitude2+0x5c>
 8002c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c52:	f00c fbd7 	bl	800f404 <powf>
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
 8002c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c62:	edd7 7a00 	vldr	s15, [r7]
 8002c66:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c90 <getAltitude2+0x60>
 8002c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c94 <getAltitude2+0x64>
 8002c76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	447d5000 	.word	0x447d5000
 8002c8c:	3e42c9b7 	.word	0x3e42c9b7
 8002c90:	43889333 	.word	0x43889333
 8002c94:	3bd4fdf4 	.word	0x3bd4fdf4

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <LL_AHB1_GRP1_EnableClock>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4013      	ands	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40023800 	.word	0x40023800

08002e6c <LL_APB1_GRP1_EnableClock>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e78:	4907      	ldr	r1, [pc, #28]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40023800 	.word	0x40023800

08002e9c <M8N_TransmitData>:
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e011      	b.n	8002ed2 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002eae:	bf00      	nop
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <M8N_TransmitData+0x48>)
 8002eb2:	f7ff ffa0 	bl	8002df6 <LL_USART_IsActiveFlag_TXE>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f9      	beq.n	8002eb0 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <M8N_TransmitData+0x48>)
 8002ec8:	f7ff ffa8 	bl	8002e1c <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dbe9      	blt.n	8002eae <M8N_TransmitData+0x12>
	}
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40004c00 	.word	0x40004c00

08002ee8 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002f12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f16:	f7ff ffa9 	bl	8002e6c <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f7ff ff8e 	bl	8002e3c <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8002f20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f24:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f26:	2302      	movs	r3, #2
 8002f28:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002f36:	2308      	movs	r3, #8
 8002f38:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <M8N_UART4_Initialization+0xbc>)
 8002f40:	f008 fd3b 	bl	800b9ba <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002f44:	f7ff fea8 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fef8 	bl	8002d44 <NVIC_EncodePriority>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4619      	mov	r1, r3
 8002f58:	2034      	movs	r0, #52	; 0x34
 8002f5a:	f7ff fec9 	bl	8002cf0 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002f5e:	2034      	movs	r0, #52	; 0x34
 8002f60:	f7ff fea8 	bl	8002cb4 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002f64:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002f68:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f76:	230c      	movs	r3, #12
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	4619      	mov	r1, r3
 8002f88:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f8a:	f009 fbf5 	bl	800c778 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002f8e:	4806      	ldr	r0, [pc, #24]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f90:	f7ff ff1b 	bl	8002dca <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f96:	f7ff ff08 	bl	8002daa <LL_USART_Enable>
}
 8002f9a:	bf00      	nop
 8002f9c:	3738      	adds	r7, #56	; 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40004c00 	.word	0x40004c00

08002fac <M8N_Initialization>:

void M8N_Initialization(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002fb0:	f7ff ff9a 	bl	8002ee8 <M8N_UART4_Initialization>
	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002fb4:	211c      	movs	r1, #28
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <M8N_Initialization+0x44>)
 8002fb8:	f7ff ff70 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fbc:	2064      	movs	r0, #100	; 0x64
 8002fbe:	f005 fac9 	bl	8008554 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <M8N_Initialization+0x48>)
 8002fc6:	f7ff ff69 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fca:	2064      	movs	r0, #100	; 0x64
 8002fcc:	f005 fac2 	bl	8008554 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002fd0:	210e      	movs	r1, #14
 8002fd2:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <M8N_Initialization+0x4c>)
 8002fd4:	f7ff ff62 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	f005 fabb 	bl	8008554 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002fde:	2115      	movs	r1, #21
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <M8N_Initialization+0x50>)
 8002fe2:	f7ff ff5b 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fe6:	2064      	movs	r0, #100	; 0x64
 8002fe8:	f005 fab4 	bl	8008554 <HAL_Delay>
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	080104b8 	.word	0x080104b8
 8002ff4:	080104d4 	.word	0x080104d4
 8002ff8:	080104e4 	.word	0x080104e4
 8002ffc:	080104f4 	.word	0x080104f4

08003000 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	2300      	movs	r3, #0
 8003012:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8003014:	2302      	movs	r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e00d      	b.n	8003036 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	4413      	add	r3, r2
 8003026:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8003028:	7bba      	ldrb	r2, [r7, #14]
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	4413      	add	r3, r2
 800302e:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3301      	adds	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	3b02      	subs	r3, #2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbec      	blt.n	800301a <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	3b02      	subs	r3, #2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	429a      	cmp	r2, r3
 800304e:	d109      	bne.n	8003064 <M8N_UBX_CHKSUM_Check+0x64>
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	3b01      	subs	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	7bba      	ldrb	r2, [r7, #14]
 800305c:	429a      	cmp	r2, r3
 800305e:	d101      	bne.n	8003064 <M8N_UBX_CHKSUM_Check+0x64>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <M8N_UBX_CHKSUM_Check+0x66>
 8003064:	2300      	movs	r3, #0
 8003066:	b2db      	uxtb	r3, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	789a      	ldrb	r2, [r3, #2]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	78da      	ldrb	r2, [r3, #3]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data [5]<<8;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b21a      	sxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3305      	adds	r3, #5
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24 ;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3306      	adds	r3, #6
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3307      	adds	r3, #7
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3308      	adds	r3, #8
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3309      	adds	r3, #9
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4313      	orrs	r3, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24 ;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	330a      	adds	r3, #10
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	330b      	adds	r3, #11
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	330c      	adds	r3, #12
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	330d      	adds	r3, #13
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	431a      	orrs	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24 ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	330e      	adds	r3, #14
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	330f      	adds	r3, #15
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3310      	adds	r3, #16
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3311      	adds	r3, #17
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	611a      	str	r2, [r3, #16]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24 ;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3312      	adds	r3, #18
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3313      	adds	r3, #19
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3314      	adds	r3, #20
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3315      	adds	r3, #21
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	431a      	orrs	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	619a      	str	r2, [r3, #24]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24 ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3316      	adds	r3, #22
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3317      	adds	r3, #23
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3318      	adds	r3, #24
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3319      	adds	r3, #25
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	61da      	str	r2, [r3, #28]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24 ;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	331a      	adds	r3, #26
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	331b      	adds	r3, #27
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	331c      	adds	r3, #28
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	331d      	adds	r3, #29
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	4313      	orrs	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	621a      	str	r2, [r3, #32]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24 ;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	331e      	adds	r3, #30
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	331f      	adds	r3, #31
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3321      	adds	r3, #33	; 0x21
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4313      	orrs	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

//	posllh->lon_f64 = posllh->lon/ 10000000.;
//	posllh->lat_f64 = posllh->lat/ 10000000.;

}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80031f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80031f4:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	649a      	str	r2, [r3, #72]	; 0x48
	axis->out.meas_value = angle;			//BNO080 rotation angle
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800323c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 8003240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003254:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003440 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd03      	ble.n	800326a <Double_Roll_Pitch_PID_Calculation+0x86>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a77      	ldr	r2, [pc, #476]	; (8003444 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c
 8003268:	e00c      	b.n	8003284 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003270:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003448 <Double_Roll_Pitch_PID_Calculation+0x264>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d502      	bpl.n	8003284 <Double_Roll_Pitch_PID_Calculation+0xa0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a72      	ldr	r2, [pc, #456]	; (800344c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	eef1 7a67 	vneg.f32	s15, s15
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80032ae:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003450 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80032b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032bc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003454 <Double_Roll_Pitch_PID_Calculation+0x270>
 80032c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80032f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	ed93 7a03 	vldr	s14, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	edd3 7a04 	vldr	s15, [r3, #16]
 800331e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	ed93 7a06 	vldr	s14, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	ed93 7a08 	vldr	s14, [r3, #32]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	edd3 7a06 	vldr	s15, [r3, #24]
 800334a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 800334e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003362:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003440 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dd03      	ble.n	8003378 <Double_Roll_Pitch_PID_Calculation+0x194>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
 8003376:	e00c      	b.n	8003392 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800337e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003448 <Double_Roll_Pitch_PID_Calculation+0x264>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d502      	bpl.n	8003392 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	ed93 7a08 	vldr	s14, [r3, #32]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	edd3 7a01 	vldr	s15, [r3, #4]
 800339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80033b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b8:	eeb1 7a67 	vneg.f32	s14, s15
 80033bc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 80033c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80033ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	edd3 7a02 	vldr	s15, [r3, #8]
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800341a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/****************************************************************************************/
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	3a83126f 	.word	0x3a83126f
 8003440:	43fa0000 	.word	0x43fa0000
 8003444:	43fa0000 	.word	0x43fa0000
 8003448:	c3fa0000 	.word	0xc3fa0000
 800344c:	c3fa0000 	.word	0xc3fa0000
 8003450:	3ecccccd 	.word	0x3ecccccd
 8003454:	3f19999a 	.word	0x3f19999a

08003458 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	ed87 0a02 	vstr	s0, [r7, #8]
 8003464:	edc7 0a01 	vstr	s1, [r7, #4]
 8003468:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	ed93 7a03 	vldr	s14, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	edd3 7a04 	vldr	s15, [r3, #16]
 8003484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	edd3 7a06 	vldr	s15, [r3, #24]
 8003494:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800357c <Single_Yaw_Heading_PID_Calculation+0x124>
 8003498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	dd0a      	ble.n	80034b8 <Single_Yaw_Heading_PID_Calculation+0x60>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034a8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003580 <Single_Yaw_Heading_PID_Calculation+0x128>
 80034ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	edc3 7a06 	vstr	s15, [r3, #24]
 80034b6:	e013      	b.n	80034e0 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80034be:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003584 <Single_Yaw_Heading_PID_Calculation+0x12c>
 80034c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d509      	bpl.n	80034e0 <Single_Yaw_Heading_PID_Calculation+0x88>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80034d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003580 <Single_Yaw_Heading_PID_Calculation+0x128>
 80034d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	ed93 7a08 	vldr	s14, [r3, #32]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003502:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003588 <Single_Yaw_Heading_PID_Calculation+0x130>
 8003506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800350a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	ed93 7a08 	vldr	s14, [r3, #32]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 800352a:	edd7 7a00 	vldr	s15, [r7]
 800352e:	eef1 7a67 	vneg.f32	s15, s15
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	edd3 7a02 	vldr	s15, [r3, #8]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800355a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/***************************************************************/
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	43340000 	.word	0x43340000
 8003580:	43b40000 	.word	0x43b40000
 8003584:	c3340000 	.word	0xc3340000
 8003588:	3a83126f 	.word	0x3a83126f

0800358c <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	ed87 0a02 	vstr	s0, [r7, #8]
 8003598:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80035b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80035e0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003674 <Single_Yaw_Rate_PID_Calculation+0xe8>
 80035e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	ed93 7a04 	vldr	s14, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	edd3 7a05 	vldr	s15, [r3, #20]
 8003614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003618:	eeb1 7a67 	vneg.f32	s14, s15
 800361c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003674 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8003620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	edd3 7a02 	vldr	s15, [r3, #8]
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/*******************************************************************/
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	3a83126f 	.word	0x3a83126f

08003678 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 8003698:	4812      	ldr	r0, [pc, #72]	; (80036e4 <Reset_All_PID_Integrator+0x50>)
 800369a:	f7ff ffed 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 800369e:	4812      	ldr	r0, [pc, #72]	; (80036e8 <Reset_All_PID_Integrator+0x54>)
 80036a0:	f7ff ffea 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80036a4:	4811      	ldr	r0, [pc, #68]	; (80036ec <Reset_All_PID_Integrator+0x58>)
 80036a6:	f7ff ffe7 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80036aa:	4811      	ldr	r0, [pc, #68]	; (80036f0 <Reset_All_PID_Integrator+0x5c>)
 80036ac:	f7ff ffe4 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80036b0:	4810      	ldr	r0, [pc, #64]	; (80036f4 <Reset_All_PID_Integrator+0x60>)
 80036b2:	f7ff ffe1 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80036b6:	4810      	ldr	r0, [pc, #64]	; (80036f8 <Reset_All_PID_Integrator+0x64>)
 80036b8:	f7ff ffde 	bl	8003678 <Reset_PID_Integrator>

	Reset_PID_Integrator(&altitude.in);
 80036bc:	480f      	ldr	r0, [pc, #60]	; (80036fc <Reset_All_PID_Integrator+0x68>)
 80036be:	f7ff ffdb 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&altitude.out);
 80036c2:	480f      	ldr	r0, [pc, #60]	; (8003700 <Reset_All_PID_Integrator+0x6c>)
 80036c4:	f7ff ffd8 	bl	8003678 <Reset_PID_Integrator>

	Reset_PID_Integrator(&gps_lat.in);
 80036c8:	480e      	ldr	r0, [pc, #56]	; (8003704 <Reset_All_PID_Integrator+0x70>)
 80036ca:	f7ff ffd5 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lat.out);
 80036ce:	480e      	ldr	r0, [pc, #56]	; (8003708 <Reset_All_PID_Integrator+0x74>)
 80036d0:	f7ff ffd2 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lon.in);
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <Reset_All_PID_Integrator+0x78>)
 80036d6:	f7ff ffcf 	bl	8003678 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lon.out);
 80036da:	480d      	ldr	r0, [pc, #52]	; (8003710 <Reset_All_PID_Integrator+0x7c>)
 80036dc:	f7ff ffcc 	bl	8003678 <Reset_PID_Integrator>
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000670 	.word	0x20000670
 80036e8:	200006ac 	.word	0x200006ac
 80036ec:	200005f8 	.word	0x200005f8
 80036f0:	20000634 	.word	0x20000634
 80036f4:	200005bc 	.word	0x200005bc
 80036f8:	20000418 	.word	0x20000418
 80036fc:	20000544 	.word	0x20000544
 8003700:	20000580 	.word	0x20000580
 8003704:	20000454 	.word	0x20000454
 8003708:	20000490 	.word	0x20000490
 800370c:	200004cc 	.word	0x200004cc
 8003710:	20000508 	.word	0x20000508

08003714 <Double_Altitude_PID_Calculation>:


void Double_Altitude_PID_Calculation(PIDDouble* axis, float set_point_altitude, float current_altitude)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003720:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_altitude;	//Set point of outer PID control
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	649a      	str	r2, [r3, #72]	; 0x48
	axis->out.meas_value = current_altitude;		//Actual Altitude from Fusion
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	64da      	str	r2, [r3, #76]	; 0x4c

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800373c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003768:	eddf 6a88 	vldr	s13, [pc, #544]	; 800398c <Double_Altitude_PID_Calculation+0x278>
 800376c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003780:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003990 <Double_Altitude_PID_Calculation+0x27c>
 8003784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378c:	dd03      	ble.n	8003796 <Double_Altitude_PID_Calculation+0x82>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a80      	ldr	r2, [pc, #512]	; (8003994 <Double_Altitude_PID_Calculation+0x280>)
 8003792:	65da      	str	r2, [r3, #92]	; 0x5c
 8003794:	e00c      	b.n	80037b0 <Double_Altitude_PID_Calculation+0x9c>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800379c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003998 <Double_Altitude_PID_Calculation+0x284>
 80037a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d502      	bpl.n	80037b0 <Double_Altitude_PID_Calculation+0x9c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a7b      	ldr	r2, [pc, #492]	; (800399c <Double_Altitude_PID_Calculation+0x288>)
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev) / DT;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80037d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d6:	eeb1 7a67 	vneg.f32	s14, s15
 80037da:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800398c <Double_Altitude_PID_Calculation+0x278>
 80037de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	axis->out.meas_value_prev = axis->out.meas_value;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	651a      	str	r2, [r3, #80]	; 0x50

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80037f6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80039a0 <Double_Altitude_PID_Calculation+0x28c>
 80037fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003804:	eddf 6a67 	vldr	s13, [pc, #412]	; 80039a4 <Double_Altitude_PID_Calculation+0x290>
 8003808:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800380c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	/****************************************************************************************/

	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = -(axis->out.error_deriv);					//ICM-20602 angular rate
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800385a:	eef1 7a67 	vneg.f32	s15, s15
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	edc3 7a04 	vstr	s15, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	ed93 7a03 	vldr	s14, [r3, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	ed93 7a08 	vldr	s14, [r3, #32]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	edd3 7a06 	vldr	s15, [r3, #24]
 800389c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800398c <Double_Altitude_PID_Calculation+0x278>
 80038a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80038b4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003990 <Double_Altitude_PID_Calculation+0x27c>
 80038b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	dd03      	ble.n	80038ca <Double_Altitude_PID_Calculation+0x1b6>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a33      	ldr	r2, [pc, #204]	; (8003994 <Double_Altitude_PID_Calculation+0x280>)
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c8:	e00c      	b.n	80038e4 <Double_Altitude_PID_Calculation+0x1d0>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80038d0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003998 <Double_Altitude_PID_Calculation+0x284>
 80038d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d502      	bpl.n	80038e4 <Double_Altitude_PID_Calculation+0x1d0>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a2e      	ldr	r2, [pc, #184]	; (800399c <Double_Altitude_PID_Calculation+0x288>)
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	edd3 7a05 	vldr	s15, [r3, #20]
 8003906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390a:	eeb1 7a67 	vneg.f32	s14, s15
 800390e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800398c <Double_Altitude_PID_Calculation+0x278>
 8003912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800392a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800392e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003938:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800393c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	edd3 7a02 	vldr	s15, [r3, #8]
 8003956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800396c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/****************************************************************************************/
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	3a83126f 	.word	0x3a83126f
 8003990:	43fa0000 	.word	0x43fa0000
 8003994:	43fa0000 	.word	0x43fa0000
 8003998:	c3fa0000 	.word	0xc3fa0000
 800399c:	c3fa0000 	.word	0xc3fa0000
 80039a0:	3ecccccd 	.word	0x3ecccccd
 80039a4:	3f19999a 	.word	0x3f19999a

080039a8 <Double_GPS_PID_Calculation>:

void Double_GPS_PID_Calculation(PIDDouble* axis, float set_point_gps, float gps)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80039b4:	edc7 0a01 	vstr	s1, [r7, #4]
//	axis->out.kd = 0;
//	axis->in.kp = 1;
//	axis->in.ki = 0;
//	axis->in.kd = 0;

   axis->out.reference = set_point_gps;   //Set point of outer PID control
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	649a      	str	r2, [r3, #72]	; 0x48
   axis->out.meas_value = gps;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c

   axis->out.error = axis->out.reference - axis->out.meas_value;   //Define error of outer loop
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80039d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
   axis->out.p_result = axis->out.error * axis->out.kp;         //Calculate P result of outer loop
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

   axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;   //Define summation of outer loop
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039fc:	eddf 6a88 	vldr	s13, [pc, #544]	; 8003c20 <Double_GPS_PID_Calculation+0x278>
 8003a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
   if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a14:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003c24 <Double_GPS_PID_Calculation+0x27c>
 8003a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	dd03      	ble.n	8003a2a <Double_GPS_PID_Calculation+0x82>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <Double_GPS_PID_Calculation+0x280>)
 8003a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a28:	e00c      	b.n	8003a44 <Double_GPS_PID_Calculation+0x9c>
   else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a30:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003c2c <Double_GPS_PID_Calculation+0x284>
 8003a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	d502      	bpl.n	8003a44 <Double_GPS_PID_Calculation+0x9c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <Double_GPS_PID_Calculation+0x288>)
 8003a42:	65da      	str	r2, [r3, #92]	; 0x5c
   axis->out.i_result = axis->out.error_sum * axis->out.ki;         //Calculate I result of outer loop
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

   axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev)/DT;//Define derivative of outer loop
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6a:	eeb1 7a67 	vneg.f32	s14, s15
 8003a6e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003c20 <Double_GPS_PID_Calculation+0x278>
 8003a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
   axis->out.meas_value_prev = axis->out.meas_value;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	651a      	str	r2, [r3, #80]	; 0x50

#if !OUTER_DERIV_FILT_ENABLE
   axis->out.d_result = axis->out.error_deriv * axis->out.kd;         //Calculate D result of outer loop
#else
   axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;   //filter for derivative
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003a8a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003c34 <Double_GPS_PID_Calculation+0x28c>
 8003a8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003a98:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003c38 <Double_GPS_PID_Calculation+0x290>
 8003a9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
   axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;                           //Calculate D result of inner loop
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

   axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
   /****************************************************************************************/

   /************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
   axis->in.reference = axis->out.pid_result;   //Set point of inner PID control is the PID result of outer loop (for double PID control)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	60da      	str	r2, [r3, #12]
   axis->in.meas_value = -(axis->out.error_deriv);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003aee:	eef1 7a67 	vneg.f32	s15, s15
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	edc3 7a04 	vstr	s15, [r3, #16]

   axis->in.error = axis->in.reference - axis->in.meas_value;   //Define error of inner loop
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	ed93 7a03 	vldr	s14, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	edc3 7a06 	vstr	s15, [r3, #24]
   axis->in.p_result = axis->in.error * axis->in.kp;         //Calculate P result of inner loop
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

   axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;   //Define summation of inner loop
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003c20 <Double_GPS_PID_Calculation+0x278>
 8003b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
   if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003b48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003c24 <Double_GPS_PID_Calculation+0x27c>
 8003b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	dd03      	ble.n	8003b5e <Double_GPS_PID_Calculation+0x1b6>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <Double_GPS_PID_Calculation+0x280>)
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b5c:	e00c      	b.n	8003b78 <Double_GPS_PID_Calculation+0x1d0>
   else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003b64:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003c2c <Double_GPS_PID_Calculation+0x284>
 8003b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d502      	bpl.n	8003b78 <Double_GPS_PID_Calculation+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a2e      	ldr	r2, [pc, #184]	; (8003c30 <Double_GPS_PID_Calculation+0x288>)
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c
   axis->in.i_result = axis->in.error_sum * axis->in.ki;                     //Calculate I result of inner loop
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

   axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;   //Define derivative of inner loop
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9e:	eeb1 7a67 	vneg.f32	s14, s15
 8003ba2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003c20 <Double_GPS_PID_Calculation+0x278>
 8003ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
   axis->in.meas_value_prev = axis->in.meas_value;                           //Refresh value_prev to the latest value
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
   axis->in.d_result = axis->in.error_deriv * axis->in.kd;            //Calculate D result of inner loop
#else
   axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;   //filter for derivative
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003bbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003bcc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
   axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;                        //Calculate D result of inner loop
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif

   axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
   /****************************************************************************************/
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	3a83126f 	.word	0x3a83126f
 8003c24:	43fa0000 	.word	0x43fa0000
 8003c28:	43fa0000 	.word	0x43fa0000
 8003c2c:	c3fa0000 	.word	0xc3fa0000
 8003c30:	c3fa0000 	.word	0xc3fa0000
 8003c34:	3ecccccd 	.word	0x3ecccccd
 8003c38:	3f19999a 	.word	0x3f19999a

08003c3c <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	ed93 7a00 	vldr	s14, [r3]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	edd3 6a00 	vldr	s13, [r3]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	edd3 6a00 	vldr	s13, [r3]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3308      	adds	r3, #8
 8003c78:	edd3 7a00 	vldr	s15, [r3]
 8003c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	330c      	adds	r3, #12
 8003c88:	edd3 6a00 	vldr	s13, [r3]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca0:	f000 f90e 	bl	8003ec0 <invSqrt>
 8003ca4:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	edd3 7a00 	vldr	s15, [r3]
 8003cd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8003cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d02:	edd7 6a06 	vldr	s13, [r7, #24]
 8003d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d12:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d16:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d1a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d42:	eef0 0a67 	vmov.f32	s1, s15
 8003d46:	eeb0 0a66 	vmov.f32	s0, s13
 8003d4a:	f00b fb59 	bl	800f400 <atan2f>
 8003d4e:	eef0 7a40 	vmov.f32	s15, s0
 8003d52:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003d54:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8003d58:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d64:	edd7 6a06 	vldr	s13, [r7, #24]
 8003d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	f00b fb0e 	bl	800f39c <asinf>
 8003d80:	eef0 7a40 	vmov.f32	s15, s0
 8003d84:	eef1 7a67 	vneg.f32	s15, s15
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <Quaternion_Update+0x270>)
 8003d8a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8003d8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d9a:	edd7 6a04 	vldr	s13, [r7, #16]
 8003d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003daa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8003db2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	eef0 0a67 	vmov.f32	s1, s15
 8003dde:	eeb0 0a66 	vmov.f32	s0, s13
 8003de2:	f00b fb0d 	bl	800f400 <atan2f>
 8003de6:	eef0 7a40 	vmov.f32	s15, s0
 8003dea:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <Quaternion_Update+0x274>)
 8003dec:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003eb4 <Quaternion_Update+0x278>
 8003dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e00:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <Quaternion_Update+0x270>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003eb4 <Quaternion_Update+0x278>
 8003e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <Quaternion_Update+0x270>)
 8003e14:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003eb4 <Quaternion_Update+0x278>
 8003e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e28:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	db0a      	blt.n	8003e52 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003eb8 <Quaternion_Update+0x27c>
 8003e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e4c:	edc3 7a00 	vstr	s15, [r3]
 8003e50:	e007      	b.n	8003e62 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	eef1 7a67 	vneg.f32	s15, s15
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <Quaternion_Update+0x274>)
 8003e5e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e70:	db0a      	blt.n	8003e88 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003ebc <Quaternion_Update+0x280>
 8003e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e82:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003e86:	e00b      	b.n	8003ea0 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e8a:	edd3 7a00 	vldr	s15, [r3]
 8003e8e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003ebc <Quaternion_Update+0x280>
 8003e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e96:	eef1 7a67 	vneg.f32	s15, s15
 8003e9a:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <Quaternion_Update+0x26c>)
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
}
 8003ea0:	bf00      	nop
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200006f0 	.word	0x200006f0
 8003eac:	200006e8 	.word	0x200006e8
 8003eb0:	200006ec 	.word	0x200006ec
 8003eb4:	42652ee1 	.word	0x42652ee1
 8003eb8:	43b40000 	.word	0x43b40000
 8003ebc:	43340000 	.word	0x43340000

08003ec0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ece:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003ede:	f107 0310 	add.w	r3, r7, #16
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	105a      	asrs	r2, r3, #1
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <invSqrt+0x74>)
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003ef8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003efc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f04:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	ee07 3a90 	vmov	s15, r3
}
 8003f26:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	5f3759df 	.word	0x5f3759df

08003f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <MX_DMA_Init+0x3c>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <MX_DMA_Init+0x3c>)
 8003f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <MX_DMA_Init+0x3c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	2046      	movs	r0, #70	; 0x46
 8003f60:	f004 fbf7 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003f64:	2046      	movs	r0, #70	; 0x46
 8003f66:	f004 fc10 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <LL_GPIO_SetOutputPin>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	619a      	str	r2, [r3, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_GPIO_ResetOutputPin>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	041a      	lsls	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <LL_AHB1_GRP1_EnableClock>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	4907      	ldr	r1, [pc, #28]	; (8003fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fea:	463b      	mov	r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
 8003ff8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003ffa:	2004      	movs	r0, #4
 8003ffc:	f7ff ffda 	bl	8003fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004000:	2080      	movs	r0, #128	; 0x80
 8004002:	f7ff ffd7 	bl	8003fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004006:	2001      	movs	r0, #1
 8004008:	f7ff ffd4 	bl	8003fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800400c:	2002      	movs	r0, #2
 800400e:	f7ff ffd1 	bl	8003fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004012:	2008      	movs	r0, #8
 8004014:	f7ff ffce 	bl	8003fb4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8004018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800401c:	482e      	ldr	r0, [pc, #184]	; (80040d8 <MX_GPIO_Init+0xf4>)
 800401e:	f7ff ffab 	bl	8003f78 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8004022:	f240 2117 	movw	r1, #535	; 0x217
 8004026:	482c      	ldr	r0, [pc, #176]	; (80040d8 <MX_GPIO_Init+0xf4>)
 8004028:	f7ff ffb4 	bl	8003f94 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 800402c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004030:	482a      	ldr	r0, [pc, #168]	; (80040dc <MX_GPIO_Init+0xf8>)
 8004032:	f7ff ffaf 	bl	8003f94 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8004036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800403a:	4829      	ldr	r0, [pc, #164]	; (80040e0 <MX_GPIO_Init+0xfc>)
 800403c:	f7ff ffaa 	bl	8003f94 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8004040:	f242 2317 	movw	r3, #8727	; 0x2217
 8004044:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004046:	2301      	movs	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004056:	463b      	mov	r3, r7
 8004058:	4619      	mov	r1, r3
 800405a:	481f      	ldr	r0, [pc, #124]	; (80040d8 <MX_GPIO_Init+0xf4>)
 800405c:	f007 fcad 	bl	800b9ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8004060:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004064:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406e:	463b      	mov	r3, r7
 8004070:	4619      	mov	r1, r3
 8004072:	4819      	ldr	r0, [pc, #100]	; (80040d8 <MX_GPIO_Init+0xf4>)
 8004074:	f007 fca1 	bl	800b9ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8004078:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800407c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800407e:	2301      	movs	r3, #1
 8004080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408e:	463b      	mov	r3, r7
 8004090:	4619      	mov	r1, r3
 8004092:	4812      	ldr	r0, [pc, #72]	; (80040dc <MX_GPIO_Init+0xf8>)
 8004094:	f007 fc91 	bl	800b9ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800409c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800409e:	2301      	movs	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	463b      	mov	r3, r7
 80040b0:	4619      	mov	r1, r3
 80040b2:	480b      	ldr	r0, [pc, #44]	; (80040e0 <MX_GPIO_Init+0xfc>)
 80040b4:	f007 fc81 	bl	800b9ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c4:	463b      	mov	r3, r7
 80040c6:	4619      	mov	r1, r3
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <MX_GPIO_Init+0xf8>)
 80040ca:	f007 fc76 	bl	800b9ba <LL_GPIO_Init>

}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020000 	.word	0x40020000

080040e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <MX_I2C1_Init+0x50>)
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <MX_I2C1_Init+0x54>)
 80040ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <MX_I2C1_Init+0x50>)
 80040f0:	4a12      	ldr	r2, [pc, #72]	; (800413c <MX_I2C1_Init+0x58>)
 80040f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <MX_I2C1_Init+0x50>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <MX_I2C1_Init+0x50>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <MX_I2C1_Init+0x50>)
 8004102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <MX_I2C1_Init+0x50>)
 800410a:	2200      	movs	r2, #0
 800410c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <MX_I2C1_Init+0x50>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <MX_I2C1_Init+0x50>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_I2C1_Init+0x50>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004120:	4804      	ldr	r0, [pc, #16]	; (8004134 <MX_I2C1_Init+0x50>)
 8004122:	f005 f865 	bl	80091f0 <HAL_I2C_Init>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800412c:	f002 feec 	bl	8006f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200006f4 	.word	0x200006f4
 8004138:	40005400 	.word	0x40005400
 800413c:	00061a80 	.word	0x00061a80

08004140 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_I2C_MspInit+0x84>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d12c      	bne.n	80041bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	6313      	str	r3, [r2, #48]	; 0x30
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800417e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004184:	2312      	movs	r3, #18
 8004186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004188:	2301      	movs	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004190:	2304      	movs	r3, #4
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	480c      	ldr	r0, [pc, #48]	; (80041cc <HAL_I2C_MspInit+0x8c>)
 800419c:	f004 fe8c 	bl	8008eb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 80041aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041ae:	6413      	str	r3, [r2, #64]	; 0x40
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_I2C_MspInit+0x88>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041bc:	bf00      	nop
 80041be:	3728      	adds	r7, #40	; 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40005400 	.word	0x40005400
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40020400 	.word	0x40020400

080041d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_USART_IsActiveFlag_TXE>:
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_USART_EnableIT_RXNE>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_USART_TransmitData8>:
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	605a      	str	r2, [r3, #4]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_GPIO_SetOutputPin>:
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	619a      	str	r2, [r3, #24]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_GPIO_ResetOutputPin>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	041a      	lsls	r2, r3, #16
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	4013      	ands	r3, r2
 800430a:	041a      	lsls	r2, r3, #16
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43d9      	mvns	r1, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	400b      	ands	r3, r1
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	619a      	str	r2, [r3, #24]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e014      	b.n	8004364 <_write+0x3c>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800433a:	bf00      	nop
 800433c:	480e      	ldr	r0, [pc, #56]	; (8004378 <_write+0x50>)
 800433e:	f7ff ff8a 	bl	8004256 <LL_USART_IsActiveFlag_TXE>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f9      	beq.n	800433c <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4413      	add	r3, r2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	4809      	ldr	r0, [pc, #36]	; (8004378 <_write+0x50>)
 8004354:	f7ff ffa2 	bl	800429c <LL_USART_TransmitData8>
		HAL_Delay(1);
 8004358:	2001      	movs	r0, #1
 800435a:	f004 f8fb 	bl	8008554 <HAL_Delay>
	for(int i=0;i<len;i++)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3301      	adds	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	dbe6      	blt.n	800433a <_write+0x12>
	}
}
 800436c:	bf00      	nop
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40011400 	.word	0x40011400
 800437c:	00000000 	.word	0x00000000

08004380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b096      	sub	sp, #88	; 0x58
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
float q[4];
float quatRadianAccuracy;
short gyro_x_offset = -6, gyro_y_offset = -19, gyro_z_offset = 4;
 8004386:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800438a:	867b      	strh	r3, [r7, #50]	; 0x32
 800438c:	f64f 73ed 	movw	r3, #65517	; 0xffed
 8004390:	863b      	strh	r3, [r7, #48]	; 0x30
 8004392:	2304      	movs	r3, #4
 8004394:	85fb      	strh	r3, [r7, #46]	; 0x2e
unsigned char motor_arming_flag = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
unsigned short iBus_SwA_Prev = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
unsigned char iBus_rx_cnt = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
float yaw_heading_reference;

unsigned int landing_throttle = 38640;
 80043a8:	f249 63f0 	movw	r3, #38640	; 0x96f0
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
int manual_throttle;
int gps_cnt = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
int baro_cnt = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	64bb      	str	r3, [r7, #72]	; 0x48

unsigned int last_lon;
unsigned int last_lat;
uint8_t mode = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
float BNO080_Pitch_Offset = 1.1f;
 80043bc:	4b9c      	ldr	r3, [pc, #624]	; (8004630 <main+0x2b0>)
 80043be:	61fb      	str	r3, [r7, #28]
float BNO080_Roll_Offset = 0;
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043c6:	f004 f853 	bl	8008470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ca:	f002 f9db 	bl	8006784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ce:	f7ff fe09 	bl	8003fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 80043d2:	f7ff fdb1 	bl	8003f38 <MX_DMA_Init>
  MX_TIM3_Init();
 80043d6:	f003 fbf3 	bl	8007bc0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80043da:	f003 ff3d 	bl	8008258 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80043de:	f002 fe45 	bl	800706c <MX_SPI2_Init>
  MX_SPI1_Init();
 80043e2:	f002 fdf1 	bl	8006fc8 <MX_SPI1_Init>
  MX_UART5_Init();
 80043e6:	f003 fe95 	bl	8008114 <MX_UART5_Init>
  MX_TIM5_Init();
 80043ea:	f003 fc5b 	bl	8007ca4 <MX_TIM5_Init>
  MX_TIM7_Init();
 80043ee:	f003 fcfd 	bl	8007dec <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80043f2:	f003 ff07 	bl	8008204 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80043f6:	f002 fe8d 	bl	8007114 <MX_SPI3_Init>
  MX_I2C1_Init();
 80043fa:	f7ff fe73 	bl	80040e4 <MX_I2C1_Init>
  MX_UART4_Init();
 80043fe:	f003 fe27 	bl	8008050 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 8004402:	488c      	ldr	r0, [pc, #560]	; (8004634 <main+0x2b4>)
 8004404:	f7ff fee4 	bl	80041d0 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(UART4); //GPS
 8004408:	488b      	ldr	r0, [pc, #556]	; (8004638 <main+0x2b8>)
 800440a:	f7ff ff37 	bl	800427c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B;
 800440e:	488b      	ldr	r0, [pc, #556]	; (800463c <main+0x2bc>)
 8004410:	f7ff ff34 	bl	800427c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 8004414:	488a      	ldr	r0, [pc, #552]	; (8004640 <main+0x2c0>)
 8004416:	f7ff ff31 	bl	800427c <LL_USART_EnableIT_RXNE>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); // Telemetry
 800441a:	2201      	movs	r2, #1
 800441c:	4989      	ldr	r1, [pc, #548]	; (8004644 <main+0x2c4>)
 800441e:	488a      	ldr	r0, [pc, #552]	; (8004648 <main+0x2c8>)
 8004420:	f006 fc3e 	bl	800aca0 <HAL_UART_Receive_IT>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8004424:	4889      	ldr	r0, [pc, #548]	; (800464c <main+0x2cc>)
 8004426:	f7ff fed3 	bl	80041d0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1); //Enable Timer Counting
 800442a:	2101      	movs	r1, #1
 800442c:	4887      	ldr	r0, [pc, #540]	; (800464c <main+0x2cc>)
 800442e:	f7ff fedf 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2); //Enable Timer Counting
 8004432:	2110      	movs	r1, #16
 8004434:	4885      	ldr	r0, [pc, #532]	; (800464c <main+0x2cc>)
 8004436:	f7ff fedb 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3); //Enable Timer Counting
 800443a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443e:	4883      	ldr	r0, [pc, #524]	; (800464c <main+0x2cc>)
 8004440:	f7ff fed6 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004448:	4880      	ldr	r0, [pc, #512]	; (800464c <main+0x2cc>)
 800444a:	f7ff fed1 	bl	80041f0 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 800444e:	4880      	ldr	r0, [pc, #512]	; (8004650 <main+0x2d0>)
 8004450:	f7ff febe 	bl	80041d0 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8004454:	487e      	ldr	r0, [pc, #504]	; (8004650 <main+0x2d0>)
 8004456:	f7ff feee 	bl	8004236 <LL_TIM_EnableIT_UPDATE>


  TIM3->PSC = 1000;
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <main+0x2b4>)
 800445c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004466:	4873      	ldr	r0, [pc, #460]	; (8004634 <main+0x2b4>)
 8004468:	f7ff fec2 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800446c:	203c      	movs	r0, #60	; 0x3c
 800446e:	f004 f871 	bl	8008554 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004476:	486f      	ldr	r0, [pc, #444]	; (8004634 <main+0x2b4>)
 8004478:	f7ff fecb 	bl	8004212 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 800447c:	203c      	movs	r0, #60	; 0x3c
 800447e:	f004 f869 	bl	8008554 <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004486:	486b      	ldr	r0, [pc, #428]	; (8004634 <main+0x2b4>)
 8004488:	f7ff feb2 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 800448c:	203c      	movs	r0, #60	; 0x3c
 800448e:	f004 f861 	bl	8008554 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004496:	4867      	ldr	r0, [pc, #412]	; (8004634 <main+0x2b4>)
 8004498:	f7ff febb 	bl	8004212 <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 800449c:	203c      	movs	r0, #60	; 0x3c
 800449e:	f004 f859 	bl	8008554 <HAL_Delay>


  printf("Checking sensor connection!\n");
 80044a2:	486c      	ldr	r0, [pc, #432]	; (8004654 <main+0x2d4>)
 80044a4:	f008 ff0a 	bl	800d2bc <puts>

  if(BNO080_Initialization() != 0)
 80044a8:	f7fd f84e 	bl	8001548 <BNO080_Initialization>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d03a      	beq.n	8004528 <main+0x1a8>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044b6:	485f      	ldr	r0, [pc, #380]	; (8004634 <main+0x2b4>)
 80044b8:	f7ff fe9a 	bl	80041f0 <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80044bc:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <main+0x2b4>)
 80044be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80044c4:	2064      	movs	r0, #100	; 0x64
 80044c6:	f004 f845 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 1500;
 80044ca:	4b5a      	ldr	r3, [pc, #360]	; (8004634 <main+0x2b4>)
 80044cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80044d2:	2064      	movs	r0, #100	; 0x64
 80044d4:	f004 f83e 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 2000;
 80044d8:	4b56      	ldr	r3, [pc, #344]	; (8004634 <main+0x2b4>)
 80044da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80044e0:	2064      	movs	r0, #100	; 0x64
 80044e2:	f004 f837 	bl	8008554 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ea:	4852      	ldr	r0, [pc, #328]	; (8004634 <main+0x2b4>)
 80044ec:	f7ff fe91 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...");
 80044f0:	4859      	ldr	r0, [pc, #356]	; (8004658 <main+0x2d8>)
 80044f2:	f008 fe5d 	bl	800d1b0 <iprintf>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044fa:	484e      	ldr	r0, [pc, #312]	; (8004634 <main+0x2b4>)
 80044fc:	f7ff fe89 	bl	8004212 <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004500:	2101      	movs	r1, #1
 8004502:	4856      	ldr	r0, [pc, #344]	; (800465c <main+0x2dc>)
 8004504:	f7ff fef6 	bl	80042f4 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8004508:	20c8      	movs	r0, #200	; 0xc8
 800450a:	f004 f823 	bl	8008554 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800450e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004512:	4848      	ldr	r0, [pc, #288]	; (8004634 <main+0x2b4>)
 8004514:	f7ff fe6c 	bl	80041f0 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004518:	2101      	movs	r1, #1
 800451a:	4850      	ldr	r0, [pc, #320]	; (800465c <main+0x2dc>)
 800451c:	f7ff feea 	bl	80042f4 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8004520:	20c8      	movs	r0, #200	; 0xc8
 8004522:	f004 f817 	bl	8008554 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004526:	e7e6      	b.n	80044f6 <main+0x176>
	  }
  }
  BNO080_enableRotationVector(2500);
 8004528:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800452c:	f7fd fb4b 	bl	8001bc6 <BNO080_enableRotationVector>

  if(ICM20602_Initialization() !=0 )
 8004530:	f7fe f83e 	bl	80025b0 <ICM20602_Initialization>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03a      	beq.n	80045b0 <main+0x230>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 800453a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800453e:	483d      	ldr	r0, [pc, #244]	; (8004634 <main+0x2b4>)
 8004540:	f7ff fe56 	bl	80041f0 <LL_TIM_CC_EnableChannel>

	  	  TIM3->PSC = 1000;
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <main+0x2b4>)
 8004546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 800454c:	2064      	movs	r0, #100	; 0x64
 800454e:	f004 f801 	bl	8008554 <HAL_Delay>
	  	  TIM3->PSC = 1500;
 8004552:	4b38      	ldr	r3, [pc, #224]	; (8004634 <main+0x2b4>)
 8004554:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 800455a:	2064      	movs	r0, #100	; 0x64
 800455c:	f003 fffa 	bl	8008554 <HAL_Delay>
	  	  TIM3->PSC = 2000;
 8004560:	4b34      	ldr	r3, [pc, #208]	; (8004634 <main+0x2b4>)
 8004562:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 8004568:	2064      	movs	r0, #100	; 0x64
 800456a:	f003 fff3 	bl	8008554 <HAL_Delay>

	  	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800456e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004572:	4830      	ldr	r0, [pc, #192]	; (8004634 <main+0x2b4>)
 8004574:	f7ff fe4d 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  	  printf("\nICM20602 failed. Program shutting down...");
 8004578:	4839      	ldr	r0, [pc, #228]	; (8004660 <main+0x2e0>)
 800457a:	f008 fe19 	bl	800d1b0 <iprintf>
	  	  while(1)
	  	  {
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800457e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004582:	482c      	ldr	r0, [pc, #176]	; (8004634 <main+0x2b4>)
 8004584:	f7ff fe45 	bl	8004212 <LL_TIM_CC_DisableChannel>
	  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004588:	2102      	movs	r1, #2
 800458a:	4834      	ldr	r0, [pc, #208]	; (800465c <main+0x2dc>)
 800458c:	f7ff feb2 	bl	80042f4 <LL_GPIO_TogglePin>
	  		  HAL_Delay(200);
 8004590:	20c8      	movs	r0, #200	; 0xc8
 8004592:	f003 ffdf 	bl	8008554 <HAL_Delay>
	  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800459a:	4826      	ldr	r0, [pc, #152]	; (8004634 <main+0x2b4>)
 800459c:	f7ff fe28 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80045a0:	2102      	movs	r1, #2
 80045a2:	482e      	ldr	r0, [pc, #184]	; (800465c <main+0x2dc>)
 80045a4:	f7ff fea6 	bl	80042f4 <LL_GPIO_TogglePin>
	  		  HAL_Delay(200);
 80045a8:	20c8      	movs	r0, #200	; 0xc8
 80045aa:	f003 ffd3 	bl	8008554 <HAL_Delay>
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045ae:	e7e6      	b.n	800457e <main+0x1fe>
	  	  }
  }

  /*LPS22HH Initialization*/
  if(LPS22HH_Initialization() != 0)
 80045b0:	f7fe fa88 	bl	8002ac4 <LPS22HH_Initialization>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d056      	beq.n	8004668 <main+0x2e8>
    {
  	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045be:	481d      	ldr	r0, [pc, #116]	; (8004634 <main+0x2b4>)
 80045c0:	f7ff fe16 	bl	80041f0 <LL_TIM_CC_EnableChannel>

  	  TIM3->PSC = 1000;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <main+0x2b4>)
 80045c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	f003 ffc1 	bl	8008554 <HAL_Delay>
  	  TIM3->PSC = 1500;
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <main+0x2b4>)
 80045d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80045d8:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 80045da:	2064      	movs	r0, #100	; 0x64
 80045dc:	f003 ffba 	bl	8008554 <HAL_Delay>
  	  TIM3->PSC = 2000;
 80045e0:	4b14      	ldr	r3, [pc, #80]	; (8004634 <main+0x2b4>)
 80045e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 80045e8:	2064      	movs	r0, #100	; 0x64
 80045ea:	f003 ffb3 	bl	8008554 <HAL_Delay>

  	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045f2:	4810      	ldr	r0, [pc, #64]	; (8004634 <main+0x2b4>)
 80045f4:	f7ff fe0d 	bl	8004212 <LL_TIM_CC_DisableChannel>

  	  printf("\nLPS22HH failed. Program shutting down...");
 80045f8:	481a      	ldr	r0, [pc, #104]	; (8004664 <main+0x2e4>)
 80045fa:	f008 fdd9 	bl	800d1b0 <iprintf>
  	  while(1)
  	  {
  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004602:	480c      	ldr	r0, [pc, #48]	; (8004634 <main+0x2b4>)
 8004604:	f7ff fe05 	bl	8004212 <LL_TIM_CC_DisableChannel>
  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004608:	2104      	movs	r1, #4
 800460a:	4814      	ldr	r0, [pc, #80]	; (800465c <main+0x2dc>)
 800460c:	f7ff fe72 	bl	80042f4 <LL_GPIO_TogglePin>
  		  HAL_Delay(200);
 8004610:	20c8      	movs	r0, #200	; 0xc8
 8004612:	f003 ff9f 	bl	8008554 <HAL_Delay>
  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <main+0x2b4>)
 800461c:	f7ff fde8 	bl	80041f0 <LL_TIM_CC_EnableChannel>
  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004620:	2104      	movs	r1, #4
 8004622:	480e      	ldr	r0, [pc, #56]	; (800465c <main+0x2dc>)
 8004624:	f7ff fe66 	bl	80042f4 <LL_GPIO_TogglePin>
  		  HAL_Delay(200);
 8004628:	20c8      	movs	r0, #200	; 0xc8
 800462a:	f003 ff93 	bl	8008554 <HAL_Delay>
  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800462e:	e7e6      	b.n	80045fe <main+0x27e>
 8004630:	3f8ccccd 	.word	0x3f8ccccd
 8004634:	40000400 	.word	0x40000400
 8004638:	40004c00 	.word	0x40004c00
 800463c:	40005000 	.word	0x40005000
 8004640:	40011400 	.word	0x40011400
 8004644:	20000281 	.word	0x20000281
 8004648:	20000870 	.word	0x20000870
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40001400 	.word	0x40001400
 8004654:	080102d0 	.word	0x080102d0
 8004658:	080102ec 	.word	0x080102ec
 800465c:	40020800 	.word	0x40020800
 8004660:	08010318 	.word	0x08010318
 8004664:	08010344 	.word	0x08010344
    }



  /*GNSS Initialization*/
  M8N_Initialization();
 8004668:	f7fe fca0 	bl	8002fac <M8N_Initialization>
//  gyro_y_offset = gyro_y_offset/250.f;
//  gyro_z_offset = gyro_z_offset/250.f;
//
//  HAL_Delay(5);

  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 800466c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004670:	4613      	mov	r3, r2
 8004672:	07db      	lsls	r3, r3, #31
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	121b      	asrs	r3, r3, #8
 800467a:	4619      	mov	r1, r3
 800467c:	2013      	movs	r0, #19
 800467e:	f7fd ff75 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8004682:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004686:	4613      	mov	r3, r2
 8004688:	07db      	lsls	r3, r3, #31
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4619      	mov	r1, r3
 8004690:	2014      	movs	r0, #20
 8004692:	f7fd ff6b 	bl	800256c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8004696:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800469a:	4613      	mov	r3, r2
 800469c:	07db      	lsls	r3, r3, #31
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	121b      	asrs	r3, r3, #8
 80046a4:	4619      	mov	r1, r3
 80046a6:	2015      	movs	r0, #21
 80046a8:	f7fd ff60 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 80046ac:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80046b0:	4613      	mov	r3, r2
 80046b2:	07db      	lsls	r3, r3, #31
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4619      	mov	r1, r3
 80046ba:	2016      	movs	r0, #22
 80046bc:	f7fd ff56 	bl	800256c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 80046c0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80046c4:	4613      	mov	r3, r2
 80046c6:	07db      	lsls	r3, r3, #31
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	121b      	asrs	r3, r3, #8
 80046ce:	4619      	mov	r1, r3
 80046d0:	2017      	movs	r0, #23
 80046d2:	f7fd ff4b 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 80046d6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80046da:	4613      	mov	r3, r2
 80046dc:	07db      	lsls	r3, r3, #31
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4619      	mov	r1, r3
 80046e4:	2018      	movs	r0, #24
 80046e6:	f7fd ff41 	bl	800256c <ICM20602_Writebyte>

  printf("All sensor OK!\n\n");
 80046ea:	48b7      	ldr	r0, [pc, #732]	; (80049c8 <main+0x648>)
 80046ec:	f008 fde6 	bl	800d2bc <puts>

  /*************Save Initial Gain into EEPROM**************/

EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd);
 80046f0:	4bb6      	ldr	r3, [pc, #728]	; (80049cc <main+0x64c>)
 80046f2:	4ab7      	ldr	r2, [pc, #732]	; (80049d0 <main+0x650>)
 80046f4:	49b7      	ldr	r1, [pc, #732]	; (80049d4 <main+0x654>)
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fc fd06 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80046fc:	4bb5      	ldr	r3, [pc, #724]	; (80049d4 <main+0x654>)
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	4bb4      	ldr	r3, [pc, #720]	; (80049d4 <main+0x654>)
 8004704:	ed93 7a01 	vldr	s14, [r3, #4]
 8004708:	4bb2      	ldr	r3, [pc, #712]	; (80049d4 <main+0x654>)
 800470a:	edd3 6a02 	vldr	s13, [r3, #8]
 800470e:	eeb0 1a66 	vmov.f32	s2, s13
 8004712:	eef0 0a47 	vmov.f32	s1, s14
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	2100      	movs	r1, #0
 800471c:	48ae      	ldr	r0, [pc, #696]	; (80049d8 <main+0x658>)
 800471e:	f002 fae5 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004722:	230a      	movs	r3, #10
 8004724:	2214      	movs	r2, #20
 8004726:	49ac      	ldr	r1, [pc, #688]	; (80049d8 <main+0x658>)
 8004728:	48ac      	ldr	r0, [pc, #688]	; (80049dc <main+0x65c>)
 800472a:	f006 f9e2 	bl	800aaf2 <HAL_UART_Transmit>

EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd);
 800472e:	4bac      	ldr	r3, [pc, #688]	; (80049e0 <main+0x660>)
 8004730:	4aac      	ldr	r2, [pc, #688]	; (80049e4 <main+0x664>)
 8004732:	49ad      	ldr	r1, [pc, #692]	; (80049e8 <main+0x668>)
 8004734:	2001      	movs	r0, #1
 8004736:	f7fc fce7 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800473a:	4ba6      	ldr	r3, [pc, #664]	; (80049d4 <main+0x654>)
 800473c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004740:	4ba4      	ldr	r3, [pc, #656]	; (80049d4 <main+0x654>)
 8004742:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004746:	4ba3      	ldr	r3, [pc, #652]	; (80049d4 <main+0x654>)
 8004748:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800474c:	eeb0 1a66 	vmov.f32	s2, s13
 8004750:	eef0 0a47 	vmov.f32	s1, s14
 8004754:	eeb0 0a67 	vmov.f32	s0, s15
 8004758:	2101      	movs	r1, #1
 800475a:	489f      	ldr	r0, [pc, #636]	; (80049d8 <main+0x658>)
 800475c:	f002 fac6 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004760:	230a      	movs	r3, #10
 8004762:	2214      	movs	r2, #20
 8004764:	499c      	ldr	r1, [pc, #624]	; (80049d8 <main+0x658>)
 8004766:	489d      	ldr	r0, [pc, #628]	; (80049dc <main+0x65c>)
 8004768:	f006 f9c3 	bl	800aaf2 <HAL_UART_Transmit>

EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 800476c:	4b9f      	ldr	r3, [pc, #636]	; (80049ec <main+0x66c>)
 800476e:	4aa0      	ldr	r2, [pc, #640]	; (80049f0 <main+0x670>)
 8004770:	49a0      	ldr	r1, [pc, #640]	; (80049f4 <main+0x674>)
 8004772:	2002      	movs	r0, #2
 8004774:	f7fc fcc8 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004778:	4b9e      	ldr	r3, [pc, #632]	; (80049f4 <main+0x674>)
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	4b9d      	ldr	r3, [pc, #628]	; (80049f4 <main+0x674>)
 8004780:	ed93 7a01 	vldr	s14, [r3, #4]
 8004784:	4b9b      	ldr	r3, [pc, #620]	; (80049f4 <main+0x674>)
 8004786:	edd3 6a02 	vldr	s13, [r3, #8]
 800478a:	eeb0 1a66 	vmov.f32	s2, s13
 800478e:	eef0 0a47 	vmov.f32	s1, s14
 8004792:	eeb0 0a67 	vmov.f32	s0, s15
 8004796:	2102      	movs	r1, #2
 8004798:	488f      	ldr	r0, [pc, #572]	; (80049d8 <main+0x658>)
 800479a:	f002 faa7 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800479e:	230a      	movs	r3, #10
 80047a0:	2214      	movs	r2, #20
 80047a2:	498d      	ldr	r1, [pc, #564]	; (80049d8 <main+0x658>)
 80047a4:	488d      	ldr	r0, [pc, #564]	; (80049dc <main+0x65c>)
 80047a6:	f006 f9a4 	bl	800aaf2 <HAL_UART_Transmit>

EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 80047aa:	4b93      	ldr	r3, [pc, #588]	; (80049f8 <main+0x678>)
 80047ac:	4a93      	ldr	r2, [pc, #588]	; (80049fc <main+0x67c>)
 80047ae:	4994      	ldr	r1, [pc, #592]	; (8004a00 <main+0x680>)
 80047b0:	2003      	movs	r0, #3
 80047b2:	f7fc fca9 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80047b6:	4b8f      	ldr	r3, [pc, #572]	; (80049f4 <main+0x674>)
 80047b8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80047bc:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <main+0x674>)
 80047be:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80047c2:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <main+0x674>)
 80047c4:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80047c8:	eeb0 1a66 	vmov.f32	s2, s13
 80047cc:	eef0 0a47 	vmov.f32	s1, s14
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	2103      	movs	r1, #3
 80047d6:	4880      	ldr	r0, [pc, #512]	; (80049d8 <main+0x658>)
 80047d8:	f002 fa88 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80047dc:	230a      	movs	r3, #10
 80047de:	2214      	movs	r2, #20
 80047e0:	497d      	ldr	r1, [pc, #500]	; (80049d8 <main+0x658>)
 80047e2:	487e      	ldr	r0, [pc, #504]	; (80049dc <main+0x65c>)
 80047e4:	f006 f985 	bl	800aaf2 <HAL_UART_Transmit>

EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 80047e8:	4b86      	ldr	r3, [pc, #536]	; (8004a04 <main+0x684>)
 80047ea:	4a87      	ldr	r2, [pc, #540]	; (8004a08 <main+0x688>)
 80047ec:	4987      	ldr	r1, [pc, #540]	; (8004a0c <main+0x68c>)
 80047ee:	2004      	movs	r0, #4
 80047f0:	f7fc fc8a 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80047f4:	4b85      	ldr	r3, [pc, #532]	; (8004a0c <main+0x68c>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <main+0x68c>)
 80047fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004800:	4b82      	ldr	r3, [pc, #520]	; (8004a0c <main+0x68c>)
 8004802:	edd3 6a02 	vldr	s13, [r3, #8]
 8004806:	eeb0 1a66 	vmov.f32	s2, s13
 800480a:	eef0 0a47 	vmov.f32	s1, s14
 800480e:	eeb0 0a67 	vmov.f32	s0, s15
 8004812:	2104      	movs	r1, #4
 8004814:	4870      	ldr	r0, [pc, #448]	; (80049d8 <main+0x658>)
 8004816:	f002 fa69 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800481a:	230a      	movs	r3, #10
 800481c:	2214      	movs	r2, #20
 800481e:	496e      	ldr	r1, [pc, #440]	; (80049d8 <main+0x658>)
 8004820:	486e      	ldr	r0, [pc, #440]	; (80049dc <main+0x65c>)
 8004822:	f006 f966 	bl	800aaf2 <HAL_UART_Transmit>

EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8004826:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <main+0x690>)
 8004828:	4a7a      	ldr	r2, [pc, #488]	; (8004a14 <main+0x694>)
 800482a:	497b      	ldr	r1, [pc, #492]	; (8004a18 <main+0x698>)
 800482c:	2005      	movs	r0, #5
 800482e:	f7fc fc6b 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004832:	4b79      	ldr	r3, [pc, #484]	; (8004a18 <main+0x698>)
 8004834:	edd3 7a00 	vldr	s15, [r3]
 8004838:	4b77      	ldr	r3, [pc, #476]	; (8004a18 <main+0x698>)
 800483a:	ed93 7a01 	vldr	s14, [r3, #4]
 800483e:	4b76      	ldr	r3, [pc, #472]	; (8004a18 <main+0x698>)
 8004840:	edd3 6a02 	vldr	s13, [r3, #8]
 8004844:	eeb0 1a66 	vmov.f32	s2, s13
 8004848:	eef0 0a47 	vmov.f32	s1, s14
 800484c:	eeb0 0a67 	vmov.f32	s0, s15
 8004850:	2105      	movs	r1, #5
 8004852:	4861      	ldr	r0, [pc, #388]	; (80049d8 <main+0x658>)
 8004854:	f002 fa4a 	bl	8006cec <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004858:	230a      	movs	r3, #10
 800485a:	2214      	movs	r2, #20
 800485c:	495e      	ldr	r1, [pc, #376]	; (80049d8 <main+0x658>)
 800485e:	485f      	ldr	r0, [pc, #380]	; (80049dc <main+0x65c>)
 8004860:	f006 f947 	bl	800aaf2 <HAL_UART_Transmit>


altitude.out.kp = 70;
 8004864:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <main+0x69c>)
 8004866:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <main+0x6a0>)
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c
altitude.out.ki = 0;
 800486a:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <main+0x69c>)
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
altitude.out.kd = 0;
 8004872:	4b6a      	ldr	r3, [pc, #424]	; (8004a1c <main+0x69c>)
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
altitude.in.kp = 10;
 800487a:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <main+0x69c>)
 800487c:	4a69      	ldr	r2, [pc, #420]	; (8004a24 <main+0x6a4>)
 800487e:	601a      	str	r2, [r3, #0]
altitude.in.ki = 0;
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <main+0x69c>)
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
altitude.in.kd = 0;
 8004888:	4b64      	ldr	r3, [pc, #400]	; (8004a1c <main+0x69c>)
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	609a      	str	r2, [r3, #8]

gps_lon.out.kp = 50;
 8004890:	4b65      	ldr	r3, [pc, #404]	; (8004a28 <main+0x6a8>)
 8004892:	4a66      	ldr	r2, [pc, #408]	; (8004a2c <main+0x6ac>)
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c
gps_lon.out.ki = 0;
 8004896:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <main+0x6a8>)
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
gps_lon.out.kd = 0;
 800489e:	4b62      	ldr	r3, [pc, #392]	; (8004a28 <main+0x6a8>)
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
gps_lon.in.kp = 2;
 80048a6:	4b60      	ldr	r3, [pc, #384]	; (8004a28 <main+0x6a8>)
 80048a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048ac:	601a      	str	r2, [r3, #0]
gps_lon.in.ki = 0;
 80048ae:	4b5e      	ldr	r3, [pc, #376]	; (8004a28 <main+0x6a8>)
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
gps_lon.in.kd = 0;
 80048b6:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <main+0x6a8>)
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]

gps_lat.out.kp = 50;
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <main+0x6b0>)
 80048c0:	4a5a      	ldr	r2, [pc, #360]	; (8004a2c <main+0x6ac>)
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
gps_lat.out.ki = 0;
 80048c4:	4b5a      	ldr	r3, [pc, #360]	; (8004a30 <main+0x6b0>)
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
gps_lat.out.kd = 0;
 80048cc:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <main+0x6b0>)
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
gps_lat.in.kp = 2;
 80048d4:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <main+0x6b0>)
 80048d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048da:	601a      	str	r2, [r3, #0]
gps_lat.in.ki = 0;
 80048dc:	4b54      	ldr	r3, [pc, #336]	; (8004a30 <main+0x6b0>)
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
gps_lat.in.kd = 0;
 80048e4:	4b52      	ldr	r3, [pc, #328]	; (8004a30 <main+0x6b0>)
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]

/*Receiver Detection*/
  while(Is_iBus_Received() == 0)
 80048ec:	e013      	b.n	8004916 <main+0x596>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 80048ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048f2:	4850      	ldr	r0, [pc, #320]	; (8004a34 <main+0x6b4>)
 80048f4:	f7ff fc7c 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000;
 80048f8:	4b4e      	ldr	r3, [pc, #312]	; (8004a34 <main+0x6b4>)
 80048fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8004900:	20c8      	movs	r0, #200	; 0xc8
 8004902:	f003 fe27 	bl	8008554 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800490a:	484a      	ldr	r0, [pc, #296]	; (8004a34 <main+0x6b4>)
 800490c:	f7ff fc81 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  HAL_Delay(200);
 8004910:	20c8      	movs	r0, #200	; 0xc8
 8004912:	f003 fe1f 	bl	8008554 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8004916:	f001 ffef 	bl	80068f8 <Is_iBus_Received>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e6      	beq.n	80048ee <main+0x56e>
  }

  /**************************ESC Calibration***********************************/
  if(iBus.SwC == 2000)
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <main+0x6b8>)
 8004922:	899b      	ldrh	r3, [r3, #12]
 8004924:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004928:	f040 8088 	bne.w	8004a3c <main+0x6bc>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 800492c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004930:	4840      	ldr	r0, [pc, #256]	; (8004a34 <main+0x6b4>)
 8004932:	f7ff fc5d 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <main+0x6b4>)
 8004938:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 800493e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004942:	f003 fe07 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <main+0x6b4>)
 8004948:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800494c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 800494e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004952:	f003 fdff 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 1500;
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <main+0x6b4>)
 8004958:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 800495e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004962:	f003 fdf7 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <main+0x6b4>)
 8004968:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800496c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 800496e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004972:	f003 fdef 	bl	8008554 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800497a:	482e      	ldr	r0, [pc, #184]	; (8004a34 <main+0x6b4>)
 800497c:	f7ff fc49 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 8004980:	f001 ff90 	bl	80068a4 <ESC_Calibration>
	  while(iBus.SwC != 1000)
 8004984:	e019      	b.n	80049ba <main+0x63a>
	  {
		  Is_iBus_Received();
 8004986:	f001 ffb7 	bl	80068f8 <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800498a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800498e:	4829      	ldr	r0, [pc, #164]	; (8004a34 <main+0x6b4>)
 8004990:	f7ff fc2e 	bl	80041f0 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <main+0x6b4>)
 8004996:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 800499c:	20c8      	movs	r0, #200	; 0xc8
 800499e:	f003 fdd9 	bl	8008554 <HAL_Delay>
		  TIM3->PSC = 2000;
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <main+0x6b4>)
 80049a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80049aa:	20c8      	movs	r0, #200	; 0xc8
 80049ac:	f003 fdd2 	bl	8008554 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80049b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049b4:	481f      	ldr	r0, [pc, #124]	; (8004a34 <main+0x6b4>)
 80049b6:	f7ff fc2c 	bl	8004212 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <main+0x6b8>)
 80049bc:	899b      	ldrh	r3, [r3, #12]
 80049be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c2:	d1e0      	bne.n	8004986 <main+0x606>
 80049c4:	e0a1      	b.n	8004b0a <main+0x78a>
 80049c6:	bf00      	nop
 80049c8:	08010370 	.word	0x08010370
 80049cc:	20000678 	.word	0x20000678
 80049d0:	20000674 	.word	0x20000674
 80049d4:	20000670 	.word	0x20000670
 80049d8:	20000794 	.word	0x20000794
 80049dc:	20000870 	.word	0x20000870
 80049e0:	200006b4 	.word	0x200006b4
 80049e4:	200006b0 	.word	0x200006b0
 80049e8:	200006ac 	.word	0x200006ac
 80049ec:	20000600 	.word	0x20000600
 80049f0:	200005fc 	.word	0x200005fc
 80049f4:	200005f8 	.word	0x200005f8
 80049f8:	2000063c 	.word	0x2000063c
 80049fc:	20000638 	.word	0x20000638
 8004a00:	20000634 	.word	0x20000634
 8004a04:	200005c4 	.word	0x200005c4
 8004a08:	200005c0 	.word	0x200005c0
 8004a0c:	200005bc 	.word	0x200005bc
 8004a10:	20000420 	.word	0x20000420
 8004a14:	2000041c 	.word	0x2000041c
 8004a18:	20000418 	.word	0x20000418
 8004a1c:	20000544 	.word	0x20000544
 8004a20:	428c0000 	.word	0x428c0000
 8004a24:	41200000 	.word	0x41200000
 8004a28:	200004cc 	.word	0x200004cc
 8004a2c:	42480000 	.word	0x42480000
 8004a30:	20000454 	.word	0x20000454
 8004a34:	40000400 	.word	0x40000400
 8004a38:	20000384 	.word	0x20000384
	  }
  }


  /**************************BNO080 Calibration********************************/
  else if(iBus.SwC == 1500)
 8004a3c:	4ba1      	ldr	r3, [pc, #644]	; (8004cc4 <main+0x944>)
 8004a3e:	899b      	ldrh	r3, [r3, #12]
 8004a40:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d160      	bne.n	8004b0a <main+0x78a>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a4c:	489e      	ldr	r0, [pc, #632]	; (8004cc8 <main+0x948>)
 8004a4e:	f7ff fbcf 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8004a52:	4b9d      	ldr	r3, [pc, #628]	; (8004cc8 <main+0x948>)
 8004a54:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a5e:	f003 fd79 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004a62:	4b99      	ldr	r3, [pc, #612]	; (8004cc8 <main+0x948>)
 8004a64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a6e:	f003 fd71 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 1500;
 8004a72:	4b95      	ldr	r3, [pc, #596]	; (8004cc8 <main+0x948>)
 8004a74:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a78:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a7e:	f003 fd69 	bl	8008554 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004a82:	4b91      	ldr	r3, [pc, #580]	; (8004cc8 <main+0x948>)
 8004a84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a8e:	f003 fd61 	bl	8008554 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a96:	488c      	ldr	r0, [pc, #560]	; (8004cc8 <main+0x948>)
 8004a98:	f7ff fbbb 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 8004a9c:	f001 ff4c 	bl	8006938 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 8004aa0:	e019      	b.n	8004ad6 <main+0x756>
	  	  {
	  		  Is_iBus_Received();
 8004aa2:	f001 ff29 	bl	80068f8 <Is_iBus_Received>

	  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aaa:	4887      	ldr	r0, [pc, #540]	; (8004cc8 <main+0x948>)
 8004aac:	f7ff fba0 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  		  TIM3->PSC = 1500;
 8004ab0:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <main+0x948>)
 8004ab2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
	  		  HAL_Delay(200);
 8004ab8:	20c8      	movs	r0, #200	; 0xc8
 8004aba:	f003 fd4b 	bl	8008554 <HAL_Delay>
	  		  TIM3->PSC = 2000;
 8004abe:	4b82      	ldr	r3, [pc, #520]	; (8004cc8 <main+0x948>)
 8004ac0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28
	  		  HAL_Delay(200);
 8004ac6:	20c8      	movs	r0, #200	; 0xc8
 8004ac8:	f003 fd44 	bl	8008554 <HAL_Delay>
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ad0:	487d      	ldr	r0, [pc, #500]	; (8004cc8 <main+0x948>)
 8004ad2:	f7ff fb9e 	bl	8004212 <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8004ad6:	4b7b      	ldr	r3, [pc, #492]	; (8004cc4 <main+0x944>)
 8004ad8:	899b      	ldrh	r3, [r3, #12]
 8004ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ade:	d1e0      	bne.n	8004aa2 <main+0x722>
	  	  }
  }

  /*********************Check Throttle value is minimum************************/
  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 8004ae0:	e013      	b.n	8004b0a <main+0x78a>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ae6:	4878      	ldr	r0, [pc, #480]	; (8004cc8 <main+0x948>)
 8004ae8:	f7ff fb82 	bl	80041f0 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8004aec:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <main+0x948>)
 8004aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 8004af4:	2046      	movs	r0, #70	; 0x46
 8004af6:	f003 fd2d 	bl	8008554 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004afe:	4872      	ldr	r0, [pc, #456]	; (8004cc8 <main+0x948>)
 8004b00:	f7ff fb87 	bl	8004212 <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 8004b04:	2046      	movs	r0, #70	; 0x46
 8004b06:	f003 fd25 	bl	8008554 <HAL_Delay>
  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 8004b0a:	f001 fea5 	bl	8006858 <Is_iBus_Throttle_min>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0e6      	beq.n	8004ae2 <main+0x762>
 8004b14:	4b6b      	ldr	r3, [pc, #428]	; (8004cc4 <main+0x944>)
 8004b16:	891b      	ldrh	r3, [r3, #8]
 8004b18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b1c:	d0e1      	beq.n	8004ae2 <main+0x762>
  }

  /*LPS22HH Initial Offset*/
  for(int i=0; i<20; i++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b22:	e03e      	b.n	8004ba2 <main+0x822>
  {
	  if(LPS22HH_DataReady() == 1)
 8004b24:	f7fe f85e 	bl	8002be4 <LPS22HH_DataReady>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d136      	bne.n	8004b9c <main+0x81c>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004b2e:	4867      	ldr	r0, [pc, #412]	; (8004ccc <main+0x94c>)
 8004b30:	f7fe f864 	bl	8002bfc <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004b34:	4866      	ldr	r0, [pc, #408]	; (8004cd0 <main+0x950>)
 8004b36:	f7fe f86e 	bl	8002c16 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw-100.f);
 8004b3a:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <main+0x94c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b46:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004cd4 <main+0x954>
 8004b4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b4e:	4b5f      	ldr	r3, [pc, #380]	; (8004ccc <main+0x94c>)
 8004b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004cd8 <main+0x958>
 8004b60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b64:	eef0 0a67 	vmov.f32	s1, s15
 8004b68:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6c:	f7fe f860 	bl	8002c30 <getAltitude2>
 8004b70:	eef0 7a40 	vmov.f32	s15, s0
 8004b74:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <main+0x94c>)
 8004b76:	edc3 7a02 	vstr	s15, [r3, #8]
		  baro_offset += LPS22HH.baroAlt;
 8004b7a:	4b54      	ldr	r3, [pc, #336]	; (8004ccc <main+0x94c>)
 8004b7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <main+0x95c>)
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b8a:	4b54      	ldr	r3, [pc, #336]	; (8004cdc <main+0x95c>)
 8004b8c:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(200);
 8004b90:	20c8      	movs	r0, #200	; 0xc8
 8004b92:	f003 fcdf 	bl	8008554 <HAL_Delay>

		  baro_cnt++;
 8004b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b98:	3301      	adds	r3, #1
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  for(int i=0; i<20; i++)
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	2b13      	cmp	r3, #19
 8004ba6:	ddbd      	ble.n	8004b24 <main+0x7a4>
	  }
  }

  baro_offset = baro_offset / baro_cnt;
 8004ba8:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <main+0x95c>)
 8004baa:	edd3 6a00 	vldr	s13, [r3]
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bbc:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <main+0x95c>)
 8004bbe:	edc3 7a00 	vstr	s15, [r3]
//
//  gps_height_offset /= gps_cnt;

  /********************* FC Ready to Fly ************************/

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bc6:	4840      	ldr	r0, [pc, #256]	; (8004cc8 <main+0x948>)
 8004bc8:	f7ff fb12 	bl	80041f0 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <main+0x948>)
 8004bce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004bd4:	2064      	movs	r0, #100	; 0x64
 8004bd6:	f003 fcbd 	bl	8008554 <HAL_Delay>
  TIM3->PSC = 1500;
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <main+0x948>)
 8004bdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004be2:	2064      	movs	r0, #100	; 0x64
 8004be4:	f003 fcb6 	bl	8008554 <HAL_Delay>
  TIM3->PSC = 1000;
 8004be8:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <main+0x948>)
 8004bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004bf0:	2064      	movs	r0, #100	; 0x64
 8004bf2:	f003 fcaf 	bl	8008554 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bfa:	4833      	ldr	r0, [pc, #204]	; (8004cc8 <main+0x948>)
 8004bfc:	f7ff fb09 	bl	8004212 <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8004c00:	4837      	ldr	r0, [pc, #220]	; (8004ce0 <main+0x960>)
 8004c02:	f008 fb5b 	bl	800d2bc <puts>
//
//		  XAVIER_Parsing(&nx_rx_buf, &XAVIER);
//	  }

	  /********************* GPS Data Parsing ************************/
	  if(m8n_rx_cplt_flag == 1) // GPS receive checking
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <main+0x964>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d145      	bne.n	8004c9a <main+0x91a>
	  {
		  m8n_rx_cplt_flag == 0;

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 8004c0e:	2124      	movs	r1, #36	; 0x24
 8004c10:	4835      	ldr	r0, [pc, #212]	; (8004ce8 <main+0x968>)
 8004c12:	f7fe f9f5 	bl	8003000 <M8N_UBX_CHKSUM_Check>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13e      	bne.n	8004c9a <main+0x91a>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	4833      	ldr	r0, [pc, #204]	; (8004cec <main+0x96c>)
 8004c20:	f7ff fb68 	bl	80042f4 <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004c24:	4932      	ldr	r1, [pc, #200]	; (8004cf0 <main+0x970>)
 8004c26:	4830      	ldr	r0, [pc, #192]	; (8004ce8 <main+0x968>)
 8004c28:	f7fe fa24 	bl	8003074 <M8N_UBX_NAV_POSLLH_Parsing>
			  posllh.height -= gps_height_offset;
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <main+0x970>)
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <main+0x974>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a2e      	ldr	r2, [pc, #184]	; (8004cf0 <main+0x970>)
 8004c38:	6193      	str	r3, [r2, #24]

			  if((posllh.lon - posllh.lon_prev > 500) || (posllh.lon - posllh.lon_prev < -500)) posllh.lon = posllh.lon_prev;
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <main+0x970>)
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <main+0x970>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c48:	dc07      	bgt.n	8004c5a <main+0x8da>
 8004c4a:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <main+0x970>)
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <main+0x970>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8004c58:	da03      	bge.n	8004c62 <main+0x8e2>
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <main+0x970>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <main+0x970>)
 8004c60:	6093      	str	r3, [r2, #8]
			  if((posllh.lat - posllh.lat_prev > 500) || (posllh.lat - posllh.lat_prev < -500)) posllh.lat = posllh.lat_prev;
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <main+0x970>)
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <main+0x970>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c70:	dc07      	bgt.n	8004c82 <main+0x902>
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <main+0x970>)
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <main+0x970>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8004c80:	da03      	bge.n	8004c8a <main+0x90a>
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <main+0x970>)
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	; (8004cf0 <main+0x970>)
 8004c88:	6113      	str	r3, [r2, #16]

			  posllh.lon_prev = posllh.lon;
 8004c8a:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <main+0x970>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <main+0x970>)
 8004c90:	60d3      	str	r3, [r2, #12]
			  posllh.lat_prev = posllh.lat;
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <main+0x970>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <main+0x970>)
 8004c98:	6153      	str	r3, [r2, #20]
//			  printf(" ", XAVIER.mode);
		  }
	  }

	  /********************* Telemetry Communication ************************/
	  if(telemetry_rx_cplt_flag == 1) //Receive GCS Message
 8004c9a:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <main+0x978>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f040 83a2 	bne.w	80053e8 <main+0x1068>
	  	  {
	  		  telemetry_rx_cplt_flag = 0;
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <main+0x978>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]

	  		  if(iBus.SwA == 1000) //Check FS-i6 Switch A
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <main+0x944>)
 8004cac:	891b      	ldrh	r3, [r3, #8]
 8004cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cb2:	f040 8399 	bne.w	80053e8 <main+0x1068>
	  		  {
	  			  unsigned char chksum = 0xff;
 8004cb6:	23ff      	movs	r3, #255	; 0xff
 8004cb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc0:	e028      	b.n	8004d14 <main+0x994>
 8004cc2:	bf00      	nop
 8004cc4:	20000384 	.word	0x20000384
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	200003d0 	.word	0x200003d0
 8004cd0:	200003d4 	.word	0x200003d4
 8004cd4:	45800000 	.word	0x45800000
 8004cd8:	42c80000 	.word	0x42c80000
 8004cdc:	20000210 	.word	0x20000210
 8004ce0:	08010380 	.word	0x08010380
 8004ce4:	2000027f 	.word	0x2000027f
 8004ce8:	200007ec 	.word	0x200007ec
 8004cec:	40020800 	.word	0x40020800
 8004cf0:	200003e0 	.word	0x200003e0
 8004cf4:	20000214 	.word	0x20000214
 8004cf8:	2000078c 	.word	0x2000078c
 8004cfc:	4aac      	ldr	r2, [pc, #688]	; (8004fb0 <main+0xc30>)
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	4413      	add	r3, r2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	3301      	adds	r3, #1
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	2b12      	cmp	r3, #18
 8004d18:	ddf0      	ble.n	8004cfc <main+0x97c>

	  			  if(chksum == telemetry_rx_buf[19]) //Check checksum of GCS Message
 8004d1a:	4ba5      	ldr	r3, [pc, #660]	; (8004fb0 <main+0xc30>)
 8004d1c:	7cdb      	ldrb	r3, [r3, #19]
 8004d1e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f040 8360 	bne.w	80053e8 <main+0x1068>
	  			  {
	  				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d2c:	48a1      	ldr	r0, [pc, #644]	; (8004fb4 <main+0xc34>)
 8004d2e:	f7ff fa5f 	bl	80041f0 <LL_TIM_CC_EnableChannel>

	  				  TIM3->PSC = 1000;
 8004d32:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <main+0xc34>)
 8004d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d38:	629a      	str	r2, [r3, #40]	; 0x28
	  				  HAL_Delay(10);
 8004d3a:	200a      	movs	r0, #10
 8004d3c:	f003 fc0a 	bl	8008554 <HAL_Delay>

	  				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d44:	489b      	ldr	r0, [pc, #620]	; (8004fb4 <main+0xc34>)
 8004d46:	f7ff fa64 	bl	8004212 <LL_TIM_CC_DisableChannel>

	  				  switch(telemetry_rx_buf[2]) //Check ID of GCS Message
 8004d4a:	4b99      	ldr	r3, [pc, #612]	; (8004fb0 <main+0xc30>)
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	f200 8359 	bhi.w	8005406 <main+0x1086>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <main+0x9dc>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004da1 	.word	0x08004da1
 8004d60:	08004e25 	.word	0x08004e25
 8004d64:	08004ea9 	.word	0x08004ea9
 8004d68:	08004f2d 	.word	0x08004f2d
 8004d6c:	08004ffd 	.word	0x08004ffd
 8004d70:	08005081 	.word	0x08005081
 8004d74:	08005407 	.word	0x08005407
 8004d78:	08005407 	.word	0x08005407
 8004d7c:	08005407 	.word	0x08005407
 8004d80:	08005407 	.word	0x08005407
 8004d84:	08005407 	.word	0x08005407
 8004d88:	08005407 	.word	0x08005407
 8004d8c:	08005407 	.word	0x08005407
 8004d90:	08005407 	.word	0x08005407
 8004d94:	08005407 	.word	0x08005407
 8004d98:	08005407 	.word	0x08005407
 8004d9c:	08005105 	.word	0x08005105
	  				  {
	  				  case 0:
	  					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8004da0:	4b85      	ldr	r3, [pc, #532]	; (8004fb8 <main+0xc38>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a85      	ldr	r2, [pc, #532]	; (8004fbc <main+0xc3c>)
 8004da6:	6013      	str	r3, [r2, #0]
	  					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8004da8:	4b85      	ldr	r3, [pc, #532]	; (8004fc0 <main+0xc40>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a83      	ldr	r2, [pc, #524]	; (8004fbc <main+0xc3c>)
 8004dae:	6053      	str	r3, [r2, #4]
	  					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8004db0:	4b84      	ldr	r3, [pc, #528]	; (8004fc4 <main+0xc44>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a81      	ldr	r2, [pc, #516]	; (8004fbc <main+0xc3c>)
 8004db6:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004db8:	4b7d      	ldr	r3, [pc, #500]	; (8004fb0 <main+0xc30>)
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	4a7f      	ldr	r2, [pc, #508]	; (8004fbc <main+0xc3c>)
 8004dbe:	edd2 7a00 	vldr	s15, [r2]
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	; (8004fbc <main+0xc3c>)
 8004dc4:	ed92 7a01 	vldr	s14, [r2, #4]
 8004dc8:	4a7c      	ldr	r2, [pc, #496]	; (8004fbc <main+0xc3c>)
 8004dca:	edd2 6a02 	vldr	s13, [r2, #8]
 8004dce:	eeb0 1a66 	vmov.f32	s2, s13
 8004dd2:	eef0 0a47 	vmov.f32	s1, s14
 8004dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc f8fe 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004de0:	4b73      	ldr	r3, [pc, #460]	; (8004fb0 <main+0xc30>)
 8004de2:	7898      	ldrb	r0, [r3, #2]
 8004de4:	4b78      	ldr	r3, [pc, #480]	; (8004fc8 <main+0xc48>)
 8004de6:	4a79      	ldr	r2, [pc, #484]	; (8004fcc <main+0xc4c>)
 8004de8:	4974      	ldr	r1, [pc, #464]	; (8004fbc <main+0xc3c>)
 8004dea:	f7fc f98d 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004dee:	4b70      	ldr	r3, [pc, #448]	; (8004fb0 <main+0xc30>)
 8004df0:	789b      	ldrb	r3, [r3, #2]
 8004df2:	4a72      	ldr	r2, [pc, #456]	; (8004fbc <main+0xc3c>)
 8004df4:	edd2 7a00 	vldr	s15, [r2]
 8004df8:	4a70      	ldr	r2, [pc, #448]	; (8004fbc <main+0xc3c>)
 8004dfa:	ed92 7a01 	vldr	s14, [r2, #4]
 8004dfe:	4a6f      	ldr	r2, [pc, #444]	; (8004fbc <main+0xc3c>)
 8004e00:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e04:	eeb0 1a66 	vmov.f32	s2, s13
 8004e08:	eef0 0a47 	vmov.f32	s1, s14
 8004e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e10:	4619      	mov	r1, r3
 8004e12:	486f      	ldr	r0, [pc, #444]	; (8004fd0 <main+0xc50>)
 8004e14:	f001 ff6a 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004e18:	2214      	movs	r2, #20
 8004e1a:	496d      	ldr	r1, [pc, #436]	; (8004fd0 <main+0xc50>)
 8004e1c:	486d      	ldr	r0, [pc, #436]	; (8004fd4 <main+0xc54>)
 8004e1e:	f005 fefa 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 8004e22:	e2f0      	b.n	8005406 <main+0x1086>
	  				  case 1:
	  					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8004e24:	4b64      	ldr	r3, [pc, #400]	; (8004fb8 <main+0xc38>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a64      	ldr	r2, [pc, #400]	; (8004fbc <main+0xc3c>)
 8004e2a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8004e2c:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <main+0xc40>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a62      	ldr	r2, [pc, #392]	; (8004fbc <main+0xc3c>)
 8004e32:	6413      	str	r3, [r2, #64]	; 0x40
	  					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8004e34:	4b63      	ldr	r3, [pc, #396]	; (8004fc4 <main+0xc44>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a60      	ldr	r2, [pc, #384]	; (8004fbc <main+0xc3c>)
 8004e3a:	6453      	str	r3, [r2, #68]	; 0x44
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004e3c:	4b5c      	ldr	r3, [pc, #368]	; (8004fb0 <main+0xc30>)
 8004e3e:	789b      	ldrb	r3, [r3, #2]
 8004e40:	4a5e      	ldr	r2, [pc, #376]	; (8004fbc <main+0xc3c>)
 8004e42:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004e46:	4a5d      	ldr	r2, [pc, #372]	; (8004fbc <main+0xc3c>)
 8004e48:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004e4c:	4a5b      	ldr	r2, [pc, #364]	; (8004fbc <main+0xc3c>)
 8004e4e:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004e52:	eeb0 1a66 	vmov.f32	s2, s13
 8004e56:	eef0 0a47 	vmov.f32	s1, s14
 8004e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc f8bc 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8004e64:	4b52      	ldr	r3, [pc, #328]	; (8004fb0 <main+0xc30>)
 8004e66:	7898      	ldrb	r0, [r3, #2]
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <main+0xc58>)
 8004e6a:	4a5c      	ldr	r2, [pc, #368]	; (8004fdc <main+0xc5c>)
 8004e6c:	495c      	ldr	r1, [pc, #368]	; (8004fe0 <main+0xc60>)
 8004e6e:	f7fc f94b 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004e72:	4b4f      	ldr	r3, [pc, #316]	; (8004fb0 <main+0xc30>)
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	4a51      	ldr	r2, [pc, #324]	; (8004fbc <main+0xc3c>)
 8004e78:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004e7c:	4a4f      	ldr	r2, [pc, #316]	; (8004fbc <main+0xc3c>)
 8004e7e:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004e82:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <main+0xc3c>)
 8004e84:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004e88:	eeb0 1a66 	vmov.f32	s2, s13
 8004e8c:	eef0 0a47 	vmov.f32	s1, s14
 8004e90:	eeb0 0a67 	vmov.f32	s0, s15
 8004e94:	4619      	mov	r1, r3
 8004e96:	484e      	ldr	r0, [pc, #312]	; (8004fd0 <main+0xc50>)
 8004e98:	f001 ff28 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004e9c:	2214      	movs	r2, #20
 8004e9e:	494c      	ldr	r1, [pc, #304]	; (8004fd0 <main+0xc50>)
 8004ea0:	484c      	ldr	r0, [pc, #304]	; (8004fd4 <main+0xc54>)
 8004ea2:	f005 feb8 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 8004ea6:	e2ae      	b.n	8005406 <main+0x1086>
	  				  case 2:
	  					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <main+0xc38>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a4d      	ldr	r2, [pc, #308]	; (8004fe4 <main+0xc64>)
 8004eae:	6013      	str	r3, [r2, #0]
	  					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8004eb0:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <main+0xc40>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	; (8004fe4 <main+0xc64>)
 8004eb6:	6053      	str	r3, [r2, #4]
	  					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8004eb8:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <main+0xc44>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a49      	ldr	r2, [pc, #292]	; (8004fe4 <main+0xc64>)
 8004ebe:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <main+0xc30>)
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	4a47      	ldr	r2, [pc, #284]	; (8004fe4 <main+0xc64>)
 8004ec6:	edd2 7a00 	vldr	s15, [r2]
 8004eca:	4a46      	ldr	r2, [pc, #280]	; (8004fe4 <main+0xc64>)
 8004ecc:	ed92 7a01 	vldr	s14, [r2, #4]
 8004ed0:	4a44      	ldr	r2, [pc, #272]	; (8004fe4 <main+0xc64>)
 8004ed2:	edd2 6a02 	vldr	s13, [r2, #8]
 8004ed6:	eeb0 1a66 	vmov.f32	s2, s13
 8004eda:	eef0 0a47 	vmov.f32	s1, s14
 8004ede:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fc f87a 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <main+0xc30>)
 8004eea:	7898      	ldrb	r0, [r3, #2]
 8004eec:	4b3e      	ldr	r3, [pc, #248]	; (8004fe8 <main+0xc68>)
 8004eee:	4a3f      	ldr	r2, [pc, #252]	; (8004fec <main+0xc6c>)
 8004ef0:	493c      	ldr	r1, [pc, #240]	; (8004fe4 <main+0xc64>)
 8004ef2:	f7fc f909 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <main+0xc30>)
 8004ef8:	789b      	ldrb	r3, [r3, #2]
 8004efa:	4a3a      	ldr	r2, [pc, #232]	; (8004fe4 <main+0xc64>)
 8004efc:	edd2 7a00 	vldr	s15, [r2]
 8004f00:	4a38      	ldr	r2, [pc, #224]	; (8004fe4 <main+0xc64>)
 8004f02:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f06:	4a37      	ldr	r2, [pc, #220]	; (8004fe4 <main+0xc64>)
 8004f08:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f0c:	eeb0 1a66 	vmov.f32	s2, s13
 8004f10:	eef0 0a47 	vmov.f32	s1, s14
 8004f14:	eeb0 0a67 	vmov.f32	s0, s15
 8004f18:	4619      	mov	r1, r3
 8004f1a:	482d      	ldr	r0, [pc, #180]	; (8004fd0 <main+0xc50>)
 8004f1c:	f001 fee6 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004f20:	2214      	movs	r2, #20
 8004f22:	492b      	ldr	r1, [pc, #172]	; (8004fd0 <main+0xc50>)
 8004f24:	482b      	ldr	r0, [pc, #172]	; (8004fd4 <main+0xc54>)
 8004f26:	f005 fe76 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 8004f2a:	e26c      	b.n	8005406 <main+0x1086>
	  				  case 3:
	  					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8004f2c:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <main+0xc38>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <main+0xc64>)
 8004f32:	63d3      	str	r3, [r2, #60]	; 0x3c
	  					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8004f34:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <main+0xc40>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <main+0xc64>)
 8004f3a:	6413      	str	r3, [r2, #64]	; 0x40
	  					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <main+0xc44>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <main+0xc64>)
 8004f42:	6453      	str	r3, [r2, #68]	; 0x44
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <main+0xc30>)
 8004f46:	789b      	ldrb	r3, [r3, #2]
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <main+0xc64>)
 8004f4a:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004f4e:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <main+0xc64>)
 8004f50:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <main+0xc64>)
 8004f56:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004f5a:	eeb0 1a66 	vmov.f32	s2, s13
 8004f5e:	eef0 0a47 	vmov.f32	s1, s14
 8004f62:	eeb0 0a67 	vmov.f32	s0, s15
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc f838 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <main+0xc30>)
 8004f6e:	7898      	ldrb	r0, [r3, #2]
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <main+0xc70>)
 8004f72:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <main+0xc74>)
 8004f74:	4920      	ldr	r1, [pc, #128]	; (8004ff8 <main+0xc78>)
 8004f76:	f7fc f8c7 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <main+0xc30>)
 8004f7c:	789b      	ldrb	r3, [r3, #2]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <main+0xc64>)
 8004f80:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004f84:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <main+0xc64>)
 8004f86:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <main+0xc64>)
 8004f8c:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004f90:	eeb0 1a66 	vmov.f32	s2, s13
 8004f94:	eef0 0a47 	vmov.f32	s1, s14
 8004f98:	eeb0 0a67 	vmov.f32	s0, s15
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <main+0xc50>)
 8004fa0:	f001 fea4 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004fa4:	2214      	movs	r2, #20
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <main+0xc50>)
 8004fa8:	480a      	ldr	r0, [pc, #40]	; (8004fd4 <main+0xc54>)
 8004faa:	f005 fe34 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 8004fae:	e22a      	b.n	8005406 <main+0x1086>
 8004fb0:	20000778 	.word	0x20000778
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	2000077b 	.word	0x2000077b
 8004fbc:	20000670 	.word	0x20000670
 8004fc0:	2000077f 	.word	0x2000077f
 8004fc4:	20000783 	.word	0x20000783
 8004fc8:	20000678 	.word	0x20000678
 8004fcc:	20000674 	.word	0x20000674
 8004fd0:	20000794 	.word	0x20000794
 8004fd4:	20000870 	.word	0x20000870
 8004fd8:	200006b4 	.word	0x200006b4
 8004fdc:	200006b0 	.word	0x200006b0
 8004fe0:	200006ac 	.word	0x200006ac
 8004fe4:	200005f8 	.word	0x200005f8
 8004fe8:	20000600 	.word	0x20000600
 8004fec:	200005fc 	.word	0x200005fc
 8004ff0:	2000063c 	.word	0x2000063c
 8004ff4:	20000638 	.word	0x20000638
 8004ff8:	20000634 	.word	0x20000634
	  				  case 4:
	  					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 8004ffc:	4ba0      	ldr	r3, [pc, #640]	; (8005280 <main+0xf00>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4aa0      	ldr	r2, [pc, #640]	; (8005284 <main+0xf04>)
 8005002:	6013      	str	r3, [r2, #0]
	  					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8005004:	4ba0      	ldr	r3, [pc, #640]	; (8005288 <main+0xf08>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a9e      	ldr	r2, [pc, #632]	; (8005284 <main+0xf04>)
 800500a:	6053      	str	r3, [r2, #4]
	  					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 800500c:	4b9f      	ldr	r3, [pc, #636]	; (800528c <main+0xf0c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a9c      	ldr	r2, [pc, #624]	; (8005284 <main+0xf04>)
 8005012:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005014:	4b9e      	ldr	r3, [pc, #632]	; (8005290 <main+0xf10>)
 8005016:	789b      	ldrb	r3, [r3, #2]
 8005018:	4a9a      	ldr	r2, [pc, #616]	; (8005284 <main+0xf04>)
 800501a:	edd2 7a00 	vldr	s15, [r2]
 800501e:	4a99      	ldr	r2, [pc, #612]	; (8005284 <main+0xf04>)
 8005020:	ed92 7a01 	vldr	s14, [r2, #4]
 8005024:	4a97      	ldr	r2, [pc, #604]	; (8005284 <main+0xf04>)
 8005026:	edd2 6a02 	vldr	s13, [r2, #8]
 800502a:	eeb0 1a66 	vmov.f32	s2, s13
 800502e:	eef0 0a47 	vmov.f32	s1, s14
 8005032:	eeb0 0a67 	vmov.f32	s0, s15
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb ffd0 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 800503c:	4b94      	ldr	r3, [pc, #592]	; (8005290 <main+0xf10>)
 800503e:	7898      	ldrb	r0, [r3, #2]
 8005040:	4b94      	ldr	r3, [pc, #592]	; (8005294 <main+0xf14>)
 8005042:	4a95      	ldr	r2, [pc, #596]	; (8005298 <main+0xf18>)
 8005044:	498f      	ldr	r1, [pc, #572]	; (8005284 <main+0xf04>)
 8005046:	f7fc f85f 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <main+0xf10>)
 800504c:	789b      	ldrb	r3, [r3, #2]
 800504e:	4a8d      	ldr	r2, [pc, #564]	; (8005284 <main+0xf04>)
 8005050:	edd2 7a00 	vldr	s15, [r2]
 8005054:	4a8b      	ldr	r2, [pc, #556]	; (8005284 <main+0xf04>)
 8005056:	ed92 7a01 	vldr	s14, [r2, #4]
 800505a:	4a8a      	ldr	r2, [pc, #552]	; (8005284 <main+0xf04>)
 800505c:	edd2 6a02 	vldr	s13, [r2, #8]
 8005060:	eeb0 1a66 	vmov.f32	s2, s13
 8005064:	eef0 0a47 	vmov.f32	s1, s14
 8005068:	eeb0 0a67 	vmov.f32	s0, s15
 800506c:	4619      	mov	r1, r3
 800506e:	488b      	ldr	r0, [pc, #556]	; (800529c <main+0xf1c>)
 8005070:	f001 fe3c 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005074:	2214      	movs	r2, #20
 8005076:	4989      	ldr	r1, [pc, #548]	; (800529c <main+0xf1c>)
 8005078:	4889      	ldr	r0, [pc, #548]	; (80052a0 <main+0xf20>)
 800507a:	f005 fdcc 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 800507e:	e1c2      	b.n	8005406 <main+0x1086>
	  				  case 5:
	  					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <main+0xf00>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a87      	ldr	r2, [pc, #540]	; (80052a4 <main+0xf24>)
 8005086:	6013      	str	r3, [r2, #0]
	  					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 8005088:	4b7f      	ldr	r3, [pc, #508]	; (8005288 <main+0xf08>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a85      	ldr	r2, [pc, #532]	; (80052a4 <main+0xf24>)
 800508e:	6053      	str	r3, [r2, #4]
	  					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8005090:	4b7e      	ldr	r3, [pc, #504]	; (800528c <main+0xf0c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a83      	ldr	r2, [pc, #524]	; (80052a4 <main+0xf24>)
 8005096:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005098:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <main+0xf10>)
 800509a:	789b      	ldrb	r3, [r3, #2]
 800509c:	4a81      	ldr	r2, [pc, #516]	; (80052a4 <main+0xf24>)
 800509e:	edd2 7a00 	vldr	s15, [r2]
 80050a2:	4a80      	ldr	r2, [pc, #512]	; (80052a4 <main+0xf24>)
 80050a4:	ed92 7a01 	vldr	s14, [r2, #4]
 80050a8:	4a7e      	ldr	r2, [pc, #504]	; (80052a4 <main+0xf24>)
 80050aa:	edd2 6a02 	vldr	s13, [r2, #8]
 80050ae:	eeb0 1a66 	vmov.f32	s2, s13
 80050b2:	eef0 0a47 	vmov.f32	s1, s14
 80050b6:	eeb0 0a67 	vmov.f32	s0, s15
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fb ff8e 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 80050c0:	4b73      	ldr	r3, [pc, #460]	; (8005290 <main+0xf10>)
 80050c2:	7898      	ldrb	r0, [r3, #2]
 80050c4:	4b78      	ldr	r3, [pc, #480]	; (80052a8 <main+0xf28>)
 80050c6:	4a79      	ldr	r2, [pc, #484]	; (80052ac <main+0xf2c>)
 80050c8:	4976      	ldr	r1, [pc, #472]	; (80052a4 <main+0xf24>)
 80050ca:	f7fc f81d 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80050ce:	4b70      	ldr	r3, [pc, #448]	; (8005290 <main+0xf10>)
 80050d0:	789b      	ldrb	r3, [r3, #2]
 80050d2:	4a74      	ldr	r2, [pc, #464]	; (80052a4 <main+0xf24>)
 80050d4:	edd2 7a00 	vldr	s15, [r2]
 80050d8:	4a72      	ldr	r2, [pc, #456]	; (80052a4 <main+0xf24>)
 80050da:	ed92 7a01 	vldr	s14, [r2, #4]
 80050de:	4a71      	ldr	r2, [pc, #452]	; (80052a4 <main+0xf24>)
 80050e0:	edd2 6a02 	vldr	s13, [r2, #8]
 80050e4:	eeb0 1a66 	vmov.f32	s2, s13
 80050e8:	eef0 0a47 	vmov.f32	s1, s14
 80050ec:	eeb0 0a67 	vmov.f32	s0, s15
 80050f0:	4619      	mov	r1, r3
 80050f2:	486a      	ldr	r0, [pc, #424]	; (800529c <main+0xf1c>)
 80050f4:	f001 fdfa 	bl	8006cec <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80050f8:	2214      	movs	r2, #20
 80050fa:	4968      	ldr	r1, [pc, #416]	; (800529c <main+0xf1c>)
 80050fc:	4868      	ldr	r0, [pc, #416]	; (80052a0 <main+0xf20>)
 80050fe:	f005 fd8a 	bl	800ac16 <HAL_UART_Transmit_IT>
	  					  break;
 8005102:	e180      	b.n	8005406 <main+0x1086>
	  				  case 0x10:
	  					  switch(telemetry_rx_buf[3]) //Check PID Gain ID of GCS PID Gain Request Message
 8005104:	4b62      	ldr	r3, [pc, #392]	; (8005290 <main+0xf10>)
 8005106:	78db      	ldrb	r3, [r3, #3]
 8005108:	2b06      	cmp	r3, #6
 800510a:	f200 817b 	bhi.w	8005404 <main+0x1084>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <main+0xd94>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005131 	.word	0x08005131
 8005118:	08005169 	.word	0x08005169
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051d9 	.word	0x080051d9
 8005124:	08005211 	.word	0x08005211
 8005128:	08005249 	.word	0x08005249
 800512c:	080052b9 	.word	0x080052b9
	  					  {
	  					  case 0:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8005130:	4b57      	ldr	r3, [pc, #348]	; (8005290 <main+0xf10>)
 8005132:	78db      	ldrb	r3, [r3, #3]
 8005134:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <main+0xf30>)
 8005136:	edd2 7a00 	vldr	s15, [r2]
 800513a:	4a5d      	ldr	r2, [pc, #372]	; (80052b0 <main+0xf30>)
 800513c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005140:	4a5b      	ldr	r2, [pc, #364]	; (80052b0 <main+0xf30>)
 8005142:	edd2 6a02 	vldr	s13, [r2, #8]
 8005146:	eeb0 1a66 	vmov.f32	s2, s13
 800514a:	eef0 0a47 	vmov.f32	s1, s14
 800514e:	eeb0 0a67 	vmov.f32	s0, s15
 8005152:	4619      	mov	r1, r3
 8005154:	4851      	ldr	r0, [pc, #324]	; (800529c <main+0xf1c>)
 8005156:	f001 fdc9 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800515a:	230a      	movs	r3, #10
 800515c:	2214      	movs	r2, #20
 800515e:	494f      	ldr	r1, [pc, #316]	; (800529c <main+0xf1c>)
 8005160:	484f      	ldr	r0, [pc, #316]	; (80052a0 <main+0xf20>)
 8005162:	f005 fcc6 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 8005166:	e13e      	b.n	80053e6 <main+0x1066>
	  					  case 1:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 8005168:	4b49      	ldr	r3, [pc, #292]	; (8005290 <main+0xf10>)
 800516a:	78db      	ldrb	r3, [r3, #3]
 800516c:	4a50      	ldr	r2, [pc, #320]	; (80052b0 <main+0xf30>)
 800516e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005172:	4a4f      	ldr	r2, [pc, #316]	; (80052b0 <main+0xf30>)
 8005174:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8005178:	4a4d      	ldr	r2, [pc, #308]	; (80052b0 <main+0xf30>)
 800517a:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 800517e:	eeb0 1a66 	vmov.f32	s2, s13
 8005182:	eef0 0a47 	vmov.f32	s1, s14
 8005186:	eeb0 0a67 	vmov.f32	s0, s15
 800518a:	4619      	mov	r1, r3
 800518c:	4843      	ldr	r0, [pc, #268]	; (800529c <main+0xf1c>)
 800518e:	f001 fdad 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005192:	230a      	movs	r3, #10
 8005194:	2214      	movs	r2, #20
 8005196:	4941      	ldr	r1, [pc, #260]	; (800529c <main+0xf1c>)
 8005198:	4841      	ldr	r0, [pc, #260]	; (80052a0 <main+0xf20>)
 800519a:	f005 fcaa 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 800519e:	e122      	b.n	80053e6 <main+0x1066>
	  					  case 2:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 80051a0:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <main+0xf10>)
 80051a2:	78db      	ldrb	r3, [r3, #3]
 80051a4:	4a43      	ldr	r2, [pc, #268]	; (80052b4 <main+0xf34>)
 80051a6:	edd2 7a00 	vldr	s15, [r2]
 80051aa:	4a42      	ldr	r2, [pc, #264]	; (80052b4 <main+0xf34>)
 80051ac:	ed92 7a01 	vldr	s14, [r2, #4]
 80051b0:	4a40      	ldr	r2, [pc, #256]	; (80052b4 <main+0xf34>)
 80051b2:	edd2 6a02 	vldr	s13, [r2, #8]
 80051b6:	eeb0 1a66 	vmov.f32	s2, s13
 80051ba:	eef0 0a47 	vmov.f32	s1, s14
 80051be:	eeb0 0a67 	vmov.f32	s0, s15
 80051c2:	4619      	mov	r1, r3
 80051c4:	4835      	ldr	r0, [pc, #212]	; (800529c <main+0xf1c>)
 80051c6:	f001 fd91 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80051ca:	230a      	movs	r3, #10
 80051cc:	2214      	movs	r2, #20
 80051ce:	4933      	ldr	r1, [pc, #204]	; (800529c <main+0xf1c>)
 80051d0:	4833      	ldr	r0, [pc, #204]	; (80052a0 <main+0xf20>)
 80051d2:	f005 fc8e 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 80051d6:	e106      	b.n	80053e6 <main+0x1066>
	  					  case 3:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80051d8:	4b2d      	ldr	r3, [pc, #180]	; (8005290 <main+0xf10>)
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	4a35      	ldr	r2, [pc, #212]	; (80052b4 <main+0xf34>)
 80051de:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <main+0xf34>)
 80051e4:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 80051e8:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <main+0xf34>)
 80051ea:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 80051ee:	eeb0 1a66 	vmov.f32	s2, s13
 80051f2:	eef0 0a47 	vmov.f32	s1, s14
 80051f6:	eeb0 0a67 	vmov.f32	s0, s15
 80051fa:	4619      	mov	r1, r3
 80051fc:	4827      	ldr	r0, [pc, #156]	; (800529c <main+0xf1c>)
 80051fe:	f001 fd75 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005202:	230a      	movs	r3, #10
 8005204:	2214      	movs	r2, #20
 8005206:	4925      	ldr	r1, [pc, #148]	; (800529c <main+0xf1c>)
 8005208:	4825      	ldr	r0, [pc, #148]	; (80052a0 <main+0xf20>)
 800520a:	f005 fc72 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 800520e:	e0ea      	b.n	80053e6 <main+0x1066>
	  					  case 4:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005210:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <main+0xf10>)
 8005212:	78db      	ldrb	r3, [r3, #3]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <main+0xf04>)
 8005216:	edd2 7a00 	vldr	s15, [r2]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <main+0xf04>)
 800521c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <main+0xf04>)
 8005222:	edd2 6a02 	vldr	s13, [r2, #8]
 8005226:	eeb0 1a66 	vmov.f32	s2, s13
 800522a:	eef0 0a47 	vmov.f32	s1, s14
 800522e:	eeb0 0a67 	vmov.f32	s0, s15
 8005232:	4619      	mov	r1, r3
 8005234:	4819      	ldr	r0, [pc, #100]	; (800529c <main+0xf1c>)
 8005236:	f001 fd59 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800523a:	230a      	movs	r3, #10
 800523c:	2214      	movs	r2, #20
 800523e:	4917      	ldr	r1, [pc, #92]	; (800529c <main+0xf1c>)
 8005240:	4817      	ldr	r0, [pc, #92]	; (80052a0 <main+0xf20>)
 8005242:	f005 fc56 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 8005246:	e0ce      	b.n	80053e6 <main+0x1066>
	  					  case 5:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <main+0xf10>)
 800524a:	78db      	ldrb	r3, [r3, #3]
 800524c:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <main+0xf24>)
 800524e:	edd2 7a00 	vldr	s15, [r2]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <main+0xf24>)
 8005254:	ed92 7a01 	vldr	s14, [r2, #4]
 8005258:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <main+0xf24>)
 800525a:	edd2 6a02 	vldr	s13, [r2, #8]
 800525e:	eeb0 1a66 	vmov.f32	s2, s13
 8005262:	eef0 0a47 	vmov.f32	s1, s14
 8005266:	eeb0 0a67 	vmov.f32	s0, s15
 800526a:	4619      	mov	r1, r3
 800526c:	480b      	ldr	r0, [pc, #44]	; (800529c <main+0xf1c>)
 800526e:	f001 fd3d 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005272:	230a      	movs	r3, #10
 8005274:	2214      	movs	r2, #20
 8005276:	4909      	ldr	r1, [pc, #36]	; (800529c <main+0xf1c>)
 8005278:	4809      	ldr	r0, [pc, #36]	; (80052a0 <main+0xf20>)
 800527a:	f005 fc3a 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 800527e:	e0b2      	b.n	80053e6 <main+0x1066>
 8005280:	2000077b 	.word	0x2000077b
 8005284:	200005bc 	.word	0x200005bc
 8005288:	2000077f 	.word	0x2000077f
 800528c:	20000783 	.word	0x20000783
 8005290:	20000778 	.word	0x20000778
 8005294:	200005c4 	.word	0x200005c4
 8005298:	200005c0 	.word	0x200005c0
 800529c:	20000794 	.word	0x20000794
 80052a0:	20000870 	.word	0x20000870
 80052a4:	20000418 	.word	0x20000418
 80052a8:	20000420 	.word	0x20000420
 80052ac:	2000041c 	.word	0x2000041c
 80052b0:	20000670 	.word	0x20000670
 80052b4:	200005f8 	.word	0x200005f8
	  					  case 6:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80052b8:	4b4c      	ldr	r3, [pc, #304]	; (80053ec <main+0x106c>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	4b4b      	ldr	r3, [pc, #300]	; (80053ec <main+0x106c>)
 80052c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <main+0x106c>)
 80052c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80052ca:	eeb0 1a66 	vmov.f32	s2, s13
 80052ce:	eef0 0a47 	vmov.f32	s1, s14
 80052d2:	eeb0 0a67 	vmov.f32	s0, s15
 80052d6:	2100      	movs	r1, #0
 80052d8:	4845      	ldr	r0, [pc, #276]	; (80053f0 <main+0x1070>)
 80052da:	f001 fd07 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80052de:	230a      	movs	r3, #10
 80052e0:	2214      	movs	r2, #20
 80052e2:	4943      	ldr	r1, [pc, #268]	; (80053f0 <main+0x1070>)
 80052e4:	4843      	ldr	r0, [pc, #268]	; (80053f4 <main+0x1074>)
 80052e6:	f005 fc04 	bl	800aaf2 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 80052ea:	4b40      	ldr	r3, [pc, #256]	; (80053ec <main+0x106c>)
 80052ec:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80052f0:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <main+0x106c>)
 80052f2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80052f6:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <main+0x106c>)
 80052f8:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80052fc:	eeb0 1a66 	vmov.f32	s2, s13
 8005300:	eef0 0a47 	vmov.f32	s1, s14
 8005304:	eeb0 0a67 	vmov.f32	s0, s15
 8005308:	2101      	movs	r1, #1
 800530a:	4839      	ldr	r0, [pc, #228]	; (80053f0 <main+0x1070>)
 800530c:	f001 fcee 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005310:	230a      	movs	r3, #10
 8005312:	2214      	movs	r2, #20
 8005314:	4936      	ldr	r1, [pc, #216]	; (80053f0 <main+0x1070>)
 8005316:	4837      	ldr	r0, [pc, #220]	; (80053f4 <main+0x1074>)
 8005318:	f005 fbeb 	bl	800aaf2 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800531c:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <main+0x1078>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	4b35      	ldr	r3, [pc, #212]	; (80053f8 <main+0x1078>)
 8005324:	ed93 7a01 	vldr	s14, [r3, #4]
 8005328:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <main+0x1078>)
 800532a:	edd3 6a02 	vldr	s13, [r3, #8]
 800532e:	eeb0 1a66 	vmov.f32	s2, s13
 8005332:	eef0 0a47 	vmov.f32	s1, s14
 8005336:	eeb0 0a67 	vmov.f32	s0, s15
 800533a:	2102      	movs	r1, #2
 800533c:	482c      	ldr	r0, [pc, #176]	; (80053f0 <main+0x1070>)
 800533e:	f001 fcd5 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005342:	230a      	movs	r3, #10
 8005344:	2214      	movs	r2, #20
 8005346:	492a      	ldr	r1, [pc, #168]	; (80053f0 <main+0x1070>)
 8005348:	482a      	ldr	r0, [pc, #168]	; (80053f4 <main+0x1074>)
 800534a:	f005 fbd2 	bl	800aaf2 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <main+0x1078>)
 8005350:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <main+0x1078>)
 8005356:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800535a:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <main+0x1078>)
 800535c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8005360:	eeb0 1a66 	vmov.f32	s2, s13
 8005364:	eef0 0a47 	vmov.f32	s1, s14
 8005368:	eeb0 0a67 	vmov.f32	s0, s15
 800536c:	2103      	movs	r1, #3
 800536e:	4820      	ldr	r0, [pc, #128]	; (80053f0 <main+0x1070>)
 8005370:	f001 fcbc 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005374:	230a      	movs	r3, #10
 8005376:	2214      	movs	r2, #20
 8005378:	491d      	ldr	r1, [pc, #116]	; (80053f0 <main+0x1070>)
 800537a:	481e      	ldr	r0, [pc, #120]	; (80053f4 <main+0x1074>)
 800537c:	f005 fbb9 	bl	800aaf2 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005380:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <main+0x107c>)
 8005382:	edd3 7a00 	vldr	s15, [r3]
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <main+0x107c>)
 8005388:	ed93 7a01 	vldr	s14, [r3, #4]
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <main+0x107c>)
 800538e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005392:	eeb0 1a66 	vmov.f32	s2, s13
 8005396:	eef0 0a47 	vmov.f32	s1, s14
 800539a:	eeb0 0a67 	vmov.f32	s0, s15
 800539e:	2104      	movs	r1, #4
 80053a0:	4813      	ldr	r0, [pc, #76]	; (80053f0 <main+0x1070>)
 80053a2:	f001 fca3 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053a6:	230a      	movs	r3, #10
 80053a8:	2214      	movs	r2, #20
 80053aa:	4911      	ldr	r1, [pc, #68]	; (80053f0 <main+0x1070>)
 80053ac:	4811      	ldr	r0, [pc, #68]	; (80053f4 <main+0x1074>)
 80053ae:	f005 fba0 	bl	800aaf2 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <main+0x1080>)
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <main+0x1080>)
 80053ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <main+0x1080>)
 80053c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80053c4:	eeb0 1a66 	vmov.f32	s2, s13
 80053c8:	eef0 0a47 	vmov.f32	s1, s14
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	2105      	movs	r1, #5
 80053d2:	4807      	ldr	r0, [pc, #28]	; (80053f0 <main+0x1070>)
 80053d4:	f001 fc8a 	bl	8006cec <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053d8:	230a      	movs	r3, #10
 80053da:	2214      	movs	r2, #20
 80053dc:	4904      	ldr	r1, [pc, #16]	; (80053f0 <main+0x1070>)
 80053de:	4805      	ldr	r0, [pc, #20]	; (80053f4 <main+0x1074>)
 80053e0:	f005 fb87 	bl	800aaf2 <HAL_UART_Transmit>
	  						  break;
 80053e4:	bf00      	nop
	  					  }
	  					  break;
 80053e6:	e00d      	b.n	8005404 <main+0x1084>
	  				  }
	  			  }
 80053e8:	bf00      	nop
 80053ea:	e00c      	b.n	8005406 <main+0x1086>
 80053ec:	20000670 	.word	0x20000670
 80053f0:	20000794 	.word	0x20000794
 80053f4:	20000870 	.word	0x20000870
 80053f8:	200005f8 	.word	0x200005f8
 80053fc:	200005bc 	.word	0x200005bc
 8005400:	20000418 	.word	0x20000418
	  					  break;
 8005404:	bf00      	nop
	  		  }
	  	  }


	  /********************* Flight Mode Detection / ESC Control / PID Calculation ************************/
	  if(tim7_1ms_flag==1)
 8005406:	4ba1      	ldr	r3, [pc, #644]	; (800568c <main+0x130c>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b01      	cmp	r3, #1
 800540c:	f040 8702 	bne.w	8006214 <main+0x1e94>
	  {
		  tim7_1ms_flag = 0;
 8005410:	4b9e      	ldr	r3, [pc, #632]	; (800568c <main+0x130c>)
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]

		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500)*0.07f, BNO080_Pitch, ICM20602.gyro_x);
 8005416:	4b9e      	ldr	r3, [pc, #632]	; (8005690 <main+0x1310>)
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005426:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8005694 <main+0x1314>
 800542a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542e:	4b9a      	ldr	r3, [pc, #616]	; (8005698 <main+0x1318>)
 8005430:	ed93 7a00 	vldr	s14, [r3]
 8005434:	4b99      	ldr	r3, [pc, #612]	; (800569c <main+0x131c>)
 8005436:	edd3 6a07 	vldr	s13, [r3, #28]
 800543a:	eeb0 1a66 	vmov.f32	s2, s13
 800543e:	eef0 0a47 	vmov.f32	s1, s14
 8005442:	eeb0 0a67 	vmov.f32	s0, s15
 8005446:	4896      	ldr	r0, [pc, #600]	; (80056a0 <main+0x1320>)
 8005448:	f7fd fecc 	bl	80031e4 <Double_Roll_Pitch_PID_Calculation>
		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500)*0.07f, BNO080_Roll, ICM20602.gyro_y);
 800544c:	4b90      	ldr	r3, [pc, #576]	; (8005690 <main+0x1310>)
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8005694 <main+0x1314>
 8005460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005464:	4b8f      	ldr	r3, [pc, #572]	; (80056a4 <main+0x1324>)
 8005466:	ed93 7a00 	vldr	s14, [r3]
 800546a:	4b8c      	ldr	r3, [pc, #560]	; (800569c <main+0x131c>)
 800546c:	edd3 6a08 	vldr	s13, [r3, #32]
 8005470:	eeb0 1a66 	vmov.f32	s2, s13
 8005474:	eef0 0a47 	vmov.f32	s1, s14
 8005478:	eeb0 0a67 	vmov.f32	s0, s15
 800547c:	488a      	ldr	r0, [pc, #552]	; (80056a8 <main+0x1328>)
 800547e:	f7fd feb1 	bl	80031e4 <Double_Roll_Pitch_PID_Calculation>

		  if(iBus.SwA == 2000 && iBus.SwB == 1000 && iBus.SwD == 2000 && iBus.LV < 1550 && iBus.LV > 1450) //Altitude Holding Mode
 8005482:	4b83      	ldr	r3, [pc, #524]	; (8005690 <main+0x1310>)
 8005484:	891b      	ldrh	r3, [r3, #8]
 8005486:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800548a:	f040 81f3 	bne.w	8005874 <main+0x14f4>
 800548e:	4b80      	ldr	r3, [pc, #512]	; (8005690 <main+0x1310>)
 8005490:	895b      	ldrh	r3, [r3, #10]
 8005492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005496:	f040 81ed 	bne.w	8005874 <main+0x14f4>
 800549a:	4b7d      	ldr	r3, [pc, #500]	; (8005690 <main+0x1310>)
 800549c:	89db      	ldrh	r3, [r3, #14]
 800549e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054a2:	f040 81e7 	bne.w	8005874 <main+0x14f4>
 80054a6:	4b7a      	ldr	r3, [pc, #488]	; (8005690 <main+0x1310>)
 80054a8:	889b      	ldrh	r3, [r3, #4]
 80054aa:	f240 620d 	movw	r2, #1549	; 0x60d
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f200 81e0 	bhi.w	8005874 <main+0x14f4>
 80054b4:	4b76      	ldr	r3, [pc, #472]	; (8005690 <main+0x1310>)
 80054b6:	889b      	ldrh	r3, [r3, #4]
 80054b8:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80054bc:	4293      	cmp	r3, r2
 80054be:	f240 81d9 	bls.w	8005874 <main+0x14f4>
		  {
			  if(iBus.LV < 1030 || motor_arming_flag == 0)
 80054c2:	4b73      	ldr	r3, [pc, #460]	; (8005690 <main+0x1310>)
 80054c4:	889b      	ldrh	r3, [r3, #4]
 80054c6:	f240 4205 	movw	r2, #1029	; 0x405
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d903      	bls.n	80054d6 <main+0x1156>
 80054ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <main+0x115a>
			  {
				  Reset_All_PID_Integrator();
 80054d6:	f7fe f8dd 	bl	8003694 <Reset_All_PID_Integrator>
			  }

			  Double_Altitude_PID_Calculation(&altitude, last_altitude, actual_pressure_fast);
 80054da:	4b74      	ldr	r3, [pc, #464]	; (80056ac <main+0x132c>)
 80054dc:	edd3 7a00 	vldr	s15, [r3]
 80054e0:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <main+0x1330>)
 80054e2:	ed93 7a00 	vldr	s14, [r3]
 80054e6:	eef0 0a47 	vmov.f32	s1, s14
 80054ea:	eeb0 0a67 	vmov.f32	s0, s15
 80054ee:	4871      	ldr	r0, [pc, #452]	; (80056b4 <main+0x1334>)
 80054f0:	f7fe f910 	bl	8003714 <Double_Altitude_PID_Calculation>

			  if(iBus.LH < 1485 || iBus.LH > 1515)
 80054f4:	4b66      	ldr	r3, [pc, #408]	; (8005690 <main+0x1310>)
 80054f6:	88db      	ldrh	r3, [r3, #6]
 80054f8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <main+0x118e>
 8005500:	4b63      	ldr	r3, [pc, #396]	; (8005690 <main+0x1310>)
 8005502:	88db      	ldrh	r3, [r3, #6]
 8005504:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8005508:	4293      	cmp	r3, r2
 800550a:	f240 80e3 	bls.w	80056d4 <main+0x1354>
			  {
			  yaw_heading_reference = BNO080_Yaw;
 800550e:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <main+0x1338>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH-1500), ICM20602.gyro_z);
 8005514:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <main+0x1310>)
 8005516:	88db      	ldrh	r3, [r3, #6]
 8005518:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005524:	4b5d      	ldr	r3, [pc, #372]	; (800569c <main+0x131c>)
 8005526:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800552a:	eef0 0a47 	vmov.f32	s1, s14
 800552e:	eeb0 0a67 	vmov.f32	s0, s15
 8005532:	4862      	ldr	r0, [pc, #392]	; (80056bc <main+0x133c>)
 8005534:	f7fe f82a 	bl	800358c <Single_Yaw_Rate_PID_Calculation>

	  		  ccr1 = 84000 + landing_throttle - pitch.in.pid_result + roll.in.pid_result -yaw_rate.pid_result+altitude.in.pid_result;
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800553e:	3320      	adds	r3, #32
 8005540:	ee07 3a90 	vmov	s15, r3
 8005544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005548:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <main+0x1320>)
 800554a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800554e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005552:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <main+0x1328>)
 8005554:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800555c:	4b57      	ldr	r3, [pc, #348]	; (80056bc <main+0x133c>)
 800555e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005566:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <main+0x1334>)
 8005568:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800556c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005574:	ee17 2a90 	vmov	r2, s15
 8005578:	4b51      	ldr	r3, [pc, #324]	; (80056c0 <main+0x1340>)
 800557a:	601a      	str	r2, [r3, #0]
	  		  ccr2 = 84000 + landing_throttle + pitch.in.pid_result + roll.in.pid_result +yaw_rate.pid_result+altitude.in.pid_result;
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005582:	3320      	adds	r3, #32
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800558c:	4b44      	ldr	r3, [pc, #272]	; (80056a0 <main+0x1320>)
 800558e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005596:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <main+0x1328>)
 8005598:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800559c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a0:	4b46      	ldr	r3, [pc, #280]	; (80056bc <main+0x133c>)
 80055a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055aa:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <main+0x1334>)
 80055ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b8:	ee17 2a90 	vmov	r2, s15
 80055bc:	4b41      	ldr	r3, [pc, #260]	; (80056c4 <main+0x1344>)
 80055be:	601a      	str	r2, [r3, #0]
	  		  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 80055c0:	4b40      	ldr	r3, [pc, #256]	; (80056c4 <main+0x1344>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055cc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80056c8 <main+0x1348>
 80055d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d8:	ee17 2a90 	vmov	r2, s15
 80055dc:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <main+0x1344>)
 80055de:	601a      	str	r2, [r3, #0]
	  		  ccr3 = 84000 + landing_throttle + pitch.in.pid_result - roll.in.pid_result -yaw_rate.pid_result+altitude.in.pid_result;
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80055e6:	3320      	adds	r3, #32
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <main+0x1320>)
 80055f2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <main+0x1328>)
 80055fc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005604:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <main+0x133c>)
 8005606:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800560a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <main+0x1334>)
 8005610:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 2a90 	vmov	r2, s15
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <main+0x134c>)
 8005622:	601a      	str	r2, [r3, #0]
	  		  ccr4 = 84000 + landing_throttle - pitch.in.pid_result - roll.in.pid_result +yaw_rate.pid_result+altitude.in.pid_result;
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800562a:	3320      	adds	r3, #32
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <main+0x1320>)
 8005636:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800563a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800563e:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <main+0x1328>)
 8005640:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <main+0x133c>)
 800564a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800564e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <main+0x1334>)
 8005654:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800565c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005660:	ee17 2a90 	vmov	r2, s15
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <main+0x1350>)
 8005666:	601a      	str	r2, [r3, #0]
	  		  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <main+0x1350>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005674:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80056c8 <main+0x1348>
 8005678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005680:	ee17 2a90 	vmov	r2, s15
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <main+0x1350>)
 8005686:	601a      	str	r2, [r3, #0]
			  if(iBus.LH < 1485 || iBus.LH > 1515)
 8005688:	f000 bdb9 	b.w	80061fe <main+0x1e7e>
 800568c:	20000282 	.word	0x20000282
 8005690:	20000384 	.word	0x20000384
 8005694:	3d8f5c29 	.word	0x3d8f5c29
 8005698:	200006f0 	.word	0x200006f0
 800569c:	200003a8 	.word	0x200003a8
 80056a0:	200005f8 	.word	0x200005f8
 80056a4:	200006e8 	.word	0x200006e8
 80056a8:	20000670 	.word	0x20000670
 80056ac:	20000760 	.word	0x20000760
 80056b0:	20000270 	.word	0x20000270
 80056b4:	20000544 	.word	0x20000544
 80056b8:	200006ec 	.word	0x200006ec
 80056bc:	20000418 	.word	0x20000418
 80056c0:	2000075c 	.word	0x2000075c
 80056c4:	20000768 	.word	0x20000768
 80056c8:	3f68f5c3 	.word	0x3f68f5c3
 80056cc:	20000790 	.word	0x20000790
 80056d0:	2000076c 	.word	0x2000076c
			  }
			  else
			  {
			  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 80056d4:	4b5c      	ldr	r3, [pc, #368]	; (8005848 <main+0x14c8>)
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	4b5c      	ldr	r3, [pc, #368]	; (800584c <main+0x14cc>)
 80056dc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80056e0:	eeb0 1a47 	vmov.f32	s2, s14
 80056e4:	eef0 0a67 	vmov.f32	s1, s15
 80056e8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80056ec:	4858      	ldr	r0, [pc, #352]	; (8005850 <main+0x14d0>)
 80056ee:	f7fd feb3 	bl	8003458 <Single_Yaw_Heading_PID_Calculation>
			  ccr1 = 84000 + landing_throttle - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80056f8:	3320      	adds	r3, #32
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005702:	4b54      	ldr	r3, [pc, #336]	; (8005854 <main+0x14d4>)
 8005704:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800570c:	4b52      	ldr	r3, [pc, #328]	; (8005858 <main+0x14d8>)
 800570e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005716:	4b4e      	ldr	r3, [pc, #312]	; (8005850 <main+0x14d0>)
 8005718:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800571c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005720:	4b4e      	ldr	r3, [pc, #312]	; (800585c <main+0x14dc>)
 8005722:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572e:	ee17 2a90 	vmov	r2, s15
 8005732:	4b4b      	ldr	r3, [pc, #300]	; (8005860 <main+0x14e0>)
 8005734:	601a      	str	r2, [r3, #0]
			  ccr2 = 84000 + landing_throttle + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800573c:	3320      	adds	r3, #32
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005746:	4b43      	ldr	r3, [pc, #268]	; (8005854 <main+0x14d4>)
 8005748:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800574c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005750:	4b41      	ldr	r3, [pc, #260]	; (8005858 <main+0x14d8>)
 8005752:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575a:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <main+0x14d0>)
 800575c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005764:	4b3d      	ldr	r3, [pc, #244]	; (800585c <main+0x14dc>)
 8005766:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800576a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800576e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <main+0x14e4>)
 8005778:	601a      	str	r2, [r3, #0]
			  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 800577a:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <main+0x14e4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005868 <main+0x14e8>
 800578a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005792:	ee17 2a90 	vmov	r2, s15
 8005796:	4b33      	ldr	r3, [pc, #204]	; (8005864 <main+0x14e4>)
 8005798:	601a      	str	r2, [r3, #0]
			  ccr3 = 84000 + landing_throttle + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80057a0:	3320      	adds	r3, #32
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057aa:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <main+0x14d4>)
 80057ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057b4:	4b28      	ldr	r3, [pc, #160]	; (8005858 <main+0x14d8>)
 80057b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <main+0x14d0>)
 80057c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <main+0x14dc>)
 80057ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d6:	ee17 2a90 	vmov	r2, s15
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <main+0x14ec>)
 80057dc:	601a      	str	r2, [r3, #0]
			  ccr4 = 84000 + landing_throttle - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80057e4:	3320      	adds	r3, #32
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <main+0x14d4>)
 80057f0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <main+0x14d8>)
 80057fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <main+0x14d0>)
 8005804:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <main+0x14dc>)
 800580e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581a:	ee17 2a90 	vmov	r2, s15
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <main+0x14f0>)
 8005820:	601a      	str	r2, [r3, #0]
			  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <main+0x14f0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005868 <main+0x14e8>
 8005832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800583a:	ee17 2a90 	vmov	r2, s15
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <main+0x14f0>)
 8005840:	601a      	str	r2, [r3, #0]
			  if(iBus.LH < 1485 || iBus.LH > 1515)
 8005842:	f000 bcdc 	b.w	80061fe <main+0x1e7e>
 8005846:	bf00      	nop
 8005848:	200006ec 	.word	0x200006ec
 800584c:	200003a8 	.word	0x200003a8
 8005850:	200005bc 	.word	0x200005bc
 8005854:	200005f8 	.word	0x200005f8
 8005858:	20000670 	.word	0x20000670
 800585c:	20000544 	.word	0x20000544
 8005860:	2000075c 	.word	0x2000075c
 8005864:	20000768 	.word	0x20000768
 8005868:	3f68f5c3 	.word	0x3f68f5c3
 800586c:	20000790 	.word	0x20000790
 8005870:	2000076c 	.word	0x2000076c
			  }
		  }
		  else if(iBus.SwA == 2000 && iBus.SwB == 2000 && iBus.LV < 1550 && iBus.LV > 1450) //GPS holding Mode
 8005874:	4b87      	ldr	r3, [pc, #540]	; (8005a94 <main+0x1714>)
 8005876:	891b      	ldrh	r3, [r3, #8]
 8005878:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800587c:	f040 812a 	bne.w	8005ad4 <main+0x1754>
 8005880:	4b84      	ldr	r3, [pc, #528]	; (8005a94 <main+0x1714>)
 8005882:	895b      	ldrh	r3, [r3, #10]
 8005884:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005888:	f040 8124 	bne.w	8005ad4 <main+0x1754>
 800588c:	4b81      	ldr	r3, [pc, #516]	; (8005a94 <main+0x1714>)
 800588e:	889b      	ldrh	r3, [r3, #4]
 8005890:	f240 620d 	movw	r2, #1549	; 0x60d
 8005894:	4293      	cmp	r3, r2
 8005896:	f200 811d 	bhi.w	8005ad4 <main+0x1754>
 800589a:	4b7e      	ldr	r3, [pc, #504]	; (8005a94 <main+0x1714>)
 800589c:	889b      	ldrh	r3, [r3, #4]
 800589e:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80058a2:	4293      	cmp	r3, r2
 80058a4:	f240 8116 	bls.w	8005ad4 <main+0x1754>
		  	  {
		  		  Double_GPS_PID_Calculation(&gps_lon, last_lon, posllh.lon);
 80058a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	4b79      	ldr	r3, [pc, #484]	; (8005a98 <main+0x1718>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	ee07 3a10 	vmov	s14, r3
 80058ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058be:	eef0 0a47 	vmov.f32	s1, s14
 80058c2:	eeb0 0a67 	vmov.f32	s0, s15
 80058c6:	4875      	ldr	r0, [pc, #468]	; (8005a9c <main+0x171c>)
 80058c8:	f7fe f86e 	bl	80039a8 <Double_GPS_PID_Calculation>
		  		  Double_GPS_PID_Calculation(&gps_lat, last_lat, posllh.lat);
 80058cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <main+0x1718>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	ee07 3a10 	vmov	s14, r3
 80058de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80058e2:	eef0 0a47 	vmov.f32	s1, s14
 80058e6:	eeb0 0a67 	vmov.f32	s0, s15
 80058ea:	486d      	ldr	r0, [pc, #436]	; (8005aa0 <main+0x1720>)
 80058ec:	f7fe f85c 	bl	80039a8 <Double_GPS_PID_Calculation>
				  Double_Altitude_PID_Calculation(&altitude, last_altitude, actual_pressure_fast);
 80058f0:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <main+0x1724>)
 80058f2:	edd3 7a00 	vldr	s15, [r3]
 80058f6:	4b6c      	ldr	r3, [pc, #432]	; (8005aa8 <main+0x1728>)
 80058f8:	ed93 7a00 	vldr	s14, [r3]
 80058fc:	eef0 0a47 	vmov.f32	s1, s14
 8005900:	eeb0 0a67 	vmov.f32	s0, s15
 8005904:	4869      	ldr	r0, [pc, #420]	; (8005aac <main+0x172c>)
 8005906:	f7fd ff05 	bl	8003714 <Double_Altitude_PID_Calculation>

		  		  if(iBus.LV < 1030 || motor_arming_flag == 0)
 800590a:	4b62      	ldr	r3, [pc, #392]	; (8005a94 <main+0x1714>)
 800590c:	889b      	ldrh	r3, [r3, #4]
 800590e:	f240 4205 	movw	r2, #1029	; 0x405
 8005912:	4293      	cmp	r3, r2
 8005914:	d903      	bls.n	800591e <main+0x159e>
 8005916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <main+0x15a2>
		  		  {
		  			  Reset_All_PID_Integrator();
 800591e:	f7fd feb9 	bl	8003694 <Reset_All_PID_Integrator>
		  		  }

		  		  Single_Yaw_Heading_PID_Calculation(&yaw_heading, 0 , BNO080_Yaw, ICM20602.gyro_z);
 8005922:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <main+0x1730>)
 8005924:	edd3 7a00 	vldr	s15, [r3]
 8005928:	4b62      	ldr	r3, [pc, #392]	; (8005ab4 <main+0x1734>)
 800592a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800592e:	eeb0 1a47 	vmov.f32	s2, s14
 8005932:	eef0 0a67 	vmov.f32	s1, s15
 8005936:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8005ab8 <main+0x1738>
 800593a:	4860      	ldr	r0, [pc, #384]	; (8005abc <main+0x173c>)
 800593c:	f7fd fd8c 	bl	8003458 <Single_Yaw_Heading_PID_Calculation>
		  		  ccr1 = 84000 + landing_throttle - gps_lat.in.pid_result + gps_lon.in.pid_result -yaw_heading.pid_result  + altitude.in.pid_result;
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005946:	3320      	adds	r3, #32
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005950:	4b53      	ldr	r3, [pc, #332]	; (8005aa0 <main+0x1720>)
 8005952:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005956:	ee37 7a67 	vsub.f32	s14, s14, s15
 800595a:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <main+0x171c>)
 800595c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005964:	4b55      	ldr	r3, [pc, #340]	; (8005abc <main+0x173c>)
 8005966:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800596a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <main+0x172c>)
 8005970:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800597c:	ee17 2a90 	vmov	r2, s15
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <main+0x1740>)
 8005982:	601a      	str	r2, [r3, #0]
		  		  ccr2 = 84000 + landing_throttle + gps_lat.in.pid_result + gps_lon.in.pid_result +yaw_heading.pid_result  + altitude.in.pid_result;
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800598a:	3320      	adds	r3, #32
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <main+0x1720>)
 8005996:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800599a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800599e:	4b3f      	ldr	r3, [pc, #252]	; (8005a9c <main+0x171c>)
 80059a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a8:	4b44      	ldr	r3, [pc, #272]	; (8005abc <main+0x173c>)
 80059aa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059b2:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <main+0x172c>)
 80059b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c0:	ee17 2a90 	vmov	r2, s15
 80059c4:	4b3f      	ldr	r3, [pc, #252]	; (8005ac4 <main+0x1744>)
 80059c6:	601a      	str	r2, [r3, #0]
		  		  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 80059c8:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <main+0x1744>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005ac8 <main+0x1748>
 80059d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e0:	ee17 2a90 	vmov	r2, s15
 80059e4:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <main+0x1744>)
 80059e6:	601a      	str	r2, [r3, #0]
		  		  ccr3 = 84000 + landing_throttle + gps_lat.in.pid_result - gps_lon.in.pid_result -yaw_heading.pid_result  + altitude.in.pid_result;
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80059ee:	3320      	adds	r3, #32
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059f8:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <main+0x1720>)
 80059fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80059fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a02:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <main+0x171c>)
 8005a04:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	; (8005abc <main+0x173c>)
 8005a0e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a16:	4b25      	ldr	r3, [pc, #148]	; (8005aac <main+0x172c>)
 8005a18:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a24:	ee17 2a90 	vmov	r2, s15
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <main+0x174c>)
 8005a2a:	601a      	str	r2, [r3, #0]
		  		  ccr4 = 84000 + landing_throttle - gps_lat.in.pid_result - gps_lon.in.pid_result +yaw_heading.pid_result  + altitude.in.pid_result;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005a32:	3320      	adds	r3, #32
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a3c:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <main+0x1720>)
 8005a3e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <main+0x171c>)
 8005a48:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <main+0x173c>)
 8005a52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <main+0x172c>)
 8005a5c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a68:	ee17 2a90 	vmov	r2, s15
 8005a6c:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <main+0x1750>)
 8005a6e:	601a      	str	r2, [r3, #0]
				  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <main+0x1750>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005ac8 <main+0x1748>
 8005a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a88:	ee17 2a90 	vmov	r2, s15
 8005a8c:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <main+0x1750>)
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e3b5      	b.n	80061fe <main+0x1e7e>
 8005a92:	bf00      	nop
 8005a94:	20000384 	.word	0x20000384
 8005a98:	200003e0 	.word	0x200003e0
 8005a9c:	200004cc 	.word	0x200004cc
 8005aa0:	20000454 	.word	0x20000454
 8005aa4:	20000760 	.word	0x20000760
 8005aa8:	20000270 	.word	0x20000270
 8005aac:	20000544 	.word	0x20000544
 8005ab0:	200006ec 	.word	0x200006ec
 8005ab4:	200003a8 	.word	0x200003a8
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	200005bc 	.word	0x200005bc
 8005ac0:	2000075c 	.word	0x2000075c
 8005ac4:	20000768 	.word	0x20000768
 8005ac8:	3f68f5c3 	.word	0x3f68f5c3
 8005acc:	20000790 	.word	0x20000790
 8005ad0:	2000076c 	.word	0x2000076c
		  	  }
		  else
		  {
			  if(iBus.LV < 1030 || motor_arming_flag == 0)
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <main+0x1880>)
 8005ad6:	889b      	ldrh	r3, [r3, #4]
 8005ad8:	f240 4205 	movw	r2, #1029	; 0x405
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d903      	bls.n	8005ae8 <main+0x1768>
 8005ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <main+0x176c>
			  {
				  Reset_All_PID_Integrator();
 8005ae8:	f7fd fdd4 	bl	8003694 <Reset_All_PID_Integrator>
			  }

			  if (iBus.LV < 1050)
 8005aec:	4b44      	ldr	r3, [pc, #272]	; (8005c00 <main+0x1880>)
 8005aee:	889b      	ldrh	r3, [r3, #4]
 8005af0:	f240 4219 	movw	r2, #1049	; 0x419
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f200 808d 	bhi.w	8005c14 <main+0x1894>
			  {
				  ccr1 = 84000 + (iBus.LV - 1000) * 83.9;
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <main+0x1880>)
 8005afc:	889b      	ldrh	r3, [r3, #4]
 8005afe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fa fd0e 	bl	8000524 <__aeabi_i2d>
 8005b08:	a339      	add	r3, pc, #228	; (adr r3, 8005bf0 <main+0x1870>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fd73 	bl	80005f8 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4610      	mov	r0, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	a337      	add	r3, pc, #220	; (adr r3, 8005bf8 <main+0x1878>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fbb4 	bl	800028c <__adddf3>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f7fb f83c 	bl	8000ba8 <__aeabi_d2uiz>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <main+0x1884>)
 8005b34:	6013      	str	r3, [r2, #0]
				  ccr2 = 84000 + (iBus.LV - 1000) * 83.9;
 8005b36:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <main+0x1880>)
 8005b38:	889b      	ldrh	r3, [r3, #4]
 8005b3a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fa fcf0 	bl	8000524 <__aeabi_i2d>
 8005b44:	a32a      	add	r3, pc, #168	; (adr r3, 8005bf0 <main+0x1870>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	a328      	add	r3, pc, #160	; (adr r3, 8005bf8 <main+0x1878>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa fb96 	bl	800028c <__adddf3>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f7fb f81e 	bl	8000ba8 <__aeabi_d2uiz>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <main+0x1888>)
 8005b70:	6013      	str	r3, [r2, #0]
				  ccr3 = 84000 + (iBus.LV - 1000) * 83.9;
 8005b72:	4b23      	ldr	r3, [pc, #140]	; (8005c00 <main+0x1880>)
 8005b74:	889b      	ldrh	r3, [r3, #4]
 8005b76:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fcd2 	bl	8000524 <__aeabi_i2d>
 8005b80:	a31b      	add	r3, pc, #108	; (adr r3, 8005bf0 <main+0x1870>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fd37 	bl	80005f8 <__aeabi_dmul>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	a319      	add	r3, pc, #100	; (adr r3, 8005bf8 <main+0x1878>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fb78 	bl	800028c <__adddf3>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f7fb f800 	bl	8000ba8 <__aeabi_d2uiz>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <main+0x188c>)
 8005bac:	6013      	str	r3, [r2, #0]
				  ccr4 = 84000 + (iBus.LV - 1000) * 83.9;
 8005bae:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <main+0x1880>)
 8005bb0:	889b      	ldrh	r3, [r3, #4]
 8005bb2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fa fcb4 	bl	8000524 <__aeabi_i2d>
 8005bbc:	a30c      	add	r3, pc, #48	; (adr r3, 8005bf0 <main+0x1870>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fd19 	bl	80005f8 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	a30a      	add	r3, pc, #40	; (adr r3, 8005bf8 <main+0x1878>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fb5a 	bl	800028c <__adddf3>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fa ffe2 	bl	8000ba8 <__aeabi_d2uiz>
 8005be4:	4603      	mov	r3, r0
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <main+0x1890>)
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e2fe      	b.n	80061ea <main+0x1e6a>
 8005bec:	f3af 8000 	nop.w
 8005bf0:	9999999a 	.word	0x9999999a
 8005bf4:	4054f999 	.word	0x4054f999
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	40f48200 	.word	0x40f48200
 8005c00:	20000384 	.word	0x20000384
 8005c04:	2000075c 	.word	0x2000075c
 8005c08:	20000768 	.word	0x20000768
 8005c0c:	20000790 	.word	0x20000790
 8005c10:	2000076c 	.word	0x2000076c
			  }
			  else
			  {
				  if(iBus.LH < 1485 || iBus.LH > 1515)
 8005c14:	4bbc      	ldr	r3, [pc, #752]	; (8005f08 <main+0x1b88>)
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d906      	bls.n	8005c2e <main+0x18ae>
 8005c20:	4bb9      	ldr	r3, [pc, #740]	; (8005f08 <main+0x1b88>)
 8005c22:	88db      	ldrh	r3, [r3, #6]
 8005c24:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f240 8183 	bls.w	8005f34 <main+0x1bb4>
				  {
					  yaw_heading_reference = BNO080_Yaw;
 8005c2e:	4bb7      	ldr	r3, [pc, #732]	; (8005f0c <main+0x1b8c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
					  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH-1500), ICM20602.gyro_z);
 8005c34:	4bb4      	ldr	r3, [pc, #720]	; (8005f08 <main+0x1b88>)
 8005c36:	88db      	ldrh	r3, [r3, #6]
 8005c38:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c44:	4bb2      	ldr	r3, [pc, #712]	; (8005f10 <main+0x1b90>)
 8005c46:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005c4a:	eef0 0a47 	vmov.f32	s1, s14
 8005c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c52:	48b0      	ldr	r0, [pc, #704]	; (8005f14 <main+0x1b94>)
 8005c54:	f7fd fc9a 	bl	800358c <Single_Yaw_Rate_PID_Calculation>

					  ccr1 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result + roll.in.pid_result -yaw_rate.pid_result;
 8005c58:	4bab      	ldr	r3, [pc, #684]	; (8005f08 <main+0x1b88>)
 8005c5a:	889b      	ldrh	r3, [r3, #4]
 8005c5c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fc5f 	bl	8000524 <__aeabi_i2d>
 8005c66:	a3a4      	add	r3, pc, #656	; (adr r3, 8005ef8 <main+0x1b78>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fcc4 	bl	80005f8 <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4610      	mov	r0, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	a3a1      	add	r3, pc, #644	; (adr r3, 8005f00 <main+0x1b80>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fb05 	bl	800028c <__adddf3>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4614      	mov	r4, r2
 8005c88:	461d      	mov	r5, r3
 8005c8a:	4ba3      	ldr	r3, [pc, #652]	; (8005f18 <main+0x1b98>)
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa fc5a 	bl	8000548 <__aeabi_f2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	f7fa faf4 	bl	8000288 <__aeabi_dsub>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	461d      	mov	r5, r3
 8005ca8:	4b9c      	ldr	r3, [pc, #624]	; (8005f1c <main+0x1b9c>)
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fa fc4b 	bl	8000548 <__aeabi_f2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa fae7 	bl	800028c <__adddf3>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4614      	mov	r4, r2
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	4b93      	ldr	r3, [pc, #588]	; (8005f14 <main+0x1b94>)
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fc3c 	bl	8000548 <__aeabi_f2d>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fad6 	bl	8000288 <__aeabi_dsub>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f7fa ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	4a8d      	ldr	r2, [pc, #564]	; (8005f20 <main+0x1ba0>)
 8005cec:	6013      	str	r3, [r2, #0]
					  ccr2 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result + roll.in.pid_result +yaw_rate.pid_result;
 8005cee:	4b86      	ldr	r3, [pc, #536]	; (8005f08 <main+0x1b88>)
 8005cf0:	889b      	ldrh	r3, [r3, #4]
 8005cf2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fc14 	bl	8000524 <__aeabi_i2d>
 8005cfc:	a37e      	add	r3, pc, #504	; (adr r3, 8005ef8 <main+0x1b78>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fc79 	bl	80005f8 <__aeabi_dmul>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	a37c      	add	r3, pc, #496	; (adr r3, 8005f00 <main+0x1b80>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa faba 	bl	800028c <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	461d      	mov	r5, r3
 8005d20:	4b7d      	ldr	r3, [pc, #500]	; (8005f18 <main+0x1b98>)
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fa fc0f 	bl	8000548 <__aeabi_f2d>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa faab 	bl	800028c <__adddf3>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	4b77      	ldr	r3, [pc, #476]	; (8005f1c <main+0x1b9c>)
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fa fc00 	bl	8000548 <__aeabi_f2d>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fa9c 	bl	800028c <__adddf3>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	4b6d      	ldr	r3, [pc, #436]	; (8005f14 <main+0x1b94>)
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa fbf1 	bl	8000548 <__aeabi_f2d>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	f7fa fa8d 	bl	800028c <__adddf3>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f7fa ff15 	bl	8000ba8 <__aeabi_d2uiz>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4a68      	ldr	r2, [pc, #416]	; (8005f24 <main+0x1ba4>)
 8005d82:	6013      	str	r3, [r2, #0]
					  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 8005d84:	4b67      	ldr	r3, [pc, #412]	; (8005f24 <main+0x1ba4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d90:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005f28 <main+0x1ba8>
 8005d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9c:	ee17 2a90 	vmov	r2, s15
 8005da0:	4b60      	ldr	r3, [pc, #384]	; (8005f24 <main+0x1ba4>)
 8005da2:	601a      	str	r2, [r3, #0]
					  ccr3 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result - roll.in.pid_result -yaw_rate.pid_result;
 8005da4:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <main+0x1b88>)
 8005da6:	889b      	ldrh	r3, [r3, #4]
 8005da8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fa fbb9 	bl	8000524 <__aeabi_i2d>
 8005db2:	a351      	add	r3, pc, #324	; (adr r3, 8005ef8 <main+0x1b78>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f7fa fc1e 	bl	80005f8 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	a34e      	add	r3, pc, #312	; (adr r3, 8005f00 <main+0x1b80>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fa5f 	bl	800028c <__adddf3>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	461d      	mov	r5, r3
 8005dd6:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <main+0x1b98>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fa fbb4 	bl	8000548 <__aeabi_f2d>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fa50 	bl	800028c <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	461d      	mov	r5, r3
 8005df4:	4b49      	ldr	r3, [pc, #292]	; (8005f1c <main+0x1b9c>)
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa fba5 	bl	8000548 <__aeabi_f2d>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fa3f 	bl	8000288 <__aeabi_dsub>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4614      	mov	r4, r2
 8005e10:	461d      	mov	r5, r3
 8005e12:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <main+0x1b94>)
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fb96 	bl	8000548 <__aeabi_f2d>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4620      	mov	r0, r4
 8005e22:	4629      	mov	r1, r5
 8005e24:	f7fa fa30 	bl	8000288 <__aeabi_dsub>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	f7fa feba 	bl	8000ba8 <__aeabi_d2uiz>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4a3d      	ldr	r2, [pc, #244]	; (8005f2c <main+0x1bac>)
 8005e38:	6013      	str	r3, [r2, #0]
					  ccr4 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result - roll.in.pid_result +yaw_rate.pid_result;
 8005e3a:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <main+0x1b88>)
 8005e3c:	889b      	ldrh	r3, [r3, #4]
 8005e3e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa fb6e 	bl	8000524 <__aeabi_i2d>
 8005e48:	a32b      	add	r3, pc, #172	; (adr r3, 8005ef8 <main+0x1b78>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f7fa fbd3 	bl	80005f8 <__aeabi_dmul>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	a329      	add	r3, pc, #164	; (adr r3, 8005f00 <main+0x1b80>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fa14 	bl	800028c <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <main+0x1b98>)
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fa fb69 	bl	8000548 <__aeabi_f2d>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7fa fa03 	bl	8000288 <__aeabi_dsub>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4614      	mov	r4, r2
 8005e88:	461d      	mov	r5, r3
 8005e8a:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <main+0x1b9c>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa fb5a 	bl	8000548 <__aeabi_f2d>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa f9f4 	bl	8000288 <__aeabi_dsub>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	461d      	mov	r5, r3
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <main+0x1b94>)
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fb4b 	bl	8000548 <__aeabi_f2d>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa f9e7 	bl	800028c <__adddf3>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f7fa fe6f 	bl	8000ba8 <__aeabi_d2uiz>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <main+0x1bb0>)
 8005ece:	6013      	str	r3, [r2, #0]
					  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8005ed0:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <main+0x1bb0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005f28 <main+0x1ba8>
 8005ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <main+0x1bb0>)
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e17b      	b.n	80061ea <main+0x1e6a>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	9999999a 	.word	0x9999999a
 8005efc:	4054f999 	.word	0x4054f999
 8005f00:	00000000 	.word	0x00000000
 8005f04:	40f48200 	.word	0x40f48200
 8005f08:	20000384 	.word	0x20000384
 8005f0c:	200006ec 	.word	0x200006ec
 8005f10:	200003a8 	.word	0x200003a8
 8005f14:	20000418 	.word	0x20000418
 8005f18:	200005f8 	.word	0x200005f8
 8005f1c:	20000670 	.word	0x20000670
 8005f20:	2000075c 	.word	0x2000075c
 8005f24:	20000768 	.word	0x20000768
 8005f28:	3f68f5c3 	.word	0x3f68f5c3
 8005f2c:	20000790 	.word	0x20000790
 8005f30:	2000076c 	.word	0x2000076c

				  }
				  else
				  {
					  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 8005f34:	4bc8      	ldr	r3, [pc, #800]	; (8006258 <main+0x1ed8>)
 8005f36:	edd3 7a00 	vldr	s15, [r3]
 8005f3a:	4bc8      	ldr	r3, [pc, #800]	; (800625c <main+0x1edc>)
 8005f3c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005f40:	eeb0 1a47 	vmov.f32	s2, s14
 8005f44:	eef0 0a67 	vmov.f32	s1, s15
 8005f48:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8005f4c:	48c4      	ldr	r0, [pc, #784]	; (8006260 <main+0x1ee0>)
 8005f4e:	f7fd fa83 	bl	8003458 <Single_Yaw_Heading_PID_Calculation>
					  ccr1 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result + roll.in.pid_result -yaw_heading.pid_result;
 8005f52:	4bc4      	ldr	r3, [pc, #784]	; (8006264 <main+0x1ee4>)
 8005f54:	889b      	ldrh	r3, [r3, #4]
 8005f56:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa fae2 	bl	8000524 <__aeabi_i2d>
 8005f60:	a3b9      	add	r3, pc, #740	; (adr r3, 8006248 <main+0x1ec8>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa fb47 	bl	80005f8 <__aeabi_dmul>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	a3b7      	add	r3, pc, #732	; (adr r3, 8006250 <main+0x1ed0>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f988 	bl	800028c <__adddf3>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	4bb8      	ldr	r3, [pc, #736]	; (8006268 <main+0x1ee8>)
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fadd 	bl	8000548 <__aeabi_f2d>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7fa f977 	bl	8000288 <__aeabi_dsub>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4614      	mov	r4, r2
 8005fa0:	461d      	mov	r5, r3
 8005fa2:	4bb2      	ldr	r3, [pc, #712]	; (800626c <main+0x1eec>)
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa face 	bl	8000548 <__aeabi_f2d>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa f96a 	bl	800028c <__adddf3>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	4ba7      	ldr	r3, [pc, #668]	; (8006260 <main+0x1ee0>)
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fa fabf 	bl	8000548 <__aeabi_f2d>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa f959 	bl	8000288 <__aeabi_dsub>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f7fa fde3 	bl	8000ba8 <__aeabi_d2uiz>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4aa2      	ldr	r2, [pc, #648]	; (8006270 <main+0x1ef0>)
 8005fe6:	6013      	str	r3, [r2, #0]
					  ccr2 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result + roll.in.pid_result +yaw_heading.pid_result;
 8005fe8:	4b9e      	ldr	r3, [pc, #632]	; (8006264 <main+0x1ee4>)
 8005fea:	889b      	ldrh	r3, [r3, #4]
 8005fec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fa fa97 	bl	8000524 <__aeabi_i2d>
 8005ff6:	a394      	add	r3, pc, #592	; (adr r3, 8006248 <main+0x1ec8>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f7fa fafc 	bl	80005f8 <__aeabi_dmul>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	a391      	add	r3, pc, #580	; (adr r3, 8006250 <main+0x1ed0>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f7fa f93d 	bl	800028c <__adddf3>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4614      	mov	r4, r2
 8006018:	461d      	mov	r5, r3
 800601a:	4b93      	ldr	r3, [pc, #588]	; (8006268 <main+0x1ee8>)
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	4618      	mov	r0, r3
 8006020:	f7fa fa92 	bl	8000548 <__aeabi_f2d>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f92e 	bl	800028c <__adddf3>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	4b8c      	ldr	r3, [pc, #560]	; (800626c <main+0x1eec>)
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	4618      	mov	r0, r3
 800603e:	f7fa fa83 	bl	8000548 <__aeabi_f2d>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4620      	mov	r0, r4
 8006048:	4629      	mov	r1, r5
 800604a:	f7fa f91f 	bl	800028c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4614      	mov	r4, r2
 8006054:	461d      	mov	r5, r3
 8006056:	4b82      	ldr	r3, [pc, #520]	; (8006260 <main+0x1ee0>)
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	4618      	mov	r0, r3
 800605c:	f7fa fa74 	bl	8000548 <__aeabi_f2d>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	f7fa fd98 	bl	8000ba8 <__aeabi_d2uiz>
 8006078:	4603      	mov	r3, r0
 800607a:	4a7e      	ldr	r2, [pc, #504]	; (8006274 <main+0x1ef4>)
 800607c:	6013      	str	r3, [r2, #0]
					  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 800607e:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <main+0x1ef4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006278 <main+0x1ef8>
 800608e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006096:	ee17 2a90 	vmov	r2, s15
 800609a:	4b76      	ldr	r3, [pc, #472]	; (8006274 <main+0x1ef4>)
 800609c:	601a      	str	r2, [r3, #0]
					  ccr3 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result - roll.in.pid_result -yaw_heading.pid_result;
 800609e:	4b71      	ldr	r3, [pc, #452]	; (8006264 <main+0x1ee4>)
 80060a0:	889b      	ldrh	r3, [r3, #4]
 80060a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fa fa3c 	bl	8000524 <__aeabi_i2d>
 80060ac:	a366      	add	r3, pc, #408	; (adr r3, 8006248 <main+0x1ec8>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	a364      	add	r3, pc, #400	; (adr r3, 8006250 <main+0x1ed0>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f8e2 	bl	800028c <__adddf3>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4614      	mov	r4, r2
 80060ce:	461d      	mov	r5, r3
 80060d0:	4b65      	ldr	r3, [pc, #404]	; (8006268 <main+0x1ee8>)
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fa fa37 	bl	8000548 <__aeabi_f2d>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa f8d3 	bl	800028c <__adddf3>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4614      	mov	r4, r2
 80060ec:	461d      	mov	r5, r3
 80060ee:	4b5f      	ldr	r3, [pc, #380]	; (800626c <main+0x1eec>)
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fa fa28 	bl	8000548 <__aeabi_f2d>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4620      	mov	r0, r4
 80060fe:	4629      	mov	r1, r5
 8006100:	f7fa f8c2 	bl	8000288 <__aeabi_dsub>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	4b54      	ldr	r3, [pc, #336]	; (8006260 <main+0x1ee0>)
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	4618      	mov	r0, r3
 8006112:	f7fa fa19 	bl	8000548 <__aeabi_f2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4620      	mov	r0, r4
 800611c:	4629      	mov	r1, r5
 800611e:	f7fa f8b3 	bl	8000288 <__aeabi_dsub>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	f7fa fd3d 	bl	8000ba8 <__aeabi_d2uiz>
 800612e:	4603      	mov	r3, r0
 8006130:	4a52      	ldr	r2, [pc, #328]	; (800627c <main+0x1efc>)
 8006132:	6013      	str	r3, [r2, #0]
					  ccr4 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result - roll.in.pid_result +yaw_heading.pid_result;
 8006134:	4b4b      	ldr	r3, [pc, #300]	; (8006264 <main+0x1ee4>)
 8006136:	889b      	ldrh	r3, [r3, #4]
 8006138:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa f9f1 	bl	8000524 <__aeabi_i2d>
 8006142:	a341      	add	r3, pc, #260	; (adr r3, 8006248 <main+0x1ec8>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa56 	bl	80005f8 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	a33e      	add	r3, pc, #248	; (adr r3, 8006250 <main+0x1ed0>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f897 	bl	800028c <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4614      	mov	r4, r2
 8006164:	461d      	mov	r5, r3
 8006166:	4b40      	ldr	r3, [pc, #256]	; (8006268 <main+0x1ee8>)
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	4618      	mov	r0, r3
 800616c:	f7fa f9ec 	bl	8000548 <__aeabi_f2d>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4620      	mov	r0, r4
 8006176:	4629      	mov	r1, r5
 8006178:	f7fa f886 	bl	8000288 <__aeabi_dsub>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4614      	mov	r4, r2
 8006182:	461d      	mov	r5, r3
 8006184:	4b39      	ldr	r3, [pc, #228]	; (800626c <main+0x1eec>)
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	4618      	mov	r0, r3
 800618a:	f7fa f9dd 	bl	8000548 <__aeabi_f2d>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7fa f877 	bl	8000288 <__aeabi_dsub>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4614      	mov	r4, r2
 80061a0:	461d      	mov	r5, r3
 80061a2:	4b2f      	ldr	r3, [pc, #188]	; (8006260 <main+0x1ee0>)
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fa f9ce 	bl	8000548 <__aeabi_f2d>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7fa f86a 	bl	800028c <__adddf3>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	f7fa fcf2 	bl	8000ba8 <__aeabi_d2uiz>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4a2e      	ldr	r2, [pc, #184]	; (8006280 <main+0x1f00>)
 80061c8:	6013      	str	r3, [r2, #0]
					  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 80061ca:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <main+0x1f00>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006278 <main+0x1ef8>
 80061da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e2:	ee17 2a90 	vmov	r2, s15
 80061e6:	4b26      	ldr	r3, [pc, #152]	; (8006280 <main+0x1f00>)
 80061e8:	601a      	str	r2, [r3, #0]
				  }
			  }


			  last_lat = posllh.lat;
 80061ea:	4b26      	ldr	r3, [pc, #152]	; (8006284 <main+0x1f04>)
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	643b      	str	r3, [r7, #64]	; 0x40
			  last_lon = posllh.lon;
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <main+0x1f04>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
			  last_altitude = actual_pressure_fast;
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <main+0x1f08>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a24      	ldr	r2, [pc, #144]	; (800628c <main+0x1f0c>)
 80061fc:	6013      	str	r3, [r2, #0]
		  }

		  if(iBus.SwD != 2000)
 80061fe:	4b19      	ldr	r3, [pc, #100]	; (8006264 <main+0x1ee4>)
 8006200:	89db      	ldrh	r3, [r3, #14]
 8006202:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006206:	d005      	beq.n	8006214 <main+0x1e94>
		  {
			  Reset_PID_Integrator(&altitude.out);
 8006208:	4821      	ldr	r0, [pc, #132]	; (8006290 <main+0x1f10>)
 800620a:	f7fd fa35 	bl	8003678 <Reset_PID_Integrator>
			  Reset_PID_Integrator(&altitude.in);
 800620e:	4821      	ldr	r0, [pc, #132]	; (8006294 <main+0x1f14>)
 8006210:	f7fd fa32 	bl	8003678 <Reset_PID_Integrator>
		  }
	  }


	  /********************* Motor Arming State ************************/
	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8006214:	4b13      	ldr	r3, [pc, #76]	; (8006264 <main+0x1ee4>)
 8006216:	891b      	ldrh	r3, [r3, #8]
 8006218:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800621c:	d15a      	bne.n	80062d4 <main+0x1f54>
 800621e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006222:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006226:	d055      	beq.n	80062d4 <main+0x1f54>
	  {
		  if(iBus.LV < 1010)
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <main+0x1ee4>)
 800622a:	889b      	ldrh	r3, [r3, #4]
 800622c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006230:	4293      	cmp	r3, r2
 8006232:	d845      	bhi.n	80062c0 <main+0x1f40>
		  {
			  motor_arming_flag = 1;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			  yaw_heading_reference = BNO080_Yaw;
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <main+0x1ed8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006240:	e048      	b.n	80062d4 <main+0x1f54>
 8006242:	bf00      	nop
 8006244:	f3af 8000 	nop.w
 8006248:	9999999a 	.word	0x9999999a
 800624c:	4054f999 	.word	0x4054f999
 8006250:	00000000 	.word	0x00000000
 8006254:	40f48200 	.word	0x40f48200
 8006258:	200006ec 	.word	0x200006ec
 800625c:	200003a8 	.word	0x200003a8
 8006260:	200005bc 	.word	0x200005bc
 8006264:	20000384 	.word	0x20000384
 8006268:	200005f8 	.word	0x200005f8
 800626c:	20000670 	.word	0x20000670
 8006270:	2000075c 	.word	0x2000075c
 8006274:	20000768 	.word	0x20000768
 8006278:	3f68f5c3 	.word	0x3f68f5c3
 800627c:	20000790 	.word	0x20000790
 8006280:	2000076c 	.word	0x2000076c
 8006284:	200003e0 	.word	0x200003e0
 8006288:	20000270 	.word	0x20000270
 800628c:	20000760 	.word	0x20000760
 8006290:	20000580 	.word	0x20000580
 8006294:	20000544 	.word	0x20000544
		  }
		  else
		  {
			  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8006298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800629c:	4848      	ldr	r0, [pc, #288]	; (80063c0 <main+0x2040>)
 800629e:	f7fd ffa7 	bl	80041f0 <LL_TIM_CC_EnableChannel>
				  TIM3->PSC = 1000;
 80062a2:	4b47      	ldr	r3, [pc, #284]	; (80063c0 <main+0x2040>)
 80062a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062a8:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 80062aa:	2046      	movs	r0, #70	; 0x46
 80062ac:	f002 f952 	bl	8008554 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80062b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062b4:	4842      	ldr	r0, [pc, #264]	; (80063c0 <main+0x2040>)
 80062b6:	f7fd ffac 	bl	8004212 <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 80062ba:	2046      	movs	r0, #70	; 0x46
 80062bc:	f002 f94a 	bl	8008554 <HAL_Delay>
			  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 80062c0:	f000 faca 	bl	8006858 <Is_iBus_Throttle_min>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0e6      	beq.n	8006298 <main+0x1f18>
 80062ca:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <main+0x2044>)
 80062cc:	891b      	ldrh	r3, [r3, #8]
 80062ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062d2:	d0e1      	beq.n	8006298 <main+0x1f18>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <main+0x2044>)
 80062d6:	891b      	ldrh	r3, [r3, #8]
 80062d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  if(iBus.SwA != 2000)
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <main+0x2044>)
 80062de:	891b      	ldrh	r3, [r3, #8]
 80062e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062e4:	d002      	beq.n	80062ec <main+0x1f6c>
	  {
		  motor_arming_flag = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  if(motor_arming_flag == 1)
 80062ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d14d      	bne.n	8006390 <main+0x2010>
	  {
		  if(failsafe_flag == 0)
 80062f4:	4b34      	ldr	r3, [pc, #208]	; (80063c8 <main+0x2048>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d13c      	bne.n	8006376 <main+0x1ff6>
		  {
//			  printf("%d\t%d\t%d\t%d\n", ccr1, ccr2, ccr3, ccr4);
			  TIM5->CCR1 = ccr1 > 167999 ? 167999 : ccr1 < 84000 ? 84000 : ccr1;
 80062fc:	4b33      	ldr	r3, [pc, #204]	; (80063cc <main+0x204c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a33      	ldr	r2, [pc, #204]	; (80063d0 <main+0x2050>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d806      	bhi.n	8006314 <main+0x1f94>
 8006306:	4b31      	ldr	r3, [pc, #196]	; (80063cc <main+0x204c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a32      	ldr	r2, [pc, #200]	; (80063d4 <main+0x2054>)
 800630c:	4293      	cmp	r3, r2
 800630e:	bf38      	it	cc
 8006310:	4613      	movcc	r3, r2
 8006312:	e000      	b.n	8006316 <main+0x1f96>
 8006314:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <main+0x2050>)
 8006316:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <main+0x2058>)
 8006318:	6353      	str	r3, [r2, #52]	; 0x34
			  TIM5->CCR2 = ccr2 > 167999 ? 167999 : ccr2 < 84000 ? 84000 : ccr2;
 800631a:	4b30      	ldr	r3, [pc, #192]	; (80063dc <main+0x205c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2c      	ldr	r2, [pc, #176]	; (80063d0 <main+0x2050>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d806      	bhi.n	8006332 <main+0x1fb2>
 8006324:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <main+0x205c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2a      	ldr	r2, [pc, #168]	; (80063d4 <main+0x2054>)
 800632a:	4293      	cmp	r3, r2
 800632c:	bf38      	it	cc
 800632e:	4613      	movcc	r3, r2
 8006330:	e000      	b.n	8006334 <main+0x1fb4>
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <main+0x2050>)
 8006334:	4a28      	ldr	r2, [pc, #160]	; (80063d8 <main+0x2058>)
 8006336:	6393      	str	r3, [r2, #56]	; 0x38
			  TIM5->CCR3 = ccr3 > 167999 ? 167999 : ccr3 < 84000 ? 84000 : ccr3;
 8006338:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <main+0x2060>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <main+0x2050>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d806      	bhi.n	8006350 <main+0x1fd0>
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <main+0x2060>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <main+0x2054>)
 8006348:	4293      	cmp	r3, r2
 800634a:	bf38      	it	cc
 800634c:	4613      	movcc	r3, r2
 800634e:	e000      	b.n	8006352 <main+0x1fd2>
 8006350:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <main+0x2050>)
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <main+0x2058>)
 8006354:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM5->CCR4 = ccr4 > 167999 ? 167999 : ccr4 < 84000 ? 84000 : ccr4;
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <main+0x2064>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <main+0x2050>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d806      	bhi.n	800636e <main+0x1fee>
 8006360:	4b20      	ldr	r3, [pc, #128]	; (80063e4 <main+0x2064>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <main+0x2054>)
 8006366:	4293      	cmp	r3, r2
 8006368:	bf38      	it	cc
 800636a:	4613      	movcc	r3, r2
 800636c:	e000      	b.n	8006370 <main+0x1ff0>
 800636e:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <main+0x2050>)
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <main+0x2058>)
 8006372:	6413      	str	r3, [r2, #64]	; 0x40
 8006374:	e018      	b.n	80063a8 <main+0x2028>
		  }
		  else
		  {
			  TIM5->CCR1 = 84000;
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <main+0x2058>)
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <main+0x2054>)
 800637a:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 84000;
 800637c:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <main+0x2058>)
 800637e:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <main+0x2054>)
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 84000;
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <main+0x2058>)
 8006384:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <main+0x2054>)
 8006386:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 84000;
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <main+0x2058>)
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <main+0x2054>)
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
 800638e:	e00b      	b.n	80063a8 <main+0x2028>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 84000;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <main+0x2058>)
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <main+0x2054>)
 8006394:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 84000;
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <main+0x2058>)
 8006398:	4a0e      	ldr	r2, [pc, #56]	; (80063d4 <main+0x2054>)
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 84000;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <main+0x2058>)
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <main+0x2054>)
 80063a0:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 84000;
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <main+0x2058>)
 80063a4:	4a0b      	ldr	r2, [pc, #44]	; (80063d4 <main+0x2054>)
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
	  }


	  /********************* Telemetry Communication ************************/
	  if(tim7_20ms_flag == 1 && tim7_100ms_flag == 0)
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <main+0x2068>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d11f      	bne.n	80063f0 <main+0x2070>
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <main+0x206c>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11b      	bne.n	80063f0 <main+0x2070>
	  {
		  tim7_20ms_flag = 0;
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <main+0x2068>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e02d      	b.n	800641c <main+0x209c>
 80063c0:	40000400 	.word	0x40000400
 80063c4:	20000384 	.word	0x20000384
 80063c8:	2000020b 	.word	0x2000020b
 80063cc:	2000075c 	.word	0x2000075c
 80063d0:	0002903f 	.word	0x0002903f
 80063d4:	00014820 	.word	0x00014820
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	20000768 	.word	0x20000768
 80063e0:	20000790 	.word	0x20000790
 80063e4:	2000076c 	.word	0x2000076c
 80063e8:	20000283 	.word	0x20000283
 80063ec:	20000284 	.word	0x20000284
//		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
//		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 80063f0:	4bc7      	ldr	r3, [pc, #796]	; (8006710 <main+0x2390>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d111      	bne.n	800641c <main+0x209c>
 80063f8:	4bc6      	ldr	r3, [pc, #792]	; (8006714 <main+0x2394>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10d      	bne.n	800641c <main+0x209c>
	  {
		  tim7_20ms_flag = 0;
 8006400:	4bc3      	ldr	r3, [pc, #780]	; (8006710 <main+0x2390>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 8006406:	4bc3      	ldr	r3, [pc, #780]	; (8006714 <main+0x2394>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
//		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
//		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
//		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
		  Encode_Msg_Altitude(&telemetry_tx_buf[0]);
 800640c:	48c2      	ldr	r0, [pc, #776]	; (8006718 <main+0x2398>)
 800640e:	f000 fcc1 	bl	8006d94 <Encode_Msg_Altitude>
		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 8);
 8006412:	2208      	movs	r2, #8
 8006414:	49c0      	ldr	r1, [pc, #768]	; (8006718 <main+0x2398>)
 8006416:	48c1      	ldr	r0, [pc, #772]	; (800671c <main+0x239c>)
 8006418:	f004 fbfd 	bl	800ac16 <HAL_UART_Transmit_IT>


	  /***********************************************************************************************
	----------------------------Check BNO080 Sensor Value(current Angle Data)-----------------------
	   ***********************************************************************************************/
	  if(BNO080_dataAvailable() == 1)
 800641c:	f7fb f92a 	bl	8001674 <BNO080_dataAvailable>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d143      	bne.n	80064ae <main+0x212e>
	  {
		  q[0] = BNO080_getQuatI();
 8006426:	f7fb fadf 	bl	80019e8 <BNO080_getQuatI>
 800642a:	eef0 7a40 	vmov.f32	s15, s0
 800642e:	edc7 7a01 	vstr	s15, [r7, #4]
		  q[1] = BNO080_getQuatJ();
 8006432:	f7fb faef 	bl	8001a14 <BNO080_getQuatJ>
 8006436:	eef0 7a40 	vmov.f32	s15, s0
 800643a:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[2] = BNO080_getQuatK();
 800643e:	f7fb faff 	bl	8001a40 <BNO080_getQuatK>
 8006442:	eef0 7a40 	vmov.f32	s15, s0
 8006446:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[3] = BNO080_getQuatReal();
 800644a:	f7fb fb0f 	bl	8001a6c <BNO080_getQuatReal>
 800644e:	eef0 7a40 	vmov.f32	s15, s0
 8006452:	edc7 7a04 	vstr	s15, [r7, #16]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8006456:	f7fb fb1f 	bl	8001a98 <BNO080_getQuatRadianAccuracy>
 800645a:	ed87 0a05 	vstr	s0, [r7, #20]

		  Quaternion_Update(&q[0]);
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fd fbeb 	bl	8003c3c <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 8006466:	4bae      	ldr	r3, [pc, #696]	; (8006720 <main+0x23a0>)
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	eef1 7a67 	vneg.f32	s15, s15
 8006470:	4bab      	ldr	r3, [pc, #684]	; (8006720 <main+0x23a0>)
 8006472:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Roll -= BNO080_Roll_Offset;
 8006476:	4baa      	ldr	r3, [pc, #680]	; (8006720 <main+0x23a0>)
 8006478:	ed93 7a00 	vldr	s14, [r3]
 800647c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006484:	4ba6      	ldr	r3, [pc, #664]	; (8006720 <main+0x23a0>)
 8006486:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 800648a:	4ba6      	ldr	r3, [pc, #664]	; (8006724 <main+0x23a4>)
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	eef1 7a67 	vneg.f32	s15, s15
 8006494:	4ba3      	ldr	r3, [pc, #652]	; (8006724 <main+0x23a4>)
 8006496:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch -= BNO080_Pitch_Offset;
 800649a:	4ba2      	ldr	r3, [pc, #648]	; (8006724 <main+0x23a4>)
 800649c:	ed93 7a00 	vldr	s14, [r3]
 80064a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80064a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a8:	4b9e      	ldr	r3, [pc, #632]	; (8006724 <main+0x23a4>)
 80064aa:	edc3 7a00 	vstr	s15, [r3]
	  }

	  /***********************************************************************************************
	----------------------Check ICM20602 Sensor Value(current Angular Velocity Data)------------------
	   ***********************************************************************************************/
	  if(ICM20602_DataReady() == 1)
 80064ae:	f7fc f929 	bl	8002704 <ICM20602_DataReady>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d13c      	bne.n	8006532 <main+0x21b2>
	  {
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 80064b8:	489b      	ldr	r0, [pc, #620]	; (8006728 <main+0x23a8>)
 80064ba:	f7fc f8f7 	bl	80026ac <ICM20602_Get3AxisGyroRawData>

		  // Gyro FS=2 (+500dps max)
		  ICM20602.gyro_x = ICM20602.gyro_x_raw / 65.5f;
 80064be:	4b9b      	ldr	r3, [pc, #620]	; (800672c <main+0x23ac>)
 80064c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064cc:	eddf 6a98 	vldr	s13, [pc, #608]	; 8006730 <main+0x23b0>
 80064d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064d4:	4b95      	ldr	r3, [pc, #596]	; (800672c <main+0x23ac>)
 80064d6:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw / 65.5f;
 80064da:	4b94      	ldr	r3, [pc, #592]	; (800672c <main+0x23ac>)
 80064dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064e8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006730 <main+0x23b0>
 80064ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f0:	4b8e      	ldr	r3, [pc, #568]	; (800672c <main+0x23ac>)
 80064f2:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw / 65.5f;
 80064f6:	4b8d      	ldr	r3, [pc, #564]	; (800672c <main+0x23ac>)
 80064f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006504:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006730 <main+0x23b0>
 8006508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800650c:	4b87      	ldr	r3, [pc, #540]	; (800672c <main+0x23ac>)
 800650e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 8006512:	4b86      	ldr	r3, [pc, #536]	; (800672c <main+0x23ac>)
 8006514:	edd3 7a07 	vldr	s15, [r3, #28]
 8006518:	eef1 7a67 	vneg.f32	s15, s15
 800651c:	4b83      	ldr	r3, [pc, #524]	; (800672c <main+0x23ac>)
 800651e:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 8006522:	4b82      	ldr	r3, [pc, #520]	; (800672c <main+0x23ac>)
 8006524:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006528:	eef1 7a67 	vneg.f32	s15, s15
 800652c:	4b7f      	ldr	r3, [pc, #508]	; (800672c <main+0x23ac>)
 800652e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

//		  printf("%d, %d, %d \n", (int)ICM20602.gyro_x, (int)ICM20602.gyro_y, (int)ICM20602.gyro_z);
	  }

	  if(LPS22HH_DataReady() == 1)
 8006532:	f7fc fb57 	bl	8002be4 <LPS22HH_DataReady>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	f040 8096 	bne.w	800666a <main+0x22ea>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800653e:	487d      	ldr	r0, [pc, #500]	; (8006734 <main+0x23b4>)
 8006540:	f7fc fb5c 	bl	8002bfc <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8006544:	487c      	ldr	r0, [pc, #496]	; (8006738 <main+0x23b8>)
 8006546:	f7fc fb66 	bl	8002c16 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw-100.f); //Default Unit = 10cm
 800654a:	4b7a      	ldr	r3, [pc, #488]	; (8006734 <main+0x23b4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006556:	eddf 6a79 	vldr	s13, [pc, #484]	; 800673c <main+0x23bc>
 800655a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800655e:	4b75      	ldr	r3, [pc, #468]	; (8006734 <main+0x23b4>)
 8006560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800656c:	eddf 6a74 	vldr	s13, [pc, #464]	; 8006740 <main+0x23c0>
 8006570:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006574:	eef0 0a67 	vmov.f32	s1, s15
 8006578:	eeb0 0a47 	vmov.f32	s0, s14
 800657c:	f7fc fb58 	bl	8002c30 <getAltitude2>
 8006580:	eef0 7a40 	vmov.f32	s15, s0
 8006584:	4b6b      	ldr	r3, [pc, #428]	; (8006734 <main+0x23b4>)
 8006586:	edc3 7a02 	vstr	s15, [r3, #8]

		  pressure_total_average -= pressure_rotating_mem[pressure_rotating_mem_location];
 800658a:	4b6e      	ldr	r3, [pc, #440]	; (8006744 <main+0x23c4>)
 800658c:	ed93 7a00 	vldr	s14, [r3]
 8006590:	4b6d      	ldr	r3, [pc, #436]	; (8006748 <main+0x23c8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6d      	ldr	r2, [pc, #436]	; (800674c <main+0x23cc>)
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	edd3 7a00 	vldr	s15, [r3]
 800659e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a2:	4b68      	ldr	r3, [pc, #416]	; (8006744 <main+0x23c4>)
 80065a4:	edc3 7a00 	vstr	s15, [r3]
		  pressure_rotating_mem[pressure_rotating_mem_location] = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw-100.f) - baro_offset;
 80065a8:	4b62      	ldr	r3, [pc, #392]	; (8006734 <main+0x23b4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b4:	eddf 6a61 	vldr	s13, [pc, #388]	; 800673c <main+0x23bc>
 80065b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80065bc:	4b5d      	ldr	r3, [pc, #372]	; (8006734 <main+0x23b4>)
 80065be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ca:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8006740 <main+0x23c0>
 80065ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065d2:	eef0 0a67 	vmov.f32	s1, s15
 80065d6:	eeb0 0a47 	vmov.f32	s0, s14
 80065da:	f7fc fb29 	bl	8002c30 <getAltitude2>
 80065de:	eeb0 7a40 	vmov.f32	s14, s0
 80065e2:	4b5b      	ldr	r3, [pc, #364]	; (8006750 <main+0x23d0>)
 80065e4:	edd3 7a00 	vldr	s15, [r3]
 80065e8:	4b57      	ldr	r3, [pc, #348]	; (8006748 <main+0x23c8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f0:	4a56      	ldr	r2, [pc, #344]	; (800674c <main+0x23cc>)
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	edc3 7a00 	vstr	s15, [r3]
		  pressure_total_average += pressure_rotating_mem[pressure_rotating_mem_location];
 80065fa:	4b53      	ldr	r3, [pc, #332]	; (8006748 <main+0x23c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a53      	ldr	r2, [pc, #332]	; (800674c <main+0x23cc>)
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	ed93 7a00 	vldr	s14, [r3]
 8006608:	4b4e      	ldr	r3, [pc, #312]	; (8006744 <main+0x23c4>)
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006612:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <main+0x23c4>)
 8006614:	edc3 7a00 	vstr	s15, [r3]
		  pressure_rotating_mem_location++;
 8006618:	4b4b      	ldr	r3, [pc, #300]	; (8006748 <main+0x23c8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a4a      	ldr	r2, [pc, #296]	; (8006748 <main+0x23c8>)
 8006620:	6013      	str	r3, [r2, #0]
		  if(pressure_rotating_mem_location ==20) pressure_rotating_mem_location = 0;
 8006622:	4b49      	ldr	r3, [pc, #292]	; (8006748 <main+0x23c8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b14      	cmp	r3, #20
 8006628:	d102      	bne.n	8006630 <main+0x22b0>
 800662a:	4b47      	ldr	r3, [pc, #284]	; (8006748 <main+0x23c8>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
		  actual_pressure_fast = pressure_total_average / 20.0f;
 8006630:	4b44      	ldr	r3, [pc, #272]	; (8006744 <main+0x23c4>)
 8006632:	ed93 7a00 	vldr	s14, [r3]
 8006636:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800663a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800663e:	4b45      	ldr	r3, [pc, #276]	; (8006754 <main+0x23d4>)
 8006640:	edc3 7a00 	vstr	s15, [r3]
		  actual_pressure_slow = actual_pressure_slow * 0.985f + actual_pressure_fast * 0.015f;
 8006644:	4b44      	ldr	r3, [pc, #272]	; (8006758 <main+0x23d8>)
 8006646:	edd3 7a00 	vldr	s15, [r3]
 800664a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800675c <main+0x23dc>
 800664e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006652:	4b40      	ldr	r3, [pc, #256]	; (8006754 <main+0x23d4>)
 8006654:	edd3 7a00 	vldr	s15, [r3]
 8006658:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006760 <main+0x23e0>
 800665c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006664:	4b3c      	ldr	r3, [pc, #240]	; (8006758 <main+0x23d8>)
 8006666:	edc3 7a00 	vstr	s15, [r3]


	  /***********************************************************************************************
	------------------------------Toggle Led if Checksum Data is right------------------------------
	   ***********************************************************************************************/
	  if(ibus_rx_cplt_flag==1)
 800666a:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <main+0x23e4>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d123      	bne.n	80066ba <main+0x233a>
	  {
		  ibus_rx_cplt_flag=0;
 8006672:	4b3c      	ldr	r3, [pc, #240]	; (8006764 <main+0x23e4>)
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8006678:	2120      	movs	r1, #32
 800667a:	483b      	ldr	r0, [pc, #236]	; (8006768 <main+0x23e8>)
 800667c:	f7fb fcbc 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d119      	bne.n	80066ba <main+0x233a>
		  {
			  LL_GPIO_TogglePin(GPIOC,LL_GPIO_PIN_2);
 8006686:	2104      	movs	r1, #4
 8006688:	4838      	ldr	r0, [pc, #224]	; (800676c <main+0x23ec>)
 800668a:	f7fd fe33 	bl	80042f4 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf, &iBus);
 800668e:	4938      	ldr	r1, [pc, #224]	; (8006770 <main+0x23f0>)
 8006690:	4835      	ldr	r0, [pc, #212]	; (8006768 <main+0x23e8>)
 8006692:	f7fb fce8 	bl	8002066 <iBus_Parsing>
			  iBus_rx_cnt++;
 8006696:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800669a:	3301      	adds	r3, #1
 800669c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

			  if(iBus_isActiveFailSafe(&iBus) == 1)
 80066a0:	4833      	ldr	r0, [pc, #204]	; (8006770 <main+0x23f0>)
 80066a2:	f7fb fd9c 	bl	80021de <iBus_isActiveFailSafe>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d103      	bne.n	80066b4 <main+0x2334>
			  {
				  failsafe_flag = 1;
 80066ac:	4b31      	ldr	r3, [pc, #196]	; (8006774 <main+0x23f4>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e002      	b.n	80066ba <main+0x233a>
			  }
			  else
			  {
				  failsafe_flag = 0;
 80066b4:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <main+0x23f4>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 80066ba:	4b2f      	ldr	r3, [pc, #188]	; (8006778 <main+0x23f8>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10c      	bne.n	80066dc <main+0x235c>
	  {
		  tim7_1000ms_flag = 0;
 80066c2:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <main+0x23f8>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 80066c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <main+0x2356>
		  {
			  failsafe_flag = 2;
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <main+0x23f4>)
 80066d2:	2202      	movs	r2, #2
 80066d4:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  }

	  if(failsafe_flag == 1 || failsafe_flag ==2 || low_bat_flag == 1)
 80066dc:	4b25      	ldr	r3, [pc, #148]	; (8006774 <main+0x23f4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d007      	beq.n	80066f4 <main+0x2374>
 80066e4:	4b23      	ldr	r3, [pc, #140]	; (8006774 <main+0x23f4>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d003      	beq.n	80066f4 <main+0x2374>
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <main+0x23fc>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d105      	bne.n	8006700 <main+0x2380>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Buzzer On
 80066f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066f8:	4821      	ldr	r0, [pc, #132]	; (8006780 <main+0x2400>)
 80066fa:	f7fd fd79 	bl	80041f0 <LL_TIM_CC_EnableChannel>
 80066fe:	e004      	b.n	800670a <main+0x238a>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Buzzer Off
 8006700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006704:	481e      	ldr	r0, [pc, #120]	; (8006780 <main+0x2400>)
 8006706:	f7fd fd84 	bl	8004212 <LL_TIM_CC_DisableChannel>
	  if(m8n_rx_cplt_flag == 1) // GPS receive checking
 800670a:	f7fe ba7c 	b.w	8004c06 <main+0x886>
 800670e:	bf00      	nop
 8006710:	20000283 	.word	0x20000283
 8006714:	20000284 	.word	0x20000284
 8006718:	20000794 	.word	0x20000794
 800671c:	20000870 	.word	0x20000870
 8006720:	200006e8 	.word	0x200006e8
 8006724:	200006f0 	.word	0x200006f0
 8006728:	200003b0 	.word	0x200003b0
 800672c:	200003a8 	.word	0x200003a8
 8006730:	42830000 	.word	0x42830000
 8006734:	200003d0 	.word	0x200003d0
 8006738:	200003d4 	.word	0x200003d4
 800673c:	45800000 	.word	0x45800000
 8006740:	42c80000 	.word	0x42c80000
 8006744:	20000218 	.word	0x20000218
 8006748:	2000026c 	.word	0x2000026c
 800674c:	2000021c 	.word	0x2000021c
 8006750:	20000210 	.word	0x20000210
 8006754:	20000270 	.word	0x20000270
 8006758:	20000274 	.word	0x20000274
 800675c:	3f7c28f6 	.word	0x3f7c28f6
 8006760:	3c75c28f 	.word	0x3c75c28f
 8006764:	20000280 	.word	0x20000280
 8006768:	200007c8 	.word	0x200007c8
 800676c:	40020800 	.word	0x40020800
 8006770:	20000384 	.word	0x20000384
 8006774:	2000020b 	.word	0x2000020b
 8006778:	20000285 	.word	0x20000285
 800677c:	2000020c 	.word	0x2000020c
 8006780:	40000400 	.word	0x40000400

08006784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b094      	sub	sp, #80	; 0x50
 8006788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800678a:	f107 0320 	add.w	r3, r7, #32
 800678e:	2230      	movs	r2, #48	; 0x30
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f006 f89a 	bl	800c8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006798:	f107 030c 	add.w	r3, r7, #12
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80067a8:	2300      	movs	r3, #0
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <SystemClock_Config+0xcc>)
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	4a27      	ldr	r2, [pc, #156]	; (8006850 <SystemClock_Config+0xcc>)
 80067b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b6:	6413      	str	r3, [r2, #64]	; 0x40
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <SystemClock_Config+0xcc>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067c4:	2300      	movs	r3, #0
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	4b22      	ldr	r3, [pc, #136]	; (8006854 <SystemClock_Config+0xd0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a21      	ldr	r2, [pc, #132]	; (8006854 <SystemClock_Config+0xd0>)
 80067ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <SystemClock_Config+0xd0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80067e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067ea:	2302      	movs	r3, #2
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067f4:	2304      	movs	r3, #4
 80067f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80067f8:	23a8      	movs	r3, #168	; 0xa8
 80067fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80067fc:	2302      	movs	r3, #2
 80067fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006800:	2304      	movs	r3, #4
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006804:	f107 0320 	add.w	r3, r7, #32
 8006808:	4618      	mov	r0, r3
 800680a:	f003 fcb1 	bl	800a170 <HAL_RCC_OscConfig>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006814:	f000 fb78 	bl	8006f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006818:	230f      	movs	r3, #15
 800681a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800681c:	2302      	movs	r3, #2
 800681e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800682a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800682e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	2105      	movs	r1, #5
 8006836:	4618      	mov	r0, r3
 8006838:	f003 ff12 	bl	800a660 <HAL_RCC_ClockConfig>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006842:	f000 fb61 	bl	8006f08 <Error_Handler>
  }
}
 8006846:	bf00      	nop
 8006848:	3750      	adds	r7, #80	; 0x50
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40023800 	.word	0x40023800
 8006854:	40007000 	.word	0x40007000

08006858 <Is_iBus_Throttle_min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_min(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <Is_iBus_Throttle_min+0x40>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d115      	bne.n	8006890 <Is_iBus_Throttle_min+0x38>
	{
		ibus_rx_cplt_flag=0;
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <Is_iBus_Throttle_min+0x40>)
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 800686a:	2120      	movs	r1, #32
 800686c:	480b      	ldr	r0, [pc, #44]	; (800689c <Is_iBus_Throttle_min+0x44>)
 800686e:	f7fb fbc3 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d10b      	bne.n	8006890 <Is_iBus_Throttle_min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf, &iBus);
 8006878:	4909      	ldr	r1, [pc, #36]	; (80068a0 <Is_iBus_Throttle_min+0x48>)
 800687a:	4808      	ldr	r0, [pc, #32]	; (800689c <Is_iBus_Throttle_min+0x44>)
 800687c:	f7fb fbf3 	bl	8002066 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <Is_iBus_Throttle_min+0x48>)
 8006882:	889b      	ldrh	r3, [r3, #4]
 8006884:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006888:	4293      	cmp	r3, r2
 800688a:	d801      	bhi.n	8006890 <Is_iBus_Throttle_min+0x38>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <Is_iBus_Throttle_min+0x3a>
		}
	}

	return 0;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000280 	.word	0x20000280
 800689c:	200007c8 	.word	0x200007c8
 80068a0:	20000384 	.word	0x20000384

080068a4 <ESC_Calibration>:

void ESC_Calibration(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 167999;
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <ESC_Calibration+0x48>)
 80068aa:	4a11      	ldr	r2, [pc, #68]	; (80068f0 <ESC_Calibration+0x4c>)
 80068ac:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 167999;
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <ESC_Calibration+0x48>)
 80068b0:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <ESC_Calibration+0x4c>)
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 167999;
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <ESC_Calibration+0x48>)
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <ESC_Calibration+0x4c>)
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 167999;
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <ESC_Calibration+0x48>)
 80068bc:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <ESC_Calibration+0x4c>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 80068c0:	f641 3058 	movw	r0, #7000	; 0x1b58
 80068c4:	f001 fe46 	bl	8008554 <HAL_Delay>

	  TIM5->CCR1 = 84000;
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <ESC_Calibration+0x48>)
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <ESC_Calibration+0x50>)
 80068cc:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 84000;
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <ESC_Calibration+0x48>)
 80068d0:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <ESC_Calibration+0x50>)
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 84000;
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <ESC_Calibration+0x48>)
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <ESC_Calibration+0x50>)
 80068d8:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 84000;
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <ESC_Calibration+0x48>)
 80068dc:	4a05      	ldr	r2, [pc, #20]	; (80068f4 <ESC_Calibration+0x50>)
 80068de:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 80068e0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80068e4:	f001 fe36 	bl	8008554 <HAL_Delay>
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	0002903f 	.word	0x0002903f
 80068f4:	00014820 	.word	0x00014820

080068f8 <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <Is_iBus_Received+0x34>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d10f      	bne.n	8006924 <Is_iBus_Received+0x2c>
		{
			ibus_rx_cplt_flag=0;
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <Is_iBus_Received+0x34>)
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 800690a:	2120      	movs	r1, #32
 800690c:	4808      	ldr	r0, [pc, #32]	; (8006930 <Is_iBus_Received+0x38>)
 800690e:	f7fb fb73 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006912:	4603      	mov	r3, r0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <Is_iBus_Received+0x2c>
			{
				iBus_Parsing(&ibus_rx_buf, &iBus);
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <Is_iBus_Received+0x3c>)
 800691a:	4805      	ldr	r0, [pc, #20]	; (8006930 <Is_iBus_Received+0x38>)
 800691c:	f7fb fba3 	bl	8002066 <iBus_Parsing>
				return 1;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <Is_iBus_Received+0x2e>
			}
		}
		return 0;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000280 	.word	0x20000280
 8006930:	200007c8 	.word	0x200007c8
 8006934:	20000384 	.word	0x20000384

08006938 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 8006938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800693c:	b090      	sub	sp, #64	; 0x40
 800693e:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8006940:	f7fa fe02 	bl	8001548 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8006944:	f7fb f96c 	bl	8001c20 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8006948:	f644 6020 	movw	r0, #20000	; 0x4e20
 800694c:	f7fb f94a 	bl	8001be4 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8006950:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006954:	f7fb f955 	bl	8001c02 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 8006958:	489d      	ldr	r0, [pc, #628]	; (8006bd0 <BNO080_Calibration+0x298>)
 800695a:	f006 fcaf 	bl	800d2bc <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 800695e:	489d      	ldr	r0, [pc, #628]	; (8006bd4 <BNO080_Calibration+0x29c>)
 8006960:	f006 fcac 	bl	800d2bc <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8006964:	e0b8      	b.n	8006ad8 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 8006966:	f7fa fe85 	bl	8001674 <BNO080_dataAvailable>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 80ae 	bne.w	8006ace <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8006972:	f7fb f8b3 	bl	8001adc <BNO080_getMagX>
 8006976:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800697a:	f7fb f8c5 	bl	8001b08 <BNO080_getMagY>
 800697e:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8006982:	f7fb f8d7 	bl	8001b34 <BNO080_getMagZ>
 8006986:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800698a:	f7fb f8e9 	bl	8001b60 <BNO080_getMagAccuracy>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8006992:	f7fb f829 	bl	80019e8 <BNO080_getQuatI>
 8006996:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800699a:	f7fb f83b 	bl	8001a14 <BNO080_getQuatJ>
 800699e:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 80069a2:	f7fb f84d 	bl	8001a40 <BNO080_getQuatK>
 80069a6:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 80069aa:	f7fb f85f 	bl	8001a6c <BNO080_getQuatReal>
 80069ae:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 80069b2:	f7fb f887 	bl	8001ac4 <BNO080_getQuatAccuracy>
 80069b6:	4603      	mov	r3, r0
 80069b8:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 80069ba:	6a38      	ldr	r0, [r7, #32]
 80069bc:	f7f9 fdc4 	bl	8000548 <__aeabi_f2d>
 80069c0:	4680      	mov	r8, r0
 80069c2:	4689      	mov	r9, r1
 80069c4:	69f8      	ldr	r0, [r7, #28]
 80069c6:	f7f9 fdbf 	bl	8000548 <__aeabi_f2d>
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	69b8      	ldr	r0, [r7, #24]
 80069d0:	f7f9 fdba 	bl	8000548 <__aeabi_f2d>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069dc:	e9cd 4500 	strd	r4, r5, [sp]
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	487c      	ldr	r0, [pc, #496]	; (8006bd8 <BNO080_Calibration+0x2a0>)
 80069e6:	f006 fbe3 	bl	800d1b0 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <BNO080_Calibration+0xc0>
 80069f0:	487a      	ldr	r0, [pc, #488]	; (8006bdc <BNO080_Calibration+0x2a4>)
 80069f2:	f006 fbdd 	bl	800d1b0 <iprintf>
 80069f6:	e013      	b.n	8006a20 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d103      	bne.n	8006a06 <BNO080_Calibration+0xce>
 80069fe:	4878      	ldr	r0, [pc, #480]	; (8006be0 <BNO080_Calibration+0x2a8>)
 8006a00:	f006 fbd6 	bl	800d1b0 <iprintf>
 8006a04:	e00c      	b.n	8006a20 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d103      	bne.n	8006a14 <BNO080_Calibration+0xdc>
 8006a0c:	4875      	ldr	r0, [pc, #468]	; (8006be4 <BNO080_Calibration+0x2ac>)
 8006a0e:	f006 fbcf 	bl	800d1b0 <iprintf>
 8006a12:	e005      	b.n	8006a20 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d102      	bne.n	8006a20 <BNO080_Calibration+0xe8>
 8006a1a:	4873      	ldr	r0, [pc, #460]	; (8006be8 <BNO080_Calibration+0x2b0>)
 8006a1c:	f006 fbc8 	bl	800d1b0 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f7f9 fd91 	bl	8000548 <__aeabi_f2d>
 8006a26:	4682      	mov	sl, r0
 8006a28:	468b      	mov	fp, r1
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f7f9 fd8c 	bl	8000548 <__aeabi_f2d>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	6938      	ldr	r0, [r7, #16]
 8006a36:	f7f9 fd87 	bl	8000548 <__aeabi_f2d>
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7f9 fd82 	bl	8000548 <__aeabi_f2d>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006a50:	e9cd 4500 	strd	r4, r5, [sp]
 8006a54:	4652      	mov	r2, sl
 8006a56:	465b      	mov	r3, fp
 8006a58:	4864      	ldr	r0, [pc, #400]	; (8006bec <BNO080_Calibration+0x2b4>)
 8006a5a:	f006 fba9 	bl	800d1b0 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <BNO080_Calibration+0x134>
 8006a64:	4862      	ldr	r0, [pc, #392]	; (8006bf0 <BNO080_Calibration+0x2b8>)
 8006a66:	f006 fc29 	bl	800d2bc <puts>
 8006a6a:	e013      	b.n	8006a94 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d103      	bne.n	8006a7a <BNO080_Calibration+0x142>
 8006a72:	4860      	ldr	r0, [pc, #384]	; (8006bf4 <BNO080_Calibration+0x2bc>)
 8006a74:	f006 fc22 	bl	800d2bc <puts>
 8006a78:	e00c      	b.n	8006a94 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d103      	bne.n	8006a88 <BNO080_Calibration+0x150>
 8006a80:	485d      	ldr	r0, [pc, #372]	; (8006bf8 <BNO080_Calibration+0x2c0>)
 8006a82:	f006 fc1b 	bl	800d2bc <puts>
 8006a86:	e005      	b.n	8006a94 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d102      	bne.n	8006a94 <BNO080_Calibration+0x15c>
 8006a8e:	485b      	ldr	r0, [pc, #364]	; (8006bfc <BNO080_Calibration+0x2c4>)
 8006a90:	f006 fc14 	bl	800d2bc <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d110      	bne.n	8006abc <BNO080_Calibration+0x184>
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d10d      	bne.n	8006abc <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8006aa0:	2107      	movs	r1, #7
 8006aa2:	4857      	ldr	r0, [pc, #348]	; (8006c00 <BNO080_Calibration+0x2c8>)
 8006aa4:	f7fd fc09 	bl	80042ba <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8006aa8:	4b56      	ldr	r3, [pc, #344]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006aaa:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ab4:	4853      	ldr	r0, [pc, #332]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006ab6:	f7fd fb9b 	bl	80041f0 <LL_TIM_CC_EnableChannel>
 8006aba:	e008      	b.n	8006ace <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8006abc:	2107      	movs	r1, #7
 8006abe:	4850      	ldr	r0, [pc, #320]	; (8006c00 <BNO080_Calibration+0x2c8>)
 8006ac0:	f7fd fc09 	bl	80042d6 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ac8:	484e      	ldr	r0, [pc, #312]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006aca:	f7fd fba2 	bl	8004212 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8006ace:	f7ff ff13 	bl	80068f8 <Is_iBus_Received>
		HAL_Delay(100);
 8006ad2:	2064      	movs	r0, #100	; 0x64
 8006ad4:	f001 fd3e 	bl	8008554 <HAL_Delay>
	while(iBus.SwC == 1500)
 8006ad8:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <BNO080_Calibration+0x2d0>)
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f43f af40 	beq.w	8006966 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8006ae6:	2107      	movs	r1, #7
 8006ae8:	4845      	ldr	r0, [pc, #276]	; (8006c00 <BNO080_Calibration+0x2c8>)
 8006aea:	f7fd fbf4 	bl	80042d6 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006af2:	4844      	ldr	r0, [pc, #272]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006af4:	f7fd fb8d 	bl	8004212 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8006af8:	f7fb f980 	bl	8001dfc <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8006afc:	f7fb f962 	bl	8001dc4 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8006b00:	2364      	movs	r3, #100	; 0x64
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3b01      	subs	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d02f      	beq.n	8006b70 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 8006b10:	f7fa fdb0 	bl	8001674 <BNO080_dataAvailable>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d026      	beq.n	8006b68 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 8006b1a:	f7fb f889 	bl	8001c30 <BNO080_calibrationComplete>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d121      	bne.n	8006b68 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 8006b24:	4839      	ldr	r0, [pc, #228]	; (8006c0c <BNO080_Calibration+0x2d4>)
 8006b26:	f006 fbc9 	bl	800d2bc <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b2e:	4835      	ldr	r0, [pc, #212]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b30:	f7fd fb5e 	bl	80041f0 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 8006b34:	4b33      	ldr	r3, [pc, #204]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8006b3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b40:	f001 fd08 	bl	8008554 <HAL_Delay>
				TIM3->PSC = 1500;
 8006b44:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8006b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b50:	f001 fd00 	bl	8008554 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b58:	482a      	ldr	r0, [pc, #168]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b5a:	f7fd fb5a 	bl	8004212 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8006b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b62:	f001 fcf7 	bl	8008554 <HAL_Delay>
				break;
 8006b66:	e004      	b.n	8006b72 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 8006b68:	200a      	movs	r0, #10
 8006b6a:	f001 fcf3 	bl	8008554 <HAL_Delay>
		if(--counter == 0) break;
 8006b6e:	e7c9      	b.n	8006b04 <BNO080_Calibration+0x1cc>
 8006b70:	bf00      	nop
	}
	if(counter == 0)
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d120      	bne.n	8006bba <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8006b78:	4825      	ldr	r0, [pc, #148]	; (8006c10 <BNO080_Calibration+0x2d8>)
 8006b7a:	f006 fb9f 	bl	800d2bc <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b82:	4820      	ldr	r0, [pc, #128]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b84:	f7fd fb34 	bl	80041f0 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b8e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8006b90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b94:	f001 fcde 	bl	8008554 <HAL_Delay>
		TIM3->PSC = 2000;
 8006b98:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006b9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8006ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006ba4:	f001 fcd6 	bl	8008554 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bac:	4815      	ldr	r0, [pc, #84]	; (8006c04 <BNO080_Calibration+0x2cc>)
 8006bae:	f7fd fb30 	bl	8004212 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8006bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bb6:	f001 fccd 	bl	8008554 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8006bba:	f7fa fcc5 	bl	8001548 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8006bbe:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006bc2:	f7fb f800 	bl	8001bc6 <BNO080_enableRotationVector>
}
 8006bc6:	bf00      	nop
 8006bc8:	3728      	adds	r7, #40	; 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd0:	08010388 	.word	0x08010388
 8006bd4:	080103d4 	.word	0x080103d4
 8006bd8:	080103f8 	.word	0x080103f8
 8006bdc:	08010404 	.word	0x08010404
 8006be0:	08010410 	.word	0x08010410
 8006be4:	08010418 	.word	0x08010418
 8006be8:	08010420 	.word	0x08010420
 8006bec:	08010428 	.word	0x08010428
 8006bf0:	08010438 	.word	0x08010438
 8006bf4:	08010444 	.word	0x08010444
 8006bf8:	08010448 	.word	0x08010448
 8006bfc:	08010450 	.word	0x08010450
 8006c00:	40020800 	.word	0x40020800
 8006c04:	40000400 	.word	0x40000400
 8006c08:	20000384 	.word	0x20000384
 8006c0c:	08010458 	.word	0x08010458
 8006c10:	08010480 	.word	0x08010480

08006c14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;
	if(huart->Instance = USART1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <HAL_UART_RxCpltCallback+0xc0>)
 8006c20:	601a      	str	r2, [r3, #0]
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8006c22:	2201      	movs	r2, #1
 8006c24:	492c      	ldr	r1, [pc, #176]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c26:	482d      	ldr	r0, [pc, #180]	; (8006cdc <HAL_UART_RxCpltCallback+0xc8>)
 8006c28:	f004 f83a 	bl	800aca0 <HAL_UART_Receive_IT>

		switch(cnt)
 8006c2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b13      	cmp	r3, #19
 8006c32:	d02e      	beq.n	8006c92 <HAL_UART_RxCpltCallback+0x7e>
 8006c34:	2b13      	cmp	r3, #19
 8006c36:	dc3a      	bgt.n	8006cae <HAL_UART_RxCpltCallback+0x9a>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_UART_RxCpltCallback+0x2e>
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d012      	beq.n	8006c66 <HAL_UART_RxCpltCallback+0x52>
 8006c40:	e035      	b.n	8006cae <HAL_UART_RxCpltCallback+0x9a>
				{
				case 0:
					if(uart1_rx_data==0x47)
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b47      	cmp	r3, #71	; 0x47
 8006c48:	d13f      	bne.n	8006cca <HAL_UART_RxCpltCallback+0xb6>
					{
						telemetry_rx_buf[cnt]=uart1_rx_data;
 8006c4a:	4b25      	ldr	r3, [pc, #148]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c52:	7819      	ldrb	r1, [r3, #0]
 8006c54:	4b23      	ldr	r3, [pc, #140]	; (8006ce4 <HAL_UART_RxCpltCallback+0xd0>)
 8006c56:	5499      	strb	r1, [r3, r2]
						cnt++;
 8006c58:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c62:	701a      	strb	r2, [r3, #0]
					}
					break;
 8006c64:	e031      	b.n	8006cca <HAL_UART_RxCpltCallback+0xb6>
				case 1:
					if(uart1_rx_data==0x53)
 8006c66:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b53      	cmp	r3, #83	; 0x53
 8006c6c:	d10d      	bne.n	8006c8a <HAL_UART_RxCpltCallback+0x76>
					{
						telemetry_rx_buf[cnt]=uart1_rx_data;
 8006c6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	4b18      	ldr	r3, [pc, #96]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c76:	7819      	ldrb	r1, [r3, #0]
 8006c78:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <HAL_UART_RxCpltCallback+0xd0>)
 8006c7a:	5499      	strb	r1, [r3, r2]
						cnt++;
 8006c7c:	4b18      	ldr	r3, [pc, #96]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c86:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt=0;
					break;
 8006c88:	e020      	b.n	8006ccc <HAL_UART_RxCpltCallback+0xb8>
						cnt=0;
 8006c8a:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
					break;
 8006c90:	e01c      	b.n	8006ccc <HAL_UART_RxCpltCallback+0xb8>

				case 19:
					telemetry_rx_buf[cnt]=uart1_rx_data;
 8006c92:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006c9a:	7819      	ldrb	r1, [r3, #0]
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <HAL_UART_RxCpltCallback+0xd0>)
 8006c9e:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
					telemetry_rx_cplt_flag = 1;
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <HAL_UART_RxCpltCallback+0xd4>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
					break;
 8006cac:	e00e      	b.n	8006ccc <HAL_UART_RxCpltCallback+0xb8>

				default:
					telemetry_rx_buf[cnt]=uart1_rx_data;
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <HAL_UART_RxCpltCallback+0xc4>)
 8006cb6:	7819      	ldrb	r1, [r3, #0]
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <HAL_UART_RxCpltCallback+0xd0>)
 8006cba:	5499      	strb	r1, [r3, r2]
					cnt++;
 8006cbc:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <HAL_UART_RxCpltCallback+0xcc>)
 8006cc6:	701a      	strb	r2, [r3, #0]
					break;
 8006cc8:	e000      	b.n	8006ccc <HAL_UART_RxCpltCallback+0xb8>
					break;
 8006cca:	bf00      	nop
				}
	}

}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40011000 	.word	0x40011000
 8006cd8:	20000281 	.word	0x20000281
 8006cdc:	20000870 	.word	0x20000870
 8006ce0:	20000278 	.word	0x20000278
 8006ce4:	20000778 	.word	0x20000778
 8006ce8:	2000078c 	.word	0x2000078c

08006cec <Encode_Msg_PID_Gain>:
		  telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
	  }
}

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6178      	str	r0, [r7, #20]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8006cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8006cfe:	ed87 1a01 	vstr	s2, [r7, #4]
 8006d02:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2246      	movs	r2, #70	; 0x46
 8006d08:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	2243      	movs	r2, #67	; 0x43
 8006d10:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[2] = id;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	3302      	adds	r3, #2
 8006d16:	7cfa      	ldrb	r2, [r7, #19]
 8006d18:	701a      	strb	r2, [r3, #0]

//	  memcpy(telemetry_tx_buf[3], &p, 4);
//	  memcpy(telemetry_tx_buf[7], &i, 4);
//	  memcpy(telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	3303      	adds	r3, #3
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3307      	adds	r3, #7
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	330b      	adds	r3, #11
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	330f      	adds	r3, #15
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	3310      	adds	r3, #16
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3311      	adds	r3, #17
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	3312      	adds	r3, #18
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	3313      	adds	r3, #19
 8006d56:	22ff      	movs	r2, #255	; 0xff
 8006d58:	701a      	strb	r2, [r3, #0]

	  for(int i=0; i<19; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e00e      	b.n	8006d7e <Encode_Msg_PID_Gain+0x92>
	  {
		  telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	3313      	adds	r3, #19
 8006d64:	7819      	ldrb	r1, [r3, #0]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	3313      	adds	r3, #19
 8006d72:	1a8a      	subs	r2, r1, r2
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<19; i++)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2b12      	cmp	r3, #18
 8006d82:	dded      	ble.n	8006d60 <Encode_Msg_PID_Gain+0x74>
	  }
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3724      	adds	r7, #36	; 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <Encode_Msg_Altitude>:
     telemetry_tx_buf[34] = ((int)actual_pressure_fast) >> 8;
     telemetry_tx_buf[35] = ((int)actual_pressure_fast);
}

void Encode_Msg_Altitude(unsigned char* telemetry_tx_buf)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x88;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2288      	movs	r2, #136	; 0x88
 8006da0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x18;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3301      	adds	r3, #1
 8006da6:	2218      	movs	r2, #24
 8006da8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = ((int)actual_pressure_fast) >> 24;
 8006daa:	4b55      	ldr	r3, [pc, #340]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006dac:	edd3 7a00 	vldr	s15, [r3]
 8006db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db4:	ee17 3a90 	vmov	r3, s15
 8006db8:	161a      	asrs	r2, r3, #24
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[3] = ((int)actual_pressure_fast) >> 16;
 8006dc2:	4b4f      	ldr	r3, [pc, #316]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006dc4:	edd3 7a00 	vldr	s15, [r3]
 8006dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dcc:	ee17 3a90 	vmov	r3, s15
 8006dd0:	141a      	asrs	r2, r3, #16
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3303      	adds	r3, #3
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((int)actual_pressure_fast) >> 8;
 8006dda:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006ddc:	edd3 7a00 	vldr	s15, [r3]
 8006de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de4:	ee17 3a90 	vmov	r3, s15
 8006de8:	121a      	asrs	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = ((int)actual_pressure_fast);
 8006df2:	4b43      	ldr	r3, [pc, #268]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006df4:	edd3 7a00 	vldr	s15, [r3]
 8006df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dfc:	edc7 7a00 	vstr	s15, [r7]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3305      	adds	r3, #5
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[6] = ((int)last_altitude) >> 24;
 8006e0a:	4b3e      	ldr	r3, [pc, #248]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e0c:	edd3 7a00 	vldr	s15, [r3]
 8006e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e14:	ee17 3a90 	vmov	r3, s15
 8006e18:	161a      	asrs	r2, r3, #24
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3306      	adds	r3, #6
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[7] = ((int)last_altitude) >> 16;
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e24:	edd3 7a00 	vldr	s15, [r3]
 8006e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e2c:	ee17 3a90 	vmov	r3, s15
 8006e30:	141a      	asrs	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3307      	adds	r3, #7
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((int)last_altitude) >> 8;
 8006e3a:	4b32      	ldr	r3, [pc, #200]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e3c:	edd3 7a00 	vldr	s15, [r3]
 8006e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e44:	ee17 3a90 	vmov	r3, s15
 8006e48:	121a      	asrs	r2, r3, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = ((int)last_altitude);
 8006e52:	4b2c      	ldr	r3, [pc, #176]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e54:	edd3 7a00 	vldr	s15, [r3]
 8006e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e5c:	edc7 7a00 	vstr	s15, [r7]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3309      	adds	r3, #9
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[10] = ((int)(last_altitude - actual_pressure_fast)) >> 24;
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e6c:	ed93 7a00 	vldr	s14, [r3]
 8006e70:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006e72:	edd3 7a00 	vldr	s15, [r3]
 8006e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e7e:	ee17 3a90 	vmov	r3, s15
 8006e82:	161a      	asrs	r2, r3, #24
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	330a      	adds	r3, #10
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[11] = ((int)(last_altitude - actual_pressure_fast)) >> 16;
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006e8e:	ed93 7a00 	vldr	s14, [r3]
 8006e92:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006e94:	edd3 7a00 	vldr	s15, [r3]
 8006e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea0:	ee17 3a90 	vmov	r3, s15
 8006ea4:	141a      	asrs	r2, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	330b      	adds	r3, #11
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((int)(last_altitude - actual_pressure_fast)) >> 8;
 8006eae:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006eb0:	ed93 7a00 	vldr	s14, [r3]
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006eb6:	edd3 7a00 	vldr	s15, [r3]
 8006eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ec2:	ee17 3a90 	vmov	r3, s15
 8006ec6:	121a      	asrs	r2, r3, #8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[13] = ((int)(last_altitude - actual_pressure_fast));
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <Encode_Msg_Altitude+0x170>)
 8006ed2:	ed93 7a00 	vldr	s14, [r3]
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <Encode_Msg_Altitude+0x16c>)
 8006ed8:	edd3 7a00 	vldr	s15, [r3]
 8006edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ee4:	edc7 7a00 	vstr	s15, [r7]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	330d      	adds	r3, #13
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000270 	.word	0x20000270
 8006f04:	20000760 	.word	0x20000760

08006f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f0c:	b672      	cpsid	i
}
 8006f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f10:	e7fe      	b.n	8006f10 <Error_Handler+0x8>

08006f12 <LL_SPI_SetStandard>:
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f023 0210 	bic.w	r2, r3, #16
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	605a      	str	r2, [r3, #4]
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <LL_AHB1_GRP1_EnableClock>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f44:	4907      	ldr	r1, [pc, #28]	; (8006f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4013      	ands	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f56:	68fb      	ldr	r3, [r7, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	40023800 	.word	0x40023800

08006f68 <LL_APB1_GRP1_EnableClock>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f74:	4907      	ldr	r1, [pc, #28]	; (8006f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4013      	ands	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40023800 	.word	0x40023800

08006f98 <LL_APB2_GRP1_EnableClock>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006fa0:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fa4:	4907      	ldr	r1, [pc, #28]	; (8006fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	40023800 	.word	0x40023800

08006fc8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b090      	sub	sp, #64	; 0x40
 8006fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	2228      	movs	r2, #40	; 0x28
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f005 fc78 	bl	800c8cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fdc:	463b      	mov	r3, r7
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	609a      	str	r2, [r3, #8]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	611a      	str	r2, [r3, #16]
 8006fea:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8006fec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ff0:	f7ff ffd2 	bl	8006f98 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f7ff ff9f 	bl	8006f38 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8006ffa:	23e0      	movs	r3, #224	; 0xe0
 8006ffc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006ffe:	2302      	movs	r3, #2
 8007000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007002:	2303      	movs	r3, #3
 8007004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800700e:	2305      	movs	r3, #5
 8007010:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007012:	463b      	mov	r3, r7
 8007014:	4619      	mov	r1, r3
 8007016:	4813      	ldr	r0, [pc, #76]	; (8007064 <MX_SPI1_Init+0x9c>)
 8007018:	f004 fccf 	bl	800b9ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007020:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007024:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007026:	2300      	movs	r3, #0
 8007028:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800702a:	2302      	movs	r3, #2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800702e:	2301      	movs	r3, #1
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8007038:	2310      	movs	r3, #16
 800703a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800703c:	2300      	movs	r3, #0
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007040:	2300      	movs	r3, #0
 8007042:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007044:	230a      	movs	r3, #10
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	4619      	mov	r1, r3
 800704e:	4806      	ldr	r0, [pc, #24]	; (8007068 <MX_SPI1_Init+0xa0>)
 8007050:	f004 fe83 	bl	800bd5a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8007054:	2100      	movs	r1, #0
 8007056:	4804      	ldr	r0, [pc, #16]	; (8007068 <MX_SPI1_Init+0xa0>)
 8007058:	f7ff ff5b 	bl	8006f12 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800705c:	bf00      	nop
 800705e:	3740      	adds	r7, #64	; 0x40
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40020000 	.word	0x40020000
 8007068:	40013000 	.word	0x40013000

0800706c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	; 0x40
 8007070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	2228      	movs	r2, #40	; 0x28
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f005 fc26 	bl	800c8cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007080:	463b      	mov	r3, r7
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	605a      	str	r2, [r3, #4]
 8007088:	609a      	str	r2, [r3, #8]
 800708a:	60da      	str	r2, [r3, #12]
 800708c:	611a      	str	r2, [r3, #16]
 800708e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8007090:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007094:	f7ff ff68 	bl	8006f68 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007098:	2002      	movs	r0, #2
 800709a:	f7ff ff4d 	bl	8006f38 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800709e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80070a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80070a4:	2302      	movs	r3, #2
 80070a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80070a8:	2303      	movs	r3, #3
 80070aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80070b4:	2305      	movs	r3, #5
 80070b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070b8:	463b      	mov	r3, r7
 80070ba:	4619      	mov	r1, r3
 80070bc:	4813      	ldr	r0, [pc, #76]	; (800710c <MX_SPI2_Init+0xa0>)
 80070be:	f004 fc7c 	bl	800b9ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80070c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80070ca:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80070cc:	2300      	movs	r3, #0
 80070ce:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80070d0:	2302      	movs	r3, #2
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80070d4:	2301      	movs	r3, #1
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80070d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80070de:	2318      	movs	r3, #24
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80070e2:	2300      	movs	r3, #0
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80070ea:	230a      	movs	r3, #10
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80070ee:	f107 0318 	add.w	r3, r7, #24
 80070f2:	4619      	mov	r1, r3
 80070f4:	4806      	ldr	r0, [pc, #24]	; (8007110 <MX_SPI2_Init+0xa4>)
 80070f6:	f004 fe30 	bl	800bd5a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80070fa:	2100      	movs	r1, #0
 80070fc:	4804      	ldr	r0, [pc, #16]	; (8007110 <MX_SPI2_Init+0xa4>)
 80070fe:	f7ff ff08 	bl	8006f12 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007102:	bf00      	nop
 8007104:	3740      	adds	r7, #64	; 0x40
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40020400 	.word	0x40020400
 8007110:	40003800 	.word	0x40003800

08007114 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b090      	sub	sp, #64	; 0x40
 8007118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800711a:	f107 0318 	add.w	r3, r7, #24
 800711e:	2228      	movs	r2, #40	; 0x28
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f005 fbd2 	bl	800c8cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007128:	463b      	mov	r3, r7
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	609a      	str	r2, [r3, #8]
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	611a      	str	r2, [r3, #16]
 8007136:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8007138:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800713c:	f7ff ff14 	bl	8006f68 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007140:	2002      	movs	r0, #2
 8007142:	f7ff fef9 	bl	8006f38 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8007146:	2338      	movs	r3, #56	; 0x38
 8007148:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800714a:	2302      	movs	r3, #2
 800714c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800714e:	2303      	movs	r3, #3
 8007150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800715a:	2306      	movs	r3, #6
 800715c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715e:	463b      	mov	r3, r7
 8007160:	4619      	mov	r1, r3
 8007162:	4813      	ldr	r0, [pc, #76]	; (80071b0 <MX_SPI3_Init+0x9c>)
 8007164:	f004 fc29 	bl	800b9ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007168:	2300      	movs	r3, #0
 800716a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800716c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007170:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007172:	2300      	movs	r3, #0
 8007174:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007176:	2302      	movs	r3, #2
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800717a:	2301      	movs	r3, #1
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800717e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8007184:	2308      	movs	r3, #8
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007188:	2300      	movs	r3, #0
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800718c:	2300      	movs	r3, #0
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007190:	230a      	movs	r3, #10
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8007194:	f107 0318 	add.w	r3, r7, #24
 8007198:	4619      	mov	r1, r3
 800719a:	4806      	ldr	r0, [pc, #24]	; (80071b4 <MX_SPI3_Init+0xa0>)
 800719c:	f004 fddd 	bl	800bd5a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80071a0:	2100      	movs	r1, #0
 80071a2:	4804      	ldr	r0, [pc, #16]	; (80071b4 <MX_SPI3_Init+0xa0>)
 80071a4:	f7ff feb5 	bl	8006f12 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80071a8:	bf00      	nop
 80071aa:	3740      	adds	r7, #64	; 0x40
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40020400 	.word	0x40020400
 80071b4:	40003c00 	.word	0x40003c00

080071b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <HAL_MspInit+0x4c>)
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	4a0f      	ldr	r2, [pc, #60]	; (8007204 <HAL_MspInit+0x4c>)
 80071c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071cc:	6453      	str	r3, [r2, #68]	; 0x44
 80071ce:	4b0d      	ldr	r3, [pc, #52]	; (8007204 <HAL_MspInit+0x4c>)
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071da:	2300      	movs	r3, #0
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_MspInit+0x4c>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	4a08      	ldr	r2, [pc, #32]	; (8007204 <HAL_MspInit+0x4c>)
 80071e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ea:	4b06      	ldr	r3, [pc, #24]	; (8007204 <HAL_MspInit+0x4c>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800

08007208 <LL_TIM_ClearFlag_UPDATE>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f06f 0201 	mvn.w	r2, #1
 8007216:	611a      	str	r2, [r3, #16]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <LL_USART_IsActiveFlag_RXNE>:
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LL_USART_ClearFlag_RXNE>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f06f 0220 	mvn.w	r2, #32
 800727e:	601a      	str	r2, [r3, #0]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <LL_USART_ReceiveData8>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	b2db      	uxtb	r3, r3
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072aa:	e7fe      	b.n	80072aa <NMI_Handler+0x4>

080072ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072b0:	e7fe      	b.n	80072b0 <HardFault_Handler+0x4>

080072b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072b2:	b480      	push	{r7}
 80072b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072b6:	e7fe      	b.n	80072b6 <MemManage_Handler+0x4>

080072b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072bc:	e7fe      	b.n	80072bc <BusFault_Handler+0x4>

080072be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072be:	b480      	push	{r7}
 80072c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072c2:	e7fe      	b.n	80072c2 <UsageFault_Handler+0x4>

080072c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072f2:	f001 f90f 	bl	8008514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007300:	4802      	ldr	r0, [pc, #8]	; (800730c <USART1_IRQHandler+0x10>)
 8007302:	f003 fcfd 	bl	800ad00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000870 	.word	0x20000870

08007310 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0 ;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8007314:	4833      	ldr	r0, [pc, #204]	; (80073e4 <UART4_IRQHandler+0xd4>)
 8007316:	f7ff ff98 	bl	800724a <LL_USART_IsActiveFlag_RXNE>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05b      	beq.n	80073d8 <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4);
 8007320:	4830      	ldr	r0, [pc, #192]	; (80073e4 <UART4_IRQHandler+0xd4>)
 8007322:	f7ff ffa5 	bl	8007270 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8007326:	482f      	ldr	r0, [pc, #188]	; (80073e4 <UART4_IRQHandler+0xd4>)
 8007328:	f7ff ffb0 	bl	800728c <LL_USART_ReceiveData8>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <UART4_IRQHandler+0xd8>)
 8007332:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <UART4_IRQHandler+0xdc>)
 8007336:	2201      	movs	r2, #1
 8007338:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 800733a:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <UART4_IRQHandler+0xe0>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b23      	cmp	r3, #35	; 0x23
 8007340:	d02e      	beq.n	80073a0 <UART4_IRQHandler+0x90>
 8007342:	2b23      	cmp	r3, #35	; 0x23
 8007344:	dc3a      	bgt.n	80073bc <UART4_IRQHandler+0xac>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <UART4_IRQHandler+0x40>
 800734a:	2b01      	cmp	r3, #1
 800734c:	d012      	beq.n	8007374 <UART4_IRQHandler+0x64>
 800734e:	e035      	b.n	80073bc <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 8007350:	4b25      	ldr	r3, [pc, #148]	; (80073e8 <UART4_IRQHandler+0xd8>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2bb5      	cmp	r3, #181	; 0xb5
 8007356:	d141      	bne.n	80073dc <UART4_IRQHandler+0xcc>
				{
					m8n_rx_buf[cnt] = uart4_rx_data;
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <UART4_IRQHandler+0xe0>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <UART4_IRQHandler+0xd8>)
 8007360:	7819      	ldrb	r1, [r3, #0]
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <UART4_IRQHandler+0xe4>)
 8007364:	5499      	strb	r1, [r3, r2]
					cnt++;
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <UART4_IRQHandler+0xe0>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <UART4_IRQHandler+0xe0>)
 8007370:	701a      	strb	r2, [r3, #0]
				}
				break;
 8007372:	e033      	b.n	80073dc <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 8007374:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <UART4_IRQHandler+0xd8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b62      	cmp	r3, #98	; 0x62
 800737a:	d10d      	bne.n	8007398 <UART4_IRQHandler+0x88>
				{
					m8n_rx_buf[cnt] = uart4_rx_data;
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <UART4_IRQHandler+0xe0>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <UART4_IRQHandler+0xd8>)
 8007384:	7819      	ldrb	r1, [r3, #0]
 8007386:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <UART4_IRQHandler+0xe4>)
 8007388:	5499      	strb	r1, [r3, r2]
					cnt++;
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <UART4_IRQHandler+0xe0>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <UART4_IRQHandler+0xe0>)
 8007394:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8007396:	e022      	b.n	80073de <UART4_IRQHandler+0xce>
					cnt = 0;
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <UART4_IRQHandler+0xe0>)
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
				break;
 800739e:	e01e      	b.n	80073de <UART4_IRQHandler+0xce>

			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <UART4_IRQHandler+0xe0>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <UART4_IRQHandler+0xd8>)
 80073a8:	7819      	ldrb	r1, [r3, #0]
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <UART4_IRQHandler+0xe4>)
 80073ac:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <UART4_IRQHandler+0xe0>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <UART4_IRQHandler+0xe8>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
				break;
 80073ba:	e010      	b.n	80073de <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 80073bc:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <UART4_IRQHandler+0xe0>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <UART4_IRQHandler+0xd8>)
 80073c4:	7819      	ldrb	r1, [r3, #0]
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <UART4_IRQHandler+0xe4>)
 80073c8:	5499      	strb	r1, [r3, r2]
				cnt++;
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <UART4_IRQHandler+0xe0>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <UART4_IRQHandler+0xe0>)
 80073d4:	701a      	strb	r2, [r3, #0]
				break;
 80073d6:	e002      	b.n	80073de <UART4_IRQHandler+0xce>
			}
		}
 80073d8:	bf00      	nop
 80073da:	e000      	b.n	80073de <UART4_IRQHandler+0xce>
				break;
 80073dc:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40004c00 	.word	0x40004c00
 80073e8:	2000027a 	.word	0x2000027a
 80073ec:	20000279 	.word	0x20000279
 80073f0:	20000286 	.word	0x20000286
 80073f4:	200007ec 	.word	0x200007ec
 80073f8:	2000027f 	.word	0x2000027f

080073fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt=0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8007400:	4833      	ldr	r0, [pc, #204]	; (80074d0 <UART5_IRQHandler+0xd4>)
 8007402:	f7ff ff22 	bl	800724a <LL_USART_IsActiveFlag_RXNE>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05b      	beq.n	80074c4 <UART5_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 800740c:	4830      	ldr	r0, [pc, #192]	; (80074d0 <UART5_IRQHandler+0xd4>)
 800740e:	f7ff ff2f 	bl	8007270 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8007412:	482f      	ldr	r0, [pc, #188]	; (80074d0 <UART5_IRQHandler+0xd4>)
 8007414:	f7ff ff3a 	bl	800728c <LL_USART_ReceiveData8>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <UART5_IRQHandler+0xd8>)
 800741e:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8007420:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <UART5_IRQHandler+0xdc>)
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8007426:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b1f      	cmp	r3, #31
 800742c:	d02e      	beq.n	800748c <UART5_IRQHandler+0x90>
 800742e:	2b1f      	cmp	r3, #31
 8007430:	dc3a      	bgt.n	80074a8 <UART5_IRQHandler+0xac>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <UART5_IRQHandler+0x40>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d012      	beq.n	8007460 <UART5_IRQHandler+0x64>
 800743a:	e035      	b.n	80074a8 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data==0x20)
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <UART5_IRQHandler+0xd8>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b20      	cmp	r3, #32
 8007442:	d141      	bne.n	80074c8 <UART5_IRQHandler+0xcc>
			{
				ibus_rx_buf[cnt]=uart5_rx_data;
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <UART5_IRQHandler+0xd8>)
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <UART5_IRQHandler+0xe4>)
 8007450:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <UART5_IRQHandler+0xe0>)
 800745c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800745e:	e033      	b.n	80074c8 <UART5_IRQHandler+0xcc>
		case 1:
			if(uart5_rx_data==0x40)
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <UART5_IRQHandler+0xd8>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	d10d      	bne.n	8007484 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt]=uart5_rx_data;
 8007468:	4b1c      	ldr	r3, [pc, #112]	; (80074dc <UART5_IRQHandler+0xe0>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	4b19      	ldr	r3, [pc, #100]	; (80074d4 <UART5_IRQHandler+0xd8>)
 8007470:	7819      	ldrb	r1, [r3, #0]
 8007472:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <UART5_IRQHandler+0xe4>)
 8007474:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007476:	4b19      	ldr	r3, [pc, #100]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4b17      	ldr	r3, [pc, #92]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007480:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt=0;
			break;
 8007482:	e022      	b.n	80074ca <UART5_IRQHandler+0xce>
				cnt=0;
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <UART5_IRQHandler+0xe0>)
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
			break;
 800748a:	e01e      	b.n	80074ca <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt]=uart5_rx_data;
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <UART5_IRQHandler+0xe0>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <UART5_IRQHandler+0xd8>)
 8007494:	7819      	ldrb	r1, [r3, #0]
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <UART5_IRQHandler+0xe4>)
 8007498:	5499      	strb	r1, [r3, r2]
			cnt=0;
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <UART5_IRQHandler+0xe0>)
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <UART5_IRQHandler+0xe8>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
			break;
 80074a6:	e010      	b.n	80074ca <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt]=uart5_rx_data;
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <UART5_IRQHandler+0xe0>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <UART5_IRQHandler+0xd8>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <UART5_IRQHandler+0xe4>)
 80074b4:	5499      	strb	r1, [r3, r2]
			cnt++;
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <UART5_IRQHandler+0xe0>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <UART5_IRQHandler+0xe0>)
 80074c0:	701a      	strb	r2, [r3, #0]
			break;
 80074c2:	e002      	b.n	80074ca <UART5_IRQHandler+0xce>
		}
//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);

	}
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <UART5_IRQHandler+0xce>
			break;
 80074c8:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40005000 	.word	0x40005000
 80074d4:	2000027c 	.word	0x2000027c
 80074d8:	2000027b 	.word	0x2000027b
 80074dc:	20000287 	.word	0x20000287
 80074e0:	200007c8 	.word	0x200007c8
 80074e4:	20000280 	.word	0x20000280

080074e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned char tim7_500ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 80074ec:	4825      	ldr	r0, [pc, #148]	; (8007584 <TIM7_IRQHandler+0x9c>)
 80074ee:	f7ff fe99 	bl	8007224 <LL_TIM_IsActiveFlag_UPDATE>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d043      	beq.n	8007580 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80074f8:	4822      	ldr	r0, [pc, #136]	; (8007584 <TIM7_IRQHandler+0x9c>)
 80074fa:	f7ff fe85 	bl	8007208 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <TIM7_IRQHandler+0xa0>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b20      	ldr	r3, [pc, #128]	; (8007588 <TIM7_IRQHandler+0xa0>)
 8007508:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count ==1)
 800750a:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <TIM7_IRQHandler+0xa0>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d105      	bne.n	800751e <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count=0;
 8007512:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <TIM7_IRQHandler+0xa0>)
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag =1;
 8007518:	4b1c      	ldr	r3, [pc, #112]	; (800758c <TIM7_IRQHandler+0xa4>)
 800751a:	2201      	movs	r2, #1
 800751c:	701a      	strb	r2, [r3, #0]
		}
		tim7_20ms_count++;
 800751e:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <TIM7_IRQHandler+0xa8>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4b1a      	ldr	r3, [pc, #104]	; (8007590 <TIM7_IRQHandler+0xa8>)
 8007528:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count ==20)
 800752a:	4b19      	ldr	r3, [pc, #100]	; (8007590 <TIM7_IRQHandler+0xa8>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b14      	cmp	r3, #20
 8007530:	d105      	bne.n	800753e <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count=0;
 8007532:	4b17      	ldr	r3, [pc, #92]	; (8007590 <TIM7_IRQHandler+0xa8>)
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag =1;
 8007538:	4b16      	ldr	r3, [pc, #88]	; (8007594 <TIM7_IRQHandler+0xac>)
 800753a:	2201      	movs	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
		}
		tim7_100ms_count++;
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <TIM7_IRQHandler+0xb0>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	b2da      	uxtb	r2, r3
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <TIM7_IRQHandler+0xb0>)
 8007548:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count ==100)
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <TIM7_IRQHandler+0xb0>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b64      	cmp	r3, #100	; 0x64
 8007550:	d105      	bne.n	800755e <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count =0;
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <TIM7_IRQHandler+0xb0>)
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag =1;
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <TIM7_IRQHandler+0xb4>)
 800755a:	2201      	movs	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]
		}
		tim7_1000ms_count++;
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <TIM7_IRQHandler+0xb8>)
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <TIM7_IRQHandler+0xb8>)
 8007568:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count ==1000)
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <TIM7_IRQHandler+0xb8>)
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007572:	d105      	bne.n	8007580 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count =0;
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <TIM7_IRQHandler+0xb8>)
 8007576:	2200      	movs	r2, #0
 8007578:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag =1;
 800757a:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <TIM7_IRQHandler+0xbc>)
 800757c:	2201      	movs	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007580:	bf00      	nop
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40001400 	.word	0x40001400
 8007588:	20000288 	.word	0x20000288
 800758c:	20000282 	.word	0x20000282
 8007590:	20000289 	.word	0x20000289
 8007594:	20000283 	.word	0x20000283
 8007598:	2000028a 	.word	0x2000028a
 800759c:	20000284 	.word	0x20000284
 80075a0:	2000028c 	.word	0x2000028c
 80075a4:	20000285 	.word	0x20000285

080075a8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80075ac:	4802      	ldr	r0, [pc, #8]	; (80075b8 <DMA2_Stream7_IRQHandler+0x10>)
 80075ae:	f001 fa47 	bl	8008a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000810 	.word	0x20000810

080075bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
////		while(!LL_USART_IsActiveFlag_TXE(USART4));
////		LL_USART_TransmitData8(UART4, uart6_rx_data);
//	}

	static unsigned char cnt=0;
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 80075c0:	4833      	ldr	r0, [pc, #204]	; (8007690 <USART6_IRQHandler+0xd4>)
 80075c2:	f7ff fe42 	bl	800724a <LL_USART_IsActiveFlag_RXNE>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d05b      	beq.n	8007684 <USART6_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 80075cc:	4830      	ldr	r0, [pc, #192]	; (8007690 <USART6_IRQHandler+0xd4>)
 80075ce:	f7ff fe4f 	bl	8007270 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 80075d2:	482f      	ldr	r0, [pc, #188]	; (8007690 <USART6_IRQHandler+0xd4>)
 80075d4:	f7ff fe5a 	bl	800728c <LL_USART_ReceiveData8>
 80075d8:	4603      	mov	r3, r0
 80075da:	461a      	mov	r2, r3
 80075dc:	4b2d      	ldr	r3, [pc, #180]	; (8007694 <USART6_IRQHandler+0xd8>)
 80075de:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <USART6_IRQHandler+0xdc>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 80075e6:	4b2d      	ldr	r3, [pc, #180]	; (800769c <USART6_IRQHandler+0xe0>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b0b      	cmp	r3, #11
 80075ec:	d02e      	beq.n	800764c <USART6_IRQHandler+0x90>
 80075ee:	2b0b      	cmp	r3, #11
 80075f0:	dc3a      	bgt.n	8007668 <USART6_IRQHandler+0xac>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <USART6_IRQHandler+0x40>
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d012      	beq.n	8007620 <USART6_IRQHandler+0x64>
 80075fa:	e035      	b.n	8007668 <USART6_IRQHandler+0xac>
		{
		case 0:
			if(uart6_rx_data==0x44)
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <USART6_IRQHandler+0xd8>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b44      	cmp	r3, #68	; 0x44
 8007602:	d141      	bne.n	8007688 <USART6_IRQHandler+0xcc>
			{
				nx_rx_buf[cnt]=uart6_rx_data;
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <USART6_IRQHandler+0xe0>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <USART6_IRQHandler+0xd8>)
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <USART6_IRQHandler+0xe4>)
 8007610:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007612:	4b22      	ldr	r3, [pc, #136]	; (800769c <USART6_IRQHandler+0xe0>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	3301      	adds	r3, #1
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b20      	ldr	r3, [pc, #128]	; (800769c <USART6_IRQHandler+0xe0>)
 800761c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800761e:	e033      	b.n	8007688 <USART6_IRQHandler+0xcc>
		case 1:
			if(uart6_rx_data==0x77)
 8007620:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <USART6_IRQHandler+0xd8>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b77      	cmp	r3, #119	; 0x77
 8007626:	d10d      	bne.n	8007644 <USART6_IRQHandler+0x88>
			{
				nx_rx_buf[cnt]=uart6_rx_data;
 8007628:	4b1c      	ldr	r3, [pc, #112]	; (800769c <USART6_IRQHandler+0xe0>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	4b19      	ldr	r3, [pc, #100]	; (8007694 <USART6_IRQHandler+0xd8>)
 8007630:	7819      	ldrb	r1, [r3, #0]
 8007632:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <USART6_IRQHandler+0xe4>)
 8007634:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007636:	4b19      	ldr	r3, [pc, #100]	; (800769c <USART6_IRQHandler+0xe0>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4b17      	ldr	r3, [pc, #92]	; (800769c <USART6_IRQHandler+0xe0>)
 8007640:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt=0;
			break;
 8007642:	e022      	b.n	800768a <USART6_IRQHandler+0xce>
				cnt=0;
 8007644:	4b15      	ldr	r3, [pc, #84]	; (800769c <USART6_IRQHandler+0xe0>)
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
			break;
 800764a:	e01e      	b.n	800768a <USART6_IRQHandler+0xce>

		case 11:
			nx_rx_buf[cnt]=uart6_rx_data;
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <USART6_IRQHandler+0xe0>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	4b10      	ldr	r3, [pc, #64]	; (8007694 <USART6_IRQHandler+0xd8>)
 8007654:	7819      	ldrb	r1, [r3, #0]
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <USART6_IRQHandler+0xe4>)
 8007658:	5499      	strb	r1, [r3, r2]
			cnt=0;
 800765a:	4b10      	ldr	r3, [pc, #64]	; (800769c <USART6_IRQHandler+0xe0>)
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
			nx_rx_cplt_flag = 1;
 8007660:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <USART6_IRQHandler+0xe8>)
 8007662:	2201      	movs	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
			break;
 8007666:	e010      	b.n	800768a <USART6_IRQHandler+0xce>

		default:
			nx_rx_buf[cnt]=uart6_rx_data;
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <USART6_IRQHandler+0xe0>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <USART6_IRQHandler+0xd8>)
 8007670:	7819      	ldrb	r1, [r3, #0]
 8007672:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <USART6_IRQHandler+0xe4>)
 8007674:	5499      	strb	r1, [r3, r2]
			cnt++;
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <USART6_IRQHandler+0xe0>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <USART6_IRQHandler+0xe0>)
 8007680:	701a      	strb	r2, [r3, #0]
			break;
 8007682:	e002      	b.n	800768a <USART6_IRQHandler+0xce>
		}
	}
 8007684:	bf00      	nop
 8007686:	e000      	b.n	800768a <USART6_IRQHandler+0xce>
			break;
 8007688:	bf00      	nop

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40011400 	.word	0x40011400
 8007694:	2000027e 	.word	0x2000027e
 8007698:	2000027d 	.word	0x2000027d
 800769c:	2000028e 	.word	0x2000028e
 80076a0:	200007bc 	.word	0x200007bc
 80076a4:	200007e8 	.word	0x200007e8

080076a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	return 1;
 80076ac:	2301      	movs	r3, #1
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <_kill>:

int _kill(int pid, int sig)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80076c2:	f005 f8d9 	bl	800c878 <__errno>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2216      	movs	r2, #22
 80076ca:	601a      	str	r2, [r3, #0]
	return -1;
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_exit>:

void _exit (int status)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80076e0:	f04f 31ff 	mov.w	r1, #4294967295
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ffe7 	bl	80076b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80076ea:	e7fe      	b.n	80076ea <_exit+0x12>

080076ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e00a      	b.n	8007714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80076fe:	f3af 8000 	nop.w
 8007702:	4601      	mov	r1, r0
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	60ba      	str	r2, [r7, #8]
 800770a:	b2ca      	uxtb	r2, r1
 800770c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3301      	adds	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	dbf0      	blt.n	80076fe <_read+0x12>
	}

return len;
 800771c:	687b      	ldr	r3, [r7, #4]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	return -1;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800774e:	605a      	str	r2, [r3, #4]
	return 0;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <_isatty>:

int _isatty(int file)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
	return 1;
 8007766:	2301      	movs	r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
	return 0;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <_sbrk+0x5c>)
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <_sbrk+0x60>)
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <_sbrk+0x64>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <_sbrk+0x64>)
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <_sbrk+0x68>)
 80077b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <_sbrk+0x64>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4413      	add	r3, r2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d207      	bcs.n	80077d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077c0:	f005 f85a 	bl	800c878 <__errno>
 80077c4:	4603      	mov	r3, r0
 80077c6:	220c      	movs	r2, #12
 80077c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e009      	b.n	80077e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80077d0:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <_sbrk+0x64>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077d6:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <_sbrk+0x64>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	4a05      	ldr	r2, [pc, #20]	; (80077f4 <_sbrk+0x64>)
 80077e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20020000 	.word	0x20020000
 80077f0:	00000400 	.word	0x00000400
 80077f4:	20000290 	.word	0x20000290
 80077f8:	200008c8 	.word	0x200008c8

080077fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <SystemInit+0x20>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	4a05      	ldr	r2, [pc, #20]	; (800781c <SystemInit+0x20>)
 8007808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800780c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000ed00 	.word	0xe000ed00

08007820 <__NVIC_GetPriorityGrouping>:
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <__NVIC_GetPriorityGrouping+0x18>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	f003 0307 	and.w	r3, r3, #7
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	e000ed00 	.word	0xe000ed00

0800783c <__NVIC_EnableIRQ>:
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	db0b      	blt.n	8007866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	f003 021f 	and.w	r2, r3, #31
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <__NVIC_EnableIRQ+0x38>)
 8007856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2001      	movs	r0, #1
 800785e:	fa00 f202 	lsl.w	r2, r0, r2
 8007862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	e000e100 	.word	0xe000e100

08007878 <__NVIC_SetPriority>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007888:	2b00      	cmp	r3, #0
 800788a:	db0a      	blt.n	80078a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	b2da      	uxtb	r2, r3
 8007890:	490c      	ldr	r1, [pc, #48]	; (80078c4 <__NVIC_SetPriority+0x4c>)
 8007892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007896:	0112      	lsls	r2, r2, #4
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	440b      	add	r3, r1
 800789c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078a0:	e00a      	b.n	80078b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	4908      	ldr	r1, [pc, #32]	; (80078c8 <__NVIC_SetPriority+0x50>)
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	3b04      	subs	r3, #4
 80078b0:	0112      	lsls	r2, r2, #4
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	440b      	add	r3, r1
 80078b6:	761a      	strb	r2, [r3, #24]
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	e000e100 	.word	0xe000e100
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <NVIC_EncodePriority>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b089      	sub	sp, #36	; 0x24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f1c3 0307 	rsb	r3, r3, #7
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	bf28      	it	cs
 80078ea:	2304      	movcs	r3, #4
 80078ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	3304      	adds	r3, #4
 80078f2:	2b06      	cmp	r3, #6
 80078f4:	d902      	bls.n	80078fc <NVIC_EncodePriority+0x30>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3b03      	subs	r3, #3
 80078fa:	e000      	b.n	80078fe <NVIC_EncodePriority+0x32>
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	43da      	mvns	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	401a      	ands	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007914:	f04f 31ff 	mov.w	r1, #4294967295
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	fa01 f303 	lsl.w	r3, r1, r3
 800791e:	43d9      	mvns	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007924:	4313      	orrs	r3, r2
}
 8007926:	4618      	mov	r0, r3
 8007928:	3724      	adds	r7, #36	; 0x24
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <LL_TIM_EnableARRPreload>:
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <LL_TIM_OC_EnableFast>:
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d01c      	beq.n	800799e <LL_TIM_OC_EnableFast+0x4a>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d017      	beq.n	800799a <LL_TIM_OC_EnableFast+0x46>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b10      	cmp	r3, #16
 800796e:	d012      	beq.n	8007996 <LL_TIM_OC_EnableFast+0x42>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d00d      	beq.n	8007992 <LL_TIM_OC_EnableFast+0x3e>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797c:	d007      	beq.n	800798e <LL_TIM_OC_EnableFast+0x3a>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007984:	d101      	bne.n	800798a <LL_TIM_OC_EnableFast+0x36>
 8007986:	2305      	movs	r3, #5
 8007988:	e00a      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 800798a:	2306      	movs	r3, #6
 800798c:	e008      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 800798e:	2304      	movs	r3, #4
 8007990:	e006      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 8007992:	2303      	movs	r3, #3
 8007994:	e004      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 8007996:	2302      	movs	r3, #2
 8007998:	e002      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <LL_TIM_OC_EnableFast+0x4c>
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3318      	adds	r3, #24
 80079a6:	4619      	mov	r1, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	4a0a      	ldr	r2, [pc, #40]	; (80079d4 <LL_TIM_OC_EnableFast+0x80>)
 80079ac:	5cd3      	ldrb	r3, [r2, r3]
 80079ae:	440b      	add	r3, r1
 80079b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	4907      	ldr	r1, [pc, #28]	; (80079d8 <LL_TIM_OC_EnableFast+0x84>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	4619      	mov	r1, r3
 80079be:	2304      	movs	r3, #4
 80079c0:	408b      	lsls	r3, r1
 80079c2:	431a      	orrs	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	601a      	str	r2, [r3, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	08010524 	.word	0x08010524
 80079d8:	0801052c 	.word	0x0801052c

080079dc <LL_TIM_OC_DisableFast>:
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d01c      	beq.n	8007a26 <LL_TIM_OC_DisableFast+0x4a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d017      	beq.n	8007a22 <LL_TIM_OC_DisableFast+0x46>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b10      	cmp	r3, #16
 80079f6:	d012      	beq.n	8007a1e <LL_TIM_OC_DisableFast+0x42>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d00d      	beq.n	8007a1a <LL_TIM_OC_DisableFast+0x3e>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	d007      	beq.n	8007a16 <LL_TIM_OC_DisableFast+0x3a>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0c:	d101      	bne.n	8007a12 <LL_TIM_OC_DisableFast+0x36>
 8007a0e:	2305      	movs	r3, #5
 8007a10:	e00a      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a12:	2306      	movs	r3, #6
 8007a14:	e008      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a16:	2304      	movs	r3, #4
 8007a18:	e006      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e004      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e002      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <LL_TIM_OC_DisableFast+0x4c>
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	4619      	mov	r1, r3
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	4a0b      	ldr	r2, [pc, #44]	; (8007a60 <LL_TIM_OC_DisableFast+0x84>)
 8007a34:	5cd3      	ldrb	r3, [r2, r3]
 8007a36:	440b      	add	r3, r1
 8007a38:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	4908      	ldr	r1, [pc, #32]	; (8007a64 <LL_TIM_OC_DisableFast+0x88>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	4619      	mov	r1, r3
 8007a46:	2304      	movs	r3, #4
 8007a48:	408b      	lsls	r3, r1
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	601a      	str	r2, [r3, #0]
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	08010524 	.word	0x08010524
 8007a64:	0801052c 	.word	0x0801052c

08007a68 <LL_TIM_OC_EnablePreload>:
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d01c      	beq.n	8007ab2 <LL_TIM_OC_EnablePreload+0x4a>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d017      	beq.n	8007aae <LL_TIM_OC_EnablePreload+0x46>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	d012      	beq.n	8007aaa <LL_TIM_OC_EnablePreload+0x42>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d00d      	beq.n	8007aa6 <LL_TIM_OC_EnablePreload+0x3e>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a90:	d007      	beq.n	8007aa2 <LL_TIM_OC_EnablePreload+0x3a>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a98:	d101      	bne.n	8007a9e <LL_TIM_OC_EnablePreload+0x36>
 8007a9a:	2305      	movs	r3, #5
 8007a9c:	e00a      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007a9e:	2306      	movs	r3, #6
 8007aa0:	e008      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	e006      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e004      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e002      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <LL_TIM_OC_EnablePreload+0x4c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3318      	adds	r3, #24
 8007aba:	4619      	mov	r1, r3
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	4a0a      	ldr	r2, [pc, #40]	; (8007ae8 <LL_TIM_OC_EnablePreload+0x80>)
 8007ac0:	5cd3      	ldrb	r3, [r2, r3]
 8007ac2:	440b      	add	r3, r1
 8007ac4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	4907      	ldr	r1, [pc, #28]	; (8007aec <LL_TIM_OC_EnablePreload+0x84>)
 8007ace:	5ccb      	ldrb	r3, [r1, r3]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	408b      	lsls	r3, r1
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	601a      	str	r2, [r3, #0]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	08010524 	.word	0x08010524
 8007aec:	0801052c 	.word	0x0801052c

08007af0 <LL_TIM_SetClockSource>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b02:	f023 0307 	bic.w	r3, r3, #7
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	609a      	str	r2, [r3, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <LL_TIM_SetTriggerOutput>:
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	605a      	str	r2, [r3, #4]
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <LL_TIM_DisableMasterSlaveMode>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <LL_AHB1_GRP1_EnableClock>:
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007b68:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6c:	4907      	ldr	r1, [pc, #28]	; (8007b8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	40023800 	.word	0x40023800

08007b90 <LL_APB1_GRP1_EnableClock>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007b98:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b9c:	4907      	ldr	r1, [pc, #28]	; (8007bbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8007ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40023800 	.word	0x40023800

08007bc0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b094      	sub	sp, #80	; 0x50
 8007bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007bc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	60da      	str	r2, [r3, #12]
 8007bd4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007bd6:	f107 031c 	add.w	r3, r7, #28
 8007bda:	2220      	movs	r2, #32
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f004 fe74 	bl	800c8cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	605a      	str	r2, [r3, #4]
 8007bec:	609a      	str	r2, [r3, #8]
 8007bee:	60da      	str	r2, [r3, #12]
 8007bf0:	611a      	str	r2, [r3, #16]
 8007bf2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8007bf4:	2002      	movs	r0, #2
 8007bf6:	f7ff ffcb 	bl	8007b90 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8007bfa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007bfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007c00:	2300      	movs	r3, #0
 8007c02:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8007c04:	2314      	movs	r3, #20
 8007c06:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8007c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c10:	4619      	mov	r1, r3
 8007c12:	4822      	ldr	r0, [pc, #136]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c14:	f004 f966 	bl	800bee4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8007c18:	4820      	ldr	r0, [pc, #128]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c1a:	f7ff fe8a 	bl	8007932 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007c1e:	2100      	movs	r1, #0
 8007c20:	481e      	ldr	r0, [pc, #120]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c22:	f7ff ff65 	bl	8007af0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8007c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c2a:	481c      	ldr	r0, [pc, #112]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c2c:	f7ff ff1c 	bl	8007a68 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007c30:	2360      	movs	r3, #96	; 0x60
 8007c32:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8007c3c:	230a      	movs	r3, #10
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007c40:	2300      	movs	r3, #0
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8007c44:	f107 031c 	add.w	r3, r7, #28
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c4e:	4813      	ldr	r0, [pc, #76]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c50:	f004 f9e2 	bl	800c018 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8007c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c58:	4810      	ldr	r0, [pc, #64]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c5a:	f7ff fe7b 	bl	8007954 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	480e      	ldr	r0, [pc, #56]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c62:	f7ff ff5a 	bl	8007b1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8007c66:	480d      	ldr	r0, [pc, #52]	; (8007c9c <MX_TIM3_Init+0xdc>)
 8007c68:	f7ff ff6a 	bl	8007b40 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007c6c:	2002      	movs	r0, #2
 8007c6e:	f7ff ff77 	bl	8007b60 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8007c72:	2302      	movs	r3, #2
 8007c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c76:	2302      	movs	r3, #2
 8007c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8007c86:	2302      	movs	r3, #2
 8007c88:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4804      	ldr	r0, [pc, #16]	; (8007ca0 <MX_TIM3_Init+0xe0>)
 8007c90:	f003 fe93 	bl	800b9ba <LL_GPIO_Init>

}
 8007c94:	bf00      	nop
 8007c96:	3750      	adds	r7, #80	; 0x50
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40020400 	.word	0x40020400

08007ca4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b094      	sub	sp, #80	; 0x50
 8007ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007caa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
 8007cb4:	609a      	str	r2, [r3, #8]
 8007cb6:	60da      	str	r2, [r3, #12]
 8007cb8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8007cba:	f107 031c 	add.w	r3, r7, #28
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f004 fe02 	bl	800c8cc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc8:	1d3b      	adds	r3, r7, #4
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	605a      	str	r2, [r3, #4]
 8007cd0:	609a      	str	r2, [r3, #8]
 8007cd2:	60da      	str	r2, [r3, #12]
 8007cd4:	611a      	str	r2, [r3, #16]
 8007cd6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8007cd8:	2008      	movs	r0, #8
 8007cda:	f7ff ff59 	bl	8007b90 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 167999;
 8007ce6:	4b3e      	ldr	r3, [pc, #248]	; (8007de0 <MX_TIM5_Init+0x13c>)
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8007cea:	2300      	movs	r3, #0
 8007cec:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8007cee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	483b      	ldr	r0, [pc, #236]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007cf6:	f004 f8f5 	bl	800bee4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8007cfa:	483a      	ldr	r0, [pc, #232]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007cfc:	f7ff fe19 	bl	8007932 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8007d00:	2100      	movs	r1, #0
 8007d02:	4838      	ldr	r0, [pc, #224]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d04:	f7ff fef4 	bl	8007af0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	4836      	ldr	r0, [pc, #216]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d0c:	f7ff feac 	bl	8007a68 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8007d10:	2360      	movs	r3, #96	; 0x60
 8007d12:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8007d20:	2300      	movs	r3, #0
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	482d      	ldr	r0, [pc, #180]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d2e:	f004 f973 	bl	800c018 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8007d32:	2101      	movs	r1, #1
 8007d34:	482b      	ldr	r0, [pc, #172]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d36:	f7ff fe0d 	bl	8007954 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8007d3a:	2110      	movs	r1, #16
 8007d3c:	4829      	ldr	r0, [pc, #164]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d3e:	f7ff fe93 	bl	8007a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8007d42:	f107 031c 	add.w	r3, r7, #28
 8007d46:	461a      	mov	r2, r3
 8007d48:	2110      	movs	r1, #16
 8007d4a:	4826      	ldr	r0, [pc, #152]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d4c:	f004 f964 	bl	800c018 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8007d50:	2110      	movs	r1, #16
 8007d52:	4824      	ldr	r0, [pc, #144]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d54:	f7ff fe42 	bl	80079dc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8007d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d5c:	4821      	ldr	r0, [pc, #132]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d5e:	f7ff fe83 	bl	8007a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8007d62:	f107 031c 	add.w	r3, r7, #28
 8007d66:	461a      	mov	r2, r3
 8007d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d6c:	481d      	ldr	r0, [pc, #116]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d6e:	f004 f953 	bl	800c018 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8007d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d76:	481b      	ldr	r0, [pc, #108]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d78:	f7ff fdec 	bl	8007954 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8007d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d80:	4818      	ldr	r0, [pc, #96]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d82:	f7ff fe71 	bl	8007a68 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8007d86:	f107 031c 	add.w	r3, r7, #28
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d90:	4814      	ldr	r0, [pc, #80]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d92:	f004 f941 	bl	800c018 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8007d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d9a:	4812      	ldr	r0, [pc, #72]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007d9c:	f7ff fdda 	bl	8007954 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8007da0:	2100      	movs	r1, #0
 8007da2:	4810      	ldr	r0, [pc, #64]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007da4:	f7ff feb9 	bl	8007b1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8007da8:	480e      	ldr	r0, [pc, #56]	; (8007de4 <MX_TIM5_Init+0x140>)
 8007daa:	f7ff fec9 	bl	8007b40 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007dae:	2001      	movs	r0, #1
 8007db0:	f7ff fed6 	bl	8007b60 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8007db4:	230f      	movs	r3, #15
 8007db6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007db8:	2302      	movs	r3, #2
 8007dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4805      	ldr	r0, [pc, #20]	; (8007de8 <MX_TIM5_Init+0x144>)
 8007dd2:	f003 fdf2 	bl	800b9ba <LL_GPIO_Init>

}
 8007dd6:	bf00      	nop
 8007dd8:	3750      	adds	r7, #80	; 0x50
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	0002903f 	.word	0x0002903f
 8007de4:	40000c00 	.word	0x40000c00
 8007de8:	40020000 	.word	0x40020000

08007dec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	60da      	str	r2, [r3, #12]
 8007dfe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8007e00:	2020      	movs	r0, #32
 8007e02:	f7ff fec5 	bl	8007b90 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007e06:	f7ff fd0b 	bl	8007820 <__NVIC_GetPriorityGrouping>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff fd5b 	bl	80078cc <NVIC_EncodePriority>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	2037      	movs	r0, #55	; 0x37
 8007e1c:	f7ff fd2c 	bl	8007878 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8007e20:	2037      	movs	r0, #55	; 0x37
 8007e22:	f7ff fd0b 	bl	800783c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8007e26:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8007e2a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8007e34:	1d3b      	adds	r3, r7, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4808      	ldr	r0, [pc, #32]	; (8007e5c <MX_TIM7_Init+0x70>)
 8007e3a:	f004 f853 	bl	800bee4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8007e3e:	4807      	ldr	r0, [pc, #28]	; (8007e5c <MX_TIM7_Init+0x70>)
 8007e40:	f7ff fd77 	bl	8007932 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8007e44:	2100      	movs	r1, #0
 8007e46:	4805      	ldr	r0, [pc, #20]	; (8007e5c <MX_TIM7_Init+0x70>)
 8007e48:	f7ff fe67 	bl	8007b1a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8007e4c:	4803      	ldr	r0, [pc, #12]	; (8007e5c <MX_TIM7_Init+0x70>)
 8007e4e:	f7ff fe77 	bl	8007b40 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007e52:	bf00      	nop
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40001400 	.word	0x40001400

08007e60 <__NVIC_GetPriorityGrouping>:
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e64:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <__NVIC_GetPriorityGrouping+0x18>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	0a1b      	lsrs	r3, r3, #8
 8007e6a:	f003 0307 	and.w	r3, r3, #7
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	e000ed00 	.word	0xe000ed00

08007e7c <__NVIC_EnableIRQ>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db0b      	blt.n	8007ea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	f003 021f 	and.w	r2, r3, #31
 8007e94:	4907      	ldr	r1, [pc, #28]	; (8007eb4 <__NVIC_EnableIRQ+0x38>)
 8007e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	e000e100 	.word	0xe000e100

08007eb8 <__NVIC_SetPriority>:
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db0a      	blt.n	8007ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	490c      	ldr	r1, [pc, #48]	; (8007f04 <__NVIC_SetPriority+0x4c>)
 8007ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed6:	0112      	lsls	r2, r2, #4
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	440b      	add	r3, r1
 8007edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ee0:	e00a      	b.n	8007ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	4908      	ldr	r1, [pc, #32]	; (8007f08 <__NVIC_SetPriority+0x50>)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	0112      	lsls	r2, r2, #4
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	761a      	strb	r2, [r3, #24]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	e000e100 	.word	0xe000e100
 8007f08:	e000ed00 	.word	0xe000ed00

08007f0c <NVIC_EncodePriority>:
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	; 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f1c3 0307 	rsb	r3, r3, #7
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	bf28      	it	cs
 8007f2a:	2304      	movcs	r3, #4
 8007f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	3304      	adds	r3, #4
 8007f32:	2b06      	cmp	r3, #6
 8007f34:	d902      	bls.n	8007f3c <NVIC_EncodePriority+0x30>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3b03      	subs	r3, #3
 8007f3a:	e000      	b.n	8007f3e <NVIC_EncodePriority+0x32>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	43da      	mvns	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	401a      	ands	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f54:	f04f 31ff 	mov.w	r1, #4294967295
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	43d9      	mvns	r1, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	4313      	orrs	r3, r2
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3724      	adds	r7, #36	; 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <LL_USART_Enable>:
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60da      	str	r2, [r3, #12]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <LL_USART_ConfigAsyncMode>:
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	615a      	str	r2, [r3, #20]
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <LL_AHB1_GRP1_EnableClock>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fcc:	4907      	ldr	r1, [pc, #28]	; (8007fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007fde:	68fb      	ldr	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40023800 	.word	0x40023800

08007ff0 <LL_APB1_GRP1_EnableClock>:
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <LL_APB1_GRP1_EnableClock+0x2c>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4313      	orrs	r3, r2
 8008002:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4013      	ands	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800800e:	68fb      	ldr	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	40023800 	.word	0x40023800

08008020 <LL_APB2_GRP1_EnableClock>:
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <LL_APB2_GRP1_EnableClock+0x2c>)
 800802a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802c:	4907      	ldr	r1, [pc, #28]	; (800804c <LL_APB2_GRP1_EnableClock+0x2c>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4313      	orrs	r3, r2
 8008032:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <LL_APB2_GRP1_EnableClock+0x2c>)
 8008036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4013      	ands	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800803e:	68fb      	ldr	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40023800 	.word	0x40023800

08008050 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8008056:	f107 031c 	add.w	r3, r7, #28
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	605a      	str	r2, [r3, #4]
 8008060:	609a      	str	r2, [r3, #8]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	611a      	str	r2, [r3, #16]
 8008066:	615a      	str	r2, [r3, #20]
 8008068:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	605a      	str	r2, [r3, #4]
 8008072:	609a      	str	r2, [r3, #8]
 8008074:	60da      	str	r2, [r3, #12]
 8008076:	611a      	str	r2, [r3, #16]
 8008078:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800807a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800807e:	f7ff ffb7 	bl	8007ff0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008082:	2004      	movs	r0, #4
 8008084:	f7ff ff9c 	bl	8007fc0 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8008088:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800808c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800808e:	2302      	movs	r3, #2
 8008090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008092:	2303      	movs	r3, #3
 8008094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800809e:	2308      	movs	r3, #8
 80080a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080a2:	1d3b      	adds	r3, r7, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	4819      	ldr	r0, [pc, #100]	; (800810c <MX_UART4_Init+0xbc>)
 80080a8:	f003 fc87 	bl	800b9ba <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80080ac:	f7ff fed8 	bl	8007e60 <__NVIC_GetPriorityGrouping>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2200      	movs	r2, #0
 80080b4:	2100      	movs	r1, #0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff ff28 	bl	8007f0c <NVIC_EncodePriority>
 80080bc:	4603      	mov	r3, r0
 80080be:	4619      	mov	r1, r3
 80080c0:	2034      	movs	r0, #52	; 0x34
 80080c2:	f7ff fef9 	bl	8007eb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80080c6:	2034      	movs	r0, #52	; 0x34
 80080c8:	f7ff fed8 	bl	8007e7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80080cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80080d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80080d2:	2300      	movs	r3, #0
 80080d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80080d6:	2300      	movs	r3, #0
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80080da:	2300      	movs	r3, #0
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80080de:	230c      	movs	r3, #12
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80080e6:	2300      	movs	r3, #0
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80080ea:	f107 031c 	add.w	r3, r7, #28
 80080ee:	4619      	mov	r1, r3
 80080f0:	4807      	ldr	r0, [pc, #28]	; (8008110 <MX_UART4_Init+0xc0>)
 80080f2:	f004 fb41 	bl	800c778 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80080f6:	4806      	ldr	r0, [pc, #24]	; (8008110 <MX_UART4_Init+0xc0>)
 80080f8:	f7ff ff4b 	bl	8007f92 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80080fc:	4804      	ldr	r0, [pc, #16]	; (8008110 <MX_UART4_Init+0xc0>)
 80080fe:	f7ff ff38 	bl	8007f72 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008102:	bf00      	nop
 8008104:	3738      	adds	r7, #56	; 0x38
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40020800 	.word	0x40020800
 8008110:	40004c00 	.word	0x40004c00

08008114 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08e      	sub	sp, #56	; 0x38
 8008118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800811a:	f107 031c 	add.w	r3, r7, #28
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	609a      	str	r2, [r3, #8]
 8008126:	60da      	str	r2, [r3, #12]
 8008128:	611a      	str	r2, [r3, #16]
 800812a:	615a      	str	r2, [r3, #20]
 800812c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	609a      	str	r2, [r3, #8]
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	611a      	str	r2, [r3, #16]
 800813c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800813e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008142:	f7ff ff55 	bl	8007ff0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008146:	2004      	movs	r0, #4
 8008148:	f7ff ff3a 	bl	8007fc0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800814c:	2008      	movs	r0, #8
 800814e:	f7ff ff37 	bl	8007fc0 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8008152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008158:	2302      	movs	r3, #2
 800815a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800815c:	2303      	movs	r3, #3
 800815e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008168:	2308      	movs	r3, #8
 800816a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	4619      	mov	r1, r3
 8008170:	4821      	ldr	r0, [pc, #132]	; (80081f8 <MX_UART5_Init+0xe4>)
 8008172:	f003 fc22 	bl	800b9ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8008176:	2304      	movs	r3, #4
 8008178:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800817a:	2302      	movs	r3, #2
 800817c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800817e:	2303      	movs	r3, #3
 8008180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8008186:	2301      	movs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800818a:	2308      	movs	r3, #8
 800818c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	4619      	mov	r1, r3
 8008192:	481a      	ldr	r0, [pc, #104]	; (80081fc <MX_UART5_Init+0xe8>)
 8008194:	f003 fc11 	bl	800b9ba <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008198:	f7ff fe62 	bl	8007e60 <__NVIC_GetPriorityGrouping>
 800819c:	4603      	mov	r3, r0
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff feb2 	bl	8007f0c <NVIC_EncodePriority>
 80081a8:	4603      	mov	r3, r0
 80081aa:	4619      	mov	r1, r3
 80081ac:	2035      	movs	r0, #53	; 0x35
 80081ae:	f7ff fe83 	bl	8007eb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80081b2:	2035      	movs	r0, #53	; 0x35
 80081b4:	f7ff fe62 	bl	8007e7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80081b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80081bc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80081be:	2300      	movs	r3, #0
 80081c0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 80081ca:	2304      	movs	r3, #4
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80081d2:	2300      	movs	r3, #0
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80081d6:	f107 031c 	add.w	r3, r7, #28
 80081da:	4619      	mov	r1, r3
 80081dc:	4808      	ldr	r0, [pc, #32]	; (8008200 <MX_UART5_Init+0xec>)
 80081de:	f004 facb 	bl	800c778 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80081e2:	4807      	ldr	r0, [pc, #28]	; (8008200 <MX_UART5_Init+0xec>)
 80081e4:	f7ff fed5 	bl	8007f92 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80081e8:	4805      	ldr	r0, [pc, #20]	; (8008200 <MX_UART5_Init+0xec>)
 80081ea:	f7ff fec2 	bl	8007f72 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80081ee:	bf00      	nop
 80081f0:	3738      	adds	r7, #56	; 0x38
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	40020800 	.word	0x40020800
 80081fc:	40020c00 	.word	0x40020c00
 8008200:	40005000 	.word	0x40005000

08008204 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800820a:	4a12      	ldr	r2, [pc, #72]	; (8008254 <MX_USART1_UART_Init+0x50>)
 800820c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008216:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008218:	2200      	movs	r2, #0
 800821a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800821e:	2200      	movs	r2, #0
 8008220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008222:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800822a:	220c      	movs	r2, #12
 800822c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800822e:	4b08      	ldr	r3, [pc, #32]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008230:	2200      	movs	r2, #0
 8008232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008234:	4b06      	ldr	r3, [pc, #24]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800823a:	4805      	ldr	r0, [pc, #20]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800823c:	f002 fc0c 	bl	800aa58 <HAL_UART_Init>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008246:	f7fe fe5f 	bl	8006f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000870 	.word	0x20000870
 8008254:	40011000 	.word	0x40011000

08008258 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08e      	sub	sp, #56	; 0x38
 800825c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800825e:	f107 031c 	add.w	r3, r7, #28
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	605a      	str	r2, [r3, #4]
 8008268:	609a      	str	r2, [r3, #8]
 800826a:	60da      	str	r2, [r3, #12]
 800826c:	611a      	str	r2, [r3, #16]
 800826e:	615a      	str	r2, [r3, #20]
 8008270:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008272:	1d3b      	adds	r3, r7, #4
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	609a      	str	r2, [r3, #8]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	611a      	str	r2, [r3, #16]
 8008280:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8008282:	2020      	movs	r0, #32
 8008284:	f7ff fecc 	bl	8008020 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008288:	2004      	movs	r0, #4
 800828a:	f7ff fe99 	bl	8007fc0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800828e:	23c0      	movs	r3, #192	; 0xc0
 8008290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008292:	2302      	movs	r3, #2
 8008294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008296:	2303      	movs	r3, #3
 8008298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800829a:	2300      	movs	r3, #0
 800829c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80082a2:	2308      	movs	r3, #8
 80082a4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4819      	ldr	r0, [pc, #100]	; (8008310 <MX_USART6_UART_Init+0xb8>)
 80082ac:	f003 fb85 	bl	800b9ba <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80082b0:	f7ff fdd6 	bl	8007e60 <__NVIC_GetPriorityGrouping>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fe26 	bl	8007f0c <NVIC_EncodePriority>
 80082c0:	4603      	mov	r3, r0
 80082c2:	4619      	mov	r1, r3
 80082c4:	2047      	movs	r0, #71	; 0x47
 80082c6:	f7ff fdf7 	bl	8007eb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80082ca:	2047      	movs	r0, #71	; 0x47
 80082cc:	f7ff fdd6 	bl	8007e7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80082d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80082d4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80082d6:	2300      	movs	r3, #0
 80082d8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80082de:	2300      	movs	r3, #0
 80082e0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80082e2:	230c      	movs	r3, #12
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80082ee:	f107 031c 	add.w	r3, r7, #28
 80082f2:	4619      	mov	r1, r3
 80082f4:	4807      	ldr	r0, [pc, #28]	; (8008314 <MX_USART6_UART_Init+0xbc>)
 80082f6:	f004 fa3f 	bl	800c778 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80082fa:	4806      	ldr	r0, [pc, #24]	; (8008314 <MX_USART6_UART_Init+0xbc>)
 80082fc:	f7ff fe49 	bl	8007f92 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8008300:	4804      	ldr	r0, [pc, #16]	; (8008314 <MX_USART6_UART_Init+0xbc>)
 8008302:	f7ff fe36 	bl	8007f72 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008306:	bf00      	nop
 8008308:	3738      	adds	r7, #56	; 0x38
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40020800 	.word	0x40020800
 8008314:	40011400 	.word	0x40011400

08008318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a34      	ldr	r2, [pc, #208]	; (8008408 <HAL_UART_MspInit+0xf0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d162      	bne.n	8008400 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	4b33      	ldr	r3, [pc, #204]	; (800840c <HAL_UART_MspInit+0xf4>)
 8008340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008342:	4a32      	ldr	r2, [pc, #200]	; (800840c <HAL_UART_MspInit+0xf4>)
 8008344:	f043 0310 	orr.w	r3, r3, #16
 8008348:	6453      	str	r3, [r2, #68]	; 0x44
 800834a:	4b30      	ldr	r3, [pc, #192]	; (800840c <HAL_UART_MspInit+0xf4>)
 800834c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	4b2c      	ldr	r3, [pc, #176]	; (800840c <HAL_UART_MspInit+0xf4>)
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	4a2b      	ldr	r2, [pc, #172]	; (800840c <HAL_UART_MspInit+0xf4>)
 8008360:	f043 0301 	orr.w	r3, r3, #1
 8008364:	6313      	str	r3, [r2, #48]	; 0x30
 8008366:	4b29      	ldr	r3, [pc, #164]	; (800840c <HAL_UART_MspInit+0xf4>)
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008378:	2302      	movs	r3, #2
 800837a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008380:	2303      	movs	r3, #3
 8008382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008384:	2307      	movs	r3, #7
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008388:	f107 0314 	add.w	r3, r7, #20
 800838c:	4619      	mov	r1, r3
 800838e:	4820      	ldr	r0, [pc, #128]	; (8008410 <HAL_UART_MspInit+0xf8>)
 8008390:	f000 fd92 	bl	8008eb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008394:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <HAL_UART_MspInit+0xfc>)
 8008396:	4a20      	ldr	r2, [pc, #128]	; (8008418 <HAL_UART_MspInit+0x100>)
 8008398:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <HAL_UART_MspInit+0xfc>)
 800839c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083a4:	2240      	movs	r2, #64	; 0x40
 80083a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80083ae:	4b19      	ldr	r3, [pc, #100]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083b6:	4b17      	ldr	r3, [pc, #92]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083bc:	4b15      	ldr	r3, [pc, #84]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083be:	2200      	movs	r2, #0
 80083c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80083c2:	4b14      	ldr	r3, [pc, #80]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80083c8:	4b12      	ldr	r3, [pc, #72]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80083ce:	4b11      	ldr	r3, [pc, #68]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80083d4:	480f      	ldr	r0, [pc, #60]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083d6:	f000 f9f3 	bl	80087c0 <HAL_DMA_Init>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80083e0:	f7fe fd92 	bl	8006f08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083e8:	635a      	str	r2, [r3, #52]	; 0x34
 80083ea:	4a0a      	ldr	r2, [pc, #40]	; (8008414 <HAL_UART_MspInit+0xfc>)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	2025      	movs	r0, #37	; 0x25
 80083f6:	f000 f9ac 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80083fa:	2025      	movs	r0, #37	; 0x25
 80083fc:	f000 f9c5 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008400:	bf00      	nop
 8008402:	3728      	adds	r7, #40	; 0x28
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40011000 	.word	0x40011000
 800840c:	40023800 	.word	0x40023800
 8008410:	40020000 	.word	0x40020000
 8008414:	20000810 	.word	0x20000810
 8008418:	400264b8 	.word	0x400264b8

0800841c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800841c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008420:	480d      	ldr	r0, [pc, #52]	; (8008458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008422:	490e      	ldr	r1, [pc, #56]	; (800845c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008428:	e002      	b.n	8008430 <LoopCopyDataInit>

0800842a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800842a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800842c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800842e:	3304      	adds	r3, #4

08008430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008434:	d3f9      	bcc.n	800842a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008436:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008438:	4c0b      	ldr	r4, [pc, #44]	; (8008468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800843a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800843c:	e001      	b.n	8008442 <LoopFillZerobss>

0800843e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800843e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008440:	3204      	adds	r2, #4

08008442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008444:	d3fb      	bcc.n	800843e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008446:	f7ff f9d9 	bl	80077fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800844a:	f004 fa1b 	bl	800c884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800844e:	f7fb ff97 	bl	8004380 <main>
  bx  lr    
 8008452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800845c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8008460:	08010984 	.word	0x08010984
  ldr r2, =_sbss
 8008464:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8008468:	200008c8 	.word	0x200008c8

0800846c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800846c:	e7fe      	b.n	800846c <ADC_IRQHandler>
	...

08008470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <HAL_Init+0x40>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a0d      	ldr	r2, [pc, #52]	; (80084b0 <HAL_Init+0x40>)
 800847a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800847e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <HAL_Init+0x40>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <HAL_Init+0x40>)
 8008486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800848a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800848c:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <HAL_Init+0x40>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <HAL_Init+0x40>)
 8008492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008498:	2003      	movs	r0, #3
 800849a:	f000 f94f 	bl	800873c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800849e:	2000      	movs	r0, #0
 80084a0:	f000 f808 	bl	80084b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084a4:	f7fe fe88 	bl	80071b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40023c00 	.word	0x40023c00

080084b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084bc:	4b12      	ldr	r3, [pc, #72]	; (8008508 <HAL_InitTick+0x54>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_InitTick+0x58>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f967 	bl	80087a6 <HAL_SYSTICK_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e00e      	b.n	8008500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d80a      	bhi.n	80084fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084e8:	2200      	movs	r2, #0
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	f000 f92f 	bl	8008752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084f4:	4a06      	ldr	r2, [pc, #24]	; (8008510 <HAL_InitTick+0x5c>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000004 	.word	0x20000004
 800850c:	2000000c 	.word	0x2000000c
 8008510:	20000008 	.word	0x20000008

08008514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <HAL_IncTick+0x20>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <HAL_IncTick+0x24>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4413      	add	r3, r2
 8008524:	4a04      	ldr	r2, [pc, #16]	; (8008538 <HAL_IncTick+0x24>)
 8008526:	6013      	str	r3, [r2, #0]
}
 8008528:	bf00      	nop
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000000c 	.word	0x2000000c
 8008538:	200008b4 	.word	0x200008b4

0800853c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  return uwTick;
 8008540:	4b03      	ldr	r3, [pc, #12]	; (8008550 <HAL_GetTick+0x14>)
 8008542:	681b      	ldr	r3, [r3, #0]
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	200008b4 	.word	0x200008b4

08008554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800855c:	f7ff ffee 	bl	800853c <HAL_GetTick>
 8008560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d005      	beq.n	800857a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <HAL_Delay+0x44>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800857a:	bf00      	nop
 800857c:	f7ff ffde 	bl	800853c <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	429a      	cmp	r2, r3
 800858a:	d8f7      	bhi.n	800857c <HAL_Delay+0x28>
  {
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	2000000c 	.word	0x2000000c

0800859c <__NVIC_SetPriorityGrouping>:
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085ac:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <__NVIC_SetPriorityGrouping+0x44>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085b8:	4013      	ands	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085ce:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <__NVIC_SetPriorityGrouping+0x44>)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	60d3      	str	r3, [r2, #12]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <__NVIC_GetPriorityGrouping>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <__NVIC_GetPriorityGrouping+0x18>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	0a1b      	lsrs	r3, r3, #8
 80085ee:	f003 0307 	and.w	r3, r3, #7
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	e000ed00 	.word	0xe000ed00

08008600 <__NVIC_EnableIRQ>:
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860e:	2b00      	cmp	r3, #0
 8008610:	db0b      	blt.n	800862a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	f003 021f 	and.w	r2, r3, #31
 8008618:	4907      	ldr	r1, [pc, #28]	; (8008638 <__NVIC_EnableIRQ+0x38>)
 800861a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861e:	095b      	lsrs	r3, r3, #5
 8008620:	2001      	movs	r0, #1
 8008622:	fa00 f202 	lsl.w	r2, r0, r2
 8008626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	e000e100 	.word	0xe000e100

0800863c <__NVIC_SetPriority>:
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864c:	2b00      	cmp	r3, #0
 800864e:	db0a      	blt.n	8008666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	b2da      	uxtb	r2, r3
 8008654:	490c      	ldr	r1, [pc, #48]	; (8008688 <__NVIC_SetPriority+0x4c>)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	0112      	lsls	r2, r2, #4
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	440b      	add	r3, r1
 8008660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008664:	e00a      	b.n	800867c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4908      	ldr	r1, [pc, #32]	; (800868c <__NVIC_SetPriority+0x50>)
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	3b04      	subs	r3, #4
 8008674:	0112      	lsls	r2, r2, #4
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	440b      	add	r3, r1
 800867a:	761a      	strb	r2, [r3, #24]
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	e000e100 	.word	0xe000e100
 800868c:	e000ed00 	.word	0xe000ed00

08008690 <NVIC_EncodePriority>:
{
 8008690:	b480      	push	{r7}
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f1c3 0307 	rsb	r3, r3, #7
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	bf28      	it	cs
 80086ae:	2304      	movcs	r3, #4
 80086b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d902      	bls.n	80086c0 <NVIC_EncodePriority+0x30>
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3b03      	subs	r3, #3
 80086be:	e000      	b.n	80086c2 <NVIC_EncodePriority+0x32>
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43da      	mvns	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	401a      	ands	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086d8:	f04f 31ff 	mov.w	r1, #4294967295
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	fa01 f303 	lsl.w	r3, r1, r3
 80086e2:	43d9      	mvns	r1, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e8:	4313      	orrs	r3, r2
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3724      	adds	r7, #36	; 0x24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3b01      	subs	r3, #1
 8008704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008708:	d301      	bcc.n	800870e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800870a:	2301      	movs	r3, #1
 800870c:	e00f      	b.n	800872e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800870e:	4a0a      	ldr	r2, [pc, #40]	; (8008738 <SysTick_Config+0x40>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008716:	210f      	movs	r1, #15
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	f7ff ff8e 	bl	800863c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <SysTick_Config+0x40>)
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008726:	4b04      	ldr	r3, [pc, #16]	; (8008738 <SysTick_Config+0x40>)
 8008728:	2207      	movs	r2, #7
 800872a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	e000e010 	.word	0xe000e010

0800873c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff29 	bl	800859c <__NVIC_SetPriorityGrouping>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	4603      	mov	r3, r0
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008764:	f7ff ff3e 	bl	80085e4 <__NVIC_GetPriorityGrouping>
 8008768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff8e 	bl	8008690 <NVIC_EncodePriority>
 8008774:	4602      	mov	r2, r0
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ff5d 	bl	800863c <__NVIC_SetPriority>
}
 8008782:	bf00      	nop
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff ff31 	bl	8008600 <__NVIC_EnableIRQ>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ffa2 	bl	80086f8 <SysTick_Config>
 80087b4:	4603      	mov	r3, r0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80087cc:	f7ff feb6 	bl	800853c <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e099      	b.n	8008910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0201 	bic.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087fc:	e00f      	b.n	800881e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087fe:	f7ff fe9d 	bl	800853c <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b05      	cmp	r3, #5
 800880a:	d908      	bls.n	800881e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2203      	movs	r2, #3
 8008816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e078      	b.n	8008910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e8      	bne.n	80087fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4b38      	ldr	r3, [pc, #224]	; (8008918 <HAL_DMA_Init+0x158>)
 8008838:	4013      	ands	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800884a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b04      	cmp	r3, #4
 8008876:	d107      	bne.n	8008888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	4313      	orrs	r3, r2
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d117      	bne.n	80088e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00e      	beq.n	80088e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa7b 	bl	8008dc0 <DMA_CheckFifoParam>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2240      	movs	r2, #64	; 0x40
 80088d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80088de:	2301      	movs	r3, #1
 80088e0:	e016      	b.n	8008910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa32 	bl	8008d54 <DMA_CalcBaseAndBitshift>
 80088f0:	4603      	mov	r3, r0
 80088f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f8:	223f      	movs	r2, #63	; 0x3f
 80088fa:	409a      	lsls	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	f010803f 	.word	0xf010803f

0800891c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008928:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800892a:	f7ff fe07 	bl	800853c <HAL_GetTick>
 800892e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d008      	beq.n	800894e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e052      	b.n	80089f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0216 	bic.w	r2, r2, #22
 800895c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695a      	ldr	r2, [r3, #20]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800896c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <HAL_DMA_Abort+0x62>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0208 	bic.w	r2, r2, #8
 800898c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800899e:	e013      	b.n	80089c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089a0:	f7ff fdcc 	bl	800853c <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d90c      	bls.n	80089c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2203      	movs	r2, #3
 80089c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e015      	b.n	80089f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e4      	bne.n	80089a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089da:	223f      	movs	r2, #63	; 0x3f
 80089dc:	409a      	lsls	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d004      	beq.n	8008a1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2280      	movs	r2, #128	; 0x80
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e00c      	b.n	8008a34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0201 	bic.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008a4c:	4b92      	ldr	r3, [pc, #584]	; (8008c98 <HAL_DMA_IRQHandler+0x258>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a92      	ldr	r2, [pc, #584]	; (8008c9c <HAL_DMA_IRQHandler+0x25c>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	0a9b      	lsrs	r3, r3, #10
 8008a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	409a      	lsls	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01a      	beq.n	8008aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d013      	beq.n	8008aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0204 	bic.w	r2, r2, #4
 8008a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	2208      	movs	r2, #8
 8008a9a:	409a      	lsls	r2, r3
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa4:	f043 0201 	orr.w	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d012      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ace:	2201      	movs	r2, #1
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	f043 0202 	orr.w	r2, r3, #2
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	409a      	lsls	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d012      	beq.n	8008b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b04:	2204      	movs	r2, #4
 8008b06:	409a      	lsls	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	f043 0204 	orr.w	r2, r3, #4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d043      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d03c      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3a:	2210      	movs	r2, #16
 8008b3c:	409a      	lsls	r2, r3
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d018      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d108      	bne.n	8008b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d024      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
 8008b6e:	e01f      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01b      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
 8008b80:	e016      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0208 	bic.w	r2, r2, #8
 8008b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 808e 	beq.w	8008cde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8086 	beq.w	8008cde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	d136      	bne.n	8008c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0216 	bic.w	r2, r2, #22
 8008bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	695a      	ldr	r2, [r3, #20]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <HAL_DMA_IRQHandler+0x1da>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0208 	bic.w	r2, r2, #8
 8008c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2e:	223f      	movs	r2, #63	; 0x3f
 8008c30:	409a      	lsls	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d07d      	beq.n	8008d4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
        }
        return;
 8008c56:	e078      	b.n	8008d4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01c      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d108      	bne.n	8008c86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d030      	beq.n	8008cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
 8008c84:	e02b      	b.n	8008cde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d027      	beq.n	8008cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
 8008c96:	e022      	b.n	8008cde <HAL_DMA_IRQHandler+0x29e>
 8008c98:	20000004 	.word	0x20000004
 8008c9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10f      	bne.n	8008cce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0210 	bic.w	r2, r2, #16
 8008cbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d032      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d022      	beq.n	8008d38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2205      	movs	r2, #5
 8008cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60bb      	str	r3, [r7, #8]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d307      	bcc.n	8008d26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f2      	bne.n	8008d0a <HAL_DMA_IRQHandler+0x2ca>
 8008d24:	e000      	b.n	8008d28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008d26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
 8008d48:	e000      	b.n	8008d4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8008d4a:	bf00      	nop
    }
  }
}
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop

08008d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	3b10      	subs	r3, #16
 8008d64:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <DMA_CalcBaseAndBitshift+0x64>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d6e:	4a13      	ldr	r2, [pc, #76]	; (8008dbc <DMA_CalcBaseAndBitshift+0x68>)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d909      	bls.n	8008d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	659a      	str	r2, [r3, #88]	; 0x58
 8008d94:	e007      	b.n	8008da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	aaaaaaab 	.word	0xaaaaaaab
 8008dbc:	08010534 	.word	0x08010534

08008dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11f      	bne.n	8008e1a <DMA_CheckFifoParam+0x5a>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d856      	bhi.n	8008e8e <DMA_CheckFifoParam+0xce>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <DMA_CheckFifoParam+0x28>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008e0b 	.word	0x08008e0b
 8008df0:	08008df9 	.word	0x08008df9
 8008df4:	08008e8f 	.word	0x08008e8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d046      	beq.n	8008e92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e08:	e043      	b.n	8008e92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e12:	d140      	bne.n	8008e96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e18:	e03d      	b.n	8008e96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e22:	d121      	bne.n	8008e68 <DMA_CheckFifoParam+0xa8>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d837      	bhi.n	8008e9a <DMA_CheckFifoParam+0xda>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <DMA_CheckFifoParam+0x70>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e47 	.word	0x08008e47
 8008e38:	08008e41 	.word	0x08008e41
 8008e3c:	08008e59 	.word	0x08008e59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e030      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d025      	beq.n	8008e9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e56:	e022      	b.n	8008e9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e60:	d11f      	bne.n	8008ea2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e66:	e01c      	b.n	8008ea2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d903      	bls.n	8008e76 <DMA_CheckFifoParam+0xb6>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d003      	beq.n	8008e7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e74:	e018      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7a:	e015      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00e      	beq.n	8008ea6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	e00b      	b.n	8008ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8008e8e:	bf00      	nop
 8008e90:	e00a      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8008e92:	bf00      	nop
 8008e94:	e008      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8008e96:	bf00      	nop
 8008e98:	e006      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e004      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e002      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;   
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8008ea6:	bf00      	nop
    }
  } 
  
  return status; 
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop

08008eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b089      	sub	sp, #36	; 0x24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
 8008ed2:	e16b      	b.n	80091ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8008edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	f040 815a 	bne.w	80091a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d005      	beq.n	8008f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d130      	bne.n	8008f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	2203      	movs	r2, #3
 8008f16:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1a:	43db      	mvns	r3, r3
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f40:	2201      	movs	r2, #1
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	091b      	lsrs	r3, r3, #4
 8008f56:	f003 0201 	and.w	r2, r3, #1
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d017      	beq.n	8008fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	2203      	movs	r2, #3
 8008f84:	fa02 f303 	lsl.w	r3, r2, r3
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d123      	bne.n	8008ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	08da      	lsrs	r2, r3, #3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3208      	adds	r2, #8
 8008fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f003 0307 	and.w	r3, r3, #7
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	220f      	movs	r2, #15
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	08da      	lsrs	r2, r3, #3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3208      	adds	r2, #8
 8008ff6:	69b9      	ldr	r1, [r7, #24]
 8008ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2203      	movs	r2, #3
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	4013      	ands	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f003 0203 	and.w	r2, r3, #3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4313      	orrs	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80b4 	beq.w	80091a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	4b60      	ldr	r3, [pc, #384]	; (80091c4 <HAL_GPIO_Init+0x30c>)
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	4a5f      	ldr	r2, [pc, #380]	; (80091c4 <HAL_GPIO_Init+0x30c>)
 8009048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800904c:	6453      	str	r3, [r2, #68]	; 0x44
 800904e:	4b5d      	ldr	r3, [pc, #372]	; (80091c4 <HAL_GPIO_Init+0x30c>)
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800905a:	4a5b      	ldr	r2, [pc, #364]	; (80091c8 <HAL_GPIO_Init+0x310>)
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	089b      	lsrs	r3, r3, #2
 8009060:	3302      	adds	r3, #2
 8009062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	220f      	movs	r2, #15
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	43db      	mvns	r3, r3
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	4013      	ands	r3, r2
 800907c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a52      	ldr	r2, [pc, #328]	; (80091cc <HAL_GPIO_Init+0x314>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d02b      	beq.n	80090de <HAL_GPIO_Init+0x226>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a51      	ldr	r2, [pc, #324]	; (80091d0 <HAL_GPIO_Init+0x318>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d025      	beq.n	80090da <HAL_GPIO_Init+0x222>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a50      	ldr	r2, [pc, #320]	; (80091d4 <HAL_GPIO_Init+0x31c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01f      	beq.n	80090d6 <HAL_GPIO_Init+0x21e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a4f      	ldr	r2, [pc, #316]	; (80091d8 <HAL_GPIO_Init+0x320>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d019      	beq.n	80090d2 <HAL_GPIO_Init+0x21a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a4e      	ldr	r2, [pc, #312]	; (80091dc <HAL_GPIO_Init+0x324>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d013      	beq.n	80090ce <HAL_GPIO_Init+0x216>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a4d      	ldr	r2, [pc, #308]	; (80091e0 <HAL_GPIO_Init+0x328>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00d      	beq.n	80090ca <HAL_GPIO_Init+0x212>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a4c      	ldr	r2, [pc, #304]	; (80091e4 <HAL_GPIO_Init+0x32c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d007      	beq.n	80090c6 <HAL_GPIO_Init+0x20e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a4b      	ldr	r2, [pc, #300]	; (80091e8 <HAL_GPIO_Init+0x330>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d101      	bne.n	80090c2 <HAL_GPIO_Init+0x20a>
 80090be:	2307      	movs	r3, #7
 80090c0:	e00e      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090c2:	2308      	movs	r3, #8
 80090c4:	e00c      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090c6:	2306      	movs	r3, #6
 80090c8:	e00a      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090ca:	2305      	movs	r3, #5
 80090cc:	e008      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090ce:	2304      	movs	r3, #4
 80090d0:	e006      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090d2:	2303      	movs	r3, #3
 80090d4:	e004      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e002      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090da:	2301      	movs	r3, #1
 80090dc:	e000      	b.n	80090e0 <HAL_GPIO_Init+0x228>
 80090de:	2300      	movs	r3, #0
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	f002 0203 	and.w	r2, r2, #3
 80090e6:	0092      	lsls	r2, r2, #2
 80090e8:	4093      	lsls	r3, r2
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090f0:	4935      	ldr	r1, [pc, #212]	; (80091c8 <HAL_GPIO_Init+0x310>)
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	089b      	lsrs	r3, r3, #2
 80090f6:	3302      	adds	r3, #2
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090fe:	4b3b      	ldr	r3, [pc, #236]	; (80091ec <HAL_GPIO_Init+0x334>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	43db      	mvns	r3, r3
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	4013      	ands	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009122:	4a32      	ldr	r2, [pc, #200]	; (80091ec <HAL_GPIO_Init+0x334>)
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009128:	4b30      	ldr	r3, [pc, #192]	; (80091ec <HAL_GPIO_Init+0x334>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	43db      	mvns	r3, r3
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	4013      	ands	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800914c:	4a27      	ldr	r2, [pc, #156]	; (80091ec <HAL_GPIO_Init+0x334>)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009152:	4b26      	ldr	r3, [pc, #152]	; (80091ec <HAL_GPIO_Init+0x334>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	43db      	mvns	r3, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4013      	ands	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009176:	4a1d      	ldr	r2, [pc, #116]	; (80091ec <HAL_GPIO_Init+0x334>)
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800917c:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <HAL_GPIO_Init+0x334>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	43db      	mvns	r3, r3
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	4013      	ands	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091a0:	4a12      	ldr	r2, [pc, #72]	; (80091ec <HAL_GPIO_Init+0x334>)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	3301      	adds	r3, #1
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	2b0f      	cmp	r3, #15
 80091b0:	f67f ae90 	bls.w	8008ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop
 80091b8:	3724      	adds	r7, #36	; 0x24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40023800 	.word	0x40023800
 80091c8:	40013800 	.word	0x40013800
 80091cc:	40020000 	.word	0x40020000
 80091d0:	40020400 	.word	0x40020400
 80091d4:	40020800 	.word	0x40020800
 80091d8:	40020c00 	.word	0x40020c00
 80091dc:	40021000 	.word	0x40021000
 80091e0:	40021400 	.word	0x40021400
 80091e4:	40021800 	.word	0x40021800
 80091e8:	40021c00 	.word	0x40021c00
 80091ec:	40013c00 	.word	0x40013c00

080091f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e12b      	b.n	800945a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7fa ff92 	bl	8004140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2224      	movs	r2, #36	; 0x24
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0201 	bic.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009254:	f001 fbd8 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 8009258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	4a81      	ldr	r2, [pc, #516]	; (8009464 <HAL_I2C_Init+0x274>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d807      	bhi.n	8009274 <HAL_I2C_Init+0x84>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a80      	ldr	r2, [pc, #512]	; (8009468 <HAL_I2C_Init+0x278>)
 8009268:	4293      	cmp	r3, r2
 800926a:	bf94      	ite	ls
 800926c:	2301      	movls	r3, #1
 800926e:	2300      	movhi	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	e006      	b.n	8009282 <HAL_I2C_Init+0x92>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a7d      	ldr	r2, [pc, #500]	; (800946c <HAL_I2C_Init+0x27c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	bf94      	ite	ls
 800927c:	2301      	movls	r3, #1
 800927e:	2300      	movhi	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e0e7      	b.n	800945a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4a78      	ldr	r2, [pc, #480]	; (8009470 <HAL_I2C_Init+0x280>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	0c9b      	lsrs	r3, r3, #18
 8009294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a6a      	ldr	r2, [pc, #424]	; (8009464 <HAL_I2C_Init+0x274>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d802      	bhi.n	80092c4 <HAL_I2C_Init+0xd4>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3301      	adds	r3, #1
 80092c2:	e009      	b.n	80092d8 <HAL_I2C_Init+0xe8>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	4a69      	ldr	r2, [pc, #420]	; (8009474 <HAL_I2C_Init+0x284>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	099b      	lsrs	r3, r3, #6
 80092d6:	3301      	adds	r3, #1
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	430b      	orrs	r3, r1
 80092de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80092ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	495c      	ldr	r1, [pc, #368]	; (8009464 <HAL_I2C_Init+0x274>)
 80092f4:	428b      	cmp	r3, r1
 80092f6:	d819      	bhi.n	800932c <HAL_I2C_Init+0x13c>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	1e59      	subs	r1, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	fbb1 f3f3 	udiv	r3, r1, r3
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800930c:	400b      	ands	r3, r1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <HAL_I2C_Init+0x138>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1e59      	subs	r1, r3, #1
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009320:	3301      	adds	r3, #1
 8009322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009326:	e051      	b.n	80093cc <HAL_I2C_Init+0x1dc>
 8009328:	2304      	movs	r3, #4
 800932a:	e04f      	b.n	80093cc <HAL_I2C_Init+0x1dc>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d111      	bne.n	8009358 <HAL_I2C_Init+0x168>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	1e58      	subs	r0, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	440b      	add	r3, r1
 8009342:	fbb0 f3f3 	udiv	r3, r0, r3
 8009346:	3301      	adds	r3, #1
 8009348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800934c:	2b00      	cmp	r3, #0
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	e012      	b.n	800937e <HAL_I2C_Init+0x18e>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	1e58      	subs	r0, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6859      	ldr	r1, [r3, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	0099      	lsls	r1, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	fbb0 f3f3 	udiv	r3, r0, r3
 800936e:	3301      	adds	r3, #1
 8009370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf0c      	ite	eq
 8009378:	2301      	moveq	r3, #1
 800937a:	2300      	movne	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_Init+0x196>
 8009382:	2301      	movs	r3, #1
 8009384:	e022      	b.n	80093cc <HAL_I2C_Init+0x1dc>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10e      	bne.n	80093ac <HAL_I2C_Init+0x1bc>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	1e58      	subs	r0, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6859      	ldr	r1, [r3, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	440b      	add	r3, r1
 800939c:	fbb0 f3f3 	udiv	r3, r0, r3
 80093a0:	3301      	adds	r3, #1
 80093a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	e00f      	b.n	80093cc <HAL_I2C_Init+0x1dc>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1e58      	subs	r0, r3, #1
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6859      	ldr	r1, [r3, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	0099      	lsls	r1, r3, #2
 80093bc:	440b      	add	r3, r1
 80093be:	fbb0 f3f3 	udiv	r3, r0, r3
 80093c2:	3301      	adds	r3, #1
 80093c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	6809      	ldr	r1, [r1, #0]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69da      	ldr	r2, [r3, #28]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80093fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6911      	ldr	r1, [r2, #16]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	68d2      	ldr	r2, [r2, #12]
 8009406:	4311      	orrs	r1, r2
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	430b      	orrs	r3, r1
 800940e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	000186a0 	.word	0x000186a0
 8009468:	001e847f 	.word	0x001e847f
 800946c:	003d08ff 	.word	0x003d08ff
 8009470:	431bde83 	.word	0x431bde83
 8009474:	10624dd3 	.word	0x10624dd3

08009478 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af02      	add	r7, sp, #8
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	461a      	mov	r2, r3
 8009486:	4603      	mov	r3, r0
 8009488:	817b      	strh	r3, [r7, #10]
 800948a:	460b      	mov	r3, r1
 800948c:	813b      	strh	r3, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009492:	f7ff f853 	bl	800853c <HAL_GetTick>
 8009496:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	f040 80d9 	bne.w	8009658 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	2319      	movs	r3, #25
 80094ac:	2201      	movs	r2, #1
 80094ae:	496d      	ldr	r1, [pc, #436]	; (8009664 <HAL_I2C_Mem_Write+0x1ec>)
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fc7f 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80094bc:	2302      	movs	r3, #2
 80094be:	e0cc      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_I2C_Mem_Write+0x56>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e0c5      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d007      	beq.n	80094f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2221      	movs	r2, #33	; 0x21
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2240      	movs	r2, #64	; 0x40
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a3a      	ldr	r2, [r7, #32]
 800951e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4a4d      	ldr	r2, [pc, #308]	; (8009668 <HAL_I2C_Mem_Write+0x1f0>)
 8009534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009536:	88f8      	ldrh	r0, [r7, #6]
 8009538:	893a      	ldrh	r2, [r7, #8]
 800953a:	8979      	ldrh	r1, [r7, #10]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4603      	mov	r3, r0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fab6 	bl	8009ab8 <I2C_RequestMemoryWrite>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d052      	beq.n	80095f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e081      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fd00 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00d      	beq.n	8009582 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	2b04      	cmp	r3, #4
 800956c:	d107      	bne.n	800957e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800957c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e06b      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d11b      	bne.n	80095f8 <HAL_I2C_Mem_Write+0x180>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d017      	beq.n	80095f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	781a      	ldrb	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1aa      	bne.n	8009556 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fcec 	bl	8009fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00d      	beq.n	800962c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	2b04      	cmp	r3, #4
 8009616:	d107      	bne.n	8009628 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009626:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e016      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	e000      	b.n	800965a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009658:	2302      	movs	r3, #2
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	00100002 	.word	0x00100002
 8009668:	ffff0000 	.word	0xffff0000

0800966c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08c      	sub	sp, #48	; 0x30
 8009670:	af02      	add	r7, sp, #8
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	4608      	mov	r0, r1
 8009676:	4611      	mov	r1, r2
 8009678:	461a      	mov	r2, r3
 800967a:	4603      	mov	r3, r0
 800967c:	817b      	strh	r3, [r7, #10]
 800967e:	460b      	mov	r3, r1
 8009680:	813b      	strh	r3, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009686:	f7fe ff59 	bl	800853c <HAL_GetTick>
 800968a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b20      	cmp	r3, #32
 8009696:	f040 8208 	bne.w	8009aaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	2319      	movs	r3, #25
 80096a0:	2201      	movs	r2, #1
 80096a2:	497b      	ldr	r1, [pc, #492]	; (8009890 <HAL_I2C_Mem_Read+0x224>)
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fb85 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
 80096b2:	e1fb      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_I2C_Mem_Read+0x56>
 80096be:	2302      	movs	r3, #2
 80096c0:	e1f4      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d007      	beq.n	80096e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2222      	movs	r2, #34	; 0x22
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2240      	movs	r2, #64	; 0x40
 8009704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4a5b      	ldr	r2, [pc, #364]	; (8009894 <HAL_I2C_Mem_Read+0x228>)
 8009728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800972a:	88f8      	ldrh	r0, [r7, #6]
 800972c:	893a      	ldrh	r2, [r7, #8]
 800972e:	8979      	ldrh	r1, [r7, #10]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fa52 	bl	8009be4 <I2C_RequestMemoryRead>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e1b0      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	d113      	bne.n	800977a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009752:	2300      	movs	r3, #0
 8009754:	623b      	str	r3, [r7, #32]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	623b      	str	r3, [r7, #32]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	623b      	str	r3, [r7, #32]
 8009766:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	e184      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11b      	bne.n	80097ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	61fb      	str	r3, [r7, #28]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	e164      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d11b      	bne.n	80097fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097e2:	2300      	movs	r3, #0
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	e144      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009810:	e138      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009816:	2b03      	cmp	r3, #3
 8009818:	f200 80f1 	bhi.w	80099fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009820:	2b01      	cmp	r3, #1
 8009822:	d123      	bne.n	800986c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fc1b 	bl	800a064 <I2C_WaitOnRXNEFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e139      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	3b01      	subs	r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800986a:	e10b      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009870:	2b02      	cmp	r3, #2
 8009872:	d14e      	bne.n	8009912 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	2200      	movs	r2, #0
 800987c:	4906      	ldr	r1, [pc, #24]	; (8009898 <HAL_I2C_Mem_Read+0x22c>)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fa98 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e10e      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
 800988e:	bf00      	nop
 8009890:	00100002 	.word	0x00100002
 8009894:	ffff0000 	.word	0xffff0000
 8009898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691a      	ldr	r2, [r3, #16]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	3b01      	subs	r3, #1
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009910:	e0b8      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2200      	movs	r2, #0
 800991a:	4966      	ldr	r1, [pc, #408]	; (8009ab4 <HAL_I2C_Mem_Read+0x448>)
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fa49 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e0bf      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691a      	ldr	r2, [r3, #16]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	2200      	movs	r2, #0
 8009976:	494f      	ldr	r1, [pc, #316]	; (8009ab4 <HAL_I2C_Mem_Read+0x448>)
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fa1b 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e091      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	b2d2      	uxtb	r2, r2
 80099a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691a      	ldr	r2, [r3, #16]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099fc:	e042      	b.n	8009a84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fb2e 	bl	800a064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e04c      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691a      	ldr	r2, [r3, #16]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d118      	bne.n	8009a84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f47f aec2 	bne.w	8009812 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e000      	b.n	8009aac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009aaa:	2302      	movs	r3, #2
  }
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3728      	adds	r7, #40	; 0x28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	00010004 	.word	0x00010004

08009ab8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	817b      	strh	r3, [r7, #10]
 8009aca:	460b      	mov	r3, r1
 8009acc:	813b      	strh	r3, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 f960 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b08:	d103      	bne.n	8009b12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e05f      	b.n	8009bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b16:	897b      	ldrh	r3, [r7, #10]
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	6a3a      	ldr	r2, [r7, #32]
 8009b2a:	492d      	ldr	r1, [pc, #180]	; (8009be0 <I2C_RequestMemoryWrite+0x128>)
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f998 	bl	8009e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e04c      	b.n	8009bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	6a39      	ldr	r1, [r7, #32]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fa02 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00d      	beq.n	8009b7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d107      	bne.n	8009b7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e02b      	b.n	8009bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d105      	bne.n	8009b90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b84:	893b      	ldrh	r3, [r7, #8]
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	611a      	str	r2, [r3, #16]
 8009b8e:	e021      	b.n	8009bd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b90:	893b      	ldrh	r3, [r7, #8]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	6a39      	ldr	r1, [r7, #32]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f9dc 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d107      	bne.n	8009bc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e005      	b.n	8009bd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bca:	893b      	ldrh	r3, [r7, #8]
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	00010002 	.word	0x00010002

08009be4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	4608      	mov	r0, r1
 8009bee:	4611      	mov	r1, r2
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	817b      	strh	r3, [r7, #10]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	813b      	strh	r3, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 f8c2 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00d      	beq.n	8009c52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c44:	d103      	bne.n	8009c4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e0aa      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c52:	897b      	ldrh	r3, [r7, #10]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	6a3a      	ldr	r2, [r7, #32]
 8009c66:	4952      	ldr	r1, [pc, #328]	; (8009db0 <I2C_RequestMemoryRead+0x1cc>)
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f8fa 	bl	8009e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e097      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c78:	2300      	movs	r3, #0
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c90:	6a39      	ldr	r1, [r7, #32]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f964 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00d      	beq.n	8009cba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d107      	bne.n	8009cb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e076      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cba:	88fb      	ldrh	r3, [r7, #6]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d105      	bne.n	8009ccc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009cc0:	893b      	ldrh	r3, [r7, #8]
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	611a      	str	r2, [r3, #16]
 8009cca:	e021      	b.n	8009d10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ccc:	893b      	ldrh	r3, [r7, #8]
 8009cce:	0a1b      	lsrs	r3, r3, #8
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cdc:	6a39      	ldr	r1, [r7, #32]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 f93e 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00d      	beq.n	8009d06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d107      	bne.n	8009d02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e050      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d06:	893b      	ldrh	r3, [r7, #8]
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d12:	6a39      	ldr	r1, [r7, #32]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f923 	bl	8009f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00d      	beq.n	8009d3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d107      	bne.n	8009d38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e035      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f82b 	bl	8009db4 <I2C_WaitOnFlagUntilTimeout>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00d      	beq.n	8009d80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d72:	d103      	bne.n	8009d7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e013      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009d80:	897b      	ldrh	r3, [r7, #10]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	6a3a      	ldr	r2, [r7, #32]
 8009d94:	4906      	ldr	r1, [pc, #24]	; (8009db0 <I2C_RequestMemoryRead+0x1cc>)
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f863 	bl	8009e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3718      	adds	r7, #24
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	00010002 	.word	0x00010002

08009db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009dc4:	e025      	b.n	8009e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dcc:	d021      	beq.n	8009e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dce:	f7fe fbb5 	bl	800853c <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d302      	bcc.n	8009de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d116      	bne.n	8009e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f043 0220 	orr.w	r2, r3, #32
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e023      	b.n	8009e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d10d      	bne.n	8009e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	43da      	mvns	r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	4013      	ands	r3, r2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bf0c      	ite	eq
 8009e2e:	2301      	moveq	r3, #1
 8009e30:	2300      	movne	r3, #0
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	461a      	mov	r2, r3
 8009e36:	e00c      	b.n	8009e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	43da      	mvns	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4013      	ands	r3, r2
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bf0c      	ite	eq
 8009e4a:	2301      	moveq	r3, #1
 8009e4c:	2300      	movne	r3, #0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d0b6      	beq.n	8009dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e70:	e051      	b.n	8009f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e80:	d123      	bne.n	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	f043 0204 	orr.w	r2, r3, #4
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e046      	b.n	8009f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d021      	beq.n	8009f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed2:	f7fe fb33 	bl	800853c <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d116      	bne.n	8009f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f043 0220 	orr.w	r2, r3, #32
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e020      	b.n	8009f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10c      	bne.n	8009f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	43da      	mvns	r2, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	bf14      	ite	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	2300      	moveq	r3, #0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	e00b      	b.n	8009f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	43da      	mvns	r2, r3
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	4013      	ands	r3, r2
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bf14      	ite	ne
 8009f4c:	2301      	movne	r3, #1
 8009f4e:	2300      	moveq	r3, #0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d18d      	bne.n	8009e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f6c:	e02d      	b.n	8009fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f8ce 	bl	800a110 <I2C_IsAcknowledgeFailed>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e02d      	b.n	8009fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f84:	d021      	beq.n	8009fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f86:	f7fe fad9 	bl	800853c <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d302      	bcc.n	8009f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d116      	bne.n	8009fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f043 0220 	orr.w	r2, r3, #32
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e007      	b.n	8009fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd4:	2b80      	cmp	r3, #128	; 0x80
 8009fd6:	d1ca      	bne.n	8009f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fee:	e02d      	b.n	800a04c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f88d 	bl	800a110 <I2C_IsAcknowledgeFailed>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e02d      	b.n	800a05c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d021      	beq.n	800a04c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a008:	f7fe fa98 	bl	800853c <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	429a      	cmp	r2, r3
 800a016:	d302      	bcc.n	800a01e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d116      	bne.n	800a04c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a038:	f043 0220 	orr.w	r2, r3, #32
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e007      	b.n	800a05c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	f003 0304 	and.w	r3, r3, #4
 800a056:	2b04      	cmp	r3, #4
 800a058:	d1ca      	bne.n	8009ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a070:	e042      	b.n	800a0f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b10      	cmp	r3, #16
 800a07e:	d119      	bne.n	800a0b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0210 	mvn.w	r2, #16
 800a088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e029      	b.n	800a108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b4:	f7fe fa42 	bl	800853c <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d302      	bcc.n	800a0ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d116      	bne.n	800a0f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	f043 0220 	orr.w	r2, r3, #32
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e007      	b.n	800a108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b40      	cmp	r3, #64	; 0x40
 800a104:	d1b5      	bne.n	800a072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a126:	d11b      	bne.n	800a160 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a130:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2220      	movs	r2, #32
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14c:	f043 0204 	orr.w	r2, r3, #4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e000      	b.n	800a162 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e264      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d075      	beq.n	800a27a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a18e:	4ba3      	ldr	r3, [pc, #652]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 030c 	and.w	r3, r3, #12
 800a196:	2b04      	cmp	r3, #4
 800a198:	d00c      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a19a:	4ba0      	ldr	r3, [pc, #640]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	d112      	bne.n	800a1cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1a6:	4b9d      	ldr	r3, [pc, #628]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1b2:	d10b      	bne.n	800a1cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1b4:	4b99      	ldr	r3, [pc, #612]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d05b      	beq.n	800a278 <HAL_RCC_OscConfig+0x108>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d157      	bne.n	800a278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e23f      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d4:	d106      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x74>
 800a1d6:	4b91      	ldr	r3, [pc, #580]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a90      	ldr	r2, [pc, #576]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	e01d      	b.n	800a220 <HAL_RCC_OscConfig+0xb0>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1ec:	d10c      	bne.n	800a208 <HAL_RCC_OscConfig+0x98>
 800a1ee:	4b8b      	ldr	r3, [pc, #556]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a8a      	ldr	r2, [pc, #552]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	4b88      	ldr	r3, [pc, #544]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a87      	ldr	r2, [pc, #540]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e00b      	b.n	800a220 <HAL_RCC_OscConfig+0xb0>
 800a208:	4b84      	ldr	r3, [pc, #528]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a83      	ldr	r2, [pc, #524]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a20e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	4b81      	ldr	r3, [pc, #516]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a80      	ldr	r2, [pc, #512]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a21a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a21e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d013      	beq.n	800a250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a228:	f7fe f988 	bl	800853c <HAL_GetTick>
 800a22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a230:	f7fe f984 	bl	800853c <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b64      	cmp	r3, #100	; 0x64
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e204      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a242:	4b76      	ldr	r3, [pc, #472]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f0      	beq.n	800a230 <HAL_RCC_OscConfig+0xc0>
 800a24e:	e014      	b.n	800a27a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a250:	f7fe f974 	bl	800853c <HAL_GetTick>
 800a254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a258:	f7fe f970 	bl	800853c <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b64      	cmp	r3, #100	; 0x64
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e1f0      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a26a:	4b6c      	ldr	r3, [pc, #432]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f0      	bne.n	800a258 <HAL_RCC_OscConfig+0xe8>
 800a276:	e000      	b.n	800a27a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d063      	beq.n	800a34e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a286:	4b65      	ldr	r3, [pc, #404]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f003 030c 	and.w	r3, r3, #12
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a292:	4b62      	ldr	r3, [pc, #392]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a29a:	2b08      	cmp	r3, #8
 800a29c:	d11c      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a29e:	4b5f      	ldr	r3, [pc, #380]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d116      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2aa:	4b5c      	ldr	r3, [pc, #368]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x152>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d001      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e1c4      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2c2:	4b56      	ldr	r3, [pc, #344]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	4952      	ldr	r1, [pc, #328]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2d6:	e03a      	b.n	800a34e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d020      	beq.n	800a322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2e0:	4b4f      	ldr	r3, [pc, #316]	; (800a420 <HAL_RCC_OscConfig+0x2b0>)
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e6:	f7fe f929 	bl	800853c <HAL_GetTick>
 800a2ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2ec:	e008      	b.n	800a300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2ee:	f7fe f925 	bl	800853c <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d901      	bls.n	800a300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e1a5      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a300:	4b46      	ldr	r3, [pc, #280]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0f0      	beq.n	800a2ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a30c:	4b43      	ldr	r3, [pc, #268]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	4940      	ldr	r1, [pc, #256]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	e015      	b.n	800a34e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a322:	4b3f      	ldr	r3, [pc, #252]	; (800a420 <HAL_RCC_OscConfig+0x2b0>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a328:	f7fe f908 	bl	800853c <HAL_GetTick>
 800a32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a32e:	e008      	b.n	800a342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a330:	f7fe f904 	bl	800853c <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e184      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a342:	4b36      	ldr	r3, [pc, #216]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1f0      	bne.n	800a330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d030      	beq.n	800a3bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d016      	beq.n	800a390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a362:	4b30      	ldr	r3, [pc, #192]	; (800a424 <HAL_RCC_OscConfig+0x2b4>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a368:	f7fe f8e8 	bl	800853c <HAL_GetTick>
 800a36c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a370:	f7fe f8e4 	bl	800853c <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e164      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f0      	beq.n	800a370 <HAL_RCC_OscConfig+0x200>
 800a38e:	e015      	b.n	800a3bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a390:	4b24      	ldr	r3, [pc, #144]	; (800a424 <HAL_RCC_OscConfig+0x2b4>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a396:	f7fe f8d1 	bl	800853c <HAL_GetTick>
 800a39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a39c:	e008      	b.n	800a3b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a39e:	f7fe f8cd 	bl	800853c <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e14d      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3b0:	4b1a      	ldr	r3, [pc, #104]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b4:	f003 0302 	and.w	r3, r3, #2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f0      	bne.n	800a39e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 80a0 	beq.w	800a50a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ce:	4b13      	ldr	r3, [pc, #76]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10f      	bne.n	800a3fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60bb      	str	r3, [r7, #8]
 800a3de:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e2:	4a0e      	ldr	r2, [pc, #56]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3ea:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <HAL_RCC_OscConfig+0x2ac>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3f2:	60bb      	str	r3, [r7, #8]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <HAL_RCC_OscConfig+0x2b8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a402:	2b00      	cmp	r3, #0
 800a404:	d121      	bne.n	800a44a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a406:	4b08      	ldr	r3, [pc, #32]	; (800a428 <HAL_RCC_OscConfig+0x2b8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a07      	ldr	r2, [pc, #28]	; (800a428 <HAL_RCC_OscConfig+0x2b8>)
 800a40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a412:	f7fe f893 	bl	800853c <HAL_GetTick>
 800a416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a418:	e011      	b.n	800a43e <HAL_RCC_OscConfig+0x2ce>
 800a41a:	bf00      	nop
 800a41c:	40023800 	.word	0x40023800
 800a420:	42470000 	.word	0x42470000
 800a424:	42470e80 	.word	0x42470e80
 800a428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a42c:	f7fe f886 	bl	800853c <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	2b02      	cmp	r3, #2
 800a438:	d901      	bls.n	800a43e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e106      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a43e:	4b85      	ldr	r3, [pc, #532]	; (800a654 <HAL_RCC_OscConfig+0x4e4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0f0      	beq.n	800a42c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d106      	bne.n	800a460 <HAL_RCC_OscConfig+0x2f0>
 800a452:	4b81      	ldr	r3, [pc, #516]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a456:	4a80      	ldr	r2, [pc, #512]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a458:	f043 0301 	orr.w	r3, r3, #1
 800a45c:	6713      	str	r3, [r2, #112]	; 0x70
 800a45e:	e01c      	b.n	800a49a <HAL_RCC_OscConfig+0x32a>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2b05      	cmp	r3, #5
 800a466:	d10c      	bne.n	800a482 <HAL_RCC_OscConfig+0x312>
 800a468:	4b7b      	ldr	r3, [pc, #492]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46c:	4a7a      	ldr	r2, [pc, #488]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a46e:	f043 0304 	orr.w	r3, r3, #4
 800a472:	6713      	str	r3, [r2, #112]	; 0x70
 800a474:	4b78      	ldr	r3, [pc, #480]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	4a77      	ldr	r2, [pc, #476]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	6713      	str	r3, [r2, #112]	; 0x70
 800a480:	e00b      	b.n	800a49a <HAL_RCC_OscConfig+0x32a>
 800a482:	4b75      	ldr	r3, [pc, #468]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a74      	ldr	r2, [pc, #464]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
 800a48e:	4b72      	ldr	r3, [pc, #456]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	4a71      	ldr	r2, [pc, #452]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a494:	f023 0304 	bic.w	r3, r3, #4
 800a498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d015      	beq.n	800a4ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4a2:	f7fe f84b 	bl	800853c <HAL_GetTick>
 800a4a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4a8:	e00a      	b.n	800a4c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4aa:	f7fe f847 	bl	800853c <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e0c5      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c0:	4b65      	ldr	r3, [pc, #404]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0ee      	beq.n	800a4aa <HAL_RCC_OscConfig+0x33a>
 800a4cc:	e014      	b.n	800a4f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4ce:	f7fe f835 	bl	800853c <HAL_GetTick>
 800a4d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4d4:	e00a      	b.n	800a4ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4d6:	f7fe f831 	bl	800853c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e0af      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4ec:	4b5a      	ldr	r3, [pc, #360]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1ee      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d105      	bne.n	800a50a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4fe:	4b56      	ldr	r3, [pc, #344]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	4a55      	ldr	r2, [pc, #340]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 809b 	beq.w	800a64a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a514:	4b50      	ldr	r3, [pc, #320]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f003 030c 	and.w	r3, r3, #12
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d05c      	beq.n	800a5da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	2b02      	cmp	r3, #2
 800a526:	d141      	bne.n	800a5ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a528:	4b4c      	ldr	r3, [pc, #304]	; (800a65c <HAL_RCC_OscConfig+0x4ec>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a52e:	f7fe f805 	bl	800853c <HAL_GetTick>
 800a532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a534:	e008      	b.n	800a548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a536:	f7fe f801 	bl	800853c <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e081      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a548:	4b43      	ldr	r3, [pc, #268]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f0      	bne.n	800a536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	019b      	lsls	r3, r3, #6
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	3b01      	subs	r3, #1
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	061b      	lsls	r3, r3, #24
 800a578:	4937      	ldr	r1, [pc, #220]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a57e:	4b37      	ldr	r3, [pc, #220]	; (800a65c <HAL_RCC_OscConfig+0x4ec>)
 800a580:	2201      	movs	r2, #1
 800a582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a584:	f7fd ffda 	bl	800853c <HAL_GetTick>
 800a588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a58a:	e008      	b.n	800a59e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a58c:	f7fd ffd6 	bl	800853c <HAL_GetTick>
 800a590:	4602      	mov	r2, r0
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	2b02      	cmp	r3, #2
 800a598:	d901      	bls.n	800a59e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a59a:	2303      	movs	r3, #3
 800a59c:	e056      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a59e:	4b2e      	ldr	r3, [pc, #184]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0f0      	beq.n	800a58c <HAL_RCC_OscConfig+0x41c>
 800a5aa:	e04e      	b.n	800a64a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ac:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <HAL_RCC_OscConfig+0x4ec>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b2:	f7fd ffc3 	bl	800853c <HAL_GetTick>
 800a5b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5b8:	e008      	b.n	800a5cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5ba:	f7fd ffbf 	bl	800853c <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d901      	bls.n	800a5cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e03f      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5cc:	4b22      	ldr	r3, [pc, #136]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1f0      	bne.n	800a5ba <HAL_RCC_OscConfig+0x44a>
 800a5d8:	e037      	b.n	800a64a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e032      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a5e6:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <HAL_RCC_OscConfig+0x4e8>)
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d028      	beq.n	800a646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d121      	bne.n	800a646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d11a      	bne.n	800a646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a616:	4013      	ands	r3, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a61c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a61e:	4293      	cmp	r3, r2
 800a620:	d111      	bne.n	800a646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62c:	085b      	lsrs	r3, r3, #1
 800a62e:	3b01      	subs	r3, #1
 800a630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a632:	429a      	cmp	r2, r3
 800a634:	d107      	bne.n	800a646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a642:	429a      	cmp	r2, r3
 800a644:	d001      	beq.n	800a64a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	40007000 	.word	0x40007000
 800a658:	40023800 	.word	0x40023800
 800a65c:	42470060 	.word	0x42470060

0800a660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0cc      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a674:	4b68      	ldr	r3, [pc, #416]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d90c      	bls.n	800a69c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a682:	4b65      	ldr	r3, [pc, #404]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a68a:	4b63      	ldr	r3, [pc, #396]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d001      	beq.n	800a69c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0b8      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d020      	beq.n	800a6ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d005      	beq.n	800a6c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6b4:	4b59      	ldr	r3, [pc, #356]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	4a58      	ldr	r2, [pc, #352]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0308 	and.w	r3, r3, #8
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d005      	beq.n	800a6d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6cc:	4b53      	ldr	r3, [pc, #332]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	4a52      	ldr	r2, [pc, #328]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a6d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6d8:	4b50      	ldr	r3, [pc, #320]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	494d      	ldr	r1, [pc, #308]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d044      	beq.n	800a780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d107      	bne.n	800a70e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6fe:	4b47      	ldr	r3, [pc, #284]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d119      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e07f      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d003      	beq.n	800a71e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d107      	bne.n	800a72e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a71e:	4b3f      	ldr	r3, [pc, #252]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e06f      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a72e:	4b3b      	ldr	r3, [pc, #236]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e067      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a73e:	4b37      	ldr	r3, [pc, #220]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f023 0203 	bic.w	r2, r3, #3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4934      	ldr	r1, [pc, #208]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a750:	f7fd fef4 	bl	800853c <HAL_GetTick>
 800a754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a756:	e00a      	b.n	800a76e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a758:	f7fd fef0 	bl	800853c <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	f241 3288 	movw	r2, #5000	; 0x1388
 800a766:	4293      	cmp	r3, r2
 800a768:	d901      	bls.n	800a76e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e04f      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a76e:	4b2b      	ldr	r3, [pc, #172]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 020c 	and.w	r2, r3, #12
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d1eb      	bne.n	800a758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d20c      	bcs.n	800a7a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a78e:	4b22      	ldr	r3, [pc, #136]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a796:	4b20      	ldr	r3, [pc, #128]	; (800a818 <HAL_RCC_ClockConfig+0x1b8>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0307 	and.w	r3, r3, #7
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d001      	beq.n	800a7a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e032      	b.n	800a80e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7b4:	4b19      	ldr	r3, [pc, #100]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	4916      	ldr	r1, [pc, #88]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0308 	and.w	r3, r3, #8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d009      	beq.n	800a7e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	490e      	ldr	r1, [pc, #56]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a7e6:	f000 f821 	bl	800a82c <HAL_RCC_GetSysClockFreq>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <HAL_RCC_ClockConfig+0x1bc>)
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	091b      	lsrs	r3, r3, #4
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	490a      	ldr	r1, [pc, #40]	; (800a820 <HAL_RCC_ClockConfig+0x1c0>)
 800a7f8:	5ccb      	ldrb	r3, [r1, r3]
 800a7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fe:	4a09      	ldr	r2, [pc, #36]	; (800a824 <HAL_RCC_ClockConfig+0x1c4>)
 800a800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <HAL_RCC_ClockConfig+0x1c8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f7fd fe54 	bl	80084b4 <HAL_InitTick>

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40023c00 	.word	0x40023c00
 800a81c:	40023800 	.word	0x40023800
 800a820:	0801050c 	.word	0x0801050c
 800a824:	20000004 	.word	0x20000004
 800a828:	20000008 	.word	0x20000008

0800a82c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a82c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	2300      	movs	r3, #0
 800a83e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a844:	4b67      	ldr	r3, [pc, #412]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f003 030c 	and.w	r3, r3, #12
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d00d      	beq.n	800a86c <HAL_RCC_GetSysClockFreq+0x40>
 800a850:	2b08      	cmp	r3, #8
 800a852:	f200 80bd 	bhi.w	800a9d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_RCC_GetSysClockFreq+0x34>
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d003      	beq.n	800a866 <HAL_RCC_GetSysClockFreq+0x3a>
 800a85e:	e0b7      	b.n	800a9d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a860:	4b61      	ldr	r3, [pc, #388]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a862:	60bb      	str	r3, [r7, #8]
       break;
 800a864:	e0b7      	b.n	800a9d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a866:	4b61      	ldr	r3, [pc, #388]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a868:	60bb      	str	r3, [r7, #8]
      break;
 800a86a:	e0b4      	b.n	800a9d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a86c:	4b5d      	ldr	r3, [pc, #372]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a876:	4b5b      	ldr	r3, [pc, #364]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d04d      	beq.n	800a91e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a882:	4b58      	ldr	r3, [pc, #352]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	099b      	lsrs	r3, r3, #6
 800a888:	461a      	mov	r2, r3
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	ea02 0800 	and.w	r8, r2, r0
 800a89a:	ea03 0901 	and.w	r9, r3, r1
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	014b      	lsls	r3, r1, #5
 800a8ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a8b0:	0142      	lsls	r2, r0, #5
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	ebb0 0008 	subs.w	r0, r0, r8
 800a8ba:	eb61 0109 	sbc.w	r1, r1, r9
 800a8be:	f04f 0200 	mov.w	r2, #0
 800a8c2:	f04f 0300 	mov.w	r3, #0
 800a8c6:	018b      	lsls	r3, r1, #6
 800a8c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a8cc:	0182      	lsls	r2, r0, #6
 800a8ce:	1a12      	subs	r2, r2, r0
 800a8d0:	eb63 0301 	sbc.w	r3, r3, r1
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f04f 0100 	mov.w	r1, #0
 800a8dc:	00d9      	lsls	r1, r3, #3
 800a8de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8e2:	00d0      	lsls	r0, r2, #3
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	eb12 0208 	adds.w	r2, r2, r8
 800a8ec:	eb43 0309 	adc.w	r3, r3, r9
 800a8f0:	f04f 0000 	mov.w	r0, #0
 800a8f4:	f04f 0100 	mov.w	r1, #0
 800a8f8:	0259      	lsls	r1, r3, #9
 800a8fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a8fe:	0250      	lsls	r0, r2, #9
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4610      	mov	r0, r2
 800a906:	4619      	mov	r1, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	f7f6 f96a 	bl	8000be8 <__aeabi_uldivmod>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4613      	mov	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	e04a      	b.n	800a9b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a91e:	4b31      	ldr	r3, [pc, #196]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	099b      	lsrs	r3, r3, #6
 800a924:	461a      	mov	r2, r3
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a92e:	f04f 0100 	mov.w	r1, #0
 800a932:	ea02 0400 	and.w	r4, r2, r0
 800a936:	ea03 0501 	and.w	r5, r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	014b      	lsls	r3, r1, #5
 800a948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a94c:	0142      	lsls	r2, r0, #5
 800a94e:	4610      	mov	r0, r2
 800a950:	4619      	mov	r1, r3
 800a952:	1b00      	subs	r0, r0, r4
 800a954:	eb61 0105 	sbc.w	r1, r1, r5
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 0300 	mov.w	r3, #0
 800a960:	018b      	lsls	r3, r1, #6
 800a962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a966:	0182      	lsls	r2, r0, #6
 800a968:	1a12      	subs	r2, r2, r0
 800a96a:	eb63 0301 	sbc.w	r3, r3, r1
 800a96e:	f04f 0000 	mov.w	r0, #0
 800a972:	f04f 0100 	mov.w	r1, #0
 800a976:	00d9      	lsls	r1, r3, #3
 800a978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a97c:	00d0      	lsls	r0, r2, #3
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	1912      	adds	r2, r2, r4
 800a984:	eb45 0303 	adc.w	r3, r5, r3
 800a988:	f04f 0000 	mov.w	r0, #0
 800a98c:	f04f 0100 	mov.w	r1, #0
 800a990:	0299      	lsls	r1, r3, #10
 800a992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a996:	0290      	lsls	r0, r2, #10
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4610      	mov	r0, r2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	f7f6 f91e 	bl	8000be8 <__aeabi_uldivmod>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9b4:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	3301      	adds	r3, #1
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9cc:	60bb      	str	r3, [r7, #8]
      break;
 800a9ce:	e002      	b.n	800a9d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a9d2:	60bb      	str	r3, [r7, #8]
      break;
 800a9d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40023800 	.word	0x40023800
 800a9e8:	00f42400 	.word	0x00f42400
 800a9ec:	007a1200 	.word	0x007a1200

0800a9f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9f4:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000004 	.word	0x20000004

0800aa08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa0c:	f7ff fff0 	bl	800a9f0 <HAL_RCC_GetHCLKFreq>
 800aa10:	4602      	mov	r2, r0
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	0a9b      	lsrs	r3, r3, #10
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	4903      	ldr	r1, [pc, #12]	; (800aa2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa1e:	5ccb      	ldrb	r3, [r1, r3]
 800aa20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	40023800 	.word	0x40023800
 800aa2c:	0801051c 	.word	0x0801051c

0800aa30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa34:	f7ff ffdc 	bl	800a9f0 <HAL_RCC_GetHCLKFreq>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	0b5b      	lsrs	r3, r3, #13
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	4903      	ldr	r1, [pc, #12]	; (800aa54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa46:	5ccb      	ldrb	r3, [r1, r3]
 800aa48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	40023800 	.word	0x40023800
 800aa54:	0801051c 	.word	0x0801051c

0800aa58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e03f      	b.n	800aaea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7fd fc4a 	bl	8008318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2224      	movs	r2, #36	; 0x24
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fcbf 	bl	800b420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	691a      	ldr	r2, [r3, #16]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	695a      	ldr	r2, [r3, #20]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2220      	movs	r2, #32
 800aae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b08a      	sub	sp, #40	; 0x28
 800aaf6:	af02      	add	r7, sp, #8
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b20      	cmp	r3, #32
 800ab10:	d17c      	bne.n	800ac0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_UART_Transmit+0x2c>
 800ab18:	88fb      	ldrh	r3, [r7, #6]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e075      	b.n	800ac0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_UART_Transmit+0x3e>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e06e      	b.n	800ac0e <HAL_UART_Transmit+0x11c>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2221      	movs	r2, #33	; 0x21
 800ab42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab46:	f7fd fcf9 	bl	800853c <HAL_GetTick>
 800ab4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	88fa      	ldrh	r2, [r7, #6]
 800ab56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab60:	d108      	bne.n	800ab74 <HAL_UART_Transmit+0x82>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	e003      	b.n	800ab7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ab84:	e02a      	b.n	800abdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2180      	movs	r1, #128	; 0x80
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 fa81 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e036      	b.n	800ac0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	3302      	adds	r3, #2
 800abba:	61bb      	str	r3, [r7, #24]
 800abbc:	e007      	b.n	800abce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	781a      	ldrb	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3301      	adds	r3, #1
 800abcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1cf      	bne.n	800ab86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2140      	movs	r1, #64	; 0x40
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fa51 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e006      	b.n	800ac0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2220      	movs	r2, #32
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	e000      	b.n	800ac0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac0c:	2302      	movs	r3, #2
  }
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	4613      	mov	r3, r2
 800ac22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d130      	bne.n	800ac92 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_UART_Transmit_IT+0x26>
 800ac36:	88fb      	ldrh	r3, [r7, #6]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e029      	b.n	800ac94 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d101      	bne.n	800ac4e <HAL_UART_Transmit_IT+0x38>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e022      	b.n	800ac94 <HAL_UART_Transmit_IT+0x7e>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	88fa      	ldrh	r2, [r7, #6]
 800ac60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	88fa      	ldrh	r2, [r7, #6]
 800ac66:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2221      	movs	r2, #33	; 0x21
 800ac72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e000      	b.n	800ac94 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ac92:	2302      	movs	r3, #2
  }
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d11d      	bne.n	800acf6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_UART_Receive_IT+0x26>
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e016      	b.n	800acf8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_UART_Receive_IT+0x38>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e00f      	b.n	800acf8 <HAL_UART_Receive_IT+0x58>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	461a      	mov	r2, r3
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fa1d 	bl	800b12c <UART_Start_Receive_IT>
 800acf2:	4603      	mov	r3, r0
 800acf4:	e000      	b.n	800acf8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800acf6:	2302      	movs	r3, #2
  }
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	; 0x28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10d      	bne.n	800ad52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d008      	beq.n	800ad52 <HAL_UART_IRQHandler+0x52>
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fad1 	bl	800b2f2 <UART_Receive_IT>
      return;
 800ad50:	e17c      	b.n	800b04c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 80b1 	beq.w	800aebc <HAL_UART_IRQHandler+0x1bc>
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d105      	bne.n	800ad70 <HAL_UART_IRQHandler+0x70>
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80a6 	beq.w	800aebc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <HAL_UART_IRQHandler+0x90>
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d005      	beq.n	800ad90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	f043 0201 	orr.w	r2, r3, #1
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <HAL_UART_IRQHandler+0xb0>
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada8:	f043 0202 	orr.w	r2, r3, #2
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <HAL_UART_IRQHandler+0xd0>
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d005      	beq.n	800add0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	f043 0204 	orr.w	r2, r3, #4
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	f003 0308 	and.w	r3, r3, #8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00f      	beq.n	800adfa <HAL_UART_IRQHandler+0xfa>
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d104      	bne.n	800adee <HAL_UART_IRQHandler+0xee>
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	f043 0208 	orr.w	r2, r3, #8
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 811f 	beq.w	800b042 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <HAL_UART_IRQHandler+0x11e>
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fa6a 	bl	800b2f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b40      	cmp	r3, #64	; 0x40
 800ae2a:	bf0c      	ite	eq
 800ae2c:	2301      	moveq	r3, #1
 800ae2e:	2300      	movne	r3, #0
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <HAL_UART_IRQHandler+0x146>
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d031      	beq.n	800aeaa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f9aa 	bl	800b1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	d123      	bne.n	800aea2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695a      	ldr	r2, [r3, #20]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d013      	beq.n	800ae9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	4a77      	ldr	r2, [pc, #476]	; (800b054 <HAL_UART_IRQHandler+0x354>)
 800ae78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fd fdbc 	bl	80089fc <HAL_DMA_Abort_IT>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d016      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae98:	e00e      	b.n	800aeb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f8e6 	bl	800b06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea0:	e00a      	b.n	800aeb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f8e2 	bl	800b06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea8:	e006      	b.n	800aeb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f8de 	bl	800b06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aeb6:	e0c4      	b.n	800b042 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb8:	bf00      	nop
    return;
 800aeba:	e0c2      	b.n	800b042 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	f040 80a2 	bne.w	800b00a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	f003 0310 	and.w	r3, r3, #16
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 809c 	beq.w	800b00a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 8096 	beq.w	800b00a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d14f      	bne.n	800afa2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800af0c:	8a3b      	ldrh	r3, [r7, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 8099 	beq.w	800b046 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af18:	8a3a      	ldrh	r2, [r7, #16]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	f080 8093 	bcs.w	800b046 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	8a3a      	ldrh	r2, [r7, #16]
 800af24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af30:	d02b      	beq.n	800af8a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af40:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695a      	ldr	r2, [r3, #20]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0201 	bic.w	r2, r2, #1
 800af50:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af60:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0210 	bic.w	r2, r2, #16
 800af7e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af84:	4618      	mov	r0, r3
 800af86:	f7fd fcc9 	bl	800891c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af92:	b29b      	uxth	r3, r3
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	b29b      	uxth	r3, r3
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f870 	bl	800b080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800afa0:	e051      	b.n	800b046 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afaa:	b29b      	uxth	r3, r3
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d047      	beq.n	800b04a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800afba:	8a7b      	ldrh	r3, [r7, #18]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d044      	beq.n	800b04a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800afce:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	695a      	ldr	r2, [r3, #20]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 0201 	bic.w	r2, r2, #1
 800afde:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0210 	bic.w	r2, r2, #16
 800affc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800affe:	8a7b      	ldrh	r3, [r7, #18]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f83c 	bl	800b080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b008:	e01f      	b.n	800b04a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b010:	2b00      	cmp	r3, #0
 800b012:	d008      	beq.n	800b026 <HAL_UART_IRQHandler+0x326>
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f8ff 	bl	800b222 <UART_Transmit_IT>
    return;
 800b024:	e012      	b.n	800b04c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00d      	beq.n	800b04c <HAL_UART_IRQHandler+0x34c>
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b036:	2b00      	cmp	r3, #0
 800b038:	d008      	beq.n	800b04c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f941 	bl	800b2c2 <UART_EndTransmit_IT>
    return;
 800b040:	e004      	b.n	800b04c <HAL_UART_IRQHandler+0x34c>
    return;
 800b042:	bf00      	nop
 800b044:	e002      	b.n	800b04c <HAL_UART_IRQHandler+0x34c>
      return;
 800b046:	bf00      	nop
 800b048:	e000      	b.n	800b04c <HAL_UART_IRQHandler+0x34c>
      return;
 800b04a:	bf00      	nop
  }
}
 800b04c:	3728      	adds	r7, #40	; 0x28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	0800b1fb 	.word	0x0800b1fb

0800b058 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a8:	e02c      	b.n	800b104 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d028      	beq.n	800b104 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0b8:	f7fd fa40 	bl	800853c <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d21d      	bcs.n	800b104 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b0d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695a      	ldr	r2, [r3, #20]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0201 	bic.w	r2, r2, #1
 800b0e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e00f      	b.n	800b124 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4013      	ands	r3, r2
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	429a      	cmp	r2, r3
 800b112:	bf0c      	ite	eq
 800b114:	2301      	moveq	r3, #1
 800b116:	2300      	movne	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d0c3      	beq.n	800b0aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4613      	mov	r3, r2
 800b138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	88fa      	ldrh	r2, [r7, #6]
 800b144:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	88fa      	ldrh	r2, [r7, #6]
 800b14a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2222      	movs	r2, #34	; 0x22
 800b156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b170:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	695a      	ldr	r2, [r3, #20]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68da      	ldr	r2, [r3, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f042 0220 	orr.w	r2, r2, #32
 800b190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	695a      	ldr	r2, [r3, #20]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0201 	bic.w	r2, r2, #1
 800b1c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d107      	bne.n	800b1e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0210 	bic.w	r2, r2, #16
 800b1de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff ff29 	bl	800b06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b222:	b480      	push	{r7}
 800b224:	b085      	sub	sp, #20
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b21      	cmp	r3, #33	; 0x21
 800b234:	d13e      	bne.n	800b2b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b23e:	d114      	bne.n	800b26a <UART_Transmit_IT+0x48>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d110      	bne.n	800b26a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b25c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	1c9a      	adds	r2, r3, #2
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	621a      	str	r2, [r3, #32]
 800b268:	e008      	b.n	800b27c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	1c59      	adds	r1, r3, #1
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	6211      	str	r1, [r2, #32]
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b280:	b29b      	uxth	r3, r3
 800b282:	3b01      	subs	r3, #1
 800b284:	b29b      	uxth	r3, r3
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4619      	mov	r1, r3
 800b28a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10f      	bne.n	800b2b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b29e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e000      	b.n	800b2b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2b4:	2302      	movs	r3, #2
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7ff feb8 	bl	800b058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b22      	cmp	r3, #34	; 0x22
 800b304:	f040 8087 	bne.w	800b416 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b310:	d117      	bne.n	800b342 <UART_Receive_IT+0x50>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d113      	bne.n	800b342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b322:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b330:	b29a      	uxth	r2, r3
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33a:	1c9a      	adds	r2, r3, #2
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	629a      	str	r2, [r3, #40]	; 0x28
 800b340:	e026      	b.n	800b390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b346:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b354:	d007      	beq.n	800b366 <UART_Receive_IT+0x74>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <UART_Receive_IT+0x82>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	e008      	b.n	800b386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b380:	b2da      	uxtb	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	b29b      	uxth	r3, r3
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	4619      	mov	r1, r3
 800b39e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d136      	bne.n	800b412 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68da      	ldr	r2, [r3, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0220 	bic.w	r2, r2, #32
 800b3b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	695a      	ldr	r2, [r3, #20]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f022 0201 	bic.w	r2, r2, #1
 800b3d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d10e      	bne.n	800b402 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0210 	bic.w	r2, r2, #16
 800b3f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fe40 	bl	800b080 <HAL_UARTEx_RxEventCallback>
 800b400:	e002      	b.n	800b408 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7fb fc06 	bl	8006c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e002      	b.n	800b418 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	e000      	b.n	800b418 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b416:	2302      	movs	r3, #2
  }
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b09f      	sub	sp, #124	; 0x7c
 800b426:	af00      	add	r7, sp, #0
 800b428:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b436:	68d9      	ldr	r1, [r3, #12]
 800b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	ea40 0301 	orr.w	r3, r0, r1
 800b440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b444:	689a      	ldr	r2, [r3, #8]
 800b446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	431a      	orrs	r2, r3
 800b452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	4313      	orrs	r3, r2
 800b458:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b464:	f021 010c 	bic.w	r1, r1, #12
 800b468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b46e:	430b      	orrs	r3, r1
 800b470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b47e:	6999      	ldr	r1, [r3, #24]
 800b480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	ea40 0301 	orr.w	r3, r0, r1
 800b488:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	4bc5      	ldr	r3, [pc, #788]	; (800b7a4 <UART_SetConfig+0x384>)
 800b490:	429a      	cmp	r2, r3
 800b492:	d004      	beq.n	800b49e <UART_SetConfig+0x7e>
 800b494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	4bc3      	ldr	r3, [pc, #780]	; (800b7a8 <UART_SetConfig+0x388>)
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d103      	bne.n	800b4a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b49e:	f7ff fac7 	bl	800aa30 <HAL_RCC_GetPCLK2Freq>
 800b4a2:	6778      	str	r0, [r7, #116]	; 0x74
 800b4a4:	e002      	b.n	800b4ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4a6:	f7ff faaf 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 800b4aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4b4:	f040 80b6 	bne.w	800b624 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4ba:	461c      	mov	r4, r3
 800b4bc:	f04f 0500 	mov.w	r5, #0
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	1891      	adds	r1, r2, r2
 800b4c6:	6439      	str	r1, [r7, #64]	; 0x40
 800b4c8:	415b      	adcs	r3, r3
 800b4ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b4cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4d0:	1912      	adds	r2, r2, r4
 800b4d2:	eb45 0303 	adc.w	r3, r5, r3
 800b4d6:	f04f 0000 	mov.w	r0, #0
 800b4da:	f04f 0100 	mov.w	r1, #0
 800b4de:	00d9      	lsls	r1, r3, #3
 800b4e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4e4:	00d0      	lsls	r0, r2, #3
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	1911      	adds	r1, r2, r4
 800b4ec:	6639      	str	r1, [r7, #96]	; 0x60
 800b4ee:	416b      	adcs	r3, r5
 800b4f0:	667b      	str	r3, [r7, #100]	; 0x64
 800b4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f04f 0300 	mov.w	r3, #0
 800b4fc:	1891      	adds	r1, r2, r2
 800b4fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800b500:	415b      	adcs	r3, r3
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b508:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b50c:	f7f5 fb6c 	bl	8000be8 <__aeabi_uldivmod>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4ba5      	ldr	r3, [pc, #660]	; (800b7ac <UART_SetConfig+0x38c>)
 800b516:	fba3 2302 	umull	r2, r3, r3, r2
 800b51a:	095b      	lsrs	r3, r3, #5
 800b51c:	011e      	lsls	r6, r3, #4
 800b51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b520:	461c      	mov	r4, r3
 800b522:	f04f 0500 	mov.w	r5, #0
 800b526:	4622      	mov	r2, r4
 800b528:	462b      	mov	r3, r5
 800b52a:	1891      	adds	r1, r2, r2
 800b52c:	6339      	str	r1, [r7, #48]	; 0x30
 800b52e:	415b      	adcs	r3, r3
 800b530:	637b      	str	r3, [r7, #52]	; 0x34
 800b532:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b536:	1912      	adds	r2, r2, r4
 800b538:	eb45 0303 	adc.w	r3, r5, r3
 800b53c:	f04f 0000 	mov.w	r0, #0
 800b540:	f04f 0100 	mov.w	r1, #0
 800b544:	00d9      	lsls	r1, r3, #3
 800b546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b54a:	00d0      	lsls	r0, r2, #3
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	1911      	adds	r1, r2, r4
 800b552:	65b9      	str	r1, [r7, #88]	; 0x58
 800b554:	416b      	adcs	r3, r5
 800b556:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	461a      	mov	r2, r3
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	1891      	adds	r1, r2, r2
 800b564:	62b9      	str	r1, [r7, #40]	; 0x28
 800b566:	415b      	adcs	r3, r3
 800b568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b56a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b56e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b572:	f7f5 fb39 	bl	8000be8 <__aeabi_uldivmod>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4b8c      	ldr	r3, [pc, #560]	; (800b7ac <UART_SetConfig+0x38c>)
 800b57c:	fba3 1302 	umull	r1, r3, r3, r2
 800b580:	095b      	lsrs	r3, r3, #5
 800b582:	2164      	movs	r1, #100	; 0x64
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	3332      	adds	r3, #50	; 0x32
 800b58e:	4a87      	ldr	r2, [pc, #540]	; (800b7ac <UART_SetConfig+0x38c>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b59c:	441e      	add	r6, r3
 800b59e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f04f 0100 	mov.w	r1, #0
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	1894      	adds	r4, r2, r2
 800b5ac:	623c      	str	r4, [r7, #32]
 800b5ae:	415b      	adcs	r3, r3
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5b6:	1812      	adds	r2, r2, r0
 800b5b8:	eb41 0303 	adc.w	r3, r1, r3
 800b5bc:	f04f 0400 	mov.w	r4, #0
 800b5c0:	f04f 0500 	mov.w	r5, #0
 800b5c4:	00dd      	lsls	r5, r3, #3
 800b5c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b5ca:	00d4      	lsls	r4, r2, #3
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	1814      	adds	r4, r2, r0
 800b5d2:	653c      	str	r4, [r7, #80]	; 0x50
 800b5d4:	414b      	adcs	r3, r1
 800b5d6:	657b      	str	r3, [r7, #84]	; 0x54
 800b5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f04f 0300 	mov.w	r3, #0
 800b5e2:	1891      	adds	r1, r2, r2
 800b5e4:	61b9      	str	r1, [r7, #24]
 800b5e6:	415b      	adcs	r3, r3
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b5f2:	f7f5 faf9 	bl	8000be8 <__aeabi_uldivmod>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4b6c      	ldr	r3, [pc, #432]	; (800b7ac <UART_SetConfig+0x38c>)
 800b5fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b600:	095b      	lsrs	r3, r3, #5
 800b602:	2164      	movs	r1, #100	; 0x64
 800b604:	fb01 f303 	mul.w	r3, r1, r3
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	3332      	adds	r3, #50	; 0x32
 800b60e:	4a67      	ldr	r2, [pc, #412]	; (800b7ac <UART_SetConfig+0x38c>)
 800b610:	fba2 2303 	umull	r2, r3, r2, r3
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	f003 0207 	and.w	r2, r3, #7
 800b61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4432      	add	r2, r6
 800b620:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b622:	e0b9      	b.n	800b798 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b626:	461c      	mov	r4, r3
 800b628:	f04f 0500 	mov.w	r5, #0
 800b62c:	4622      	mov	r2, r4
 800b62e:	462b      	mov	r3, r5
 800b630:	1891      	adds	r1, r2, r2
 800b632:	6139      	str	r1, [r7, #16]
 800b634:	415b      	adcs	r3, r3
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b63c:	1912      	adds	r2, r2, r4
 800b63e:	eb45 0303 	adc.w	r3, r5, r3
 800b642:	f04f 0000 	mov.w	r0, #0
 800b646:	f04f 0100 	mov.w	r1, #0
 800b64a:	00d9      	lsls	r1, r3, #3
 800b64c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b650:	00d0      	lsls	r0, r2, #3
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	eb12 0804 	adds.w	r8, r2, r4
 800b65a:	eb43 0905 	adc.w	r9, r3, r5
 800b65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f04f 0100 	mov.w	r1, #0
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	008b      	lsls	r3, r1, #2
 800b672:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b676:	0082      	lsls	r2, r0, #2
 800b678:	4640      	mov	r0, r8
 800b67a:	4649      	mov	r1, r9
 800b67c:	f7f5 fab4 	bl	8000be8 <__aeabi_uldivmod>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4b49      	ldr	r3, [pc, #292]	; (800b7ac <UART_SetConfig+0x38c>)
 800b686:	fba3 2302 	umull	r2, r3, r3, r2
 800b68a:	095b      	lsrs	r3, r3, #5
 800b68c:	011e      	lsls	r6, r3, #4
 800b68e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b690:	4618      	mov	r0, r3
 800b692:	f04f 0100 	mov.w	r1, #0
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	1894      	adds	r4, r2, r2
 800b69c:	60bc      	str	r4, [r7, #8]
 800b69e:	415b      	adcs	r3, r3
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6a6:	1812      	adds	r2, r2, r0
 800b6a8:	eb41 0303 	adc.w	r3, r1, r3
 800b6ac:	f04f 0400 	mov.w	r4, #0
 800b6b0:	f04f 0500 	mov.w	r5, #0
 800b6b4:	00dd      	lsls	r5, r3, #3
 800b6b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b6ba:	00d4      	lsls	r4, r2, #3
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	1814      	adds	r4, r2, r0
 800b6c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800b6c4:	414b      	adcs	r3, r1
 800b6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f04f 0100 	mov.w	r1, #0
 800b6d2:	f04f 0200 	mov.w	r2, #0
 800b6d6:	f04f 0300 	mov.w	r3, #0
 800b6da:	008b      	lsls	r3, r1, #2
 800b6dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b6e0:	0082      	lsls	r2, r0, #2
 800b6e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b6e6:	f7f5 fa7f 	bl	8000be8 <__aeabi_uldivmod>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4b2f      	ldr	r3, [pc, #188]	; (800b7ac <UART_SetConfig+0x38c>)
 800b6f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b6f4:	095b      	lsrs	r3, r3, #5
 800b6f6:	2164      	movs	r1, #100	; 0x64
 800b6f8:	fb01 f303 	mul.w	r3, r1, r3
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	3332      	adds	r3, #50	; 0x32
 800b702:	4a2a      	ldr	r2, [pc, #168]	; (800b7ac <UART_SetConfig+0x38c>)
 800b704:	fba2 2303 	umull	r2, r3, r2, r3
 800b708:	095b      	lsrs	r3, r3, #5
 800b70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b70e:	441e      	add	r6, r3
 800b710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b712:	4618      	mov	r0, r3
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	1894      	adds	r4, r2, r2
 800b71e:	603c      	str	r4, [r7, #0]
 800b720:	415b      	adcs	r3, r3
 800b722:	607b      	str	r3, [r7, #4]
 800b724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b728:	1812      	adds	r2, r2, r0
 800b72a:	eb41 0303 	adc.w	r3, r1, r3
 800b72e:	f04f 0400 	mov.w	r4, #0
 800b732:	f04f 0500 	mov.w	r5, #0
 800b736:	00dd      	lsls	r5, r3, #3
 800b738:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b73c:	00d4      	lsls	r4, r2, #3
 800b73e:	4622      	mov	r2, r4
 800b740:	462b      	mov	r3, r5
 800b742:	eb12 0a00 	adds.w	sl, r2, r0
 800b746:	eb43 0b01 	adc.w	fp, r3, r1
 800b74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4618      	mov	r0, r3
 800b750:	f04f 0100 	mov.w	r1, #0
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	008b      	lsls	r3, r1, #2
 800b75e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b762:	0082      	lsls	r2, r0, #2
 800b764:	4650      	mov	r0, sl
 800b766:	4659      	mov	r1, fp
 800b768:	f7f5 fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <UART_SetConfig+0x38c>)
 800b772:	fba3 1302 	umull	r1, r3, r3, r2
 800b776:	095b      	lsrs	r3, r3, #5
 800b778:	2164      	movs	r1, #100	; 0x64
 800b77a:	fb01 f303 	mul.w	r3, r1, r3
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	011b      	lsls	r3, r3, #4
 800b782:	3332      	adds	r3, #50	; 0x32
 800b784:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <UART_SetConfig+0x38c>)
 800b786:	fba2 2303 	umull	r2, r3, r2, r3
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	f003 020f 	and.w	r2, r3, #15
 800b790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4432      	add	r2, r6
 800b796:	609a      	str	r2, [r3, #8]
}
 800b798:	bf00      	nop
 800b79a:	377c      	adds	r7, #124	; 0x7c
 800b79c:	46bd      	mov	sp, r7
 800b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a2:	bf00      	nop
 800b7a4:	40011000 	.word	0x40011000
 800b7a8:	40011400 	.word	0x40011400
 800b7ac:	51eb851f 	.word	0x51eb851f

0800b7b0 <LL_GPIO_SetPinMode>:
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b089      	sub	sp, #36	; 0x24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	fa93 f3a3 	rbit	r3, r3
 800b7ca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	fab3 f383 	clz	r3, r3
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	2103      	movs	r1, #3
 800b7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7dc:	43db      	mvns	r3, r3
 800b7de:	401a      	ands	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	fa93 f3a3 	rbit	r3, r3
 800b7ea:	61bb      	str	r3, [r7, #24]
  return result;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	fab3 f383 	clz	r3, r3
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]
}
 800b802:	bf00      	nop
 800b804:	3724      	adds	r7, #36	; 0x24
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <LL_GPIO_SetPinOutputType>:
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	43db      	mvns	r3, r3
 800b822:	401a      	ands	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	fb01 f303 	mul.w	r3, r1, r3
 800b82c:	431a      	orrs	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	605a      	str	r2, [r3, #4]
}
 800b832:	bf00      	nop
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <LL_GPIO_SetPinSpeed>:
{
 800b83e:	b480      	push	{r7}
 800b840:	b089      	sub	sp, #36	; 0x24
 800b842:	af00      	add	r7, sp, #0
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	fa93 f3a3 	rbit	r3, r3
 800b858:	613b      	str	r3, [r7, #16]
  return result;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	fab3 f383 	clz	r3, r3
 800b860:	b2db      	uxtb	r3, r3
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	2103      	movs	r1, #3
 800b866:	fa01 f303 	lsl.w	r3, r1, r3
 800b86a:	43db      	mvns	r3, r3
 800b86c:	401a      	ands	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	fa93 f3a3 	rbit	r3, r3
 800b878:	61bb      	str	r3, [r7, #24]
  return result;
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	fab3 f383 	clz	r3, r3
 800b880:	b2db      	uxtb	r3, r3
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	fa01 f303 	lsl.w	r3, r1, r3
 800b88a:	431a      	orrs	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	609a      	str	r2, [r3, #8]
}
 800b890:	bf00      	nop
 800b892:	3724      	adds	r7, #36	; 0x24
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <LL_GPIO_SetPinPull>:
{
 800b89c:	b480      	push	{r7}
 800b89e:	b089      	sub	sp, #36	; 0x24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	fa93 f3a3 	rbit	r3, r3
 800b8b6:	613b      	str	r3, [r7, #16]
  return result;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	fab3 f383 	clz	r3, r3
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	2103      	movs	r1, #3
 800b8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c8:	43db      	mvns	r3, r3
 800b8ca:	401a      	ands	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	fa93 f3a3 	rbit	r3, r3
 800b8d6:	61bb      	str	r3, [r7, #24]
  return result;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	fab3 f383 	clz	r3, r3
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	60da      	str	r2, [r3, #12]
}
 800b8ee:	bf00      	nop
 800b8f0:	3724      	adds	r7, #36	; 0x24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <LL_GPIO_SetAFPin_0_7>:
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b089      	sub	sp, #36	; 0x24
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	60b9      	str	r1, [r7, #8]
 800b904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6a1a      	ldr	r2, [r3, #32]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	fa93 f3a3 	rbit	r3, r3
 800b914:	613b      	str	r3, [r7, #16]
  return result;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	fab3 f383 	clz	r3, r3
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	210f      	movs	r1, #15
 800b922:	fa01 f303 	lsl.w	r3, r1, r3
 800b926:	43db      	mvns	r3, r3
 800b928:	401a      	ands	r2, r3
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	fa93 f3a3 	rbit	r3, r3
 800b934:	61bb      	str	r3, [r7, #24]
  return result;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	fab3 f383 	clz	r3, r3
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	6879      	ldr	r1, [r7, #4]
 800b942:	fa01 f303 	lsl.w	r3, r1, r3
 800b946:	431a      	orrs	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	621a      	str	r2, [r3, #32]
}
 800b94c:	bf00      	nop
 800b94e:	3724      	adds	r7, #36	; 0x24
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <LL_GPIO_SetAFPin_8_15>:
{
 800b958:	b480      	push	{r7}
 800b95a:	b089      	sub	sp, #36	; 0x24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	fa93 f3a3 	rbit	r3, r3
 800b974:	613b      	str	r3, [r7, #16]
  return result;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	fab3 f383 	clz	r3, r3
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	210f      	movs	r1, #15
 800b982:	fa01 f303 	lsl.w	r3, r1, r3
 800b986:	43db      	mvns	r3, r3
 800b988:	401a      	ands	r2, r3
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	fa93 f3a3 	rbit	r3, r3
 800b996:	61bb      	str	r3, [r7, #24]
  return result;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	fab3 f383 	clz	r3, r3
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b9ae:	bf00      	nop
 800b9b0:	3724      	adds	r7, #36	; 0x24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b088      	sub	sp, #32
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	fa93 f3a3 	rbit	r3, r3
 800b9d8:	613b      	str	r3, [r7, #16]
  return result;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	fab3 f383 	clz	r3, r3
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b9e4:	e050      	b.n	800ba88 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d042      	beq.n	800ba82 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d003      	beq.n	800ba0c <LL_GPIO_Init+0x52>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d10d      	bne.n	800ba28 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	461a      	mov	r2, r3
 800ba12:	69b9      	ldr	r1, [r7, #24]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff ff12 	bl	800b83e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	69b9      	ldr	r1, [r7, #24]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff fef3 	bl	800b80e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	69b9      	ldr	r1, [r7, #24]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff ff33 	bl	800b89c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d11a      	bne.n	800ba74 <LL_GPIO_Init+0xba>
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	fa93 f3a3 	rbit	r3, r3
 800ba48:	60bb      	str	r3, [r7, #8]
  return result;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ba4c:	fab3 f383 	clz	r3, r3
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b07      	cmp	r3, #7
 800ba54:	d807      	bhi.n	800ba66 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	69b9      	ldr	r1, [r7, #24]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff ff4b 	bl	800b8fa <LL_GPIO_SetAFPin_0_7>
 800ba64:	e006      	b.n	800ba74 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	69b9      	ldr	r1, [r7, #24]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff ff72 	bl	800b958 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	69b9      	ldr	r1, [r7, #24]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff fe97 	bl	800b7b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	3301      	adds	r3, #1
 800ba86:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1a7      	bne.n	800b9e6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800baa4:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <LL_RCC_GetSysClkSource+0x18>)
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f003 030c 	and.w	r3, r3, #12
}
 800baac:	4618      	mov	r0, r3
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	40023800 	.word	0x40023800

0800babc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bac0:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <LL_RCC_GetAHBPrescaler+0x18>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40023800 	.word	0x40023800

0800bad8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800bad8:	b480      	push	{r7}
 800bada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800badc:	4b04      	ldr	r3, [pc, #16]	; (800baf0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	40023800 	.word	0x40023800

0800baf4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <LL_RCC_GetAPB2Prescaler+0x18>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40023800 	.word	0x40023800

0800bb10 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bb14:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <LL_RCC_PLL_GetMainSource+0x18>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	40023800 	.word	0x40023800

0800bb2c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bb30:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <LL_RCC_PLL_GetN+0x18>)
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	099b      	lsrs	r3, r3, #6
 800bb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	40023800 	.word	0x40023800

0800bb48 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <LL_RCC_PLL_GetP+0x18>)
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	40023800 	.word	0x40023800

0800bb64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bb68:	4b04      	ldr	r3, [pc, #16]	; (800bb7c <LL_RCC_PLL_GetDivider+0x18>)
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40023800 	.word	0x40023800

0800bb80 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800bb88:	f000 f820 	bl	800bbcc <RCC_GetSystemClockFreq>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f840 	bl	800bc1c <RCC_GetHCLKClockFreq>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f84e 	bl	800bc48 <RCC_GetPCLK1ClockFreq>
 800bbac:	4602      	mov	r2, r0
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f85a 	bl	800bc70 <RCC_GetPCLK2ClockFreq>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	60da      	str	r2, [r3, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800bbd6:	f7ff ff63 	bl	800baa0 <LL_RCC_GetSysClkSource>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d00c      	beq.n	800bbfa <RCC_GetSystemClockFreq+0x2e>
 800bbe0:	2b08      	cmp	r3, #8
 800bbe2:	d80f      	bhi.n	800bc04 <RCC_GetSystemClockFreq+0x38>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <RCC_GetSystemClockFreq+0x22>
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	d003      	beq.n	800bbf4 <RCC_GetSystemClockFreq+0x28>
 800bbec:	e00a      	b.n	800bc04 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800bbee:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <RCC_GetSystemClockFreq+0x48>)
 800bbf0:	607b      	str	r3, [r7, #4]
      break;
 800bbf2:	e00a      	b.n	800bc0a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800bbf4:	4b08      	ldr	r3, [pc, #32]	; (800bc18 <RCC_GetSystemClockFreq+0x4c>)
 800bbf6:	607b      	str	r3, [r7, #4]
      break;
 800bbf8:	e007      	b.n	800bc0a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800bbfa:	2008      	movs	r0, #8
 800bbfc:	f000 f84c 	bl	800bc98 <RCC_PLL_GetFreqDomain_SYS>
 800bc00:	6078      	str	r0, [r7, #4]
      break;
 800bc02:	e002      	b.n	800bc0a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800bc04:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <RCC_GetSystemClockFreq+0x48>)
 800bc06:	607b      	str	r3, [r7, #4]
      break;
 800bc08:	bf00      	nop
  }

  return frequency;
 800bc0a:	687b      	ldr	r3, [r7, #4]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	00f42400 	.word	0x00f42400
 800bc18:	007a1200 	.word	0x007a1200

0800bc1c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800bc24:	f7ff ff4a 	bl	800babc <LL_RCC_GetAHBPrescaler>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	091b      	lsrs	r3, r3, #4
 800bc2c:	f003 030f 	and.w	r3, r3, #15
 800bc30:	4a04      	ldr	r2, [pc, #16]	; (800bc44 <RCC_GetHCLKClockFreq+0x28>)
 800bc32:	5cd3      	ldrb	r3, [r2, r3]
 800bc34:	461a      	mov	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	40d3      	lsrs	r3, r2
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	0801050c 	.word	0x0801050c

0800bc48 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800bc50:	f7ff ff42 	bl	800bad8 <LL_RCC_GetAPB1Prescaler>
 800bc54:	4603      	mov	r3, r0
 800bc56:	0a9b      	lsrs	r3, r3, #10
 800bc58:	4a04      	ldr	r2, [pc, #16]	; (800bc6c <RCC_GetPCLK1ClockFreq+0x24>)
 800bc5a:	5cd3      	ldrb	r3, [r2, r3]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	40d3      	lsrs	r3, r2
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	0801051c 	.word	0x0801051c

0800bc70 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800bc78:	f7ff ff3c 	bl	800baf4 <LL_RCC_GetAPB2Prescaler>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	0b5b      	lsrs	r3, r3, #13
 800bc80:	4a04      	ldr	r2, [pc, #16]	; (800bc94 <RCC_GetPCLK2ClockFreq+0x24>)
 800bc82:	5cd3      	ldrb	r3, [r2, r3]
 800bc84:	461a      	mov	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	40d3      	lsrs	r3, r2
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	0801051c 	.word	0x0801051c

0800bc98 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800bc98:	b590      	push	{r4, r7, lr}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800bcac:	f7ff ff30 	bl	800bb10 <LL_RCC_PLL_GetMainSource>
 800bcb0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcbe:	d003      	beq.n	800bcc8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800bcc0:	e005      	b.n	800bcce <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800bcc2:	4b12      	ldr	r3, [pc, #72]	; (800bd0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800bcc4:	617b      	str	r3, [r7, #20]
      break;
 800bcc6:	e005      	b.n	800bcd4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800bcc8:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800bcca:	617b      	str	r3, [r7, #20]
      break;
 800bccc:	e002      	b.n	800bcd4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800bcd0:	617b      	str	r3, [r7, #20]
      break;
 800bcd2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d113      	bne.n	800bd02 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800bcda:	f7ff ff43 	bl	800bb64 <LL_RCC_PLL_GetDivider>
 800bcde:	4602      	mov	r2, r0
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	fbb3 f4f2 	udiv	r4, r3, r2
 800bce6:	f7ff ff21 	bl	800bb2c <LL_RCC_PLL_GetN>
 800bcea:	4603      	mov	r3, r0
 800bcec:	fb03 f404 	mul.w	r4, r3, r4
 800bcf0:	f7ff ff2a 	bl	800bb48 <LL_RCC_PLL_GetP>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	0c1b      	lsrs	r3, r3, #16
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	fbb4 f3f3 	udiv	r3, r4, r3
 800bd00:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800bd02:	693b      	ldr	r3, [r7, #16]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd90      	pop	{r4, r7, pc}
 800bd0c:	00f42400 	.word	0x00f42400
 800bd10:	007a1200 	.word	0x007a1200

0800bd14 <LL_SPI_IsEnabled>:
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd24:	2b40      	cmp	r3, #64	; 0x40
 800bd26:	d101      	bne.n	800bd2c <LL_SPI_IsEnabled+0x18>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <LL_SPI_IsEnabled+0x1a>
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <LL_SPI_SetCRCPolynomial>:
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	461a      	mov	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	611a      	str	r2, [r3, #16]
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff ffd3 	bl	800bd14 <LL_SPI_IsEnabled>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d139      	bne.n	800bde8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd7c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	6811      	ldr	r1, [r2, #0]
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	6852      	ldr	r2, [r2, #4]
 800bd88:	4311      	orrs	r1, r2
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	6892      	ldr	r2, [r2, #8]
 800bd8e:	4311      	orrs	r1, r2
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	68d2      	ldr	r2, [r2, #12]
 800bd94:	4311      	orrs	r1, r2
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	6912      	ldr	r2, [r2, #16]
 800bd9a:	4311      	orrs	r1, r2
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	6952      	ldr	r2, [r2, #20]
 800bda0:	4311      	orrs	r1, r2
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	6992      	ldr	r2, [r2, #24]
 800bda6:	4311      	orrs	r1, r2
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	69d2      	ldr	r2, [r2, #28]
 800bdac:	4311      	orrs	r1, r2
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	6a12      	ldr	r2, [r2, #32]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f023 0204 	bic.w	r2, r3, #4
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	0c1b      	lsrs	r3, r3, #16
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdd6:	d105      	bne.n	800bde4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff ffab 	bl	800bd3a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	61da      	str	r2, [r3, #28]
  return status;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <LL_TIM_SetPrescaler>:
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <LL_TIM_SetAutoReload>:
{
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <LL_TIM_SetRepetitionCounter>:
{
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <LL_TIM_OC_SetCompareCH1>:
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	635a      	str	r2, [r3, #52]	; 0x34
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <LL_TIM_OC_SetCompareCH2>:
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800be7e:	bf00      	nop
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <LL_TIM_OC_SetCompareCH3>:
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_TIM_OC_SetCompareCH4>:
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b083      	sub	sp, #12
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f043 0201 	orr.w	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	615a      	str	r2, [r3, #20]
}
 800bed6:	bf00      	nop
 800bed8:	370c      	adds	r7, #12
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
	...

0800bee4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a3d      	ldr	r2, [pc, #244]	; (800bfec <LL_TIM_Init+0x108>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d013      	beq.n	800bf24 <LL_TIM_Init+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf02:	d00f      	beq.n	800bf24 <LL_TIM_Init+0x40>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a3a      	ldr	r2, [pc, #232]	; (800bff0 <LL_TIM_Init+0x10c>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d00b      	beq.n	800bf24 <LL_TIM_Init+0x40>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a39      	ldr	r2, [pc, #228]	; (800bff4 <LL_TIM_Init+0x110>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d007      	beq.n	800bf24 <LL_TIM_Init+0x40>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a38      	ldr	r2, [pc, #224]	; (800bff8 <LL_TIM_Init+0x114>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d003      	beq.n	800bf24 <LL_TIM_Init+0x40>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a37      	ldr	r2, [pc, #220]	; (800bffc <LL_TIM_Init+0x118>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d106      	bne.n	800bf32 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a2d      	ldr	r2, [pc, #180]	; (800bfec <LL_TIM_Init+0x108>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d02b      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf40:	d027      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4a2a      	ldr	r2, [pc, #168]	; (800bff0 <LL_TIM_Init+0x10c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d023      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a29      	ldr	r2, [pc, #164]	; (800bff4 <LL_TIM_Init+0x110>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d01f      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a28      	ldr	r2, [pc, #160]	; (800bff8 <LL_TIM_Init+0x114>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d01b      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a27      	ldr	r2, [pc, #156]	; (800bffc <LL_TIM_Init+0x118>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d017      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a26      	ldr	r2, [pc, #152]	; (800c000 <LL_TIM_Init+0x11c>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d013      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a25      	ldr	r2, [pc, #148]	; (800c004 <LL_TIM_Init+0x120>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d00f      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a24      	ldr	r2, [pc, #144]	; (800c008 <LL_TIM_Init+0x124>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d00b      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a23      	ldr	r2, [pc, #140]	; (800c00c <LL_TIM_Init+0x128>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d007      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a22      	ldr	r2, [pc, #136]	; (800c010 <LL_TIM_Init+0x12c>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d003      	beq.n	800bf92 <LL_TIM_Init+0xae>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a21      	ldr	r2, [pc, #132]	; (800c014 <LL_TIM_Init+0x130>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d106      	bne.n	800bfa0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff ff34 	bl	800be1a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ff20 	bl	800bdfe <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <LL_TIM_Init+0x108>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d003      	beq.n	800bfce <LL_TIM_Init+0xea>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a0c      	ldr	r2, [pc, #48]	; (800bffc <LL_TIM_Init+0x118>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d105      	bne.n	800bfda <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff2e 	bl	800be36 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff ff71 	bl	800bec2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40000400 	.word	0x40000400
 800bff4:	40000800 	.word	0x40000800
 800bff8:	40000c00 	.word	0x40000c00
 800bffc:	40010400 	.word	0x40010400
 800c000:	40014000 	.word	0x40014000
 800c004:	40014400 	.word	0x40014400
 800c008:	40014800 	.word	0x40014800
 800c00c:	40001800 	.word	0x40001800
 800c010:	40001c00 	.word	0x40001c00
 800c014:	40002000 	.word	0x40002000

0800c018 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02e:	d027      	beq.n	800c080 <LL_TIM_OC_Init+0x68>
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c036:	d82a      	bhi.n	800c08e <LL_TIM_OC_Init+0x76>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c03e:	d018      	beq.n	800c072 <LL_TIM_OC_Init+0x5a>
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c046:	d822      	bhi.n	800c08e <LL_TIM_OC_Init+0x76>
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d003      	beq.n	800c056 <LL_TIM_OC_Init+0x3e>
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b10      	cmp	r3, #16
 800c052:	d007      	beq.n	800c064 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800c054:	e01b      	b.n	800c08e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 f81f 	bl	800c09c <OC1Config>
 800c05e:	4603      	mov	r3, r0
 800c060:	75fb      	strb	r3, [r7, #23]
      break;
 800c062:	e015      	b.n	800c090 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 f884 	bl	800c174 <OC2Config>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]
      break;
 800c070:	e00e      	b.n	800c090 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f8ed 	bl	800c254 <OC3Config>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]
      break;
 800c07e:	e007      	b.n	800c090 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 f956 	bl	800c334 <OC4Config>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
      break;
 800c08c:	e000      	b.n	800c090 <LL_TIM_OC_Init+0x78>
      break;
 800c08e:	bf00      	nop
  }

  return result;
 800c090:	7dfb      	ldrb	r3, [r7, #23]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	f023 0201 	bic.w	r2, r3, #1
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 0303 	bic.w	r3, r3, #3
 800c0ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f023 0202 	bic.w	r2, r3, #2
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f023 0201 	bic.w	r2, r3, #1
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a1c      	ldr	r2, [pc, #112]	; (800c16c <OC1Config+0xd0>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d003      	beq.n	800c106 <OC1Config+0x6a>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a1b      	ldr	r2, [pc, #108]	; (800c170 <OC1Config+0xd4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d11e      	bne.n	800c144 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f023 0208 	bic.w	r2, r3, #8
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f023 0204 	bic.w	r2, r3, #4
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4313      	orrs	r3, r2
 800c124:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	4313      	orrs	r3, r2
 800c132:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	4313      	orrs	r3, r2
 800c142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7ff fe7b 	bl	800be52 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	40010000 	.word	0x40010000
 800c170:	40010400 	.word	0x40010400

0800c174 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	f023 0210 	bic.w	r2, r3, #16
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	021b      	lsls	r3, r3, #8
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f023 0220 	bic.w	r2, r3, #32
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f023 0210 	bic.w	r2, r3, #16
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a1d      	ldr	r2, [pc, #116]	; (800c24c <OC2Config+0xd8>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <OC2Config+0x70>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a1c      	ldr	r2, [pc, #112]	; (800c250 <OC2Config+0xdc>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d11f      	bne.n	800c224 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	019b      	lsls	r3, r3, #6
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	019b      	lsls	r3, r3, #6
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4313      	orrs	r3, r2
 800c212:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	4313      	orrs	r3, r2
 800c222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff fe19 	bl	800be6e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	40010000 	.word	0x40010000
 800c250:	40010400 	.word	0x40010400

0800c254 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a1d      	ldr	r2, [pc, #116]	; (800c32c <OC3Config+0xd8>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d003      	beq.n	800c2c2 <OC3Config+0x6e>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1c      	ldr	r2, [pc, #112]	; (800c330 <OC3Config+0xdc>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d11f      	bne.n	800c302 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	029b      	lsls	r3, r3, #10
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	029b      	lsls	r3, r3, #10
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	015b      	lsls	r3, r3, #5
 800c2fe:	4313      	orrs	r3, r2
 800c300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff fdb8 	bl	800be8a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	40010000 	.word	0x40010000
 800c330:	40010400 	.word	0x40010400

0800c334 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	021b      	lsls	r3, r3, #8
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	031b      	lsls	r3, r3, #12
 800c380:	4313      	orrs	r3, r2
 800c382:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	031b      	lsls	r3, r3, #12
 800c390:	4313      	orrs	r3, r2
 800c392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a11      	ldr	r2, [pc, #68]	; (800c3dc <OC4Config+0xa8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d003      	beq.n	800c3a4 <OC4Config+0x70>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a10      	ldr	r2, [pc, #64]	; (800c3e0 <OC4Config+0xac>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d107      	bne.n	800c3b4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	019b      	lsls	r3, r3, #6
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff fd6d 	bl	800bea6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400

0800c3e4 <LL_USART_IsEnabled>:
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3f8:	bf0c      	ite	eq
 800c3fa:	2301      	moveq	r3, #1
 800c3fc:	2300      	movne	r3, #0
 800c3fe:	b2db      	uxtb	r3, r3
}
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <LL_USART_SetStopBitsLength>:
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	431a      	orrs	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	611a      	str	r2, [r3, #16]
}
 800c426:	bf00      	nop
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <LL_USART_SetHWFlowCtrl>:
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	431a      	orrs	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	615a      	str	r2, [r3, #20]
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <LL_USART_SetBaudRate>:
{
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	b09f      	sub	sp, #124	; 0x7c
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6778      	str	r0, [r7, #116]	; 0x74
 800c462:	6739      	str	r1, [r7, #112]	; 0x70
 800c464:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c466:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c46e:	f040 80bc 	bne.w	800c5ea <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c474:	461c      	mov	r4, r3
 800c476:	f04f 0500 	mov.w	r5, #0
 800c47a:	4622      	mov	r2, r4
 800c47c:	462b      	mov	r3, r5
 800c47e:	eb12 0a02 	adds.w	sl, r2, r2
 800c482:	eb43 0b03 	adc.w	fp, r3, r3
 800c486:	4652      	mov	r2, sl
 800c488:	465b      	mov	r3, fp
 800c48a:	1912      	adds	r2, r2, r4
 800c48c:	eb45 0303 	adc.w	r3, r5, r3
 800c490:	f04f 0000 	mov.w	r0, #0
 800c494:	f04f 0100 	mov.w	r1, #0
 800c498:	00d9      	lsls	r1, r3, #3
 800c49a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c49e:	00d0      	lsls	r0, r2, #3
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	1911      	adds	r1, r2, r4
 800c4a6:	6639      	str	r1, [r7, #96]	; 0x60
 800c4a8:	416b      	adcs	r3, r5
 800c4aa:	667b      	str	r3, [r7, #100]	; 0x64
 800c4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f04f 0300 	mov.w	r3, #0
 800c4b4:	1891      	adds	r1, r2, r2
 800c4b6:	6339      	str	r1, [r7, #48]	; 0x30
 800c4b8:	415b      	adcs	r3, r3
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c4bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c4c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c4c4:	f7f4 fb90 	bl	8000be8 <__aeabi_uldivmod>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4ba9      	ldr	r3, [pc, #676]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c4ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c4d2:	095b      	lsrs	r3, r3, #5
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	b29e      	uxth	r6, r3
 800c4da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4dc:	461c      	mov	r4, r3
 800c4de:	f04f 0500 	mov.w	r5, #0
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	462b      	mov	r3, r5
 800c4e6:	1891      	adds	r1, r2, r2
 800c4e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4ea:	415b      	adcs	r3, r3
 800c4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4f2:	1912      	adds	r2, r2, r4
 800c4f4:	eb45 0303 	adc.w	r3, r5, r3
 800c4f8:	f04f 0000 	mov.w	r0, #0
 800c4fc:	f04f 0100 	mov.w	r1, #0
 800c500:	00d9      	lsls	r1, r3, #3
 800c502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c506:	00d0      	lsls	r0, r2, #3
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	1911      	adds	r1, r2, r4
 800c50e:	65b9      	str	r1, [r7, #88]	; 0x58
 800c510:	416b      	adcs	r3, r5
 800c512:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c516:	461a      	mov	r2, r3
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	1891      	adds	r1, r2, r2
 800c51e:	6239      	str	r1, [r7, #32]
 800c520:	415b      	adcs	r3, r3
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
 800c524:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c528:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c52c:	f7f4 fb5c 	bl	8000be8 <__aeabi_uldivmod>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4b8f      	ldr	r3, [pc, #572]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c536:	fba3 1302 	umull	r1, r3, r3, r2
 800c53a:	095b      	lsrs	r3, r3, #5
 800c53c:	2164      	movs	r1, #100	; 0x64
 800c53e:	fb01 f303 	mul.w	r3, r1, r3
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	3332      	adds	r3, #50	; 0x32
 800c548:	4a8a      	ldr	r2, [pc, #552]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c54a:	fba2 2303 	umull	r2, r3, r2, r3
 800c54e:	095b      	lsrs	r3, r3, #5
 800c550:	b29b      	uxth	r3, r3
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	b29b      	uxth	r3, r3
 800c556:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4433      	add	r3, r6
 800c55e:	b29e      	uxth	r6, r3
 800c560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c562:	4618      	mov	r0, r3
 800c564:	f04f 0100 	mov.w	r1, #0
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	1894      	adds	r4, r2, r2
 800c56e:	61bc      	str	r4, [r7, #24]
 800c570:	415b      	adcs	r3, r3
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c578:	1812      	adds	r2, r2, r0
 800c57a:	eb41 0303 	adc.w	r3, r1, r3
 800c57e:	f04f 0400 	mov.w	r4, #0
 800c582:	f04f 0500 	mov.w	r5, #0
 800c586:	00dd      	lsls	r5, r3, #3
 800c588:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c58c:	00d4      	lsls	r4, r2, #3
 800c58e:	4622      	mov	r2, r4
 800c590:	462b      	mov	r3, r5
 800c592:	1814      	adds	r4, r2, r0
 800c594:	653c      	str	r4, [r7, #80]	; 0x50
 800c596:	414b      	adcs	r3, r1
 800c598:	657b      	str	r3, [r7, #84]	; 0x54
 800c59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c59c:	461a      	mov	r2, r3
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	1891      	adds	r1, r2, r2
 800c5a4:	6139      	str	r1, [r7, #16]
 800c5a6:	415b      	adcs	r3, r3
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c5ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c5b2:	f7f4 fb19 	bl	8000be8 <__aeabi_uldivmod>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	4b6e      	ldr	r3, [pc, #440]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c5bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c5c0:	095b      	lsrs	r3, r3, #5
 800c5c2:	2164      	movs	r1, #100	; 0x64
 800c5c4:	fb01 f303 	mul.w	r3, r1, r3
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	3332      	adds	r3, #50	; 0x32
 800c5ce:	4a69      	ldr	r2, [pc, #420]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c5d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d4:	095b      	lsrs	r3, r3, #5
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	f003 0307 	and.w	r3, r3, #7
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	4433      	add	r3, r6
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5e6:	609a      	str	r2, [r3, #8]
}
 800c5e8:	e0be      	b.n	800c768 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c5ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5ec:	461c      	mov	r4, r3
 800c5ee:	f04f 0500 	mov.w	r5, #0
 800c5f2:	4622      	mov	r2, r4
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	eb12 0802 	adds.w	r8, r2, r2
 800c5fa:	eb43 0903 	adc.w	r9, r3, r3
 800c5fe:	4642      	mov	r2, r8
 800c600:	464b      	mov	r3, r9
 800c602:	1912      	adds	r2, r2, r4
 800c604:	eb45 0303 	adc.w	r3, r5, r3
 800c608:	f04f 0000 	mov.w	r0, #0
 800c60c:	f04f 0100 	mov.w	r1, #0
 800c610:	00d9      	lsls	r1, r3, #3
 800c612:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c616:	00d0      	lsls	r0, r2, #3
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	1911      	adds	r1, r2, r4
 800c61e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c620:	416b      	adcs	r3, r5
 800c622:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c626:	4618      	mov	r0, r3
 800c628:	f04f 0100 	mov.w	r1, #0
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	008b      	lsls	r3, r1, #2
 800c636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c63a:	0082      	lsls	r2, r0, #2
 800c63c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c640:	f7f4 fad2 	bl	8000be8 <__aeabi_uldivmod>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4b4a      	ldr	r3, [pc, #296]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c64a:	fba3 2302 	umull	r2, r3, r3, r2
 800c64e:	095b      	lsrs	r3, r3, #5
 800c650:	b29b      	uxth	r3, r3
 800c652:	011b      	lsls	r3, r3, #4
 800c654:	b29e      	uxth	r6, r3
 800c656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c658:	4618      	mov	r0, r3
 800c65a:	f04f 0100 	mov.w	r1, #0
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	1894      	adds	r4, r2, r2
 800c664:	60bc      	str	r4, [r7, #8]
 800c666:	415b      	adcs	r3, r3
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c66e:	1812      	adds	r2, r2, r0
 800c670:	eb41 0303 	adc.w	r3, r1, r3
 800c674:	f04f 0400 	mov.w	r4, #0
 800c678:	f04f 0500 	mov.w	r5, #0
 800c67c:	00dd      	lsls	r5, r3, #3
 800c67e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c682:	00d4      	lsls	r4, r2, #3
 800c684:	4622      	mov	r2, r4
 800c686:	462b      	mov	r3, r5
 800c688:	1814      	adds	r4, r2, r0
 800c68a:	643c      	str	r4, [r7, #64]	; 0x40
 800c68c:	414b      	adcs	r3, r1
 800c68e:	647b      	str	r3, [r7, #68]	; 0x44
 800c690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c692:	4618      	mov	r0, r3
 800c694:	f04f 0100 	mov.w	r1, #0
 800c698:	f04f 0200 	mov.w	r2, #0
 800c69c:	f04f 0300 	mov.w	r3, #0
 800c6a0:	008b      	lsls	r3, r1, #2
 800c6a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c6a6:	0082      	lsls	r2, r0, #2
 800c6a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c6ac:	f7f4 fa9c 	bl	8000be8 <__aeabi_uldivmod>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4b2f      	ldr	r3, [pc, #188]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c6b6:	fba3 1302 	umull	r1, r3, r3, r2
 800c6ba:	095b      	lsrs	r3, r3, #5
 800c6bc:	2164      	movs	r1, #100	; 0x64
 800c6be:	fb01 f303 	mul.w	r3, r1, r3
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	011b      	lsls	r3, r3, #4
 800c6c6:	3332      	adds	r3, #50	; 0x32
 800c6c8:	4a2a      	ldr	r2, [pc, #168]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ce:	095b      	lsrs	r3, r3, #5
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	4433      	add	r3, r6
 800c6da:	b29e      	uxth	r6, r3
 800c6dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f04f 0100 	mov.w	r1, #0
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	1894      	adds	r4, r2, r2
 800c6ea:	603c      	str	r4, [r7, #0]
 800c6ec:	415b      	adcs	r3, r3
 800c6ee:	607b      	str	r3, [r7, #4]
 800c6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f4:	1812      	adds	r2, r2, r0
 800c6f6:	eb41 0303 	adc.w	r3, r1, r3
 800c6fa:	f04f 0400 	mov.w	r4, #0
 800c6fe:	f04f 0500 	mov.w	r5, #0
 800c702:	00dd      	lsls	r5, r3, #3
 800c704:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c708:	00d4      	lsls	r4, r2, #3
 800c70a:	4622      	mov	r2, r4
 800c70c:	462b      	mov	r3, r5
 800c70e:	1814      	adds	r4, r2, r0
 800c710:	63bc      	str	r4, [r7, #56]	; 0x38
 800c712:	414b      	adcs	r3, r1
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c718:	4618      	mov	r0, r3
 800c71a:	f04f 0100 	mov.w	r1, #0
 800c71e:	f04f 0200 	mov.w	r2, #0
 800c722:	f04f 0300 	mov.w	r3, #0
 800c726:	008b      	lsls	r3, r1, #2
 800c728:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c72c:	0082      	lsls	r2, r0, #2
 800c72e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c732:	f7f4 fa59 	bl	8000be8 <__aeabi_uldivmod>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4b0e      	ldr	r3, [pc, #56]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c73c:	fba3 1302 	umull	r1, r3, r3, r2
 800c740:	095b      	lsrs	r3, r3, #5
 800c742:	2164      	movs	r1, #100	; 0x64
 800c744:	fb01 f303 	mul.w	r3, r1, r3
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	011b      	lsls	r3, r3, #4
 800c74c:	3332      	adds	r3, #50	; 0x32
 800c74e:	4a09      	ldr	r2, [pc, #36]	; (800c774 <LL_USART_SetBaudRate+0x31c>)
 800c750:	fba2 2303 	umull	r2, r3, r2, r3
 800c754:	095b      	lsrs	r3, r3, #5
 800c756:	b29b      	uxth	r3, r3
 800c758:	f003 030f 	and.w	r3, r3, #15
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4433      	add	r3, r6
 800c760:	b29b      	uxth	r3, r3
 800c762:	461a      	mov	r2, r3
 800c764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c766:	609a      	str	r2, [r3, #8]
}
 800c768:	bf00      	nop
 800c76a:	377c      	adds	r7, #124	; 0x7c
 800c76c:	46bd      	mov	sp, r7
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	bf00      	nop
 800c774:	51eb851f 	.word	0x51eb851f

0800c778 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c786:	2300      	movs	r3, #0
 800c788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff fe2a 	bl	800c3e4 <LL_USART_IsEnabled>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d15e      	bne.n	800c854 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c79e:	f023 030c 	bic.w	r3, r3, #12
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	6851      	ldr	r1, [r2, #4]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	68d2      	ldr	r2, [r2, #12]
 800c7aa:	4311      	orrs	r1, r2
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	6912      	ldr	r2, [r2, #16]
 800c7b0:	4311      	orrs	r1, r2
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	6992      	ldr	r2, [r2, #24]
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fe21 	bl	800c40c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fe2e 	bl	800c432 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c7d6:	f107 0308 	add.w	r3, r7, #8
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff f9d0 	bl	800bb80 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <LL_USART_Init+0xe8>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d102      	bne.n	800c7ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	61bb      	str	r3, [r7, #24]
 800c7ec:	e021      	b.n	800c832 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1c      	ldr	r2, [pc, #112]	; (800c864 <LL_USART_Init+0xec>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d102      	bne.n	800c7fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	61bb      	str	r3, [r7, #24]
 800c7fa:	e01a      	b.n	800c832 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a1a      	ldr	r2, [pc, #104]	; (800c868 <LL_USART_Init+0xf0>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d102      	bne.n	800c80a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	e013      	b.n	800c832 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a17      	ldr	r2, [pc, #92]	; (800c86c <LL_USART_Init+0xf4>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d102      	bne.n	800c818 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	61bb      	str	r3, [r7, #24]
 800c816:	e00c      	b.n	800c832 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a15      	ldr	r2, [pc, #84]	; (800c870 <LL_USART_Init+0xf8>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d102      	bne.n	800c826 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	e005      	b.n	800c832 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a12      	ldr	r2, [pc, #72]	; (800c874 <LL_USART_Init+0xfc>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d101      	bne.n	800c832 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00d      	beq.n	800c854 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d009      	beq.n	800c854 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c840:	2300      	movs	r3, #0
 800c842:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	699a      	ldr	r2, [r3, #24]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	69b9      	ldr	r1, [r7, #24]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff fe02 	bl	800c458 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c854:	7ffb      	ldrb	r3, [r7, #31]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	40011000 	.word	0x40011000
 800c864:	40004400 	.word	0x40004400
 800c868:	40004800 	.word	0x40004800
 800c86c:	40011400 	.word	0x40011400
 800c870:	40004c00 	.word	0x40004c00
 800c874:	40005000 	.word	0x40005000

0800c878 <__errno>:
 800c878:	4b01      	ldr	r3, [pc, #4]	; (800c880 <__errno+0x8>)
 800c87a:	6818      	ldr	r0, [r3, #0]
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20000010 	.word	0x20000010

0800c884 <__libc_init_array>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	4d0d      	ldr	r5, [pc, #52]	; (800c8bc <__libc_init_array+0x38>)
 800c888:	4c0d      	ldr	r4, [pc, #52]	; (800c8c0 <__libc_init_array+0x3c>)
 800c88a:	1b64      	subs	r4, r4, r5
 800c88c:	10a4      	asrs	r4, r4, #2
 800c88e:	2600      	movs	r6, #0
 800c890:	42a6      	cmp	r6, r4
 800c892:	d109      	bne.n	800c8a8 <__libc_init_array+0x24>
 800c894:	4d0b      	ldr	r5, [pc, #44]	; (800c8c4 <__libc_init_array+0x40>)
 800c896:	4c0c      	ldr	r4, [pc, #48]	; (800c8c8 <__libc_init_array+0x44>)
 800c898:	f003 fc52 	bl	8010140 <_init>
 800c89c:	1b64      	subs	r4, r4, r5
 800c89e:	10a4      	asrs	r4, r4, #2
 800c8a0:	2600      	movs	r6, #0
 800c8a2:	42a6      	cmp	r6, r4
 800c8a4:	d105      	bne.n	800c8b2 <__libc_init_array+0x2e>
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ac:	4798      	blx	r3
 800c8ae:	3601      	adds	r6, #1
 800c8b0:	e7ee      	b.n	800c890 <__libc_init_array+0xc>
 800c8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b6:	4798      	blx	r3
 800c8b8:	3601      	adds	r6, #1
 800c8ba:	e7f2      	b.n	800c8a2 <__libc_init_array+0x1e>
 800c8bc:	0801097c 	.word	0x0801097c
 800c8c0:	0801097c 	.word	0x0801097c
 800c8c4:	0801097c 	.word	0x0801097c
 800c8c8:	08010980 	.word	0x08010980

0800c8cc <memset>:
 800c8cc:	4402      	add	r2, r0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d100      	bne.n	800c8d6 <memset+0xa>
 800c8d4:	4770      	bx	lr
 800c8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8da:	e7f9      	b.n	800c8d0 <memset+0x4>

0800c8dc <__cvt>:
 800c8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e0:	ec55 4b10 	vmov	r4, r5, d0
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	460e      	mov	r6, r1
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	bfbb      	ittet	lt
 800c8ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8f2:	461d      	movlt	r5, r3
 800c8f4:	2300      	movge	r3, #0
 800c8f6:	232d      	movlt	r3, #45	; 0x2d
 800c8f8:	700b      	strb	r3, [r1, #0]
 800c8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c900:	4691      	mov	r9, r2
 800c902:	f023 0820 	bic.w	r8, r3, #32
 800c906:	bfbc      	itt	lt
 800c908:	4622      	movlt	r2, r4
 800c90a:	4614      	movlt	r4, r2
 800c90c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c910:	d005      	beq.n	800c91e <__cvt+0x42>
 800c912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c916:	d100      	bne.n	800c91a <__cvt+0x3e>
 800c918:	3601      	adds	r6, #1
 800c91a:	2102      	movs	r1, #2
 800c91c:	e000      	b.n	800c920 <__cvt+0x44>
 800c91e:	2103      	movs	r1, #3
 800c920:	ab03      	add	r3, sp, #12
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	ab02      	add	r3, sp, #8
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	ec45 4b10 	vmov	d0, r4, r5
 800c92c:	4653      	mov	r3, sl
 800c92e:	4632      	mov	r2, r6
 800c930:	f000 fe1a 	bl	800d568 <_dtoa_r>
 800c934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c938:	4607      	mov	r7, r0
 800c93a:	d102      	bne.n	800c942 <__cvt+0x66>
 800c93c:	f019 0f01 	tst.w	r9, #1
 800c940:	d022      	beq.n	800c988 <__cvt+0xac>
 800c942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c946:	eb07 0906 	add.w	r9, r7, r6
 800c94a:	d110      	bne.n	800c96e <__cvt+0x92>
 800c94c:	783b      	ldrb	r3, [r7, #0]
 800c94e:	2b30      	cmp	r3, #48	; 0x30
 800c950:	d10a      	bne.n	800c968 <__cvt+0x8c>
 800c952:	2200      	movs	r2, #0
 800c954:	2300      	movs	r3, #0
 800c956:	4620      	mov	r0, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	f7f4 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c95e:	b918      	cbnz	r0, 800c968 <__cvt+0x8c>
 800c960:	f1c6 0601 	rsb	r6, r6, #1
 800c964:	f8ca 6000 	str.w	r6, [sl]
 800c968:	f8da 3000 	ldr.w	r3, [sl]
 800c96c:	4499      	add	r9, r3
 800c96e:	2200      	movs	r2, #0
 800c970:	2300      	movs	r3, #0
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f4 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c97a:	b108      	cbz	r0, 800c980 <__cvt+0xa4>
 800c97c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c980:	2230      	movs	r2, #48	; 0x30
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	454b      	cmp	r3, r9
 800c986:	d307      	bcc.n	800c998 <__cvt+0xbc>
 800c988:	9b03      	ldr	r3, [sp, #12]
 800c98a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c98c:	1bdb      	subs	r3, r3, r7
 800c98e:	4638      	mov	r0, r7
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	b004      	add	sp, #16
 800c994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c998:	1c59      	adds	r1, r3, #1
 800c99a:	9103      	str	r1, [sp, #12]
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	e7f0      	b.n	800c982 <__cvt+0xa6>

0800c9a0 <__exponent>:
 800c9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	bfb8      	it	lt
 800c9a8:	4249      	neglt	r1, r1
 800c9aa:	f803 2b02 	strb.w	r2, [r3], #2
 800c9ae:	bfb4      	ite	lt
 800c9b0:	222d      	movlt	r2, #45	; 0x2d
 800c9b2:	222b      	movge	r2, #43	; 0x2b
 800c9b4:	2909      	cmp	r1, #9
 800c9b6:	7042      	strb	r2, [r0, #1]
 800c9b8:	dd2a      	ble.n	800ca10 <__exponent+0x70>
 800c9ba:	f10d 0407 	add.w	r4, sp, #7
 800c9be:	46a4      	mov	ip, r4
 800c9c0:	270a      	movs	r7, #10
 800c9c2:	46a6      	mov	lr, r4
 800c9c4:	460a      	mov	r2, r1
 800c9c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9ca:	fb07 1516 	mls	r5, r7, r6, r1
 800c9ce:	3530      	adds	r5, #48	; 0x30
 800c9d0:	2a63      	cmp	r2, #99	; 0x63
 800c9d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c9d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c9da:	4631      	mov	r1, r6
 800c9dc:	dcf1      	bgt.n	800c9c2 <__exponent+0x22>
 800c9de:	3130      	adds	r1, #48	; 0x30
 800c9e0:	f1ae 0502 	sub.w	r5, lr, #2
 800c9e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9e8:	1c44      	adds	r4, r0, #1
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	4561      	cmp	r1, ip
 800c9ee:	d30a      	bcc.n	800ca06 <__exponent+0x66>
 800c9f0:	f10d 0209 	add.w	r2, sp, #9
 800c9f4:	eba2 020e 	sub.w	r2, r2, lr
 800c9f8:	4565      	cmp	r5, ip
 800c9fa:	bf88      	it	hi
 800c9fc:	2200      	movhi	r2, #0
 800c9fe:	4413      	add	r3, r2
 800ca00:	1a18      	subs	r0, r3, r0
 800ca02:	b003      	add	sp, #12
 800ca04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ca0e:	e7ed      	b.n	800c9ec <__exponent+0x4c>
 800ca10:	2330      	movs	r3, #48	; 0x30
 800ca12:	3130      	adds	r1, #48	; 0x30
 800ca14:	7083      	strb	r3, [r0, #2]
 800ca16:	70c1      	strb	r1, [r0, #3]
 800ca18:	1d03      	adds	r3, r0, #4
 800ca1a:	e7f1      	b.n	800ca00 <__exponent+0x60>

0800ca1c <_printf_float>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	ed2d 8b02 	vpush	{d8}
 800ca24:	b08d      	sub	sp, #52	; 0x34
 800ca26:	460c      	mov	r4, r1
 800ca28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca2c:	4616      	mov	r6, r2
 800ca2e:	461f      	mov	r7, r3
 800ca30:	4605      	mov	r5, r0
 800ca32:	f001 fd3d 	bl	800e4b0 <_localeconv_r>
 800ca36:	f8d0 a000 	ldr.w	sl, [r0]
 800ca3a:	4650      	mov	r0, sl
 800ca3c:	f7f3 fbc8 	bl	80001d0 <strlen>
 800ca40:	2300      	movs	r3, #0
 800ca42:	930a      	str	r3, [sp, #40]	; 0x28
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca50:	3307      	adds	r3, #7
 800ca52:	f023 0307 	bic.w	r3, r3, #7
 800ca56:	f103 0208 	add.w	r2, r3, #8
 800ca5a:	f8c8 2000 	str.w	r2, [r8]
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca6e:	9307      	str	r3, [sp, #28]
 800ca70:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca74:	ee08 0a10 	vmov	s16, r0
 800ca78:	4b9f      	ldr	r3, [pc, #636]	; (800ccf8 <_printf_float+0x2dc>)
 800ca7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	f7f4 f853 	bl	8000b2c <__aeabi_dcmpun>
 800ca86:	bb88      	cbnz	r0, 800caec <_printf_float+0xd0>
 800ca88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca8c:	4b9a      	ldr	r3, [pc, #616]	; (800ccf8 <_printf_float+0x2dc>)
 800ca8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca92:	f7f4 f82d 	bl	8000af0 <__aeabi_dcmple>
 800ca96:	bb48      	cbnz	r0, 800caec <_printf_float+0xd0>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	4649      	mov	r1, r9
 800caa0:	f7f4 f81c 	bl	8000adc <__aeabi_dcmplt>
 800caa4:	b110      	cbz	r0, 800caac <_printf_float+0x90>
 800caa6:	232d      	movs	r3, #45	; 0x2d
 800caa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caac:	4b93      	ldr	r3, [pc, #588]	; (800ccfc <_printf_float+0x2e0>)
 800caae:	4894      	ldr	r0, [pc, #592]	; (800cd00 <_printf_float+0x2e4>)
 800cab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cab4:	bf94      	ite	ls
 800cab6:	4698      	movls	r8, r3
 800cab8:	4680      	movhi	r8, r0
 800caba:	2303      	movs	r3, #3
 800cabc:	6123      	str	r3, [r4, #16]
 800cabe:	9b05      	ldr	r3, [sp, #20]
 800cac0:	f023 0204 	bic.w	r2, r3, #4
 800cac4:	6022      	str	r2, [r4, #0]
 800cac6:	f04f 0900 	mov.w	r9, #0
 800caca:	9700      	str	r7, [sp, #0]
 800cacc:	4633      	mov	r3, r6
 800cace:	aa0b      	add	r2, sp, #44	; 0x2c
 800cad0:	4621      	mov	r1, r4
 800cad2:	4628      	mov	r0, r5
 800cad4:	f000 f9d8 	bl	800ce88 <_printf_common>
 800cad8:	3001      	adds	r0, #1
 800cada:	f040 8090 	bne.w	800cbfe <_printf_float+0x1e2>
 800cade:	f04f 30ff 	mov.w	r0, #4294967295
 800cae2:	b00d      	add	sp, #52	; 0x34
 800cae4:	ecbd 8b02 	vpop	{d8}
 800cae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caec:	4642      	mov	r2, r8
 800caee:	464b      	mov	r3, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	4649      	mov	r1, r9
 800caf4:	f7f4 f81a 	bl	8000b2c <__aeabi_dcmpun>
 800caf8:	b140      	cbz	r0, 800cb0c <_printf_float+0xf0>
 800cafa:	464b      	mov	r3, r9
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	bfbc      	itt	lt
 800cb00:	232d      	movlt	r3, #45	; 0x2d
 800cb02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb06:	487f      	ldr	r0, [pc, #508]	; (800cd04 <_printf_float+0x2e8>)
 800cb08:	4b7f      	ldr	r3, [pc, #508]	; (800cd08 <_printf_float+0x2ec>)
 800cb0a:	e7d1      	b.n	800cab0 <_printf_float+0x94>
 800cb0c:	6863      	ldr	r3, [r4, #4]
 800cb0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb12:	9206      	str	r2, [sp, #24]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	d13f      	bne.n	800cb98 <_printf_float+0x17c>
 800cb18:	2306      	movs	r3, #6
 800cb1a:	6063      	str	r3, [r4, #4]
 800cb1c:	9b05      	ldr	r3, [sp, #20]
 800cb1e:	6861      	ldr	r1, [r4, #4]
 800cb20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb24:	2300      	movs	r3, #0
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	ab0a      	add	r3, sp, #40	; 0x28
 800cb2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb2e:	ab09      	add	r3, sp, #36	; 0x24
 800cb30:	ec49 8b10 	vmov	d0, r8, r9
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	6022      	str	r2, [r4, #0]
 800cb38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f7ff fecd 	bl	800c8dc <__cvt>
 800cb42:	9b06      	ldr	r3, [sp, #24]
 800cb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb46:	2b47      	cmp	r3, #71	; 0x47
 800cb48:	4680      	mov	r8, r0
 800cb4a:	d108      	bne.n	800cb5e <_printf_float+0x142>
 800cb4c:	1cc8      	adds	r0, r1, #3
 800cb4e:	db02      	blt.n	800cb56 <_printf_float+0x13a>
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	4299      	cmp	r1, r3
 800cb54:	dd41      	ble.n	800cbda <_printf_float+0x1be>
 800cb56:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb5a:	fa5f fb8b 	uxtb.w	fp, fp
 800cb5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb62:	d820      	bhi.n	800cba6 <_printf_float+0x18a>
 800cb64:	3901      	subs	r1, #1
 800cb66:	465a      	mov	r2, fp
 800cb68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb6c:	9109      	str	r1, [sp, #36]	; 0x24
 800cb6e:	f7ff ff17 	bl	800c9a0 <__exponent>
 800cb72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb74:	1813      	adds	r3, r2, r0
 800cb76:	2a01      	cmp	r2, #1
 800cb78:	4681      	mov	r9, r0
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	dc02      	bgt.n	800cb84 <_printf_float+0x168>
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	07d2      	lsls	r2, r2, #31
 800cb82:	d501      	bpl.n	800cb88 <_printf_float+0x16c>
 800cb84:	3301      	adds	r3, #1
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d09c      	beq.n	800caca <_printf_float+0xae>
 800cb90:	232d      	movs	r3, #45	; 0x2d
 800cb92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb96:	e798      	b.n	800caca <_printf_float+0xae>
 800cb98:	9a06      	ldr	r2, [sp, #24]
 800cb9a:	2a47      	cmp	r2, #71	; 0x47
 800cb9c:	d1be      	bne.n	800cb1c <_printf_float+0x100>
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1bc      	bne.n	800cb1c <_printf_float+0x100>
 800cba2:	2301      	movs	r3, #1
 800cba4:	e7b9      	b.n	800cb1a <_printf_float+0xfe>
 800cba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbaa:	d118      	bne.n	800cbde <_printf_float+0x1c2>
 800cbac:	2900      	cmp	r1, #0
 800cbae:	6863      	ldr	r3, [r4, #4]
 800cbb0:	dd0b      	ble.n	800cbca <_printf_float+0x1ae>
 800cbb2:	6121      	str	r1, [r4, #16]
 800cbb4:	b913      	cbnz	r3, 800cbbc <_printf_float+0x1a0>
 800cbb6:	6822      	ldr	r2, [r4, #0]
 800cbb8:	07d0      	lsls	r0, r2, #31
 800cbba:	d502      	bpl.n	800cbc2 <_printf_float+0x1a6>
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	440b      	add	r3, r1
 800cbc0:	6123      	str	r3, [r4, #16]
 800cbc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbc4:	f04f 0900 	mov.w	r9, #0
 800cbc8:	e7de      	b.n	800cb88 <_printf_float+0x16c>
 800cbca:	b913      	cbnz	r3, 800cbd2 <_printf_float+0x1b6>
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	07d2      	lsls	r2, r2, #31
 800cbd0:	d501      	bpl.n	800cbd6 <_printf_float+0x1ba>
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	e7f4      	b.n	800cbc0 <_printf_float+0x1a4>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e7f2      	b.n	800cbc0 <_printf_float+0x1a4>
 800cbda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	db05      	blt.n	800cbf0 <_printf_float+0x1d4>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	6121      	str	r1, [r4, #16]
 800cbe8:	07d8      	lsls	r0, r3, #31
 800cbea:	d5ea      	bpl.n	800cbc2 <_printf_float+0x1a6>
 800cbec:	1c4b      	adds	r3, r1, #1
 800cbee:	e7e7      	b.n	800cbc0 <_printf_float+0x1a4>
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	bfd4      	ite	le
 800cbf4:	f1c1 0202 	rsble	r2, r1, #2
 800cbf8:	2201      	movgt	r2, #1
 800cbfa:	4413      	add	r3, r2
 800cbfc:	e7e0      	b.n	800cbc0 <_printf_float+0x1a4>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	055a      	lsls	r2, r3, #21
 800cc02:	d407      	bmi.n	800cc14 <_printf_float+0x1f8>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	4642      	mov	r2, r8
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	47b8      	blx	r7
 800cc0e:	3001      	adds	r0, #1
 800cc10:	d12c      	bne.n	800cc6c <_printf_float+0x250>
 800cc12:	e764      	b.n	800cade <_printf_float+0xc2>
 800cc14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc18:	f240 80e0 	bls.w	800cddc <_printf_float+0x3c0>
 800cc1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc20:	2200      	movs	r2, #0
 800cc22:	2300      	movs	r3, #0
 800cc24:	f7f3 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d034      	beq.n	800cc96 <_printf_float+0x27a>
 800cc2c:	4a37      	ldr	r2, [pc, #220]	; (800cd0c <_printf_float+0x2f0>)
 800cc2e:	2301      	movs	r3, #1
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	f43f af51 	beq.w	800cade <_printf_float+0xc2>
 800cc3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc40:	429a      	cmp	r2, r3
 800cc42:	db02      	blt.n	800cc4a <_printf_float+0x22e>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	07d8      	lsls	r0, r3, #31
 800cc48:	d510      	bpl.n	800cc6c <_printf_float+0x250>
 800cc4a:	ee18 3a10 	vmov	r3, s16
 800cc4e:	4652      	mov	r2, sl
 800cc50:	4631      	mov	r1, r6
 800cc52:	4628      	mov	r0, r5
 800cc54:	47b8      	blx	r7
 800cc56:	3001      	adds	r0, #1
 800cc58:	f43f af41 	beq.w	800cade <_printf_float+0xc2>
 800cc5c:	f04f 0800 	mov.w	r8, #0
 800cc60:	f104 091a 	add.w	r9, r4, #26
 800cc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc66:	3b01      	subs	r3, #1
 800cc68:	4543      	cmp	r3, r8
 800cc6a:	dc09      	bgt.n	800cc80 <_printf_float+0x264>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	079b      	lsls	r3, r3, #30
 800cc70:	f100 8105 	bmi.w	800ce7e <_printf_float+0x462>
 800cc74:	68e0      	ldr	r0, [r4, #12]
 800cc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc78:	4298      	cmp	r0, r3
 800cc7a:	bfb8      	it	lt
 800cc7c:	4618      	movlt	r0, r3
 800cc7e:	e730      	b.n	800cae2 <_printf_float+0xc6>
 800cc80:	2301      	movs	r3, #1
 800cc82:	464a      	mov	r2, r9
 800cc84:	4631      	mov	r1, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f43f af27 	beq.w	800cade <_printf_float+0xc2>
 800cc90:	f108 0801 	add.w	r8, r8, #1
 800cc94:	e7e6      	b.n	800cc64 <_printf_float+0x248>
 800cc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc39      	bgt.n	800cd10 <_printf_float+0x2f4>
 800cc9c:	4a1b      	ldr	r2, [pc, #108]	; (800cd0c <_printf_float+0x2f0>)
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4631      	mov	r1, r6
 800cca2:	4628      	mov	r0, r5
 800cca4:	47b8      	blx	r7
 800cca6:	3001      	adds	r0, #1
 800cca8:	f43f af19 	beq.w	800cade <_printf_float+0xc2>
 800ccac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	d102      	bne.n	800ccba <_printf_float+0x29e>
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	07d9      	lsls	r1, r3, #31
 800ccb8:	d5d8      	bpl.n	800cc6c <_printf_float+0x250>
 800ccba:	ee18 3a10 	vmov	r3, s16
 800ccbe:	4652      	mov	r2, sl
 800ccc0:	4631      	mov	r1, r6
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b8      	blx	r7
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f43f af09 	beq.w	800cade <_printf_float+0xc2>
 800cccc:	f04f 0900 	mov.w	r9, #0
 800ccd0:	f104 0a1a 	add.w	sl, r4, #26
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	425b      	negs	r3, r3
 800ccd8:	454b      	cmp	r3, r9
 800ccda:	dc01      	bgt.n	800cce0 <_printf_float+0x2c4>
 800ccdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccde:	e792      	b.n	800cc06 <_printf_float+0x1ea>
 800cce0:	2301      	movs	r3, #1
 800cce2:	4652      	mov	r2, sl
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	f43f aef7 	beq.w	800cade <_printf_float+0xc2>
 800ccf0:	f109 0901 	add.w	r9, r9, #1
 800ccf4:	e7ee      	b.n	800ccd4 <_printf_float+0x2b8>
 800ccf6:	bf00      	nop
 800ccf8:	7fefffff 	.word	0x7fefffff
 800ccfc:	08010540 	.word	0x08010540
 800cd00:	08010544 	.word	0x08010544
 800cd04:	0801054c 	.word	0x0801054c
 800cd08:	08010548 	.word	0x08010548
 800cd0c:	08010550 	.word	0x08010550
 800cd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd14:	429a      	cmp	r2, r3
 800cd16:	bfa8      	it	ge
 800cd18:	461a      	movge	r2, r3
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	4691      	mov	r9, r2
 800cd1e:	dc37      	bgt.n	800cd90 <_printf_float+0x374>
 800cd20:	f04f 0b00 	mov.w	fp, #0
 800cd24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd28:	f104 021a 	add.w	r2, r4, #26
 800cd2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	eba3 0309 	sub.w	r3, r3, r9
 800cd34:	455b      	cmp	r3, fp
 800cd36:	dc33      	bgt.n	800cda0 <_printf_float+0x384>
 800cd38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	db3b      	blt.n	800cdb8 <_printf_float+0x39c>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	07da      	lsls	r2, r3, #31
 800cd44:	d438      	bmi.n	800cdb8 <_printf_float+0x39c>
 800cd46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd48:	9b05      	ldr	r3, [sp, #20]
 800cd4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	eba2 0901 	sub.w	r9, r2, r1
 800cd52:	4599      	cmp	r9, r3
 800cd54:	bfa8      	it	ge
 800cd56:	4699      	movge	r9, r3
 800cd58:	f1b9 0f00 	cmp.w	r9, #0
 800cd5c:	dc35      	bgt.n	800cdca <_printf_float+0x3ae>
 800cd5e:	f04f 0800 	mov.w	r8, #0
 800cd62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd66:	f104 0a1a 	add.w	sl, r4, #26
 800cd6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	eba3 0309 	sub.w	r3, r3, r9
 800cd74:	4543      	cmp	r3, r8
 800cd76:	f77f af79 	ble.w	800cc6c <_printf_float+0x250>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4652      	mov	r2, sl
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4628      	mov	r0, r5
 800cd82:	47b8      	blx	r7
 800cd84:	3001      	adds	r0, #1
 800cd86:	f43f aeaa 	beq.w	800cade <_printf_float+0xc2>
 800cd8a:	f108 0801 	add.w	r8, r8, #1
 800cd8e:	e7ec      	b.n	800cd6a <_printf_float+0x34e>
 800cd90:	4613      	mov	r3, r2
 800cd92:	4631      	mov	r1, r6
 800cd94:	4642      	mov	r2, r8
 800cd96:	4628      	mov	r0, r5
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d1c0      	bne.n	800cd20 <_printf_float+0x304>
 800cd9e:	e69e      	b.n	800cade <_printf_float+0xc2>
 800cda0:	2301      	movs	r3, #1
 800cda2:	4631      	mov	r1, r6
 800cda4:	4628      	mov	r0, r5
 800cda6:	9205      	str	r2, [sp, #20]
 800cda8:	47b8      	blx	r7
 800cdaa:	3001      	adds	r0, #1
 800cdac:	f43f ae97 	beq.w	800cade <_printf_float+0xc2>
 800cdb0:	9a05      	ldr	r2, [sp, #20]
 800cdb2:	f10b 0b01 	add.w	fp, fp, #1
 800cdb6:	e7b9      	b.n	800cd2c <_printf_float+0x310>
 800cdb8:	ee18 3a10 	vmov	r3, s16
 800cdbc:	4652      	mov	r2, sl
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b8      	blx	r7
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d1be      	bne.n	800cd46 <_printf_float+0x32a>
 800cdc8:	e689      	b.n	800cade <_printf_float+0xc2>
 800cdca:	9a05      	ldr	r2, [sp, #20]
 800cdcc:	464b      	mov	r3, r9
 800cdce:	4442      	add	r2, r8
 800cdd0:	4631      	mov	r1, r6
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	47b8      	blx	r7
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	d1c1      	bne.n	800cd5e <_printf_float+0x342>
 800cdda:	e680      	b.n	800cade <_printf_float+0xc2>
 800cddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdde:	2a01      	cmp	r2, #1
 800cde0:	dc01      	bgt.n	800cde6 <_printf_float+0x3ca>
 800cde2:	07db      	lsls	r3, r3, #31
 800cde4:	d538      	bpl.n	800ce58 <_printf_float+0x43c>
 800cde6:	2301      	movs	r3, #1
 800cde8:	4642      	mov	r2, r8
 800cdea:	4631      	mov	r1, r6
 800cdec:	4628      	mov	r0, r5
 800cdee:	47b8      	blx	r7
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	f43f ae74 	beq.w	800cade <_printf_float+0xc2>
 800cdf6:	ee18 3a10 	vmov	r3, s16
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b8      	blx	r7
 800ce02:	3001      	adds	r0, #1
 800ce04:	f43f ae6b 	beq.w	800cade <_printf_float+0xc2>
 800ce08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f7f3 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce14:	b9d8      	cbnz	r0, 800ce4e <_printf_float+0x432>
 800ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce18:	f108 0201 	add.w	r2, r8, #1
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	4631      	mov	r1, r6
 800ce20:	4628      	mov	r0, r5
 800ce22:	47b8      	blx	r7
 800ce24:	3001      	adds	r0, #1
 800ce26:	d10e      	bne.n	800ce46 <_printf_float+0x42a>
 800ce28:	e659      	b.n	800cade <_printf_float+0xc2>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4652      	mov	r2, sl
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b8      	blx	r7
 800ce34:	3001      	adds	r0, #1
 800ce36:	f43f ae52 	beq.w	800cade <_printf_float+0xc2>
 800ce3a:	f108 0801 	add.w	r8, r8, #1
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce40:	3b01      	subs	r3, #1
 800ce42:	4543      	cmp	r3, r8
 800ce44:	dcf1      	bgt.n	800ce2a <_printf_float+0x40e>
 800ce46:	464b      	mov	r3, r9
 800ce48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce4c:	e6dc      	b.n	800cc08 <_printf_float+0x1ec>
 800ce4e:	f04f 0800 	mov.w	r8, #0
 800ce52:	f104 0a1a 	add.w	sl, r4, #26
 800ce56:	e7f2      	b.n	800ce3e <_printf_float+0x422>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	4642      	mov	r2, r8
 800ce5c:	e7df      	b.n	800ce1e <_printf_float+0x402>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	464a      	mov	r2, r9
 800ce62:	4631      	mov	r1, r6
 800ce64:	4628      	mov	r0, r5
 800ce66:	47b8      	blx	r7
 800ce68:	3001      	adds	r0, #1
 800ce6a:	f43f ae38 	beq.w	800cade <_printf_float+0xc2>
 800ce6e:	f108 0801 	add.w	r8, r8, #1
 800ce72:	68e3      	ldr	r3, [r4, #12]
 800ce74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce76:	1a5b      	subs	r3, r3, r1
 800ce78:	4543      	cmp	r3, r8
 800ce7a:	dcf0      	bgt.n	800ce5e <_printf_float+0x442>
 800ce7c:	e6fa      	b.n	800cc74 <_printf_float+0x258>
 800ce7e:	f04f 0800 	mov.w	r8, #0
 800ce82:	f104 0919 	add.w	r9, r4, #25
 800ce86:	e7f4      	b.n	800ce72 <_printf_float+0x456>

0800ce88 <_printf_common>:
 800ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce8c:	4616      	mov	r6, r2
 800ce8e:	4699      	mov	r9, r3
 800ce90:	688a      	ldr	r2, [r1, #8]
 800ce92:	690b      	ldr	r3, [r1, #16]
 800ce94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	bfb8      	it	lt
 800ce9c:	4613      	movlt	r3, r2
 800ce9e:	6033      	str	r3, [r6, #0]
 800cea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cea4:	4607      	mov	r7, r0
 800cea6:	460c      	mov	r4, r1
 800cea8:	b10a      	cbz	r2, 800ceae <_printf_common+0x26>
 800ceaa:	3301      	adds	r3, #1
 800ceac:	6033      	str	r3, [r6, #0]
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	0699      	lsls	r1, r3, #26
 800ceb2:	bf42      	ittt	mi
 800ceb4:	6833      	ldrmi	r3, [r6, #0]
 800ceb6:	3302      	addmi	r3, #2
 800ceb8:	6033      	strmi	r3, [r6, #0]
 800ceba:	6825      	ldr	r5, [r4, #0]
 800cebc:	f015 0506 	ands.w	r5, r5, #6
 800cec0:	d106      	bne.n	800ced0 <_printf_common+0x48>
 800cec2:	f104 0a19 	add.w	sl, r4, #25
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	6832      	ldr	r2, [r6, #0]
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	42ab      	cmp	r3, r5
 800cece:	dc26      	bgt.n	800cf1e <_printf_common+0x96>
 800ced0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ced4:	1e13      	subs	r3, r2, #0
 800ced6:	6822      	ldr	r2, [r4, #0]
 800ced8:	bf18      	it	ne
 800ceda:	2301      	movne	r3, #1
 800cedc:	0692      	lsls	r2, r2, #26
 800cede:	d42b      	bmi.n	800cf38 <_printf_common+0xb0>
 800cee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cee4:	4649      	mov	r1, r9
 800cee6:	4638      	mov	r0, r7
 800cee8:	47c0      	blx	r8
 800ceea:	3001      	adds	r0, #1
 800ceec:	d01e      	beq.n	800cf2c <_printf_common+0xa4>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	68e5      	ldr	r5, [r4, #12]
 800cef2:	6832      	ldr	r2, [r6, #0]
 800cef4:	f003 0306 	and.w	r3, r3, #6
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	bf08      	it	eq
 800cefc:	1aad      	subeq	r5, r5, r2
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	6922      	ldr	r2, [r4, #16]
 800cf02:	bf0c      	ite	eq
 800cf04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf08:	2500      	movne	r5, #0
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	bfc4      	itt	gt
 800cf0e:	1a9b      	subgt	r3, r3, r2
 800cf10:	18ed      	addgt	r5, r5, r3
 800cf12:	2600      	movs	r6, #0
 800cf14:	341a      	adds	r4, #26
 800cf16:	42b5      	cmp	r5, r6
 800cf18:	d11a      	bne.n	800cf50 <_printf_common+0xc8>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e008      	b.n	800cf30 <_printf_common+0xa8>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	4652      	mov	r2, sl
 800cf22:	4649      	mov	r1, r9
 800cf24:	4638      	mov	r0, r7
 800cf26:	47c0      	blx	r8
 800cf28:	3001      	adds	r0, #1
 800cf2a:	d103      	bne.n	800cf34 <_printf_common+0xac>
 800cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf34:	3501      	adds	r5, #1
 800cf36:	e7c6      	b.n	800cec6 <_printf_common+0x3e>
 800cf38:	18e1      	adds	r1, r4, r3
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	2030      	movs	r0, #48	; 0x30
 800cf3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf42:	4422      	add	r2, r4
 800cf44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf4c:	3302      	adds	r3, #2
 800cf4e:	e7c7      	b.n	800cee0 <_printf_common+0x58>
 800cf50:	2301      	movs	r3, #1
 800cf52:	4622      	mov	r2, r4
 800cf54:	4649      	mov	r1, r9
 800cf56:	4638      	mov	r0, r7
 800cf58:	47c0      	blx	r8
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d0e6      	beq.n	800cf2c <_printf_common+0xa4>
 800cf5e:	3601      	adds	r6, #1
 800cf60:	e7d9      	b.n	800cf16 <_printf_common+0x8e>
	...

0800cf64 <_printf_i>:
 800cf64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf68:	460c      	mov	r4, r1
 800cf6a:	4691      	mov	r9, r2
 800cf6c:	7e27      	ldrb	r7, [r4, #24]
 800cf6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cf70:	2f78      	cmp	r7, #120	; 0x78
 800cf72:	4680      	mov	r8, r0
 800cf74:	469a      	mov	sl, r3
 800cf76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf7a:	d807      	bhi.n	800cf8c <_printf_i+0x28>
 800cf7c:	2f62      	cmp	r7, #98	; 0x62
 800cf7e:	d80a      	bhi.n	800cf96 <_printf_i+0x32>
 800cf80:	2f00      	cmp	r7, #0
 800cf82:	f000 80d8 	beq.w	800d136 <_printf_i+0x1d2>
 800cf86:	2f58      	cmp	r7, #88	; 0x58
 800cf88:	f000 80a3 	beq.w	800d0d2 <_printf_i+0x16e>
 800cf8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf94:	e03a      	b.n	800d00c <_printf_i+0xa8>
 800cf96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf9a:	2b15      	cmp	r3, #21
 800cf9c:	d8f6      	bhi.n	800cf8c <_printf_i+0x28>
 800cf9e:	a001      	add	r0, pc, #4	; (adr r0, 800cfa4 <_printf_i+0x40>)
 800cfa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cfa4:	0800cffd 	.word	0x0800cffd
 800cfa8:	0800d011 	.word	0x0800d011
 800cfac:	0800cf8d 	.word	0x0800cf8d
 800cfb0:	0800cf8d 	.word	0x0800cf8d
 800cfb4:	0800cf8d 	.word	0x0800cf8d
 800cfb8:	0800cf8d 	.word	0x0800cf8d
 800cfbc:	0800d011 	.word	0x0800d011
 800cfc0:	0800cf8d 	.word	0x0800cf8d
 800cfc4:	0800cf8d 	.word	0x0800cf8d
 800cfc8:	0800cf8d 	.word	0x0800cf8d
 800cfcc:	0800cf8d 	.word	0x0800cf8d
 800cfd0:	0800d11d 	.word	0x0800d11d
 800cfd4:	0800d041 	.word	0x0800d041
 800cfd8:	0800d0ff 	.word	0x0800d0ff
 800cfdc:	0800cf8d 	.word	0x0800cf8d
 800cfe0:	0800cf8d 	.word	0x0800cf8d
 800cfe4:	0800d13f 	.word	0x0800d13f
 800cfe8:	0800cf8d 	.word	0x0800cf8d
 800cfec:	0800d041 	.word	0x0800d041
 800cff0:	0800cf8d 	.word	0x0800cf8d
 800cff4:	0800cf8d 	.word	0x0800cf8d
 800cff8:	0800d107 	.word	0x0800d107
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	600a      	str	r2, [r1, #0]
 800d004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d00c:	2301      	movs	r3, #1
 800d00e:	e0a3      	b.n	800d158 <_printf_i+0x1f4>
 800d010:	6825      	ldr	r5, [r4, #0]
 800d012:	6808      	ldr	r0, [r1, #0]
 800d014:	062e      	lsls	r6, r5, #24
 800d016:	f100 0304 	add.w	r3, r0, #4
 800d01a:	d50a      	bpl.n	800d032 <_printf_i+0xce>
 800d01c:	6805      	ldr	r5, [r0, #0]
 800d01e:	600b      	str	r3, [r1, #0]
 800d020:	2d00      	cmp	r5, #0
 800d022:	da03      	bge.n	800d02c <_printf_i+0xc8>
 800d024:	232d      	movs	r3, #45	; 0x2d
 800d026:	426d      	negs	r5, r5
 800d028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d02c:	485e      	ldr	r0, [pc, #376]	; (800d1a8 <_printf_i+0x244>)
 800d02e:	230a      	movs	r3, #10
 800d030:	e019      	b.n	800d066 <_printf_i+0x102>
 800d032:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d036:	6805      	ldr	r5, [r0, #0]
 800d038:	600b      	str	r3, [r1, #0]
 800d03a:	bf18      	it	ne
 800d03c:	b22d      	sxthne	r5, r5
 800d03e:	e7ef      	b.n	800d020 <_printf_i+0xbc>
 800d040:	680b      	ldr	r3, [r1, #0]
 800d042:	6825      	ldr	r5, [r4, #0]
 800d044:	1d18      	adds	r0, r3, #4
 800d046:	6008      	str	r0, [r1, #0]
 800d048:	0628      	lsls	r0, r5, #24
 800d04a:	d501      	bpl.n	800d050 <_printf_i+0xec>
 800d04c:	681d      	ldr	r5, [r3, #0]
 800d04e:	e002      	b.n	800d056 <_printf_i+0xf2>
 800d050:	0669      	lsls	r1, r5, #25
 800d052:	d5fb      	bpl.n	800d04c <_printf_i+0xe8>
 800d054:	881d      	ldrh	r5, [r3, #0]
 800d056:	4854      	ldr	r0, [pc, #336]	; (800d1a8 <_printf_i+0x244>)
 800d058:	2f6f      	cmp	r7, #111	; 0x6f
 800d05a:	bf0c      	ite	eq
 800d05c:	2308      	moveq	r3, #8
 800d05e:	230a      	movne	r3, #10
 800d060:	2100      	movs	r1, #0
 800d062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d066:	6866      	ldr	r6, [r4, #4]
 800d068:	60a6      	str	r6, [r4, #8]
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	bfa2      	ittt	ge
 800d06e:	6821      	ldrge	r1, [r4, #0]
 800d070:	f021 0104 	bicge.w	r1, r1, #4
 800d074:	6021      	strge	r1, [r4, #0]
 800d076:	b90d      	cbnz	r5, 800d07c <_printf_i+0x118>
 800d078:	2e00      	cmp	r6, #0
 800d07a:	d04d      	beq.n	800d118 <_printf_i+0x1b4>
 800d07c:	4616      	mov	r6, r2
 800d07e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d082:	fb03 5711 	mls	r7, r3, r1, r5
 800d086:	5dc7      	ldrb	r7, [r0, r7]
 800d088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d08c:	462f      	mov	r7, r5
 800d08e:	42bb      	cmp	r3, r7
 800d090:	460d      	mov	r5, r1
 800d092:	d9f4      	bls.n	800d07e <_printf_i+0x11a>
 800d094:	2b08      	cmp	r3, #8
 800d096:	d10b      	bne.n	800d0b0 <_printf_i+0x14c>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	07df      	lsls	r7, r3, #31
 800d09c:	d508      	bpl.n	800d0b0 <_printf_i+0x14c>
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	6861      	ldr	r1, [r4, #4]
 800d0a2:	4299      	cmp	r1, r3
 800d0a4:	bfde      	ittt	le
 800d0a6:	2330      	movle	r3, #48	; 0x30
 800d0a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0b0:	1b92      	subs	r2, r2, r6
 800d0b2:	6122      	str	r2, [r4, #16]
 800d0b4:	f8cd a000 	str.w	sl, [sp]
 800d0b8:	464b      	mov	r3, r9
 800d0ba:	aa03      	add	r2, sp, #12
 800d0bc:	4621      	mov	r1, r4
 800d0be:	4640      	mov	r0, r8
 800d0c0:	f7ff fee2 	bl	800ce88 <_printf_common>
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d14c      	bne.n	800d162 <_printf_i+0x1fe>
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	b004      	add	sp, #16
 800d0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d2:	4835      	ldr	r0, [pc, #212]	; (800d1a8 <_printf_i+0x244>)
 800d0d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	680e      	ldr	r6, [r1, #0]
 800d0dc:	061f      	lsls	r7, r3, #24
 800d0de:	f856 5b04 	ldr.w	r5, [r6], #4
 800d0e2:	600e      	str	r6, [r1, #0]
 800d0e4:	d514      	bpl.n	800d110 <_printf_i+0x1ac>
 800d0e6:	07d9      	lsls	r1, r3, #31
 800d0e8:	bf44      	itt	mi
 800d0ea:	f043 0320 	orrmi.w	r3, r3, #32
 800d0ee:	6023      	strmi	r3, [r4, #0]
 800d0f0:	b91d      	cbnz	r5, 800d0fa <_printf_i+0x196>
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	f023 0320 	bic.w	r3, r3, #32
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	2310      	movs	r3, #16
 800d0fc:	e7b0      	b.n	800d060 <_printf_i+0xfc>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	f043 0320 	orr.w	r3, r3, #32
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	2378      	movs	r3, #120	; 0x78
 800d108:	4828      	ldr	r0, [pc, #160]	; (800d1ac <_printf_i+0x248>)
 800d10a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d10e:	e7e3      	b.n	800d0d8 <_printf_i+0x174>
 800d110:	065e      	lsls	r6, r3, #25
 800d112:	bf48      	it	mi
 800d114:	b2ad      	uxthmi	r5, r5
 800d116:	e7e6      	b.n	800d0e6 <_printf_i+0x182>
 800d118:	4616      	mov	r6, r2
 800d11a:	e7bb      	b.n	800d094 <_printf_i+0x130>
 800d11c:	680b      	ldr	r3, [r1, #0]
 800d11e:	6826      	ldr	r6, [r4, #0]
 800d120:	6960      	ldr	r0, [r4, #20]
 800d122:	1d1d      	adds	r5, r3, #4
 800d124:	600d      	str	r5, [r1, #0]
 800d126:	0635      	lsls	r5, r6, #24
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	d501      	bpl.n	800d130 <_printf_i+0x1cc>
 800d12c:	6018      	str	r0, [r3, #0]
 800d12e:	e002      	b.n	800d136 <_printf_i+0x1d2>
 800d130:	0671      	lsls	r1, r6, #25
 800d132:	d5fb      	bpl.n	800d12c <_printf_i+0x1c8>
 800d134:	8018      	strh	r0, [r3, #0]
 800d136:	2300      	movs	r3, #0
 800d138:	6123      	str	r3, [r4, #16]
 800d13a:	4616      	mov	r6, r2
 800d13c:	e7ba      	b.n	800d0b4 <_printf_i+0x150>
 800d13e:	680b      	ldr	r3, [r1, #0]
 800d140:	1d1a      	adds	r2, r3, #4
 800d142:	600a      	str	r2, [r1, #0]
 800d144:	681e      	ldr	r6, [r3, #0]
 800d146:	6862      	ldr	r2, [r4, #4]
 800d148:	2100      	movs	r1, #0
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7f3 f848 	bl	80001e0 <memchr>
 800d150:	b108      	cbz	r0, 800d156 <_printf_i+0x1f2>
 800d152:	1b80      	subs	r0, r0, r6
 800d154:	6060      	str	r0, [r4, #4]
 800d156:	6863      	ldr	r3, [r4, #4]
 800d158:	6123      	str	r3, [r4, #16]
 800d15a:	2300      	movs	r3, #0
 800d15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d160:	e7a8      	b.n	800d0b4 <_printf_i+0x150>
 800d162:	6923      	ldr	r3, [r4, #16]
 800d164:	4632      	mov	r2, r6
 800d166:	4649      	mov	r1, r9
 800d168:	4640      	mov	r0, r8
 800d16a:	47d0      	blx	sl
 800d16c:	3001      	adds	r0, #1
 800d16e:	d0ab      	beq.n	800d0c8 <_printf_i+0x164>
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	079b      	lsls	r3, r3, #30
 800d174:	d413      	bmi.n	800d19e <_printf_i+0x23a>
 800d176:	68e0      	ldr	r0, [r4, #12]
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	4298      	cmp	r0, r3
 800d17c:	bfb8      	it	lt
 800d17e:	4618      	movlt	r0, r3
 800d180:	e7a4      	b.n	800d0cc <_printf_i+0x168>
 800d182:	2301      	movs	r3, #1
 800d184:	4632      	mov	r2, r6
 800d186:	4649      	mov	r1, r9
 800d188:	4640      	mov	r0, r8
 800d18a:	47d0      	blx	sl
 800d18c:	3001      	adds	r0, #1
 800d18e:	d09b      	beq.n	800d0c8 <_printf_i+0x164>
 800d190:	3501      	adds	r5, #1
 800d192:	68e3      	ldr	r3, [r4, #12]
 800d194:	9903      	ldr	r1, [sp, #12]
 800d196:	1a5b      	subs	r3, r3, r1
 800d198:	42ab      	cmp	r3, r5
 800d19a:	dcf2      	bgt.n	800d182 <_printf_i+0x21e>
 800d19c:	e7eb      	b.n	800d176 <_printf_i+0x212>
 800d19e:	2500      	movs	r5, #0
 800d1a0:	f104 0619 	add.w	r6, r4, #25
 800d1a4:	e7f5      	b.n	800d192 <_printf_i+0x22e>
 800d1a6:	bf00      	nop
 800d1a8:	08010552 	.word	0x08010552
 800d1ac:	08010563 	.word	0x08010563

0800d1b0 <iprintf>:
 800d1b0:	b40f      	push	{r0, r1, r2, r3}
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <iprintf+0x2c>)
 800d1b4:	b513      	push	{r0, r1, r4, lr}
 800d1b6:	681c      	ldr	r4, [r3, #0]
 800d1b8:	b124      	cbz	r4, 800d1c4 <iprintf+0x14>
 800d1ba:	69a3      	ldr	r3, [r4, #24]
 800d1bc:	b913      	cbnz	r3, 800d1c4 <iprintf+0x14>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f001 f8d8 	bl	800e374 <__sinit>
 800d1c4:	ab05      	add	r3, sp, #20
 800d1c6:	9a04      	ldr	r2, [sp, #16]
 800d1c8:	68a1      	ldr	r1, [r4, #8]
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f001 fe53 	bl	800ee78 <_vfiprintf_r>
 800d1d2:	b002      	add	sp, #8
 800d1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1d8:	b004      	add	sp, #16
 800d1da:	4770      	bx	lr
 800d1dc:	20000010 	.word	0x20000010

0800d1e0 <_puts_r>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	460e      	mov	r6, r1
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	b118      	cbz	r0, 800d1f0 <_puts_r+0x10>
 800d1e8:	6983      	ldr	r3, [r0, #24]
 800d1ea:	b90b      	cbnz	r3, 800d1f0 <_puts_r+0x10>
 800d1ec:	f001 f8c2 	bl	800e374 <__sinit>
 800d1f0:	69ab      	ldr	r3, [r5, #24]
 800d1f2:	68ac      	ldr	r4, [r5, #8]
 800d1f4:	b913      	cbnz	r3, 800d1fc <_puts_r+0x1c>
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f001 f8bc 	bl	800e374 <__sinit>
 800d1fc:	4b2c      	ldr	r3, [pc, #176]	; (800d2b0 <_puts_r+0xd0>)
 800d1fe:	429c      	cmp	r4, r3
 800d200:	d120      	bne.n	800d244 <_puts_r+0x64>
 800d202:	686c      	ldr	r4, [r5, #4]
 800d204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d206:	07db      	lsls	r3, r3, #31
 800d208:	d405      	bmi.n	800d216 <_puts_r+0x36>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	0598      	lsls	r0, r3, #22
 800d20e:	d402      	bmi.n	800d216 <_puts_r+0x36>
 800d210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d212:	f001 f952 	bl	800e4ba <__retarget_lock_acquire_recursive>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	0719      	lsls	r1, r3, #28
 800d21a:	d51d      	bpl.n	800d258 <_puts_r+0x78>
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	b1db      	cbz	r3, 800d258 <_puts_r+0x78>
 800d220:	3e01      	subs	r6, #1
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d228:	3b01      	subs	r3, #1
 800d22a:	60a3      	str	r3, [r4, #8]
 800d22c:	bb39      	cbnz	r1, 800d27e <_puts_r+0x9e>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	da38      	bge.n	800d2a4 <_puts_r+0xc4>
 800d232:	4622      	mov	r2, r4
 800d234:	210a      	movs	r1, #10
 800d236:	4628      	mov	r0, r5
 800d238:	f000 f848 	bl	800d2cc <__swbuf_r>
 800d23c:	3001      	adds	r0, #1
 800d23e:	d011      	beq.n	800d264 <_puts_r+0x84>
 800d240:	250a      	movs	r5, #10
 800d242:	e011      	b.n	800d268 <_puts_r+0x88>
 800d244:	4b1b      	ldr	r3, [pc, #108]	; (800d2b4 <_puts_r+0xd4>)
 800d246:	429c      	cmp	r4, r3
 800d248:	d101      	bne.n	800d24e <_puts_r+0x6e>
 800d24a:	68ac      	ldr	r4, [r5, #8]
 800d24c:	e7da      	b.n	800d204 <_puts_r+0x24>
 800d24e:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <_puts_r+0xd8>)
 800d250:	429c      	cmp	r4, r3
 800d252:	bf08      	it	eq
 800d254:	68ec      	ldreq	r4, [r5, #12]
 800d256:	e7d5      	b.n	800d204 <_puts_r+0x24>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 f888 	bl	800d370 <__swsetup_r>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0dd      	beq.n	800d220 <_puts_r+0x40>
 800d264:	f04f 35ff 	mov.w	r5, #4294967295
 800d268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d26a:	07da      	lsls	r2, r3, #31
 800d26c:	d405      	bmi.n	800d27a <_puts_r+0x9a>
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	059b      	lsls	r3, r3, #22
 800d272:	d402      	bmi.n	800d27a <_puts_r+0x9a>
 800d274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d276:	f001 f921 	bl	800e4bc <__retarget_lock_release_recursive>
 800d27a:	4628      	mov	r0, r5
 800d27c:	bd70      	pop	{r4, r5, r6, pc}
 800d27e:	2b00      	cmp	r3, #0
 800d280:	da04      	bge.n	800d28c <_puts_r+0xac>
 800d282:	69a2      	ldr	r2, [r4, #24]
 800d284:	429a      	cmp	r2, r3
 800d286:	dc06      	bgt.n	800d296 <_puts_r+0xb6>
 800d288:	290a      	cmp	r1, #10
 800d28a:	d004      	beq.n	800d296 <_puts_r+0xb6>
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	7019      	strb	r1, [r3, #0]
 800d294:	e7c5      	b.n	800d222 <_puts_r+0x42>
 800d296:	4622      	mov	r2, r4
 800d298:	4628      	mov	r0, r5
 800d29a:	f000 f817 	bl	800d2cc <__swbuf_r>
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d1bf      	bne.n	800d222 <_puts_r+0x42>
 800d2a2:	e7df      	b.n	800d264 <_puts_r+0x84>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	250a      	movs	r5, #10
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	6022      	str	r2, [r4, #0]
 800d2ac:	701d      	strb	r5, [r3, #0]
 800d2ae:	e7db      	b.n	800d268 <_puts_r+0x88>
 800d2b0:	08010628 	.word	0x08010628
 800d2b4:	08010648 	.word	0x08010648
 800d2b8:	08010608 	.word	0x08010608

0800d2bc <puts>:
 800d2bc:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <puts+0xc>)
 800d2be:	4601      	mov	r1, r0
 800d2c0:	6818      	ldr	r0, [r3, #0]
 800d2c2:	f7ff bf8d 	b.w	800d1e0 <_puts_r>
 800d2c6:	bf00      	nop
 800d2c8:	20000010 	.word	0x20000010

0800d2cc <__swbuf_r>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	460e      	mov	r6, r1
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	b118      	cbz	r0, 800d2de <__swbuf_r+0x12>
 800d2d6:	6983      	ldr	r3, [r0, #24]
 800d2d8:	b90b      	cbnz	r3, 800d2de <__swbuf_r+0x12>
 800d2da:	f001 f84b 	bl	800e374 <__sinit>
 800d2de:	4b21      	ldr	r3, [pc, #132]	; (800d364 <__swbuf_r+0x98>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	d12b      	bne.n	800d33c <__swbuf_r+0x70>
 800d2e4:	686c      	ldr	r4, [r5, #4]
 800d2e6:	69a3      	ldr	r3, [r4, #24]
 800d2e8:	60a3      	str	r3, [r4, #8]
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	071a      	lsls	r2, r3, #28
 800d2ee:	d52f      	bpl.n	800d350 <__swbuf_r+0x84>
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	b36b      	cbz	r3, 800d350 <__swbuf_r+0x84>
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	6820      	ldr	r0, [r4, #0]
 800d2f8:	1ac0      	subs	r0, r0, r3
 800d2fa:	6963      	ldr	r3, [r4, #20]
 800d2fc:	b2f6      	uxtb	r6, r6
 800d2fe:	4283      	cmp	r3, r0
 800d300:	4637      	mov	r7, r6
 800d302:	dc04      	bgt.n	800d30e <__swbuf_r+0x42>
 800d304:	4621      	mov	r1, r4
 800d306:	4628      	mov	r0, r5
 800d308:	f000 ffa0 	bl	800e24c <_fflush_r>
 800d30c:	bb30      	cbnz	r0, 800d35c <__swbuf_r+0x90>
 800d30e:	68a3      	ldr	r3, [r4, #8]
 800d310:	3b01      	subs	r3, #1
 800d312:	60a3      	str	r3, [r4, #8]
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	6022      	str	r2, [r4, #0]
 800d31a:	701e      	strb	r6, [r3, #0]
 800d31c:	6963      	ldr	r3, [r4, #20]
 800d31e:	3001      	adds	r0, #1
 800d320:	4283      	cmp	r3, r0
 800d322:	d004      	beq.n	800d32e <__swbuf_r+0x62>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	07db      	lsls	r3, r3, #31
 800d328:	d506      	bpl.n	800d338 <__swbuf_r+0x6c>
 800d32a:	2e0a      	cmp	r6, #10
 800d32c:	d104      	bne.n	800d338 <__swbuf_r+0x6c>
 800d32e:	4621      	mov	r1, r4
 800d330:	4628      	mov	r0, r5
 800d332:	f000 ff8b 	bl	800e24c <_fflush_r>
 800d336:	b988      	cbnz	r0, 800d35c <__swbuf_r+0x90>
 800d338:	4638      	mov	r0, r7
 800d33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d33c:	4b0a      	ldr	r3, [pc, #40]	; (800d368 <__swbuf_r+0x9c>)
 800d33e:	429c      	cmp	r4, r3
 800d340:	d101      	bne.n	800d346 <__swbuf_r+0x7a>
 800d342:	68ac      	ldr	r4, [r5, #8]
 800d344:	e7cf      	b.n	800d2e6 <__swbuf_r+0x1a>
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <__swbuf_r+0xa0>)
 800d348:	429c      	cmp	r4, r3
 800d34a:	bf08      	it	eq
 800d34c:	68ec      	ldreq	r4, [r5, #12]
 800d34e:	e7ca      	b.n	800d2e6 <__swbuf_r+0x1a>
 800d350:	4621      	mov	r1, r4
 800d352:	4628      	mov	r0, r5
 800d354:	f000 f80c 	bl	800d370 <__swsetup_r>
 800d358:	2800      	cmp	r0, #0
 800d35a:	d0cb      	beq.n	800d2f4 <__swbuf_r+0x28>
 800d35c:	f04f 37ff 	mov.w	r7, #4294967295
 800d360:	e7ea      	b.n	800d338 <__swbuf_r+0x6c>
 800d362:	bf00      	nop
 800d364:	08010628 	.word	0x08010628
 800d368:	08010648 	.word	0x08010648
 800d36c:	08010608 	.word	0x08010608

0800d370 <__swsetup_r>:
 800d370:	4b32      	ldr	r3, [pc, #200]	; (800d43c <__swsetup_r+0xcc>)
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	681d      	ldr	r5, [r3, #0]
 800d376:	4606      	mov	r6, r0
 800d378:	460c      	mov	r4, r1
 800d37a:	b125      	cbz	r5, 800d386 <__swsetup_r+0x16>
 800d37c:	69ab      	ldr	r3, [r5, #24]
 800d37e:	b913      	cbnz	r3, 800d386 <__swsetup_r+0x16>
 800d380:	4628      	mov	r0, r5
 800d382:	f000 fff7 	bl	800e374 <__sinit>
 800d386:	4b2e      	ldr	r3, [pc, #184]	; (800d440 <__swsetup_r+0xd0>)
 800d388:	429c      	cmp	r4, r3
 800d38a:	d10f      	bne.n	800d3ac <__swsetup_r+0x3c>
 800d38c:	686c      	ldr	r4, [r5, #4]
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d394:	0719      	lsls	r1, r3, #28
 800d396:	d42c      	bmi.n	800d3f2 <__swsetup_r+0x82>
 800d398:	06dd      	lsls	r5, r3, #27
 800d39a:	d411      	bmi.n	800d3c0 <__swsetup_r+0x50>
 800d39c:	2309      	movs	r3, #9
 800d39e:	6033      	str	r3, [r6, #0]
 800d3a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3aa:	e03e      	b.n	800d42a <__swsetup_r+0xba>
 800d3ac:	4b25      	ldr	r3, [pc, #148]	; (800d444 <__swsetup_r+0xd4>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d101      	bne.n	800d3b6 <__swsetup_r+0x46>
 800d3b2:	68ac      	ldr	r4, [r5, #8]
 800d3b4:	e7eb      	b.n	800d38e <__swsetup_r+0x1e>
 800d3b6:	4b24      	ldr	r3, [pc, #144]	; (800d448 <__swsetup_r+0xd8>)
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	bf08      	it	eq
 800d3bc:	68ec      	ldreq	r4, [r5, #12]
 800d3be:	e7e6      	b.n	800d38e <__swsetup_r+0x1e>
 800d3c0:	0758      	lsls	r0, r3, #29
 800d3c2:	d512      	bpl.n	800d3ea <__swsetup_r+0x7a>
 800d3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3c6:	b141      	cbz	r1, 800d3da <__swsetup_r+0x6a>
 800d3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	d002      	beq.n	800d3d6 <__swsetup_r+0x66>
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f001 fc7d 	bl	800ecd0 <_free_r>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	6363      	str	r3, [r4, #52]	; 0x34
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3e0:	81a3      	strh	r3, [r4, #12]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	f043 0308 	orr.w	r3, r3, #8
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	b94b      	cbnz	r3, 800d40a <__swsetup_r+0x9a>
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d400:	d003      	beq.n	800d40a <__swsetup_r+0x9a>
 800d402:	4621      	mov	r1, r4
 800d404:	4630      	mov	r0, r6
 800d406:	f001 f87f 	bl	800e508 <__smakebuf_r>
 800d40a:	89a0      	ldrh	r0, [r4, #12]
 800d40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d410:	f010 0301 	ands.w	r3, r0, #1
 800d414:	d00a      	beq.n	800d42c <__swsetup_r+0xbc>
 800d416:	2300      	movs	r3, #0
 800d418:	60a3      	str	r3, [r4, #8]
 800d41a:	6963      	ldr	r3, [r4, #20]
 800d41c:	425b      	negs	r3, r3
 800d41e:	61a3      	str	r3, [r4, #24]
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	b943      	cbnz	r3, 800d436 <__swsetup_r+0xc6>
 800d424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d428:	d1ba      	bne.n	800d3a0 <__swsetup_r+0x30>
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
 800d42c:	0781      	lsls	r1, r0, #30
 800d42e:	bf58      	it	pl
 800d430:	6963      	ldrpl	r3, [r4, #20]
 800d432:	60a3      	str	r3, [r4, #8]
 800d434:	e7f4      	b.n	800d420 <__swsetup_r+0xb0>
 800d436:	2000      	movs	r0, #0
 800d438:	e7f7      	b.n	800d42a <__swsetup_r+0xba>
 800d43a:	bf00      	nop
 800d43c:	20000010 	.word	0x20000010
 800d440:	08010628 	.word	0x08010628
 800d444:	08010648 	.word	0x08010648
 800d448:	08010608 	.word	0x08010608

0800d44c <quorem>:
 800d44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	6903      	ldr	r3, [r0, #16]
 800d452:	690c      	ldr	r4, [r1, #16]
 800d454:	42a3      	cmp	r3, r4
 800d456:	4607      	mov	r7, r0
 800d458:	f2c0 8081 	blt.w	800d55e <quorem+0x112>
 800d45c:	3c01      	subs	r4, #1
 800d45e:	f101 0814 	add.w	r8, r1, #20
 800d462:	f100 0514 	add.w	r5, r0, #20
 800d466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d474:	3301      	adds	r3, #1
 800d476:	429a      	cmp	r2, r3
 800d478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d47c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d480:	fbb2 f6f3 	udiv	r6, r2, r3
 800d484:	d331      	bcc.n	800d4ea <quorem+0x9e>
 800d486:	f04f 0e00 	mov.w	lr, #0
 800d48a:	4640      	mov	r0, r8
 800d48c:	46ac      	mov	ip, r5
 800d48e:	46f2      	mov	sl, lr
 800d490:	f850 2b04 	ldr.w	r2, [r0], #4
 800d494:	b293      	uxth	r3, r2
 800d496:	fb06 e303 	mla	r3, r6, r3, lr
 800d49a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800d4a4:	0c12      	lsrs	r2, r2, #16
 800d4a6:	f8dc a000 	ldr.w	sl, [ip]
 800d4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800d4ae:	fa13 f38a 	uxtah	r3, r3, sl
 800d4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4b6:	fa1f fa82 	uxth.w	sl, r2
 800d4ba:	f8dc 2000 	ldr.w	r2, [ip]
 800d4be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d4c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4cc:	4581      	cmp	r9, r0
 800d4ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d4d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d4d6:	d2db      	bcs.n	800d490 <quorem+0x44>
 800d4d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d4dc:	b92b      	cbnz	r3, 800d4ea <quorem+0x9e>
 800d4de:	9b01      	ldr	r3, [sp, #4]
 800d4e0:	3b04      	subs	r3, #4
 800d4e2:	429d      	cmp	r5, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	d32e      	bcc.n	800d546 <quorem+0xfa>
 800d4e8:	613c      	str	r4, [r7, #16]
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	f001 fae0 	bl	800eab0 <__mcmp>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	db24      	blt.n	800d53e <quorem+0xf2>
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f04f 0c00 	mov.w	ip, #0
 800d4fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d500:	f8d0 e000 	ldr.w	lr, [r0]
 800d504:	b293      	uxth	r3, r2
 800d506:	ebac 0303 	sub.w	r3, ip, r3
 800d50a:	0c12      	lsrs	r2, r2, #16
 800d50c:	fa13 f38e 	uxtah	r3, r3, lr
 800d510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d518:	b29b      	uxth	r3, r3
 800d51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d51e:	45c1      	cmp	r9, r8
 800d520:	f840 3b04 	str.w	r3, [r0], #4
 800d524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d528:	d2e8      	bcs.n	800d4fc <quorem+0xb0>
 800d52a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d532:	b922      	cbnz	r2, 800d53e <quorem+0xf2>
 800d534:	3b04      	subs	r3, #4
 800d536:	429d      	cmp	r5, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	d30a      	bcc.n	800d552 <quorem+0x106>
 800d53c:	613c      	str	r4, [r7, #16]
 800d53e:	4630      	mov	r0, r6
 800d540:	b003      	add	sp, #12
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	6812      	ldr	r2, [r2, #0]
 800d548:	3b04      	subs	r3, #4
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	d1cc      	bne.n	800d4e8 <quorem+0x9c>
 800d54e:	3c01      	subs	r4, #1
 800d550:	e7c7      	b.n	800d4e2 <quorem+0x96>
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	3b04      	subs	r3, #4
 800d556:	2a00      	cmp	r2, #0
 800d558:	d1f0      	bne.n	800d53c <quorem+0xf0>
 800d55a:	3c01      	subs	r4, #1
 800d55c:	e7eb      	b.n	800d536 <quorem+0xea>
 800d55e:	2000      	movs	r0, #0
 800d560:	e7ee      	b.n	800d540 <quorem+0xf4>
 800d562:	0000      	movs	r0, r0
 800d564:	0000      	movs	r0, r0
	...

0800d568 <_dtoa_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	ed2d 8b02 	vpush	{d8}
 800d570:	ec57 6b10 	vmov	r6, r7, d0
 800d574:	b095      	sub	sp, #84	; 0x54
 800d576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d57c:	9105      	str	r1, [sp, #20]
 800d57e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d582:	4604      	mov	r4, r0
 800d584:	9209      	str	r2, [sp, #36]	; 0x24
 800d586:	930f      	str	r3, [sp, #60]	; 0x3c
 800d588:	b975      	cbnz	r5, 800d5a8 <_dtoa_r+0x40>
 800d58a:	2010      	movs	r0, #16
 800d58c:	f000 fffc 	bl	800e588 <malloc>
 800d590:	4602      	mov	r2, r0
 800d592:	6260      	str	r0, [r4, #36]	; 0x24
 800d594:	b920      	cbnz	r0, 800d5a0 <_dtoa_r+0x38>
 800d596:	4bb2      	ldr	r3, [pc, #712]	; (800d860 <_dtoa_r+0x2f8>)
 800d598:	21ea      	movs	r1, #234	; 0xea
 800d59a:	48b2      	ldr	r0, [pc, #712]	; (800d864 <_dtoa_r+0x2fc>)
 800d59c:	f001 fe02 	bl	800f1a4 <__assert_func>
 800d5a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5a4:	6005      	str	r5, [r0, #0]
 800d5a6:	60c5      	str	r5, [r0, #12]
 800d5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5aa:	6819      	ldr	r1, [r3, #0]
 800d5ac:	b151      	cbz	r1, 800d5c4 <_dtoa_r+0x5c>
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	604a      	str	r2, [r1, #4]
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	4093      	lsls	r3, r2
 800d5b6:	608b      	str	r3, [r1, #8]
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f001 f83b 	bl	800e634 <_Bfree>
 800d5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	1e3b      	subs	r3, r7, #0
 800d5c6:	bfb9      	ittee	lt
 800d5c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d5cc:	9303      	strlt	r3, [sp, #12]
 800d5ce:	2300      	movge	r3, #0
 800d5d0:	f8c8 3000 	strge.w	r3, [r8]
 800d5d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d5d8:	4ba3      	ldr	r3, [pc, #652]	; (800d868 <_dtoa_r+0x300>)
 800d5da:	bfbc      	itt	lt
 800d5dc:	2201      	movlt	r2, #1
 800d5de:	f8c8 2000 	strlt.w	r2, [r8]
 800d5e2:	ea33 0309 	bics.w	r3, r3, r9
 800d5e6:	d11b      	bne.n	800d620 <_dtoa_r+0xb8>
 800d5e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5f4:	4333      	orrs	r3, r6
 800d5f6:	f000 857a 	beq.w	800e0ee <_dtoa_r+0xb86>
 800d5fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5fc:	b963      	cbnz	r3, 800d618 <_dtoa_r+0xb0>
 800d5fe:	4b9b      	ldr	r3, [pc, #620]	; (800d86c <_dtoa_r+0x304>)
 800d600:	e024      	b.n	800d64c <_dtoa_r+0xe4>
 800d602:	4b9b      	ldr	r3, [pc, #620]	; (800d870 <_dtoa_r+0x308>)
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	3308      	adds	r3, #8
 800d608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d60a:	6013      	str	r3, [r2, #0]
 800d60c:	9800      	ldr	r0, [sp, #0]
 800d60e:	b015      	add	sp, #84	; 0x54
 800d610:	ecbd 8b02 	vpop	{d8}
 800d614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d618:	4b94      	ldr	r3, [pc, #592]	; (800d86c <_dtoa_r+0x304>)
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	3303      	adds	r3, #3
 800d61e:	e7f3      	b.n	800d608 <_dtoa_r+0xa0>
 800d620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d624:	2200      	movs	r2, #0
 800d626:	ec51 0b17 	vmov	r0, r1, d7
 800d62a:	2300      	movs	r3, #0
 800d62c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d630:	f7f3 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d634:	4680      	mov	r8, r0
 800d636:	b158      	cbz	r0, 800d650 <_dtoa_r+0xe8>
 800d638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d63a:	2301      	movs	r3, #1
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 8551 	beq.w	800e0e8 <_dtoa_r+0xb80>
 800d646:	488b      	ldr	r0, [pc, #556]	; (800d874 <_dtoa_r+0x30c>)
 800d648:	6018      	str	r0, [r3, #0]
 800d64a:	1e43      	subs	r3, r0, #1
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	e7dd      	b.n	800d60c <_dtoa_r+0xa4>
 800d650:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d654:	aa12      	add	r2, sp, #72	; 0x48
 800d656:	a913      	add	r1, sp, #76	; 0x4c
 800d658:	4620      	mov	r0, r4
 800d65a:	f001 facd 	bl	800ebf8 <__d2b>
 800d65e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d662:	4683      	mov	fp, r0
 800d664:	2d00      	cmp	r5, #0
 800d666:	d07c      	beq.n	800d762 <_dtoa_r+0x1fa>
 800d668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d66a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d672:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d676:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d682:	4b7d      	ldr	r3, [pc, #500]	; (800d878 <_dtoa_r+0x310>)
 800d684:	2200      	movs	r2, #0
 800d686:	4630      	mov	r0, r6
 800d688:	4639      	mov	r1, r7
 800d68a:	f7f2 fdfd 	bl	8000288 <__aeabi_dsub>
 800d68e:	a36e      	add	r3, pc, #440	; (adr r3, 800d848 <_dtoa_r+0x2e0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 ffb0 	bl	80005f8 <__aeabi_dmul>
 800d698:	a36d      	add	r3, pc, #436	; (adr r3, 800d850 <_dtoa_r+0x2e8>)
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f2 fdf5 	bl	800028c <__adddf3>
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	460f      	mov	r7, r1
 800d6a8:	f7f2 ff3c 	bl	8000524 <__aeabi_i2d>
 800d6ac:	a36a      	add	r3, pc, #424	; (adr r3, 800d858 <_dtoa_r+0x2f0>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 ffa1 	bl	80005f8 <__aeabi_dmul>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	4639      	mov	r1, r7
 800d6be:	f7f2 fde5 	bl	800028c <__adddf3>
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460f      	mov	r7, r1
 800d6c6:	f7f3 fa47 	bl	8000b58 <__aeabi_d2iz>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f3 fa02 	bl	8000adc <__aeabi_dcmplt>
 800d6d8:	b148      	cbz	r0, 800d6ee <_dtoa_r+0x186>
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f7f2 ff22 	bl	8000524 <__aeabi_i2d>
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	f7f3 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6e8:	b908      	cbnz	r0, 800d6ee <_dtoa_r+0x186>
 800d6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6ee:	f1ba 0f16 	cmp.w	sl, #22
 800d6f2:	d854      	bhi.n	800d79e <_dtoa_r+0x236>
 800d6f4:	4b61      	ldr	r3, [pc, #388]	; (800d87c <_dtoa_r+0x314>)
 800d6f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d702:	f7f3 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800d706:	2800      	cmp	r0, #0
 800d708:	d04b      	beq.n	800d7a2 <_dtoa_r+0x23a>
 800d70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d70e:	2300      	movs	r3, #0
 800d710:	930e      	str	r3, [sp, #56]	; 0x38
 800d712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d714:	1b5d      	subs	r5, r3, r5
 800d716:	1e6b      	subs	r3, r5, #1
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	bf43      	ittte	mi
 800d71c:	2300      	movmi	r3, #0
 800d71e:	f1c5 0801 	rsbmi	r8, r5, #1
 800d722:	9304      	strmi	r3, [sp, #16]
 800d724:	f04f 0800 	movpl.w	r8, #0
 800d728:	f1ba 0f00 	cmp.w	sl, #0
 800d72c:	db3b      	blt.n	800d7a6 <_dtoa_r+0x23e>
 800d72e:	9b04      	ldr	r3, [sp, #16]
 800d730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d734:	4453      	add	r3, sl
 800d736:	9304      	str	r3, [sp, #16]
 800d738:	2300      	movs	r3, #0
 800d73a:	9306      	str	r3, [sp, #24]
 800d73c:	9b05      	ldr	r3, [sp, #20]
 800d73e:	2b09      	cmp	r3, #9
 800d740:	d869      	bhi.n	800d816 <_dtoa_r+0x2ae>
 800d742:	2b05      	cmp	r3, #5
 800d744:	bfc4      	itt	gt
 800d746:	3b04      	subgt	r3, #4
 800d748:	9305      	strgt	r3, [sp, #20]
 800d74a:	9b05      	ldr	r3, [sp, #20]
 800d74c:	f1a3 0302 	sub.w	r3, r3, #2
 800d750:	bfcc      	ite	gt
 800d752:	2500      	movgt	r5, #0
 800d754:	2501      	movle	r5, #1
 800d756:	2b03      	cmp	r3, #3
 800d758:	d869      	bhi.n	800d82e <_dtoa_r+0x2c6>
 800d75a:	e8df f003 	tbb	[pc, r3]
 800d75e:	4e2c      	.short	0x4e2c
 800d760:	5a4c      	.short	0x5a4c
 800d762:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d766:	441d      	add	r5, r3
 800d768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d76c:	2b20      	cmp	r3, #32
 800d76e:	bfc1      	itttt	gt
 800d770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d774:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d778:	fa09 f303 	lslgt.w	r3, r9, r3
 800d77c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d780:	bfda      	itte	le
 800d782:	f1c3 0320 	rsble	r3, r3, #32
 800d786:	fa06 f003 	lslle.w	r0, r6, r3
 800d78a:	4318      	orrgt	r0, r3
 800d78c:	f7f2 feba 	bl	8000504 <__aeabi_ui2d>
 800d790:	2301      	movs	r3, #1
 800d792:	4606      	mov	r6, r0
 800d794:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d798:	3d01      	subs	r5, #1
 800d79a:	9310      	str	r3, [sp, #64]	; 0x40
 800d79c:	e771      	b.n	800d682 <_dtoa_r+0x11a>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e7b6      	b.n	800d710 <_dtoa_r+0x1a8>
 800d7a2:	900e      	str	r0, [sp, #56]	; 0x38
 800d7a4:	e7b5      	b.n	800d712 <_dtoa_r+0x1aa>
 800d7a6:	f1ca 0300 	rsb	r3, sl, #0
 800d7aa:	9306      	str	r3, [sp, #24]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	eba8 080a 	sub.w	r8, r8, sl
 800d7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d7b4:	e7c2      	b.n	800d73c <_dtoa_r+0x1d4>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9308      	str	r3, [sp, #32]
 800d7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dc39      	bgt.n	800d834 <_dtoa_r+0x2cc>
 800d7c0:	f04f 0901 	mov.w	r9, #1
 800d7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7c8:	464b      	mov	r3, r9
 800d7ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d7ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	6042      	str	r2, [r0, #4]
 800d7d4:	2204      	movs	r2, #4
 800d7d6:	f102 0614 	add.w	r6, r2, #20
 800d7da:	429e      	cmp	r6, r3
 800d7dc:	6841      	ldr	r1, [r0, #4]
 800d7de:	d92f      	bls.n	800d840 <_dtoa_r+0x2d8>
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 fee7 	bl	800e5b4 <_Balloc>
 800d7e6:	9000      	str	r0, [sp, #0]
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d14b      	bne.n	800d884 <_dtoa_r+0x31c>
 800d7ec:	4b24      	ldr	r3, [pc, #144]	; (800d880 <_dtoa_r+0x318>)
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7f4:	e6d1      	b.n	800d59a <_dtoa_r+0x32>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e7de      	b.n	800d7b8 <_dtoa_r+0x250>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9308      	str	r3, [sp, #32]
 800d7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d800:	eb0a 0903 	add.w	r9, sl, r3
 800d804:	f109 0301 	add.w	r3, r9, #1
 800d808:	2b01      	cmp	r3, #1
 800d80a:	9301      	str	r3, [sp, #4]
 800d80c:	bfb8      	it	lt
 800d80e:	2301      	movlt	r3, #1
 800d810:	e7dd      	b.n	800d7ce <_dtoa_r+0x266>
 800d812:	2301      	movs	r3, #1
 800d814:	e7f2      	b.n	800d7fc <_dtoa_r+0x294>
 800d816:	2501      	movs	r5, #1
 800d818:	2300      	movs	r3, #0
 800d81a:	9305      	str	r3, [sp, #20]
 800d81c:	9508      	str	r5, [sp, #32]
 800d81e:	f04f 39ff 	mov.w	r9, #4294967295
 800d822:	2200      	movs	r2, #0
 800d824:	f8cd 9004 	str.w	r9, [sp, #4]
 800d828:	2312      	movs	r3, #18
 800d82a:	9209      	str	r2, [sp, #36]	; 0x24
 800d82c:	e7cf      	b.n	800d7ce <_dtoa_r+0x266>
 800d82e:	2301      	movs	r3, #1
 800d830:	9308      	str	r3, [sp, #32]
 800d832:	e7f4      	b.n	800d81e <_dtoa_r+0x2b6>
 800d834:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d838:	f8cd 9004 	str.w	r9, [sp, #4]
 800d83c:	464b      	mov	r3, r9
 800d83e:	e7c6      	b.n	800d7ce <_dtoa_r+0x266>
 800d840:	3101      	adds	r1, #1
 800d842:	6041      	str	r1, [r0, #4]
 800d844:	0052      	lsls	r2, r2, #1
 800d846:	e7c6      	b.n	800d7d6 <_dtoa_r+0x26e>
 800d848:	636f4361 	.word	0x636f4361
 800d84c:	3fd287a7 	.word	0x3fd287a7
 800d850:	8b60c8b3 	.word	0x8b60c8b3
 800d854:	3fc68a28 	.word	0x3fc68a28
 800d858:	509f79fb 	.word	0x509f79fb
 800d85c:	3fd34413 	.word	0x3fd34413
 800d860:	08010581 	.word	0x08010581
 800d864:	08010598 	.word	0x08010598
 800d868:	7ff00000 	.word	0x7ff00000
 800d86c:	0801057d 	.word	0x0801057d
 800d870:	08010574 	.word	0x08010574
 800d874:	08010551 	.word	0x08010551
 800d878:	3ff80000 	.word	0x3ff80000
 800d87c:	080106f0 	.word	0x080106f0
 800d880:	080105f7 	.word	0x080105f7
 800d884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d886:	9a00      	ldr	r2, [sp, #0]
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	9b01      	ldr	r3, [sp, #4]
 800d88c:	2b0e      	cmp	r3, #14
 800d88e:	f200 80ad 	bhi.w	800d9ec <_dtoa_r+0x484>
 800d892:	2d00      	cmp	r5, #0
 800d894:	f000 80aa 	beq.w	800d9ec <_dtoa_r+0x484>
 800d898:	f1ba 0f00 	cmp.w	sl, #0
 800d89c:	dd36      	ble.n	800d90c <_dtoa_r+0x3a4>
 800d89e:	4ac3      	ldr	r2, [pc, #780]	; (800dbac <_dtoa_r+0x644>)
 800d8a0:	f00a 030f 	and.w	r3, sl, #15
 800d8a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8a8:	ed93 7b00 	vldr	d7, [r3]
 800d8ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d8b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d8b4:	eeb0 8a47 	vmov.f32	s16, s14
 800d8b8:	eef0 8a67 	vmov.f32	s17, s15
 800d8bc:	d016      	beq.n	800d8ec <_dtoa_r+0x384>
 800d8be:	4bbc      	ldr	r3, [pc, #752]	; (800dbb0 <_dtoa_r+0x648>)
 800d8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d8c8:	f7f2 ffc0 	bl	800084c <__aeabi_ddiv>
 800d8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d0:	f007 070f 	and.w	r7, r7, #15
 800d8d4:	2503      	movs	r5, #3
 800d8d6:	4eb6      	ldr	r6, [pc, #728]	; (800dbb0 <_dtoa_r+0x648>)
 800d8d8:	b957      	cbnz	r7, 800d8f0 <_dtoa_r+0x388>
 800d8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8de:	ec53 2b18 	vmov	r2, r3, d8
 800d8e2:	f7f2 ffb3 	bl	800084c <__aeabi_ddiv>
 800d8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ea:	e029      	b.n	800d940 <_dtoa_r+0x3d8>
 800d8ec:	2502      	movs	r5, #2
 800d8ee:	e7f2      	b.n	800d8d6 <_dtoa_r+0x36e>
 800d8f0:	07f9      	lsls	r1, r7, #31
 800d8f2:	d508      	bpl.n	800d906 <_dtoa_r+0x39e>
 800d8f4:	ec51 0b18 	vmov	r0, r1, d8
 800d8f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8fc:	f7f2 fe7c 	bl	80005f8 <__aeabi_dmul>
 800d900:	ec41 0b18 	vmov	d8, r0, r1
 800d904:	3501      	adds	r5, #1
 800d906:	107f      	asrs	r7, r7, #1
 800d908:	3608      	adds	r6, #8
 800d90a:	e7e5      	b.n	800d8d8 <_dtoa_r+0x370>
 800d90c:	f000 80a6 	beq.w	800da5c <_dtoa_r+0x4f4>
 800d910:	f1ca 0600 	rsb	r6, sl, #0
 800d914:	4ba5      	ldr	r3, [pc, #660]	; (800dbac <_dtoa_r+0x644>)
 800d916:	4fa6      	ldr	r7, [pc, #664]	; (800dbb0 <_dtoa_r+0x648>)
 800d918:	f006 020f 	and.w	r2, r6, #15
 800d91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d928:	f7f2 fe66 	bl	80005f8 <__aeabi_dmul>
 800d92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d930:	1136      	asrs	r6, r6, #4
 800d932:	2300      	movs	r3, #0
 800d934:	2502      	movs	r5, #2
 800d936:	2e00      	cmp	r6, #0
 800d938:	f040 8085 	bne.w	800da46 <_dtoa_r+0x4de>
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1d2      	bne.n	800d8e6 <_dtoa_r+0x37e>
 800d940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d942:	2b00      	cmp	r3, #0
 800d944:	f000 808c 	beq.w	800da60 <_dtoa_r+0x4f8>
 800d948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d94c:	4b99      	ldr	r3, [pc, #612]	; (800dbb4 <_dtoa_r+0x64c>)
 800d94e:	2200      	movs	r2, #0
 800d950:	4630      	mov	r0, r6
 800d952:	4639      	mov	r1, r7
 800d954:	f7f3 f8c2 	bl	8000adc <__aeabi_dcmplt>
 800d958:	2800      	cmp	r0, #0
 800d95a:	f000 8081 	beq.w	800da60 <_dtoa_r+0x4f8>
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d07d      	beq.n	800da60 <_dtoa_r+0x4f8>
 800d964:	f1b9 0f00 	cmp.w	r9, #0
 800d968:	dd3c      	ble.n	800d9e4 <_dtoa_r+0x47c>
 800d96a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d96e:	9307      	str	r3, [sp, #28]
 800d970:	2200      	movs	r2, #0
 800d972:	4b91      	ldr	r3, [pc, #580]	; (800dbb8 <_dtoa_r+0x650>)
 800d974:	4630      	mov	r0, r6
 800d976:	4639      	mov	r1, r7
 800d978:	f7f2 fe3e 	bl	80005f8 <__aeabi_dmul>
 800d97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d980:	3501      	adds	r5, #1
 800d982:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d98a:	4628      	mov	r0, r5
 800d98c:	f7f2 fdca 	bl	8000524 <__aeabi_i2d>
 800d990:	4632      	mov	r2, r6
 800d992:	463b      	mov	r3, r7
 800d994:	f7f2 fe30 	bl	80005f8 <__aeabi_dmul>
 800d998:	4b88      	ldr	r3, [pc, #544]	; (800dbbc <_dtoa_r+0x654>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	f7f2 fc76 	bl	800028c <__adddf3>
 800d9a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d15c      	bne.n	800da6a <_dtoa_r+0x502>
 800d9b0:	4b83      	ldr	r3, [pc, #524]	; (800dbc0 <_dtoa_r+0x658>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	4639      	mov	r1, r7
 800d9b8:	f7f2 fc66 	bl	8000288 <__aeabi_dsub>
 800d9bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	460f      	mov	r7, r1
 800d9c4:	f7f3 f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f040 8296 	bne.w	800defa <_dtoa_r+0x992>
 800d9ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f3 f87f 	bl	8000adc <__aeabi_dcmplt>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	f040 8288 	bne.w	800def4 <_dtoa_r+0x98c>
 800d9e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f2c0 8158 	blt.w	800dca4 <_dtoa_r+0x73c>
 800d9f4:	f1ba 0f0e 	cmp.w	sl, #14
 800d9f8:	f300 8154 	bgt.w	800dca4 <_dtoa_r+0x73c>
 800d9fc:	4b6b      	ldr	r3, [pc, #428]	; (800dbac <_dtoa_r+0x644>)
 800d9fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f280 80e3 	bge.w	800dbd4 <_dtoa_r+0x66c>
 800da0e:	9b01      	ldr	r3, [sp, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	f300 80df 	bgt.w	800dbd4 <_dtoa_r+0x66c>
 800da16:	f040 826d 	bne.w	800def4 <_dtoa_r+0x98c>
 800da1a:	4b69      	ldr	r3, [pc, #420]	; (800dbc0 <_dtoa_r+0x658>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	4640      	mov	r0, r8
 800da20:	4649      	mov	r1, r9
 800da22:	f7f2 fde9 	bl	80005f8 <__aeabi_dmul>
 800da26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da2a:	f7f3 f86b 	bl	8000b04 <__aeabi_dcmpge>
 800da2e:	9e01      	ldr	r6, [sp, #4]
 800da30:	4637      	mov	r7, r6
 800da32:	2800      	cmp	r0, #0
 800da34:	f040 8243 	bne.w	800debe <_dtoa_r+0x956>
 800da38:	9d00      	ldr	r5, [sp, #0]
 800da3a:	2331      	movs	r3, #49	; 0x31
 800da3c:	f805 3b01 	strb.w	r3, [r5], #1
 800da40:	f10a 0a01 	add.w	sl, sl, #1
 800da44:	e23f      	b.n	800dec6 <_dtoa_r+0x95e>
 800da46:	07f2      	lsls	r2, r6, #31
 800da48:	d505      	bpl.n	800da56 <_dtoa_r+0x4ee>
 800da4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da4e:	f7f2 fdd3 	bl	80005f8 <__aeabi_dmul>
 800da52:	3501      	adds	r5, #1
 800da54:	2301      	movs	r3, #1
 800da56:	1076      	asrs	r6, r6, #1
 800da58:	3708      	adds	r7, #8
 800da5a:	e76c      	b.n	800d936 <_dtoa_r+0x3ce>
 800da5c:	2502      	movs	r5, #2
 800da5e:	e76f      	b.n	800d940 <_dtoa_r+0x3d8>
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	f8cd a01c 	str.w	sl, [sp, #28]
 800da66:	930c      	str	r3, [sp, #48]	; 0x30
 800da68:	e78d      	b.n	800d986 <_dtoa_r+0x41e>
 800da6a:	9900      	ldr	r1, [sp, #0]
 800da6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800da6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da70:	4b4e      	ldr	r3, [pc, #312]	; (800dbac <_dtoa_r+0x644>)
 800da72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da76:	4401      	add	r1, r0
 800da78:	9102      	str	r1, [sp, #8]
 800da7a:	9908      	ldr	r1, [sp, #32]
 800da7c:	eeb0 8a47 	vmov.f32	s16, s14
 800da80:	eef0 8a67 	vmov.f32	s17, s15
 800da84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da8c:	2900      	cmp	r1, #0
 800da8e:	d045      	beq.n	800db1c <_dtoa_r+0x5b4>
 800da90:	494c      	ldr	r1, [pc, #304]	; (800dbc4 <_dtoa_r+0x65c>)
 800da92:	2000      	movs	r0, #0
 800da94:	f7f2 feda 	bl	800084c <__aeabi_ddiv>
 800da98:	ec53 2b18 	vmov	r2, r3, d8
 800da9c:	f7f2 fbf4 	bl	8000288 <__aeabi_dsub>
 800daa0:	9d00      	ldr	r5, [sp, #0]
 800daa2:	ec41 0b18 	vmov	d8, r0, r1
 800daa6:	4639      	mov	r1, r7
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7f3 f855 	bl	8000b58 <__aeabi_d2iz>
 800daae:	900c      	str	r0, [sp, #48]	; 0x30
 800dab0:	f7f2 fd38 	bl	8000524 <__aeabi_i2d>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f2 fbe4 	bl	8000288 <__aeabi_dsub>
 800dac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dac2:	3330      	adds	r3, #48	; 0x30
 800dac4:	f805 3b01 	strb.w	r3, [r5], #1
 800dac8:	ec53 2b18 	vmov	r2, r3, d8
 800dacc:	4606      	mov	r6, r0
 800dace:	460f      	mov	r7, r1
 800dad0:	f7f3 f804 	bl	8000adc <__aeabi_dcmplt>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d165      	bne.n	800dba4 <_dtoa_r+0x63c>
 800dad8:	4632      	mov	r2, r6
 800dada:	463b      	mov	r3, r7
 800dadc:	4935      	ldr	r1, [pc, #212]	; (800dbb4 <_dtoa_r+0x64c>)
 800dade:	2000      	movs	r0, #0
 800dae0:	f7f2 fbd2 	bl	8000288 <__aeabi_dsub>
 800dae4:	ec53 2b18 	vmov	r2, r3, d8
 800dae8:	f7f2 fff8 	bl	8000adc <__aeabi_dcmplt>
 800daec:	2800      	cmp	r0, #0
 800daee:	f040 80b9 	bne.w	800dc64 <_dtoa_r+0x6fc>
 800daf2:	9b02      	ldr	r3, [sp, #8]
 800daf4:	429d      	cmp	r5, r3
 800daf6:	f43f af75 	beq.w	800d9e4 <_dtoa_r+0x47c>
 800dafa:	4b2f      	ldr	r3, [pc, #188]	; (800dbb8 <_dtoa_r+0x650>)
 800dafc:	ec51 0b18 	vmov	r0, r1, d8
 800db00:	2200      	movs	r2, #0
 800db02:	f7f2 fd79 	bl	80005f8 <__aeabi_dmul>
 800db06:	4b2c      	ldr	r3, [pc, #176]	; (800dbb8 <_dtoa_r+0x650>)
 800db08:	ec41 0b18 	vmov	d8, r0, r1
 800db0c:	2200      	movs	r2, #0
 800db0e:	4630      	mov	r0, r6
 800db10:	4639      	mov	r1, r7
 800db12:	f7f2 fd71 	bl	80005f8 <__aeabi_dmul>
 800db16:	4606      	mov	r6, r0
 800db18:	460f      	mov	r7, r1
 800db1a:	e7c4      	b.n	800daa6 <_dtoa_r+0x53e>
 800db1c:	ec51 0b17 	vmov	r0, r1, d7
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	9b02      	ldr	r3, [sp, #8]
 800db26:	9d00      	ldr	r5, [sp, #0]
 800db28:	930c      	str	r3, [sp, #48]	; 0x30
 800db2a:	ec41 0b18 	vmov	d8, r0, r1
 800db2e:	4639      	mov	r1, r7
 800db30:	4630      	mov	r0, r6
 800db32:	f7f3 f811 	bl	8000b58 <__aeabi_d2iz>
 800db36:	9011      	str	r0, [sp, #68]	; 0x44
 800db38:	f7f2 fcf4 	bl	8000524 <__aeabi_i2d>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fba0 	bl	8000288 <__aeabi_dsub>
 800db48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db4a:	3330      	adds	r3, #48	; 0x30
 800db4c:	f805 3b01 	strb.w	r3, [r5], #1
 800db50:	9b02      	ldr	r3, [sp, #8]
 800db52:	429d      	cmp	r5, r3
 800db54:	4606      	mov	r6, r0
 800db56:	460f      	mov	r7, r1
 800db58:	f04f 0200 	mov.w	r2, #0
 800db5c:	d134      	bne.n	800dbc8 <_dtoa_r+0x660>
 800db5e:	4b19      	ldr	r3, [pc, #100]	; (800dbc4 <_dtoa_r+0x65c>)
 800db60:	ec51 0b18 	vmov	r0, r1, d8
 800db64:	f7f2 fb92 	bl	800028c <__adddf3>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f7f2 ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 800db74:	2800      	cmp	r0, #0
 800db76:	d175      	bne.n	800dc64 <_dtoa_r+0x6fc>
 800db78:	ec53 2b18 	vmov	r2, r3, d8
 800db7c:	4911      	ldr	r1, [pc, #68]	; (800dbc4 <_dtoa_r+0x65c>)
 800db7e:	2000      	movs	r0, #0
 800db80:	f7f2 fb82 	bl	8000288 <__aeabi_dsub>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4630      	mov	r0, r6
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 ffa6 	bl	8000adc <__aeabi_dcmplt>
 800db90:	2800      	cmp	r0, #0
 800db92:	f43f af27 	beq.w	800d9e4 <_dtoa_r+0x47c>
 800db96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db98:	1e6b      	subs	r3, r5, #1
 800db9a:	930c      	str	r3, [sp, #48]	; 0x30
 800db9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dba0:	2b30      	cmp	r3, #48	; 0x30
 800dba2:	d0f8      	beq.n	800db96 <_dtoa_r+0x62e>
 800dba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dba8:	e04a      	b.n	800dc40 <_dtoa_r+0x6d8>
 800dbaa:	bf00      	nop
 800dbac:	080106f0 	.word	0x080106f0
 800dbb0:	080106c8 	.word	0x080106c8
 800dbb4:	3ff00000 	.word	0x3ff00000
 800dbb8:	40240000 	.word	0x40240000
 800dbbc:	401c0000 	.word	0x401c0000
 800dbc0:	40140000 	.word	0x40140000
 800dbc4:	3fe00000 	.word	0x3fe00000
 800dbc8:	4baf      	ldr	r3, [pc, #700]	; (800de88 <_dtoa_r+0x920>)
 800dbca:	f7f2 fd15 	bl	80005f8 <__aeabi_dmul>
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	e7ac      	b.n	800db2e <_dtoa_r+0x5c6>
 800dbd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbd8:	9d00      	ldr	r5, [sp, #0]
 800dbda:	4642      	mov	r2, r8
 800dbdc:	464b      	mov	r3, r9
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 fe33 	bl	800084c <__aeabi_ddiv>
 800dbe6:	f7f2 ffb7 	bl	8000b58 <__aeabi_d2iz>
 800dbea:	9002      	str	r0, [sp, #8]
 800dbec:	f7f2 fc9a 	bl	8000524 <__aeabi_i2d>
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	464b      	mov	r3, r9
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	4639      	mov	r1, r7
 800dc00:	f7f2 fb42 	bl	8000288 <__aeabi_dsub>
 800dc04:	9e02      	ldr	r6, [sp, #8]
 800dc06:	9f01      	ldr	r7, [sp, #4]
 800dc08:	3630      	adds	r6, #48	; 0x30
 800dc0a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc0e:	9e00      	ldr	r6, [sp, #0]
 800dc10:	1bae      	subs	r6, r5, r6
 800dc12:	42b7      	cmp	r7, r6
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	d137      	bne.n	800dc8a <_dtoa_r+0x722>
 800dc1a:	f7f2 fb37 	bl	800028c <__adddf3>
 800dc1e:	4642      	mov	r2, r8
 800dc20:	464b      	mov	r3, r9
 800dc22:	4606      	mov	r6, r0
 800dc24:	460f      	mov	r7, r1
 800dc26:	f7f2 ff77 	bl	8000b18 <__aeabi_dcmpgt>
 800dc2a:	b9c8      	cbnz	r0, 800dc60 <_dtoa_r+0x6f8>
 800dc2c:	4642      	mov	r2, r8
 800dc2e:	464b      	mov	r3, r9
 800dc30:	4630      	mov	r0, r6
 800dc32:	4639      	mov	r1, r7
 800dc34:	f7f2 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc38:	b110      	cbz	r0, 800dc40 <_dtoa_r+0x6d8>
 800dc3a:	9b02      	ldr	r3, [sp, #8]
 800dc3c:	07d9      	lsls	r1, r3, #31
 800dc3e:	d40f      	bmi.n	800dc60 <_dtoa_r+0x6f8>
 800dc40:	4620      	mov	r0, r4
 800dc42:	4659      	mov	r1, fp
 800dc44:	f000 fcf6 	bl	800e634 <_Bfree>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	702b      	strb	r3, [r5, #0]
 800dc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc4e:	f10a 0001 	add.w	r0, sl, #1
 800dc52:	6018      	str	r0, [r3, #0]
 800dc54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f43f acd8 	beq.w	800d60c <_dtoa_r+0xa4>
 800dc5c:	601d      	str	r5, [r3, #0]
 800dc5e:	e4d5      	b.n	800d60c <_dtoa_r+0xa4>
 800dc60:	f8cd a01c 	str.w	sl, [sp, #28]
 800dc64:	462b      	mov	r3, r5
 800dc66:	461d      	mov	r5, r3
 800dc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc6c:	2a39      	cmp	r2, #57	; 0x39
 800dc6e:	d108      	bne.n	800dc82 <_dtoa_r+0x71a>
 800dc70:	9a00      	ldr	r2, [sp, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d1f7      	bne.n	800dc66 <_dtoa_r+0x6fe>
 800dc76:	9a07      	ldr	r2, [sp, #28]
 800dc78:	9900      	ldr	r1, [sp, #0]
 800dc7a:	3201      	adds	r2, #1
 800dc7c:	9207      	str	r2, [sp, #28]
 800dc7e:	2230      	movs	r2, #48	; 0x30
 800dc80:	700a      	strb	r2, [r1, #0]
 800dc82:	781a      	ldrb	r2, [r3, #0]
 800dc84:	3201      	adds	r2, #1
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	e78c      	b.n	800dba4 <_dtoa_r+0x63c>
 800dc8a:	4b7f      	ldr	r3, [pc, #508]	; (800de88 <_dtoa_r+0x920>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f7f2 fcb3 	bl	80005f8 <__aeabi_dmul>
 800dc92:	2200      	movs	r2, #0
 800dc94:	2300      	movs	r3, #0
 800dc96:	4606      	mov	r6, r0
 800dc98:	460f      	mov	r7, r1
 800dc9a:	f7f2 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d09b      	beq.n	800dbda <_dtoa_r+0x672>
 800dca2:	e7cd      	b.n	800dc40 <_dtoa_r+0x6d8>
 800dca4:	9a08      	ldr	r2, [sp, #32]
 800dca6:	2a00      	cmp	r2, #0
 800dca8:	f000 80c4 	beq.w	800de34 <_dtoa_r+0x8cc>
 800dcac:	9a05      	ldr	r2, [sp, #20]
 800dcae:	2a01      	cmp	r2, #1
 800dcb0:	f300 80a8 	bgt.w	800de04 <_dtoa_r+0x89c>
 800dcb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dcb6:	2a00      	cmp	r2, #0
 800dcb8:	f000 80a0 	beq.w	800ddfc <_dtoa_r+0x894>
 800dcbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcc0:	9e06      	ldr	r6, [sp, #24]
 800dcc2:	4645      	mov	r5, r8
 800dcc4:	9a04      	ldr	r2, [sp, #16]
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	441a      	add	r2, r3
 800dcca:	4620      	mov	r0, r4
 800dccc:	4498      	add	r8, r3
 800dcce:	9204      	str	r2, [sp, #16]
 800dcd0:	f000 fd6c 	bl	800e7ac <__i2b>
 800dcd4:	4607      	mov	r7, r0
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	dd0b      	ble.n	800dcf2 <_dtoa_r+0x78a>
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dd08      	ble.n	800dcf2 <_dtoa_r+0x78a>
 800dce0:	42ab      	cmp	r3, r5
 800dce2:	9a04      	ldr	r2, [sp, #16]
 800dce4:	bfa8      	it	ge
 800dce6:	462b      	movge	r3, r5
 800dce8:	eba8 0803 	sub.w	r8, r8, r3
 800dcec:	1aed      	subs	r5, r5, r3
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	9b06      	ldr	r3, [sp, #24]
 800dcf4:	b1fb      	cbz	r3, 800dd36 <_dtoa_r+0x7ce>
 800dcf6:	9b08      	ldr	r3, [sp, #32]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 809f 	beq.w	800de3c <_dtoa_r+0x8d4>
 800dcfe:	2e00      	cmp	r6, #0
 800dd00:	dd11      	ble.n	800dd26 <_dtoa_r+0x7be>
 800dd02:	4639      	mov	r1, r7
 800dd04:	4632      	mov	r2, r6
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 fe0c 	bl	800e924 <__pow5mult>
 800dd0c:	465a      	mov	r2, fp
 800dd0e:	4601      	mov	r1, r0
 800dd10:	4607      	mov	r7, r0
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 fd60 	bl	800e7d8 <__multiply>
 800dd18:	4659      	mov	r1, fp
 800dd1a:	9007      	str	r0, [sp, #28]
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 fc89 	bl	800e634 <_Bfree>
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	469b      	mov	fp, r3
 800dd26:	9b06      	ldr	r3, [sp, #24]
 800dd28:	1b9a      	subs	r2, r3, r6
 800dd2a:	d004      	beq.n	800dd36 <_dtoa_r+0x7ce>
 800dd2c:	4659      	mov	r1, fp
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f000 fdf8 	bl	800e924 <__pow5mult>
 800dd34:	4683      	mov	fp, r0
 800dd36:	2101      	movs	r1, #1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fd37 	bl	800e7ac <__i2b>
 800dd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	4606      	mov	r6, r0
 800dd44:	dd7c      	ble.n	800de40 <_dtoa_r+0x8d8>
 800dd46:	461a      	mov	r2, r3
 800dd48:	4601      	mov	r1, r0
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 fdea 	bl	800e924 <__pow5mult>
 800dd50:	9b05      	ldr	r3, [sp, #20]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	4606      	mov	r6, r0
 800dd56:	dd76      	ble.n	800de46 <_dtoa_r+0x8de>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9306      	str	r3, [sp, #24]
 800dd5c:	6933      	ldr	r3, [r6, #16]
 800dd5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd62:	6918      	ldr	r0, [r3, #16]
 800dd64:	f000 fcd2 	bl	800e70c <__hi0bits>
 800dd68:	f1c0 0020 	rsb	r0, r0, #32
 800dd6c:	9b04      	ldr	r3, [sp, #16]
 800dd6e:	4418      	add	r0, r3
 800dd70:	f010 001f 	ands.w	r0, r0, #31
 800dd74:	f000 8086 	beq.w	800de84 <_dtoa_r+0x91c>
 800dd78:	f1c0 0320 	rsb	r3, r0, #32
 800dd7c:	2b04      	cmp	r3, #4
 800dd7e:	dd7f      	ble.n	800de80 <_dtoa_r+0x918>
 800dd80:	f1c0 001c 	rsb	r0, r0, #28
 800dd84:	9b04      	ldr	r3, [sp, #16]
 800dd86:	4403      	add	r3, r0
 800dd88:	4480      	add	r8, r0
 800dd8a:	4405      	add	r5, r0
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	f1b8 0f00 	cmp.w	r8, #0
 800dd92:	dd05      	ble.n	800dda0 <_dtoa_r+0x838>
 800dd94:	4659      	mov	r1, fp
 800dd96:	4642      	mov	r2, r8
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 fe1d 	bl	800e9d8 <__lshift>
 800dd9e:	4683      	mov	fp, r0
 800dda0:	9b04      	ldr	r3, [sp, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	dd05      	ble.n	800ddb2 <_dtoa_r+0x84a>
 800dda6:	4631      	mov	r1, r6
 800dda8:	461a      	mov	r2, r3
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 fe14 	bl	800e9d8 <__lshift>
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d069      	beq.n	800de8c <_dtoa_r+0x924>
 800ddb8:	4631      	mov	r1, r6
 800ddba:	4658      	mov	r0, fp
 800ddbc:	f000 fe78 	bl	800eab0 <__mcmp>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	da63      	bge.n	800de8c <_dtoa_r+0x924>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4659      	mov	r1, fp
 800ddc8:	220a      	movs	r2, #10
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fc54 	bl	800e678 <__multadd>
 800ddd0:	9b08      	ldr	r3, [sp, #32]
 800ddd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddd6:	4683      	mov	fp, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f000 818f 	beq.w	800e0fc <_dtoa_r+0xb94>
 800ddde:	4639      	mov	r1, r7
 800dde0:	2300      	movs	r3, #0
 800dde2:	220a      	movs	r2, #10
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 fc47 	bl	800e678 <__multadd>
 800ddea:	f1b9 0f00 	cmp.w	r9, #0
 800ddee:	4607      	mov	r7, r0
 800ddf0:	f300 808e 	bgt.w	800df10 <_dtoa_r+0x9a8>
 800ddf4:	9b05      	ldr	r3, [sp, #20]
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	dc50      	bgt.n	800de9c <_dtoa_r+0x934>
 800ddfa:	e089      	b.n	800df10 <_dtoa_r+0x9a8>
 800ddfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de02:	e75d      	b.n	800dcc0 <_dtoa_r+0x758>
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	1e5e      	subs	r6, r3, #1
 800de08:	9b06      	ldr	r3, [sp, #24]
 800de0a:	42b3      	cmp	r3, r6
 800de0c:	bfbf      	itttt	lt
 800de0e:	9b06      	ldrlt	r3, [sp, #24]
 800de10:	9606      	strlt	r6, [sp, #24]
 800de12:	1af2      	sublt	r2, r6, r3
 800de14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800de16:	bfb6      	itet	lt
 800de18:	189b      	addlt	r3, r3, r2
 800de1a:	1b9e      	subge	r6, r3, r6
 800de1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	bfb8      	it	lt
 800de22:	2600      	movlt	r6, #0
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfb5      	itete	lt
 800de28:	eba8 0503 	sublt.w	r5, r8, r3
 800de2c:	9b01      	ldrge	r3, [sp, #4]
 800de2e:	2300      	movlt	r3, #0
 800de30:	4645      	movge	r5, r8
 800de32:	e747      	b.n	800dcc4 <_dtoa_r+0x75c>
 800de34:	9e06      	ldr	r6, [sp, #24]
 800de36:	9f08      	ldr	r7, [sp, #32]
 800de38:	4645      	mov	r5, r8
 800de3a:	e74c      	b.n	800dcd6 <_dtoa_r+0x76e>
 800de3c:	9a06      	ldr	r2, [sp, #24]
 800de3e:	e775      	b.n	800dd2c <_dtoa_r+0x7c4>
 800de40:	9b05      	ldr	r3, [sp, #20]
 800de42:	2b01      	cmp	r3, #1
 800de44:	dc18      	bgt.n	800de78 <_dtoa_r+0x910>
 800de46:	9b02      	ldr	r3, [sp, #8]
 800de48:	b9b3      	cbnz	r3, 800de78 <_dtoa_r+0x910>
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de50:	b9a3      	cbnz	r3, 800de7c <_dtoa_r+0x914>
 800de52:	9b03      	ldr	r3, [sp, #12]
 800de54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de58:	0d1b      	lsrs	r3, r3, #20
 800de5a:	051b      	lsls	r3, r3, #20
 800de5c:	b12b      	cbz	r3, 800de6a <_dtoa_r+0x902>
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	3301      	adds	r3, #1
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	f108 0801 	add.w	r8, r8, #1
 800de68:	2301      	movs	r3, #1
 800de6a:	9306      	str	r3, [sp, #24]
 800de6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f47f af74 	bne.w	800dd5c <_dtoa_r+0x7f4>
 800de74:	2001      	movs	r0, #1
 800de76:	e779      	b.n	800dd6c <_dtoa_r+0x804>
 800de78:	2300      	movs	r3, #0
 800de7a:	e7f6      	b.n	800de6a <_dtoa_r+0x902>
 800de7c:	9b02      	ldr	r3, [sp, #8]
 800de7e:	e7f4      	b.n	800de6a <_dtoa_r+0x902>
 800de80:	d085      	beq.n	800dd8e <_dtoa_r+0x826>
 800de82:	4618      	mov	r0, r3
 800de84:	301c      	adds	r0, #28
 800de86:	e77d      	b.n	800dd84 <_dtoa_r+0x81c>
 800de88:	40240000 	.word	0x40240000
 800de8c:	9b01      	ldr	r3, [sp, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	dc38      	bgt.n	800df04 <_dtoa_r+0x99c>
 800de92:	9b05      	ldr	r3, [sp, #20]
 800de94:	2b02      	cmp	r3, #2
 800de96:	dd35      	ble.n	800df04 <_dtoa_r+0x99c>
 800de98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800de9c:	f1b9 0f00 	cmp.w	r9, #0
 800dea0:	d10d      	bne.n	800debe <_dtoa_r+0x956>
 800dea2:	4631      	mov	r1, r6
 800dea4:	464b      	mov	r3, r9
 800dea6:	2205      	movs	r2, #5
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 fbe5 	bl	800e678 <__multadd>
 800deae:	4601      	mov	r1, r0
 800deb0:	4606      	mov	r6, r0
 800deb2:	4658      	mov	r0, fp
 800deb4:	f000 fdfc 	bl	800eab0 <__mcmp>
 800deb8:	2800      	cmp	r0, #0
 800deba:	f73f adbd 	bgt.w	800da38 <_dtoa_r+0x4d0>
 800debe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dec0:	9d00      	ldr	r5, [sp, #0]
 800dec2:	ea6f 0a03 	mvn.w	sl, r3
 800dec6:	f04f 0800 	mov.w	r8, #0
 800deca:	4631      	mov	r1, r6
 800decc:	4620      	mov	r0, r4
 800dece:	f000 fbb1 	bl	800e634 <_Bfree>
 800ded2:	2f00      	cmp	r7, #0
 800ded4:	f43f aeb4 	beq.w	800dc40 <_dtoa_r+0x6d8>
 800ded8:	f1b8 0f00 	cmp.w	r8, #0
 800dedc:	d005      	beq.n	800deea <_dtoa_r+0x982>
 800dede:	45b8      	cmp	r8, r7
 800dee0:	d003      	beq.n	800deea <_dtoa_r+0x982>
 800dee2:	4641      	mov	r1, r8
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 fba5 	bl	800e634 <_Bfree>
 800deea:	4639      	mov	r1, r7
 800deec:	4620      	mov	r0, r4
 800deee:	f000 fba1 	bl	800e634 <_Bfree>
 800def2:	e6a5      	b.n	800dc40 <_dtoa_r+0x6d8>
 800def4:	2600      	movs	r6, #0
 800def6:	4637      	mov	r7, r6
 800def8:	e7e1      	b.n	800debe <_dtoa_r+0x956>
 800defa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800defc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800df00:	4637      	mov	r7, r6
 800df02:	e599      	b.n	800da38 <_dtoa_r+0x4d0>
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 80fd 	beq.w	800e10a <_dtoa_r+0xba2>
 800df10:	2d00      	cmp	r5, #0
 800df12:	dd05      	ble.n	800df20 <_dtoa_r+0x9b8>
 800df14:	4639      	mov	r1, r7
 800df16:	462a      	mov	r2, r5
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fd5d 	bl	800e9d8 <__lshift>
 800df1e:	4607      	mov	r7, r0
 800df20:	9b06      	ldr	r3, [sp, #24]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d05c      	beq.n	800dfe0 <_dtoa_r+0xa78>
 800df26:	6879      	ldr	r1, [r7, #4]
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 fb43 	bl	800e5b4 <_Balloc>
 800df2e:	4605      	mov	r5, r0
 800df30:	b928      	cbnz	r0, 800df3e <_dtoa_r+0x9d6>
 800df32:	4b80      	ldr	r3, [pc, #512]	; (800e134 <_dtoa_r+0xbcc>)
 800df34:	4602      	mov	r2, r0
 800df36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df3a:	f7ff bb2e 	b.w	800d59a <_dtoa_r+0x32>
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	3202      	adds	r2, #2
 800df42:	0092      	lsls	r2, r2, #2
 800df44:	f107 010c 	add.w	r1, r7, #12
 800df48:	300c      	adds	r0, #12
 800df4a:	f000 fb25 	bl	800e598 <memcpy>
 800df4e:	2201      	movs	r2, #1
 800df50:	4629      	mov	r1, r5
 800df52:	4620      	mov	r0, r4
 800df54:	f000 fd40 	bl	800e9d8 <__lshift>
 800df58:	9b00      	ldr	r3, [sp, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	9b00      	ldr	r3, [sp, #0]
 800df60:	444b      	add	r3, r9
 800df62:	9307      	str	r3, [sp, #28]
 800df64:	9b02      	ldr	r3, [sp, #8]
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	46b8      	mov	r8, r7
 800df6c:	9306      	str	r3, [sp, #24]
 800df6e:	4607      	mov	r7, r0
 800df70:	9b01      	ldr	r3, [sp, #4]
 800df72:	4631      	mov	r1, r6
 800df74:	3b01      	subs	r3, #1
 800df76:	4658      	mov	r0, fp
 800df78:	9302      	str	r3, [sp, #8]
 800df7a:	f7ff fa67 	bl	800d44c <quorem>
 800df7e:	4603      	mov	r3, r0
 800df80:	3330      	adds	r3, #48	; 0x30
 800df82:	9004      	str	r0, [sp, #16]
 800df84:	4641      	mov	r1, r8
 800df86:	4658      	mov	r0, fp
 800df88:	9308      	str	r3, [sp, #32]
 800df8a:	f000 fd91 	bl	800eab0 <__mcmp>
 800df8e:	463a      	mov	r2, r7
 800df90:	4681      	mov	r9, r0
 800df92:	4631      	mov	r1, r6
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fda7 	bl	800eae8 <__mdiff>
 800df9a:	68c2      	ldr	r2, [r0, #12]
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	4605      	mov	r5, r0
 800dfa0:	bb02      	cbnz	r2, 800dfe4 <_dtoa_r+0xa7c>
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	4658      	mov	r0, fp
 800dfa6:	f000 fd83 	bl	800eab0 <__mcmp>
 800dfaa:	9b08      	ldr	r3, [sp, #32]
 800dfac:	4602      	mov	r2, r0
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dfb6:	f000 fb3d 	bl	800e634 <_Bfree>
 800dfba:	9b05      	ldr	r3, [sp, #20]
 800dfbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfbe:	9d01      	ldr	r5, [sp, #4]
 800dfc0:	ea43 0102 	orr.w	r1, r3, r2
 800dfc4:	9b06      	ldr	r3, [sp, #24]
 800dfc6:	430b      	orrs	r3, r1
 800dfc8:	9b08      	ldr	r3, [sp, #32]
 800dfca:	d10d      	bne.n	800dfe8 <_dtoa_r+0xa80>
 800dfcc:	2b39      	cmp	r3, #57	; 0x39
 800dfce:	d029      	beq.n	800e024 <_dtoa_r+0xabc>
 800dfd0:	f1b9 0f00 	cmp.w	r9, #0
 800dfd4:	dd01      	ble.n	800dfda <_dtoa_r+0xa72>
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	3331      	adds	r3, #49	; 0x31
 800dfda:	9a02      	ldr	r2, [sp, #8]
 800dfdc:	7013      	strb	r3, [r2, #0]
 800dfde:	e774      	b.n	800deca <_dtoa_r+0x962>
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	e7b9      	b.n	800df58 <_dtoa_r+0x9f0>
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	e7e2      	b.n	800dfae <_dtoa_r+0xa46>
 800dfe8:	f1b9 0f00 	cmp.w	r9, #0
 800dfec:	db06      	blt.n	800dffc <_dtoa_r+0xa94>
 800dfee:	9905      	ldr	r1, [sp, #20]
 800dff0:	ea41 0909 	orr.w	r9, r1, r9
 800dff4:	9906      	ldr	r1, [sp, #24]
 800dff6:	ea59 0101 	orrs.w	r1, r9, r1
 800dffa:	d120      	bne.n	800e03e <_dtoa_r+0xad6>
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	ddec      	ble.n	800dfda <_dtoa_r+0xa72>
 800e000:	4659      	mov	r1, fp
 800e002:	2201      	movs	r2, #1
 800e004:	4620      	mov	r0, r4
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	f000 fce6 	bl	800e9d8 <__lshift>
 800e00c:	4631      	mov	r1, r6
 800e00e:	4683      	mov	fp, r0
 800e010:	f000 fd4e 	bl	800eab0 <__mcmp>
 800e014:	2800      	cmp	r0, #0
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	dc02      	bgt.n	800e020 <_dtoa_r+0xab8>
 800e01a:	d1de      	bne.n	800dfda <_dtoa_r+0xa72>
 800e01c:	07da      	lsls	r2, r3, #31
 800e01e:	d5dc      	bpl.n	800dfda <_dtoa_r+0xa72>
 800e020:	2b39      	cmp	r3, #57	; 0x39
 800e022:	d1d8      	bne.n	800dfd6 <_dtoa_r+0xa6e>
 800e024:	9a02      	ldr	r2, [sp, #8]
 800e026:	2339      	movs	r3, #57	; 0x39
 800e028:	7013      	strb	r3, [r2, #0]
 800e02a:	462b      	mov	r3, r5
 800e02c:	461d      	mov	r5, r3
 800e02e:	3b01      	subs	r3, #1
 800e030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e034:	2a39      	cmp	r2, #57	; 0x39
 800e036:	d050      	beq.n	800e0da <_dtoa_r+0xb72>
 800e038:	3201      	adds	r2, #1
 800e03a:	701a      	strb	r2, [r3, #0]
 800e03c:	e745      	b.n	800deca <_dtoa_r+0x962>
 800e03e:	2a00      	cmp	r2, #0
 800e040:	dd03      	ble.n	800e04a <_dtoa_r+0xae2>
 800e042:	2b39      	cmp	r3, #57	; 0x39
 800e044:	d0ee      	beq.n	800e024 <_dtoa_r+0xabc>
 800e046:	3301      	adds	r3, #1
 800e048:	e7c7      	b.n	800dfda <_dtoa_r+0xa72>
 800e04a:	9a01      	ldr	r2, [sp, #4]
 800e04c:	9907      	ldr	r1, [sp, #28]
 800e04e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e052:	428a      	cmp	r2, r1
 800e054:	d02a      	beq.n	800e0ac <_dtoa_r+0xb44>
 800e056:	4659      	mov	r1, fp
 800e058:	2300      	movs	r3, #0
 800e05a:	220a      	movs	r2, #10
 800e05c:	4620      	mov	r0, r4
 800e05e:	f000 fb0b 	bl	800e678 <__multadd>
 800e062:	45b8      	cmp	r8, r7
 800e064:	4683      	mov	fp, r0
 800e066:	f04f 0300 	mov.w	r3, #0
 800e06a:	f04f 020a 	mov.w	r2, #10
 800e06e:	4641      	mov	r1, r8
 800e070:	4620      	mov	r0, r4
 800e072:	d107      	bne.n	800e084 <_dtoa_r+0xb1c>
 800e074:	f000 fb00 	bl	800e678 <__multadd>
 800e078:	4680      	mov	r8, r0
 800e07a:	4607      	mov	r7, r0
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	3301      	adds	r3, #1
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	e775      	b.n	800df70 <_dtoa_r+0xa08>
 800e084:	f000 faf8 	bl	800e678 <__multadd>
 800e088:	4639      	mov	r1, r7
 800e08a:	4680      	mov	r8, r0
 800e08c:	2300      	movs	r3, #0
 800e08e:	220a      	movs	r2, #10
 800e090:	4620      	mov	r0, r4
 800e092:	f000 faf1 	bl	800e678 <__multadd>
 800e096:	4607      	mov	r7, r0
 800e098:	e7f0      	b.n	800e07c <_dtoa_r+0xb14>
 800e09a:	f1b9 0f00 	cmp.w	r9, #0
 800e09e:	9a00      	ldr	r2, [sp, #0]
 800e0a0:	bfcc      	ite	gt
 800e0a2:	464d      	movgt	r5, r9
 800e0a4:	2501      	movle	r5, #1
 800e0a6:	4415      	add	r5, r2
 800e0a8:	f04f 0800 	mov.w	r8, #0
 800e0ac:	4659      	mov	r1, fp
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	f000 fc90 	bl	800e9d8 <__lshift>
 800e0b8:	4631      	mov	r1, r6
 800e0ba:	4683      	mov	fp, r0
 800e0bc:	f000 fcf8 	bl	800eab0 <__mcmp>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	dcb2      	bgt.n	800e02a <_dtoa_r+0xac2>
 800e0c4:	d102      	bne.n	800e0cc <_dtoa_r+0xb64>
 800e0c6:	9b01      	ldr	r3, [sp, #4]
 800e0c8:	07db      	lsls	r3, r3, #31
 800e0ca:	d4ae      	bmi.n	800e02a <_dtoa_r+0xac2>
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	461d      	mov	r5, r3
 800e0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0d4:	2a30      	cmp	r2, #48	; 0x30
 800e0d6:	d0fa      	beq.n	800e0ce <_dtoa_r+0xb66>
 800e0d8:	e6f7      	b.n	800deca <_dtoa_r+0x962>
 800e0da:	9a00      	ldr	r2, [sp, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d1a5      	bne.n	800e02c <_dtoa_r+0xac4>
 800e0e0:	f10a 0a01 	add.w	sl, sl, #1
 800e0e4:	2331      	movs	r3, #49	; 0x31
 800e0e6:	e779      	b.n	800dfdc <_dtoa_r+0xa74>
 800e0e8:	4b13      	ldr	r3, [pc, #76]	; (800e138 <_dtoa_r+0xbd0>)
 800e0ea:	f7ff baaf 	b.w	800d64c <_dtoa_r+0xe4>
 800e0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f47f aa86 	bne.w	800d602 <_dtoa_r+0x9a>
 800e0f6:	4b11      	ldr	r3, [pc, #68]	; (800e13c <_dtoa_r+0xbd4>)
 800e0f8:	f7ff baa8 	b.w	800d64c <_dtoa_r+0xe4>
 800e0fc:	f1b9 0f00 	cmp.w	r9, #0
 800e100:	dc03      	bgt.n	800e10a <_dtoa_r+0xba2>
 800e102:	9b05      	ldr	r3, [sp, #20]
 800e104:	2b02      	cmp	r3, #2
 800e106:	f73f aec9 	bgt.w	800de9c <_dtoa_r+0x934>
 800e10a:	9d00      	ldr	r5, [sp, #0]
 800e10c:	4631      	mov	r1, r6
 800e10e:	4658      	mov	r0, fp
 800e110:	f7ff f99c 	bl	800d44c <quorem>
 800e114:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e118:	f805 3b01 	strb.w	r3, [r5], #1
 800e11c:	9a00      	ldr	r2, [sp, #0]
 800e11e:	1aaa      	subs	r2, r5, r2
 800e120:	4591      	cmp	r9, r2
 800e122:	ddba      	ble.n	800e09a <_dtoa_r+0xb32>
 800e124:	4659      	mov	r1, fp
 800e126:	2300      	movs	r3, #0
 800e128:	220a      	movs	r2, #10
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 faa4 	bl	800e678 <__multadd>
 800e130:	4683      	mov	fp, r0
 800e132:	e7eb      	b.n	800e10c <_dtoa_r+0xba4>
 800e134:	080105f7 	.word	0x080105f7
 800e138:	08010550 	.word	0x08010550
 800e13c:	08010574 	.word	0x08010574

0800e140 <__sflush_r>:
 800e140:	898a      	ldrh	r2, [r1, #12]
 800e142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	4605      	mov	r5, r0
 800e148:	0710      	lsls	r0, r2, #28
 800e14a:	460c      	mov	r4, r1
 800e14c:	d458      	bmi.n	800e200 <__sflush_r+0xc0>
 800e14e:	684b      	ldr	r3, [r1, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	dc05      	bgt.n	800e160 <__sflush_r+0x20>
 800e154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	dc02      	bgt.n	800e160 <__sflush_r+0x20>
 800e15a:	2000      	movs	r0, #0
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e162:	2e00      	cmp	r6, #0
 800e164:	d0f9      	beq.n	800e15a <__sflush_r+0x1a>
 800e166:	2300      	movs	r3, #0
 800e168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e16c:	682f      	ldr	r7, [r5, #0]
 800e16e:	602b      	str	r3, [r5, #0]
 800e170:	d032      	beq.n	800e1d8 <__sflush_r+0x98>
 800e172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	075a      	lsls	r2, r3, #29
 800e178:	d505      	bpl.n	800e186 <__sflush_r+0x46>
 800e17a:	6863      	ldr	r3, [r4, #4]
 800e17c:	1ac0      	subs	r0, r0, r3
 800e17e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e180:	b10b      	cbz	r3, 800e186 <__sflush_r+0x46>
 800e182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e184:	1ac0      	subs	r0, r0, r3
 800e186:	2300      	movs	r3, #0
 800e188:	4602      	mov	r2, r0
 800e18a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e18c:	6a21      	ldr	r1, [r4, #32]
 800e18e:	4628      	mov	r0, r5
 800e190:	47b0      	blx	r6
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	d106      	bne.n	800e1a6 <__sflush_r+0x66>
 800e198:	6829      	ldr	r1, [r5, #0]
 800e19a:	291d      	cmp	r1, #29
 800e19c:	d82c      	bhi.n	800e1f8 <__sflush_r+0xb8>
 800e19e:	4a2a      	ldr	r2, [pc, #168]	; (800e248 <__sflush_r+0x108>)
 800e1a0:	40ca      	lsrs	r2, r1
 800e1a2:	07d6      	lsls	r6, r2, #31
 800e1a4:	d528      	bpl.n	800e1f8 <__sflush_r+0xb8>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	6062      	str	r2, [r4, #4]
 800e1aa:	04d9      	lsls	r1, r3, #19
 800e1ac:	6922      	ldr	r2, [r4, #16]
 800e1ae:	6022      	str	r2, [r4, #0]
 800e1b0:	d504      	bpl.n	800e1bc <__sflush_r+0x7c>
 800e1b2:	1c42      	adds	r2, r0, #1
 800e1b4:	d101      	bne.n	800e1ba <__sflush_r+0x7a>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b903      	cbnz	r3, 800e1bc <__sflush_r+0x7c>
 800e1ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1be:	602f      	str	r7, [r5, #0]
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	d0ca      	beq.n	800e15a <__sflush_r+0x1a>
 800e1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1c8:	4299      	cmp	r1, r3
 800e1ca:	d002      	beq.n	800e1d2 <__sflush_r+0x92>
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 fd7f 	bl	800ecd0 <_free_r>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e1d6:	e7c1      	b.n	800e15c <__sflush_r+0x1c>
 800e1d8:	6a21      	ldr	r1, [r4, #32]
 800e1da:	2301      	movs	r3, #1
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b0      	blx	r6
 800e1e0:	1c41      	adds	r1, r0, #1
 800e1e2:	d1c7      	bne.n	800e174 <__sflush_r+0x34>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0c4      	beq.n	800e174 <__sflush_r+0x34>
 800e1ea:	2b1d      	cmp	r3, #29
 800e1ec:	d001      	beq.n	800e1f2 <__sflush_r+0xb2>
 800e1ee:	2b16      	cmp	r3, #22
 800e1f0:	d101      	bne.n	800e1f6 <__sflush_r+0xb6>
 800e1f2:	602f      	str	r7, [r5, #0]
 800e1f4:	e7b1      	b.n	800e15a <__sflush_r+0x1a>
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	e7ad      	b.n	800e15c <__sflush_r+0x1c>
 800e200:	690f      	ldr	r7, [r1, #16]
 800e202:	2f00      	cmp	r7, #0
 800e204:	d0a9      	beq.n	800e15a <__sflush_r+0x1a>
 800e206:	0793      	lsls	r3, r2, #30
 800e208:	680e      	ldr	r6, [r1, #0]
 800e20a:	bf08      	it	eq
 800e20c:	694b      	ldreq	r3, [r1, #20]
 800e20e:	600f      	str	r7, [r1, #0]
 800e210:	bf18      	it	ne
 800e212:	2300      	movne	r3, #0
 800e214:	eba6 0807 	sub.w	r8, r6, r7
 800e218:	608b      	str	r3, [r1, #8]
 800e21a:	f1b8 0f00 	cmp.w	r8, #0
 800e21e:	dd9c      	ble.n	800e15a <__sflush_r+0x1a>
 800e220:	6a21      	ldr	r1, [r4, #32]
 800e222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e224:	4643      	mov	r3, r8
 800e226:	463a      	mov	r2, r7
 800e228:	4628      	mov	r0, r5
 800e22a:	47b0      	blx	r6
 800e22c:	2800      	cmp	r0, #0
 800e22e:	dc06      	bgt.n	800e23e <__sflush_r+0xfe>
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e236:	81a3      	strh	r3, [r4, #12]
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	e78e      	b.n	800e15c <__sflush_r+0x1c>
 800e23e:	4407      	add	r7, r0
 800e240:	eba8 0800 	sub.w	r8, r8, r0
 800e244:	e7e9      	b.n	800e21a <__sflush_r+0xda>
 800e246:	bf00      	nop
 800e248:	20400001 	.word	0x20400001

0800e24c <_fflush_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	690b      	ldr	r3, [r1, #16]
 800e250:	4605      	mov	r5, r0
 800e252:	460c      	mov	r4, r1
 800e254:	b913      	cbnz	r3, 800e25c <_fflush_r+0x10>
 800e256:	2500      	movs	r5, #0
 800e258:	4628      	mov	r0, r5
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	b118      	cbz	r0, 800e266 <_fflush_r+0x1a>
 800e25e:	6983      	ldr	r3, [r0, #24]
 800e260:	b90b      	cbnz	r3, 800e266 <_fflush_r+0x1a>
 800e262:	f000 f887 	bl	800e374 <__sinit>
 800e266:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <_fflush_r+0x6c>)
 800e268:	429c      	cmp	r4, r3
 800e26a:	d11b      	bne.n	800e2a4 <_fflush_r+0x58>
 800e26c:	686c      	ldr	r4, [r5, #4]
 800e26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0ef      	beq.n	800e256 <_fflush_r+0xa>
 800e276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e278:	07d0      	lsls	r0, r2, #31
 800e27a:	d404      	bmi.n	800e286 <_fflush_r+0x3a>
 800e27c:	0599      	lsls	r1, r3, #22
 800e27e:	d402      	bmi.n	800e286 <_fflush_r+0x3a>
 800e280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e282:	f000 f91a 	bl	800e4ba <__retarget_lock_acquire_recursive>
 800e286:	4628      	mov	r0, r5
 800e288:	4621      	mov	r1, r4
 800e28a:	f7ff ff59 	bl	800e140 <__sflush_r>
 800e28e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e290:	07da      	lsls	r2, r3, #31
 800e292:	4605      	mov	r5, r0
 800e294:	d4e0      	bmi.n	800e258 <_fflush_r+0xc>
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	059b      	lsls	r3, r3, #22
 800e29a:	d4dd      	bmi.n	800e258 <_fflush_r+0xc>
 800e29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e29e:	f000 f90d 	bl	800e4bc <__retarget_lock_release_recursive>
 800e2a2:	e7d9      	b.n	800e258 <_fflush_r+0xc>
 800e2a4:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <_fflush_r+0x70>)
 800e2a6:	429c      	cmp	r4, r3
 800e2a8:	d101      	bne.n	800e2ae <_fflush_r+0x62>
 800e2aa:	68ac      	ldr	r4, [r5, #8]
 800e2ac:	e7df      	b.n	800e26e <_fflush_r+0x22>
 800e2ae:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <_fflush_r+0x74>)
 800e2b0:	429c      	cmp	r4, r3
 800e2b2:	bf08      	it	eq
 800e2b4:	68ec      	ldreq	r4, [r5, #12]
 800e2b6:	e7da      	b.n	800e26e <_fflush_r+0x22>
 800e2b8:	08010628 	.word	0x08010628
 800e2bc:	08010648 	.word	0x08010648
 800e2c0:	08010608 	.word	0x08010608

0800e2c4 <std>:
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	b510      	push	{r4, lr}
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	e9c0 3300 	strd	r3, r3, [r0]
 800e2ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2d2:	6083      	str	r3, [r0, #8]
 800e2d4:	8181      	strh	r1, [r0, #12]
 800e2d6:	6643      	str	r3, [r0, #100]	; 0x64
 800e2d8:	81c2      	strh	r2, [r0, #14]
 800e2da:	6183      	str	r3, [r0, #24]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	2208      	movs	r2, #8
 800e2e0:	305c      	adds	r0, #92	; 0x5c
 800e2e2:	f7fe faf3 	bl	800c8cc <memset>
 800e2e6:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <std+0x38>)
 800e2e8:	6263      	str	r3, [r4, #36]	; 0x24
 800e2ea:	4b05      	ldr	r3, [pc, #20]	; (800e300 <std+0x3c>)
 800e2ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ee:	4b05      	ldr	r3, [pc, #20]	; (800e304 <std+0x40>)
 800e2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2f2:	4b05      	ldr	r3, [pc, #20]	; (800e308 <std+0x44>)
 800e2f4:	6224      	str	r4, [r4, #32]
 800e2f6:	6323      	str	r3, [r4, #48]	; 0x30
 800e2f8:	bd10      	pop	{r4, pc}
 800e2fa:	bf00      	nop
 800e2fc:	0800f0f9 	.word	0x0800f0f9
 800e300:	0800f11b 	.word	0x0800f11b
 800e304:	0800f153 	.word	0x0800f153
 800e308:	0800f177 	.word	0x0800f177

0800e30c <_cleanup_r>:
 800e30c:	4901      	ldr	r1, [pc, #4]	; (800e314 <_cleanup_r+0x8>)
 800e30e:	f000 b8af 	b.w	800e470 <_fwalk_reent>
 800e312:	bf00      	nop
 800e314:	0800e24d 	.word	0x0800e24d

0800e318 <__sfmoreglue>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	1e4a      	subs	r2, r1, #1
 800e31c:	2568      	movs	r5, #104	; 0x68
 800e31e:	4355      	muls	r5, r2
 800e320:	460e      	mov	r6, r1
 800e322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e326:	f000 fd23 	bl	800ed70 <_malloc_r>
 800e32a:	4604      	mov	r4, r0
 800e32c:	b140      	cbz	r0, 800e340 <__sfmoreglue+0x28>
 800e32e:	2100      	movs	r1, #0
 800e330:	e9c0 1600 	strd	r1, r6, [r0]
 800e334:	300c      	adds	r0, #12
 800e336:	60a0      	str	r0, [r4, #8]
 800e338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e33c:	f7fe fac6 	bl	800c8cc <memset>
 800e340:	4620      	mov	r0, r4
 800e342:	bd70      	pop	{r4, r5, r6, pc}

0800e344 <__sfp_lock_acquire>:
 800e344:	4801      	ldr	r0, [pc, #4]	; (800e34c <__sfp_lock_acquire+0x8>)
 800e346:	f000 b8b8 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800e34a:	bf00      	nop
 800e34c:	200008c0 	.word	0x200008c0

0800e350 <__sfp_lock_release>:
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__sfp_lock_release+0x8>)
 800e352:	f000 b8b3 	b.w	800e4bc <__retarget_lock_release_recursive>
 800e356:	bf00      	nop
 800e358:	200008c0 	.word	0x200008c0

0800e35c <__sinit_lock_acquire>:
 800e35c:	4801      	ldr	r0, [pc, #4]	; (800e364 <__sinit_lock_acquire+0x8>)
 800e35e:	f000 b8ac 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800e362:	bf00      	nop
 800e364:	200008bb 	.word	0x200008bb

0800e368 <__sinit_lock_release>:
 800e368:	4801      	ldr	r0, [pc, #4]	; (800e370 <__sinit_lock_release+0x8>)
 800e36a:	f000 b8a7 	b.w	800e4bc <__retarget_lock_release_recursive>
 800e36e:	bf00      	nop
 800e370:	200008bb 	.word	0x200008bb

0800e374 <__sinit>:
 800e374:	b510      	push	{r4, lr}
 800e376:	4604      	mov	r4, r0
 800e378:	f7ff fff0 	bl	800e35c <__sinit_lock_acquire>
 800e37c:	69a3      	ldr	r3, [r4, #24]
 800e37e:	b11b      	cbz	r3, 800e388 <__sinit+0x14>
 800e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e384:	f7ff bff0 	b.w	800e368 <__sinit_lock_release>
 800e388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e38c:	6523      	str	r3, [r4, #80]	; 0x50
 800e38e:	4b13      	ldr	r3, [pc, #76]	; (800e3dc <__sinit+0x68>)
 800e390:	4a13      	ldr	r2, [pc, #76]	; (800e3e0 <__sinit+0x6c>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	62a2      	str	r2, [r4, #40]	; 0x28
 800e396:	42a3      	cmp	r3, r4
 800e398:	bf04      	itt	eq
 800e39a:	2301      	moveq	r3, #1
 800e39c:	61a3      	streq	r3, [r4, #24]
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f000 f820 	bl	800e3e4 <__sfp>
 800e3a4:	6060      	str	r0, [r4, #4]
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 f81c 	bl	800e3e4 <__sfp>
 800e3ac:	60a0      	str	r0, [r4, #8]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f000 f818 	bl	800e3e4 <__sfp>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	60e0      	str	r0, [r4, #12]
 800e3b8:	2104      	movs	r1, #4
 800e3ba:	6860      	ldr	r0, [r4, #4]
 800e3bc:	f7ff ff82 	bl	800e2c4 <std>
 800e3c0:	68a0      	ldr	r0, [r4, #8]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	2109      	movs	r1, #9
 800e3c6:	f7ff ff7d 	bl	800e2c4 <std>
 800e3ca:	68e0      	ldr	r0, [r4, #12]
 800e3cc:	2202      	movs	r2, #2
 800e3ce:	2112      	movs	r1, #18
 800e3d0:	f7ff ff78 	bl	800e2c4 <std>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	61a3      	str	r3, [r4, #24]
 800e3d8:	e7d2      	b.n	800e380 <__sinit+0xc>
 800e3da:	bf00      	nop
 800e3dc:	0801053c 	.word	0x0801053c
 800e3e0:	0800e30d 	.word	0x0800e30d

0800e3e4 <__sfp>:
 800e3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	f7ff ffac 	bl	800e344 <__sfp_lock_acquire>
 800e3ec:	4b1e      	ldr	r3, [pc, #120]	; (800e468 <__sfp+0x84>)
 800e3ee:	681e      	ldr	r6, [r3, #0]
 800e3f0:	69b3      	ldr	r3, [r6, #24]
 800e3f2:	b913      	cbnz	r3, 800e3fa <__sfp+0x16>
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f7ff ffbd 	bl	800e374 <__sinit>
 800e3fa:	3648      	adds	r6, #72	; 0x48
 800e3fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e400:	3b01      	subs	r3, #1
 800e402:	d503      	bpl.n	800e40c <__sfp+0x28>
 800e404:	6833      	ldr	r3, [r6, #0]
 800e406:	b30b      	cbz	r3, 800e44c <__sfp+0x68>
 800e408:	6836      	ldr	r6, [r6, #0]
 800e40a:	e7f7      	b.n	800e3fc <__sfp+0x18>
 800e40c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e410:	b9d5      	cbnz	r5, 800e448 <__sfp+0x64>
 800e412:	4b16      	ldr	r3, [pc, #88]	; (800e46c <__sfp+0x88>)
 800e414:	60e3      	str	r3, [r4, #12]
 800e416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e41a:	6665      	str	r5, [r4, #100]	; 0x64
 800e41c:	f000 f84c 	bl	800e4b8 <__retarget_lock_init_recursive>
 800e420:	f7ff ff96 	bl	800e350 <__sfp_lock_release>
 800e424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e42c:	6025      	str	r5, [r4, #0]
 800e42e:	61a5      	str	r5, [r4, #24]
 800e430:	2208      	movs	r2, #8
 800e432:	4629      	mov	r1, r5
 800e434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e438:	f7fe fa48 	bl	800c8cc <memset>
 800e43c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e444:	4620      	mov	r0, r4
 800e446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e448:	3468      	adds	r4, #104	; 0x68
 800e44a:	e7d9      	b.n	800e400 <__sfp+0x1c>
 800e44c:	2104      	movs	r1, #4
 800e44e:	4638      	mov	r0, r7
 800e450:	f7ff ff62 	bl	800e318 <__sfmoreglue>
 800e454:	4604      	mov	r4, r0
 800e456:	6030      	str	r0, [r6, #0]
 800e458:	2800      	cmp	r0, #0
 800e45a:	d1d5      	bne.n	800e408 <__sfp+0x24>
 800e45c:	f7ff ff78 	bl	800e350 <__sfp_lock_release>
 800e460:	230c      	movs	r3, #12
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	e7ee      	b.n	800e444 <__sfp+0x60>
 800e466:	bf00      	nop
 800e468:	0801053c 	.word	0x0801053c
 800e46c:	ffff0001 	.word	0xffff0001

0800e470 <_fwalk_reent>:
 800e470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e474:	4606      	mov	r6, r0
 800e476:	4688      	mov	r8, r1
 800e478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e47c:	2700      	movs	r7, #0
 800e47e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e482:	f1b9 0901 	subs.w	r9, r9, #1
 800e486:	d505      	bpl.n	800e494 <_fwalk_reent+0x24>
 800e488:	6824      	ldr	r4, [r4, #0]
 800e48a:	2c00      	cmp	r4, #0
 800e48c:	d1f7      	bne.n	800e47e <_fwalk_reent+0xe>
 800e48e:	4638      	mov	r0, r7
 800e490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e494:	89ab      	ldrh	r3, [r5, #12]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d907      	bls.n	800e4aa <_fwalk_reent+0x3a>
 800e49a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	d003      	beq.n	800e4aa <_fwalk_reent+0x3a>
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	47c0      	blx	r8
 800e4a8:	4307      	orrs	r7, r0
 800e4aa:	3568      	adds	r5, #104	; 0x68
 800e4ac:	e7e9      	b.n	800e482 <_fwalk_reent+0x12>
	...

0800e4b0 <_localeconv_r>:
 800e4b0:	4800      	ldr	r0, [pc, #0]	; (800e4b4 <_localeconv_r+0x4>)
 800e4b2:	4770      	bx	lr
 800e4b4:	20000164 	.word	0x20000164

0800e4b8 <__retarget_lock_init_recursive>:
 800e4b8:	4770      	bx	lr

0800e4ba <__retarget_lock_acquire_recursive>:
 800e4ba:	4770      	bx	lr

0800e4bc <__retarget_lock_release_recursive>:
 800e4bc:	4770      	bx	lr

0800e4be <__swhatbuf_r>:
 800e4be:	b570      	push	{r4, r5, r6, lr}
 800e4c0:	460e      	mov	r6, r1
 800e4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c6:	2900      	cmp	r1, #0
 800e4c8:	b096      	sub	sp, #88	; 0x58
 800e4ca:	4614      	mov	r4, r2
 800e4cc:	461d      	mov	r5, r3
 800e4ce:	da07      	bge.n	800e4e0 <__swhatbuf_r+0x22>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	602b      	str	r3, [r5, #0]
 800e4d4:	89b3      	ldrh	r3, [r6, #12]
 800e4d6:	061a      	lsls	r2, r3, #24
 800e4d8:	d410      	bmi.n	800e4fc <__swhatbuf_r+0x3e>
 800e4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4de:	e00e      	b.n	800e4fe <__swhatbuf_r+0x40>
 800e4e0:	466a      	mov	r2, sp
 800e4e2:	f000 fe9f 	bl	800f224 <_fstat_r>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	dbf2      	blt.n	800e4d0 <__swhatbuf_r+0x12>
 800e4ea:	9a01      	ldr	r2, [sp, #4]
 800e4ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e4f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e4f4:	425a      	negs	r2, r3
 800e4f6:	415a      	adcs	r2, r3
 800e4f8:	602a      	str	r2, [r5, #0]
 800e4fa:	e7ee      	b.n	800e4da <__swhatbuf_r+0x1c>
 800e4fc:	2340      	movs	r3, #64	; 0x40
 800e4fe:	2000      	movs	r0, #0
 800e500:	6023      	str	r3, [r4, #0]
 800e502:	b016      	add	sp, #88	; 0x58
 800e504:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e508 <__smakebuf_r>:
 800e508:	898b      	ldrh	r3, [r1, #12]
 800e50a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e50c:	079d      	lsls	r5, r3, #30
 800e50e:	4606      	mov	r6, r0
 800e510:	460c      	mov	r4, r1
 800e512:	d507      	bpl.n	800e524 <__smakebuf_r+0x1c>
 800e514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	2301      	movs	r3, #1
 800e51e:	6163      	str	r3, [r4, #20]
 800e520:	b002      	add	sp, #8
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	ab01      	add	r3, sp, #4
 800e526:	466a      	mov	r2, sp
 800e528:	f7ff ffc9 	bl	800e4be <__swhatbuf_r>
 800e52c:	9900      	ldr	r1, [sp, #0]
 800e52e:	4605      	mov	r5, r0
 800e530:	4630      	mov	r0, r6
 800e532:	f000 fc1d 	bl	800ed70 <_malloc_r>
 800e536:	b948      	cbnz	r0, 800e54c <__smakebuf_r+0x44>
 800e538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e53c:	059a      	lsls	r2, r3, #22
 800e53e:	d4ef      	bmi.n	800e520 <__smakebuf_r+0x18>
 800e540:	f023 0303 	bic.w	r3, r3, #3
 800e544:	f043 0302 	orr.w	r3, r3, #2
 800e548:	81a3      	strh	r3, [r4, #12]
 800e54a:	e7e3      	b.n	800e514 <__smakebuf_r+0xc>
 800e54c:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <__smakebuf_r+0x7c>)
 800e54e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e550:	89a3      	ldrh	r3, [r4, #12]
 800e552:	6020      	str	r0, [r4, #0]
 800e554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e558:	81a3      	strh	r3, [r4, #12]
 800e55a:	9b00      	ldr	r3, [sp, #0]
 800e55c:	6163      	str	r3, [r4, #20]
 800e55e:	9b01      	ldr	r3, [sp, #4]
 800e560:	6120      	str	r0, [r4, #16]
 800e562:	b15b      	cbz	r3, 800e57c <__smakebuf_r+0x74>
 800e564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e568:	4630      	mov	r0, r6
 800e56a:	f000 fe6d 	bl	800f248 <_isatty_r>
 800e56e:	b128      	cbz	r0, 800e57c <__smakebuf_r+0x74>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0301 	orr.w	r3, r3, #1
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	89a0      	ldrh	r0, [r4, #12]
 800e57e:	4305      	orrs	r5, r0
 800e580:	81a5      	strh	r5, [r4, #12]
 800e582:	e7cd      	b.n	800e520 <__smakebuf_r+0x18>
 800e584:	0800e30d 	.word	0x0800e30d

0800e588 <malloc>:
 800e588:	4b02      	ldr	r3, [pc, #8]	; (800e594 <malloc+0xc>)
 800e58a:	4601      	mov	r1, r0
 800e58c:	6818      	ldr	r0, [r3, #0]
 800e58e:	f000 bbef 	b.w	800ed70 <_malloc_r>
 800e592:	bf00      	nop
 800e594:	20000010 	.word	0x20000010

0800e598 <memcpy>:
 800e598:	440a      	add	r2, r1
 800e59a:	4291      	cmp	r1, r2
 800e59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a0:	d100      	bne.n	800e5a4 <memcpy+0xc>
 800e5a2:	4770      	bx	lr
 800e5a4:	b510      	push	{r4, lr}
 800e5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5ae:	4291      	cmp	r1, r2
 800e5b0:	d1f9      	bne.n	800e5a6 <memcpy+0xe>
 800e5b2:	bd10      	pop	{r4, pc}

0800e5b4 <_Balloc>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	b976      	cbnz	r6, 800e5dc <_Balloc+0x28>
 800e5be:	2010      	movs	r0, #16
 800e5c0:	f7ff ffe2 	bl	800e588 <malloc>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	6260      	str	r0, [r4, #36]	; 0x24
 800e5c8:	b920      	cbnz	r0, 800e5d4 <_Balloc+0x20>
 800e5ca:	4b18      	ldr	r3, [pc, #96]	; (800e62c <_Balloc+0x78>)
 800e5cc:	4818      	ldr	r0, [pc, #96]	; (800e630 <_Balloc+0x7c>)
 800e5ce:	2166      	movs	r1, #102	; 0x66
 800e5d0:	f000 fde8 	bl	800f1a4 <__assert_func>
 800e5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5d8:	6006      	str	r6, [r0, #0]
 800e5da:	60c6      	str	r6, [r0, #12]
 800e5dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e5de:	68f3      	ldr	r3, [r6, #12]
 800e5e0:	b183      	cbz	r3, 800e604 <_Balloc+0x50>
 800e5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5ea:	b9b8      	cbnz	r0, 800e61c <_Balloc+0x68>
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	fa01 f605 	lsl.w	r6, r1, r5
 800e5f2:	1d72      	adds	r2, r6, #5
 800e5f4:	0092      	lsls	r2, r2, #2
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f000 fb5a 	bl	800ecb0 <_calloc_r>
 800e5fc:	b160      	cbz	r0, 800e618 <_Balloc+0x64>
 800e5fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e602:	e00e      	b.n	800e622 <_Balloc+0x6e>
 800e604:	2221      	movs	r2, #33	; 0x21
 800e606:	2104      	movs	r1, #4
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 fb51 	bl	800ecb0 <_calloc_r>
 800e60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e610:	60f0      	str	r0, [r6, #12]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1e4      	bne.n	800e5e2 <_Balloc+0x2e>
 800e618:	2000      	movs	r0, #0
 800e61a:	bd70      	pop	{r4, r5, r6, pc}
 800e61c:	6802      	ldr	r2, [r0, #0]
 800e61e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e622:	2300      	movs	r3, #0
 800e624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e628:	e7f7      	b.n	800e61a <_Balloc+0x66>
 800e62a:	bf00      	nop
 800e62c:	08010581 	.word	0x08010581
 800e630:	08010668 	.word	0x08010668

0800e634 <_Bfree>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e638:	4605      	mov	r5, r0
 800e63a:	460c      	mov	r4, r1
 800e63c:	b976      	cbnz	r6, 800e65c <_Bfree+0x28>
 800e63e:	2010      	movs	r0, #16
 800e640:	f7ff ffa2 	bl	800e588 <malloc>
 800e644:	4602      	mov	r2, r0
 800e646:	6268      	str	r0, [r5, #36]	; 0x24
 800e648:	b920      	cbnz	r0, 800e654 <_Bfree+0x20>
 800e64a:	4b09      	ldr	r3, [pc, #36]	; (800e670 <_Bfree+0x3c>)
 800e64c:	4809      	ldr	r0, [pc, #36]	; (800e674 <_Bfree+0x40>)
 800e64e:	218a      	movs	r1, #138	; 0x8a
 800e650:	f000 fda8 	bl	800f1a4 <__assert_func>
 800e654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e658:	6006      	str	r6, [r0, #0]
 800e65a:	60c6      	str	r6, [r0, #12]
 800e65c:	b13c      	cbz	r4, 800e66e <_Bfree+0x3a>
 800e65e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e660:	6862      	ldr	r2, [r4, #4]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e668:	6021      	str	r1, [r4, #0]
 800e66a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	08010581 	.word	0x08010581
 800e674:	08010668 	.word	0x08010668

0800e678 <__multadd>:
 800e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67c:	690e      	ldr	r6, [r1, #16]
 800e67e:	4607      	mov	r7, r0
 800e680:	4698      	mov	r8, r3
 800e682:	460c      	mov	r4, r1
 800e684:	f101 0014 	add.w	r0, r1, #20
 800e688:	2300      	movs	r3, #0
 800e68a:	6805      	ldr	r5, [r0, #0]
 800e68c:	b2a9      	uxth	r1, r5
 800e68e:	fb02 8101 	mla	r1, r2, r1, r8
 800e692:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e696:	0c2d      	lsrs	r5, r5, #16
 800e698:	fb02 c505 	mla	r5, r2, r5, ip
 800e69c:	b289      	uxth	r1, r1
 800e69e:	3301      	adds	r3, #1
 800e6a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e6a4:	429e      	cmp	r6, r3
 800e6a6:	f840 1b04 	str.w	r1, [r0], #4
 800e6aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e6ae:	dcec      	bgt.n	800e68a <__multadd+0x12>
 800e6b0:	f1b8 0f00 	cmp.w	r8, #0
 800e6b4:	d022      	beq.n	800e6fc <__multadd+0x84>
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	42b3      	cmp	r3, r6
 800e6ba:	dc19      	bgt.n	800e6f0 <__multadd+0x78>
 800e6bc:	6861      	ldr	r1, [r4, #4]
 800e6be:	4638      	mov	r0, r7
 800e6c0:	3101      	adds	r1, #1
 800e6c2:	f7ff ff77 	bl	800e5b4 <_Balloc>
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	b928      	cbnz	r0, 800e6d6 <__multadd+0x5e>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	4b0d      	ldr	r3, [pc, #52]	; (800e704 <__multadd+0x8c>)
 800e6ce:	480e      	ldr	r0, [pc, #56]	; (800e708 <__multadd+0x90>)
 800e6d0:	21b5      	movs	r1, #181	; 0xb5
 800e6d2:	f000 fd67 	bl	800f1a4 <__assert_func>
 800e6d6:	6922      	ldr	r2, [r4, #16]
 800e6d8:	3202      	adds	r2, #2
 800e6da:	f104 010c 	add.w	r1, r4, #12
 800e6de:	0092      	lsls	r2, r2, #2
 800e6e0:	300c      	adds	r0, #12
 800e6e2:	f7ff ff59 	bl	800e598 <memcpy>
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	f7ff ffa3 	bl	800e634 <_Bfree>
 800e6ee:	462c      	mov	r4, r5
 800e6f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e6f4:	3601      	adds	r6, #1
 800e6f6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e6fa:	6126      	str	r6, [r4, #16]
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e702:	bf00      	nop
 800e704:	080105f7 	.word	0x080105f7
 800e708:	08010668 	.word	0x08010668

0800e70c <__hi0bits>:
 800e70c:	0c03      	lsrs	r3, r0, #16
 800e70e:	041b      	lsls	r3, r3, #16
 800e710:	b9d3      	cbnz	r3, 800e748 <__hi0bits+0x3c>
 800e712:	0400      	lsls	r0, r0, #16
 800e714:	2310      	movs	r3, #16
 800e716:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e71a:	bf04      	itt	eq
 800e71c:	0200      	lsleq	r0, r0, #8
 800e71e:	3308      	addeq	r3, #8
 800e720:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e724:	bf04      	itt	eq
 800e726:	0100      	lsleq	r0, r0, #4
 800e728:	3304      	addeq	r3, #4
 800e72a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e72e:	bf04      	itt	eq
 800e730:	0080      	lsleq	r0, r0, #2
 800e732:	3302      	addeq	r3, #2
 800e734:	2800      	cmp	r0, #0
 800e736:	db05      	blt.n	800e744 <__hi0bits+0x38>
 800e738:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e73c:	f103 0301 	add.w	r3, r3, #1
 800e740:	bf08      	it	eq
 800e742:	2320      	moveq	r3, #32
 800e744:	4618      	mov	r0, r3
 800e746:	4770      	bx	lr
 800e748:	2300      	movs	r3, #0
 800e74a:	e7e4      	b.n	800e716 <__hi0bits+0xa>

0800e74c <__lo0bits>:
 800e74c:	6803      	ldr	r3, [r0, #0]
 800e74e:	f013 0207 	ands.w	r2, r3, #7
 800e752:	4601      	mov	r1, r0
 800e754:	d00b      	beq.n	800e76e <__lo0bits+0x22>
 800e756:	07da      	lsls	r2, r3, #31
 800e758:	d424      	bmi.n	800e7a4 <__lo0bits+0x58>
 800e75a:	0798      	lsls	r0, r3, #30
 800e75c:	bf49      	itett	mi
 800e75e:	085b      	lsrmi	r3, r3, #1
 800e760:	089b      	lsrpl	r3, r3, #2
 800e762:	2001      	movmi	r0, #1
 800e764:	600b      	strmi	r3, [r1, #0]
 800e766:	bf5c      	itt	pl
 800e768:	600b      	strpl	r3, [r1, #0]
 800e76a:	2002      	movpl	r0, #2
 800e76c:	4770      	bx	lr
 800e76e:	b298      	uxth	r0, r3
 800e770:	b9b0      	cbnz	r0, 800e7a0 <__lo0bits+0x54>
 800e772:	0c1b      	lsrs	r3, r3, #16
 800e774:	2010      	movs	r0, #16
 800e776:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e77a:	bf04      	itt	eq
 800e77c:	0a1b      	lsreq	r3, r3, #8
 800e77e:	3008      	addeq	r0, #8
 800e780:	071a      	lsls	r2, r3, #28
 800e782:	bf04      	itt	eq
 800e784:	091b      	lsreq	r3, r3, #4
 800e786:	3004      	addeq	r0, #4
 800e788:	079a      	lsls	r2, r3, #30
 800e78a:	bf04      	itt	eq
 800e78c:	089b      	lsreq	r3, r3, #2
 800e78e:	3002      	addeq	r0, #2
 800e790:	07da      	lsls	r2, r3, #31
 800e792:	d403      	bmi.n	800e79c <__lo0bits+0x50>
 800e794:	085b      	lsrs	r3, r3, #1
 800e796:	f100 0001 	add.w	r0, r0, #1
 800e79a:	d005      	beq.n	800e7a8 <__lo0bits+0x5c>
 800e79c:	600b      	str	r3, [r1, #0]
 800e79e:	4770      	bx	lr
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	e7e8      	b.n	800e776 <__lo0bits+0x2a>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	4770      	bx	lr
 800e7a8:	2020      	movs	r0, #32
 800e7aa:	4770      	bx	lr

0800e7ac <__i2b>:
 800e7ac:	b510      	push	{r4, lr}
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	f7ff feff 	bl	800e5b4 <_Balloc>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	b928      	cbnz	r0, 800e7c6 <__i2b+0x1a>
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <__i2b+0x24>)
 800e7bc:	4805      	ldr	r0, [pc, #20]	; (800e7d4 <__i2b+0x28>)
 800e7be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e7c2:	f000 fcef 	bl	800f1a4 <__assert_func>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	6144      	str	r4, [r0, #20]
 800e7ca:	6103      	str	r3, [r0, #16]
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	bf00      	nop
 800e7d0:	080105f7 	.word	0x080105f7
 800e7d4:	08010668 	.word	0x08010668

0800e7d8 <__multiply>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	4614      	mov	r4, r2
 800e7de:	690a      	ldr	r2, [r1, #16]
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	bfb8      	it	lt
 800e7e6:	460b      	movlt	r3, r1
 800e7e8:	460d      	mov	r5, r1
 800e7ea:	bfbc      	itt	lt
 800e7ec:	4625      	movlt	r5, r4
 800e7ee:	461c      	movlt	r4, r3
 800e7f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e7f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e7f8:	68ab      	ldr	r3, [r5, #8]
 800e7fa:	6869      	ldr	r1, [r5, #4]
 800e7fc:	eb0a 0709 	add.w	r7, sl, r9
 800e800:	42bb      	cmp	r3, r7
 800e802:	b085      	sub	sp, #20
 800e804:	bfb8      	it	lt
 800e806:	3101      	addlt	r1, #1
 800e808:	f7ff fed4 	bl	800e5b4 <_Balloc>
 800e80c:	b930      	cbnz	r0, 800e81c <__multiply+0x44>
 800e80e:	4602      	mov	r2, r0
 800e810:	4b42      	ldr	r3, [pc, #264]	; (800e91c <__multiply+0x144>)
 800e812:	4843      	ldr	r0, [pc, #268]	; (800e920 <__multiply+0x148>)
 800e814:	f240 115d 	movw	r1, #349	; 0x15d
 800e818:	f000 fcc4 	bl	800f1a4 <__assert_func>
 800e81c:	f100 0614 	add.w	r6, r0, #20
 800e820:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e824:	4633      	mov	r3, r6
 800e826:	2200      	movs	r2, #0
 800e828:	4543      	cmp	r3, r8
 800e82a:	d31e      	bcc.n	800e86a <__multiply+0x92>
 800e82c:	f105 0c14 	add.w	ip, r5, #20
 800e830:	f104 0314 	add.w	r3, r4, #20
 800e834:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e838:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e83c:	9202      	str	r2, [sp, #8]
 800e83e:	ebac 0205 	sub.w	r2, ip, r5
 800e842:	3a15      	subs	r2, #21
 800e844:	f022 0203 	bic.w	r2, r2, #3
 800e848:	3204      	adds	r2, #4
 800e84a:	f105 0115 	add.w	r1, r5, #21
 800e84e:	458c      	cmp	ip, r1
 800e850:	bf38      	it	cc
 800e852:	2204      	movcc	r2, #4
 800e854:	9201      	str	r2, [sp, #4]
 800e856:	9a02      	ldr	r2, [sp, #8]
 800e858:	9303      	str	r3, [sp, #12]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d808      	bhi.n	800e870 <__multiply+0x98>
 800e85e:	2f00      	cmp	r7, #0
 800e860:	dc55      	bgt.n	800e90e <__multiply+0x136>
 800e862:	6107      	str	r7, [r0, #16]
 800e864:	b005      	add	sp, #20
 800e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86a:	f843 2b04 	str.w	r2, [r3], #4
 800e86e:	e7db      	b.n	800e828 <__multiply+0x50>
 800e870:	f8b3 a000 	ldrh.w	sl, [r3]
 800e874:	f1ba 0f00 	cmp.w	sl, #0
 800e878:	d020      	beq.n	800e8bc <__multiply+0xe4>
 800e87a:	f105 0e14 	add.w	lr, r5, #20
 800e87e:	46b1      	mov	r9, r6
 800e880:	2200      	movs	r2, #0
 800e882:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e886:	f8d9 b000 	ldr.w	fp, [r9]
 800e88a:	b2a1      	uxth	r1, r4
 800e88c:	fa1f fb8b 	uxth.w	fp, fp
 800e890:	fb0a b101 	mla	r1, sl, r1, fp
 800e894:	4411      	add	r1, r2
 800e896:	f8d9 2000 	ldr.w	r2, [r9]
 800e89a:	0c24      	lsrs	r4, r4, #16
 800e89c:	0c12      	lsrs	r2, r2, #16
 800e89e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e8a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e8a6:	b289      	uxth	r1, r1
 800e8a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e8ac:	45f4      	cmp	ip, lr
 800e8ae:	f849 1b04 	str.w	r1, [r9], #4
 800e8b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e8b6:	d8e4      	bhi.n	800e882 <__multiply+0xaa>
 800e8b8:	9901      	ldr	r1, [sp, #4]
 800e8ba:	5072      	str	r2, [r6, r1]
 800e8bc:	9a03      	ldr	r2, [sp, #12]
 800e8be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	f1b9 0f00 	cmp.w	r9, #0
 800e8c8:	d01f      	beq.n	800e90a <__multiply+0x132>
 800e8ca:	6834      	ldr	r4, [r6, #0]
 800e8cc:	f105 0114 	add.w	r1, r5, #20
 800e8d0:	46b6      	mov	lr, r6
 800e8d2:	f04f 0a00 	mov.w	sl, #0
 800e8d6:	880a      	ldrh	r2, [r1, #0]
 800e8d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e8dc:	fb09 b202 	mla	r2, r9, r2, fp
 800e8e0:	4492      	add	sl, r2
 800e8e2:	b2a4      	uxth	r4, r4
 800e8e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e8e8:	f84e 4b04 	str.w	r4, [lr], #4
 800e8ec:	f851 4b04 	ldr.w	r4, [r1], #4
 800e8f0:	f8be 2000 	ldrh.w	r2, [lr]
 800e8f4:	0c24      	lsrs	r4, r4, #16
 800e8f6:	fb09 2404 	mla	r4, r9, r4, r2
 800e8fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e8fe:	458c      	cmp	ip, r1
 800e900:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e904:	d8e7      	bhi.n	800e8d6 <__multiply+0xfe>
 800e906:	9a01      	ldr	r2, [sp, #4]
 800e908:	50b4      	str	r4, [r6, r2]
 800e90a:	3604      	adds	r6, #4
 800e90c:	e7a3      	b.n	800e856 <__multiply+0x7e>
 800e90e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1a5      	bne.n	800e862 <__multiply+0x8a>
 800e916:	3f01      	subs	r7, #1
 800e918:	e7a1      	b.n	800e85e <__multiply+0x86>
 800e91a:	bf00      	nop
 800e91c:	080105f7 	.word	0x080105f7
 800e920:	08010668 	.word	0x08010668

0800e924 <__pow5mult>:
 800e924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e928:	4615      	mov	r5, r2
 800e92a:	f012 0203 	ands.w	r2, r2, #3
 800e92e:	4606      	mov	r6, r0
 800e930:	460f      	mov	r7, r1
 800e932:	d007      	beq.n	800e944 <__pow5mult+0x20>
 800e934:	4c25      	ldr	r4, [pc, #148]	; (800e9cc <__pow5mult+0xa8>)
 800e936:	3a01      	subs	r2, #1
 800e938:	2300      	movs	r3, #0
 800e93a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e93e:	f7ff fe9b 	bl	800e678 <__multadd>
 800e942:	4607      	mov	r7, r0
 800e944:	10ad      	asrs	r5, r5, #2
 800e946:	d03d      	beq.n	800e9c4 <__pow5mult+0xa0>
 800e948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e94a:	b97c      	cbnz	r4, 800e96c <__pow5mult+0x48>
 800e94c:	2010      	movs	r0, #16
 800e94e:	f7ff fe1b 	bl	800e588 <malloc>
 800e952:	4602      	mov	r2, r0
 800e954:	6270      	str	r0, [r6, #36]	; 0x24
 800e956:	b928      	cbnz	r0, 800e964 <__pow5mult+0x40>
 800e958:	4b1d      	ldr	r3, [pc, #116]	; (800e9d0 <__pow5mult+0xac>)
 800e95a:	481e      	ldr	r0, [pc, #120]	; (800e9d4 <__pow5mult+0xb0>)
 800e95c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e960:	f000 fc20 	bl	800f1a4 <__assert_func>
 800e964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e968:	6004      	str	r4, [r0, #0]
 800e96a:	60c4      	str	r4, [r0, #12]
 800e96c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e974:	b94c      	cbnz	r4, 800e98a <__pow5mult+0x66>
 800e976:	f240 2171 	movw	r1, #625	; 0x271
 800e97a:	4630      	mov	r0, r6
 800e97c:	f7ff ff16 	bl	800e7ac <__i2b>
 800e980:	2300      	movs	r3, #0
 800e982:	f8c8 0008 	str.w	r0, [r8, #8]
 800e986:	4604      	mov	r4, r0
 800e988:	6003      	str	r3, [r0, #0]
 800e98a:	f04f 0900 	mov.w	r9, #0
 800e98e:	07eb      	lsls	r3, r5, #31
 800e990:	d50a      	bpl.n	800e9a8 <__pow5mult+0x84>
 800e992:	4639      	mov	r1, r7
 800e994:	4622      	mov	r2, r4
 800e996:	4630      	mov	r0, r6
 800e998:	f7ff ff1e 	bl	800e7d8 <__multiply>
 800e99c:	4639      	mov	r1, r7
 800e99e:	4680      	mov	r8, r0
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f7ff fe47 	bl	800e634 <_Bfree>
 800e9a6:	4647      	mov	r7, r8
 800e9a8:	106d      	asrs	r5, r5, #1
 800e9aa:	d00b      	beq.n	800e9c4 <__pow5mult+0xa0>
 800e9ac:	6820      	ldr	r0, [r4, #0]
 800e9ae:	b938      	cbnz	r0, 800e9c0 <__pow5mult+0x9c>
 800e9b0:	4622      	mov	r2, r4
 800e9b2:	4621      	mov	r1, r4
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	f7ff ff0f 	bl	800e7d8 <__multiply>
 800e9ba:	6020      	str	r0, [r4, #0]
 800e9bc:	f8c0 9000 	str.w	r9, [r0]
 800e9c0:	4604      	mov	r4, r0
 800e9c2:	e7e4      	b.n	800e98e <__pow5mult+0x6a>
 800e9c4:	4638      	mov	r0, r7
 800e9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ca:	bf00      	nop
 800e9cc:	080107b8 	.word	0x080107b8
 800e9d0:	08010581 	.word	0x08010581
 800e9d4:	08010668 	.word	0x08010668

0800e9d8 <__lshift>:
 800e9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9dc:	460c      	mov	r4, r1
 800e9de:	6849      	ldr	r1, [r1, #4]
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9e6:	68a3      	ldr	r3, [r4, #8]
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	4691      	mov	r9, r2
 800e9ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9f0:	f108 0601 	add.w	r6, r8, #1
 800e9f4:	42b3      	cmp	r3, r6
 800e9f6:	db0b      	blt.n	800ea10 <__lshift+0x38>
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	f7ff fddb 	bl	800e5b4 <_Balloc>
 800e9fe:	4605      	mov	r5, r0
 800ea00:	b948      	cbnz	r0, 800ea16 <__lshift+0x3e>
 800ea02:	4602      	mov	r2, r0
 800ea04:	4b28      	ldr	r3, [pc, #160]	; (800eaa8 <__lshift+0xd0>)
 800ea06:	4829      	ldr	r0, [pc, #164]	; (800eaac <__lshift+0xd4>)
 800ea08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea0c:	f000 fbca 	bl	800f1a4 <__assert_func>
 800ea10:	3101      	adds	r1, #1
 800ea12:	005b      	lsls	r3, r3, #1
 800ea14:	e7ee      	b.n	800e9f4 <__lshift+0x1c>
 800ea16:	2300      	movs	r3, #0
 800ea18:	f100 0114 	add.w	r1, r0, #20
 800ea1c:	f100 0210 	add.w	r2, r0, #16
 800ea20:	4618      	mov	r0, r3
 800ea22:	4553      	cmp	r3, sl
 800ea24:	db33      	blt.n	800ea8e <__lshift+0xb6>
 800ea26:	6920      	ldr	r0, [r4, #16]
 800ea28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea2c:	f104 0314 	add.w	r3, r4, #20
 800ea30:	f019 091f 	ands.w	r9, r9, #31
 800ea34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea3c:	d02b      	beq.n	800ea96 <__lshift+0xbe>
 800ea3e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea42:	468a      	mov	sl, r1
 800ea44:	2200      	movs	r2, #0
 800ea46:	6818      	ldr	r0, [r3, #0]
 800ea48:	fa00 f009 	lsl.w	r0, r0, r9
 800ea4c:	4302      	orrs	r2, r0
 800ea4e:	f84a 2b04 	str.w	r2, [sl], #4
 800ea52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea56:	459c      	cmp	ip, r3
 800ea58:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea5c:	d8f3      	bhi.n	800ea46 <__lshift+0x6e>
 800ea5e:	ebac 0304 	sub.w	r3, ip, r4
 800ea62:	3b15      	subs	r3, #21
 800ea64:	f023 0303 	bic.w	r3, r3, #3
 800ea68:	3304      	adds	r3, #4
 800ea6a:	f104 0015 	add.w	r0, r4, #21
 800ea6e:	4584      	cmp	ip, r0
 800ea70:	bf38      	it	cc
 800ea72:	2304      	movcc	r3, #4
 800ea74:	50ca      	str	r2, [r1, r3]
 800ea76:	b10a      	cbz	r2, 800ea7c <__lshift+0xa4>
 800ea78:	f108 0602 	add.w	r6, r8, #2
 800ea7c:	3e01      	subs	r6, #1
 800ea7e:	4638      	mov	r0, r7
 800ea80:	612e      	str	r6, [r5, #16]
 800ea82:	4621      	mov	r1, r4
 800ea84:	f7ff fdd6 	bl	800e634 <_Bfree>
 800ea88:	4628      	mov	r0, r5
 800ea8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea92:	3301      	adds	r3, #1
 800ea94:	e7c5      	b.n	800ea22 <__lshift+0x4a>
 800ea96:	3904      	subs	r1, #4
 800ea98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800eaa0:	459c      	cmp	ip, r3
 800eaa2:	d8f9      	bhi.n	800ea98 <__lshift+0xc0>
 800eaa4:	e7ea      	b.n	800ea7c <__lshift+0xa4>
 800eaa6:	bf00      	nop
 800eaa8:	080105f7 	.word	0x080105f7
 800eaac:	08010668 	.word	0x08010668

0800eab0 <__mcmp>:
 800eab0:	b530      	push	{r4, r5, lr}
 800eab2:	6902      	ldr	r2, [r0, #16]
 800eab4:	690c      	ldr	r4, [r1, #16]
 800eab6:	1b12      	subs	r2, r2, r4
 800eab8:	d10e      	bne.n	800ead8 <__mcmp+0x28>
 800eaba:	f100 0314 	add.w	r3, r0, #20
 800eabe:	3114      	adds	r1, #20
 800eac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eacc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ead0:	42a5      	cmp	r5, r4
 800ead2:	d003      	beq.n	800eadc <__mcmp+0x2c>
 800ead4:	d305      	bcc.n	800eae2 <__mcmp+0x32>
 800ead6:	2201      	movs	r2, #1
 800ead8:	4610      	mov	r0, r2
 800eada:	bd30      	pop	{r4, r5, pc}
 800eadc:	4283      	cmp	r3, r0
 800eade:	d3f3      	bcc.n	800eac8 <__mcmp+0x18>
 800eae0:	e7fa      	b.n	800ead8 <__mcmp+0x28>
 800eae2:	f04f 32ff 	mov.w	r2, #4294967295
 800eae6:	e7f7      	b.n	800ead8 <__mcmp+0x28>

0800eae8 <__mdiff>:
 800eae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	460c      	mov	r4, r1
 800eaee:	4606      	mov	r6, r0
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	4617      	mov	r7, r2
 800eaf6:	f7ff ffdb 	bl	800eab0 <__mcmp>
 800eafa:	1e05      	subs	r5, r0, #0
 800eafc:	d110      	bne.n	800eb20 <__mdiff+0x38>
 800eafe:	4629      	mov	r1, r5
 800eb00:	4630      	mov	r0, r6
 800eb02:	f7ff fd57 	bl	800e5b4 <_Balloc>
 800eb06:	b930      	cbnz	r0, 800eb16 <__mdiff+0x2e>
 800eb08:	4b39      	ldr	r3, [pc, #228]	; (800ebf0 <__mdiff+0x108>)
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	f240 2132 	movw	r1, #562	; 0x232
 800eb10:	4838      	ldr	r0, [pc, #224]	; (800ebf4 <__mdiff+0x10c>)
 800eb12:	f000 fb47 	bl	800f1a4 <__assert_func>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	bfa4      	itt	ge
 800eb22:	463b      	movge	r3, r7
 800eb24:	4627      	movge	r7, r4
 800eb26:	4630      	mov	r0, r6
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	bfa6      	itte	ge
 800eb2c:	461c      	movge	r4, r3
 800eb2e:	2500      	movge	r5, #0
 800eb30:	2501      	movlt	r5, #1
 800eb32:	f7ff fd3f 	bl	800e5b4 <_Balloc>
 800eb36:	b920      	cbnz	r0, 800eb42 <__mdiff+0x5a>
 800eb38:	4b2d      	ldr	r3, [pc, #180]	; (800ebf0 <__mdiff+0x108>)
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb40:	e7e6      	b.n	800eb10 <__mdiff+0x28>
 800eb42:	693e      	ldr	r6, [r7, #16]
 800eb44:	60c5      	str	r5, [r0, #12]
 800eb46:	6925      	ldr	r5, [r4, #16]
 800eb48:	f107 0114 	add.w	r1, r7, #20
 800eb4c:	f104 0914 	add.w	r9, r4, #20
 800eb50:	f100 0e14 	add.w	lr, r0, #20
 800eb54:	f107 0210 	add.w	r2, r7, #16
 800eb58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800eb5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eb60:	46f2      	mov	sl, lr
 800eb62:	2700      	movs	r7, #0
 800eb64:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb6c:	fa1f f883 	uxth.w	r8, r3
 800eb70:	fa17 f78b 	uxtah	r7, r7, fp
 800eb74:	0c1b      	lsrs	r3, r3, #16
 800eb76:	eba7 0808 	sub.w	r8, r7, r8
 800eb7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb82:	fa1f f888 	uxth.w	r8, r8
 800eb86:	141f      	asrs	r7, r3, #16
 800eb88:	454d      	cmp	r5, r9
 800eb8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb8e:	f84a 3b04 	str.w	r3, [sl], #4
 800eb92:	d8e7      	bhi.n	800eb64 <__mdiff+0x7c>
 800eb94:	1b2b      	subs	r3, r5, r4
 800eb96:	3b15      	subs	r3, #21
 800eb98:	f023 0303 	bic.w	r3, r3, #3
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	3415      	adds	r4, #21
 800eba0:	42a5      	cmp	r5, r4
 800eba2:	bf38      	it	cc
 800eba4:	2304      	movcc	r3, #4
 800eba6:	4419      	add	r1, r3
 800eba8:	4473      	add	r3, lr
 800ebaa:	469e      	mov	lr, r3
 800ebac:	460d      	mov	r5, r1
 800ebae:	4565      	cmp	r5, ip
 800ebb0:	d30e      	bcc.n	800ebd0 <__mdiff+0xe8>
 800ebb2:	f10c 0203 	add.w	r2, ip, #3
 800ebb6:	1a52      	subs	r2, r2, r1
 800ebb8:	f022 0203 	bic.w	r2, r2, #3
 800ebbc:	3903      	subs	r1, #3
 800ebbe:	458c      	cmp	ip, r1
 800ebc0:	bf38      	it	cc
 800ebc2:	2200      	movcc	r2, #0
 800ebc4:	441a      	add	r2, r3
 800ebc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ebca:	b17b      	cbz	r3, 800ebec <__mdiff+0x104>
 800ebcc:	6106      	str	r6, [r0, #16]
 800ebce:	e7a5      	b.n	800eb1c <__mdiff+0x34>
 800ebd0:	f855 8b04 	ldr.w	r8, [r5], #4
 800ebd4:	fa17 f488 	uxtah	r4, r7, r8
 800ebd8:	1422      	asrs	r2, r4, #16
 800ebda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ebde:	b2a4      	uxth	r4, r4
 800ebe0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ebe4:	f84e 4b04 	str.w	r4, [lr], #4
 800ebe8:	1417      	asrs	r7, r2, #16
 800ebea:	e7e0      	b.n	800ebae <__mdiff+0xc6>
 800ebec:	3e01      	subs	r6, #1
 800ebee:	e7ea      	b.n	800ebc6 <__mdiff+0xde>
 800ebf0:	080105f7 	.word	0x080105f7
 800ebf4:	08010668 	.word	0x08010668

0800ebf8 <__d2b>:
 800ebf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebfc:	4689      	mov	r9, r1
 800ebfe:	2101      	movs	r1, #1
 800ec00:	ec57 6b10 	vmov	r6, r7, d0
 800ec04:	4690      	mov	r8, r2
 800ec06:	f7ff fcd5 	bl	800e5b4 <_Balloc>
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	b930      	cbnz	r0, 800ec1c <__d2b+0x24>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	4b25      	ldr	r3, [pc, #148]	; (800eca8 <__d2b+0xb0>)
 800ec12:	4826      	ldr	r0, [pc, #152]	; (800ecac <__d2b+0xb4>)
 800ec14:	f240 310a 	movw	r1, #778	; 0x30a
 800ec18:	f000 fac4 	bl	800f1a4 <__assert_func>
 800ec1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec24:	bb35      	cbnz	r5, 800ec74 <__d2b+0x7c>
 800ec26:	2e00      	cmp	r6, #0
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	d028      	beq.n	800ec7e <__d2b+0x86>
 800ec2c:	4668      	mov	r0, sp
 800ec2e:	9600      	str	r6, [sp, #0]
 800ec30:	f7ff fd8c 	bl	800e74c <__lo0bits>
 800ec34:	9900      	ldr	r1, [sp, #0]
 800ec36:	b300      	cbz	r0, 800ec7a <__d2b+0x82>
 800ec38:	9a01      	ldr	r2, [sp, #4]
 800ec3a:	f1c0 0320 	rsb	r3, r0, #32
 800ec3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec42:	430b      	orrs	r3, r1
 800ec44:	40c2      	lsrs	r2, r0
 800ec46:	6163      	str	r3, [r4, #20]
 800ec48:	9201      	str	r2, [sp, #4]
 800ec4a:	9b01      	ldr	r3, [sp, #4]
 800ec4c:	61a3      	str	r3, [r4, #24]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bf14      	ite	ne
 800ec52:	2202      	movne	r2, #2
 800ec54:	2201      	moveq	r2, #1
 800ec56:	6122      	str	r2, [r4, #16]
 800ec58:	b1d5      	cbz	r5, 800ec90 <__d2b+0x98>
 800ec5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec5e:	4405      	add	r5, r0
 800ec60:	f8c9 5000 	str.w	r5, [r9]
 800ec64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec68:	f8c8 0000 	str.w	r0, [r8]
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	b003      	add	sp, #12
 800ec70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec78:	e7d5      	b.n	800ec26 <__d2b+0x2e>
 800ec7a:	6161      	str	r1, [r4, #20]
 800ec7c:	e7e5      	b.n	800ec4a <__d2b+0x52>
 800ec7e:	a801      	add	r0, sp, #4
 800ec80:	f7ff fd64 	bl	800e74c <__lo0bits>
 800ec84:	9b01      	ldr	r3, [sp, #4]
 800ec86:	6163      	str	r3, [r4, #20]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	6122      	str	r2, [r4, #16]
 800ec8c:	3020      	adds	r0, #32
 800ec8e:	e7e3      	b.n	800ec58 <__d2b+0x60>
 800ec90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec98:	f8c9 0000 	str.w	r0, [r9]
 800ec9c:	6918      	ldr	r0, [r3, #16]
 800ec9e:	f7ff fd35 	bl	800e70c <__hi0bits>
 800eca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eca6:	e7df      	b.n	800ec68 <__d2b+0x70>
 800eca8:	080105f7 	.word	0x080105f7
 800ecac:	08010668 	.word	0x08010668

0800ecb0 <_calloc_r>:
 800ecb0:	b513      	push	{r0, r1, r4, lr}
 800ecb2:	434a      	muls	r2, r1
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	9201      	str	r2, [sp, #4]
 800ecb8:	f000 f85a 	bl	800ed70 <_malloc_r>
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	b118      	cbz	r0, 800ecc8 <_calloc_r+0x18>
 800ecc0:	9a01      	ldr	r2, [sp, #4]
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	f7fd fe02 	bl	800c8cc <memset>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	b002      	add	sp, #8
 800eccc:	bd10      	pop	{r4, pc}
	...

0800ecd0 <_free_r>:
 800ecd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecd2:	2900      	cmp	r1, #0
 800ecd4:	d048      	beq.n	800ed68 <_free_r+0x98>
 800ecd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecda:	9001      	str	r0, [sp, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f1a1 0404 	sub.w	r4, r1, #4
 800ece2:	bfb8      	it	lt
 800ece4:	18e4      	addlt	r4, r4, r3
 800ece6:	f000 fae3 	bl	800f2b0 <__malloc_lock>
 800ecea:	4a20      	ldr	r2, [pc, #128]	; (800ed6c <_free_r+0x9c>)
 800ecec:	9801      	ldr	r0, [sp, #4]
 800ecee:	6813      	ldr	r3, [r2, #0]
 800ecf0:	4615      	mov	r5, r2
 800ecf2:	b933      	cbnz	r3, 800ed02 <_free_r+0x32>
 800ecf4:	6063      	str	r3, [r4, #4]
 800ecf6:	6014      	str	r4, [r2, #0]
 800ecf8:	b003      	add	sp, #12
 800ecfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecfe:	f000 badd 	b.w	800f2bc <__malloc_unlock>
 800ed02:	42a3      	cmp	r3, r4
 800ed04:	d90b      	bls.n	800ed1e <_free_r+0x4e>
 800ed06:	6821      	ldr	r1, [r4, #0]
 800ed08:	1862      	adds	r2, r4, r1
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	bf04      	itt	eq
 800ed0e:	681a      	ldreq	r2, [r3, #0]
 800ed10:	685b      	ldreq	r3, [r3, #4]
 800ed12:	6063      	str	r3, [r4, #4]
 800ed14:	bf04      	itt	eq
 800ed16:	1852      	addeq	r2, r2, r1
 800ed18:	6022      	streq	r2, [r4, #0]
 800ed1a:	602c      	str	r4, [r5, #0]
 800ed1c:	e7ec      	b.n	800ecf8 <_free_r+0x28>
 800ed1e:	461a      	mov	r2, r3
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	b10b      	cbz	r3, 800ed28 <_free_r+0x58>
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	d9fa      	bls.n	800ed1e <_free_r+0x4e>
 800ed28:	6811      	ldr	r1, [r2, #0]
 800ed2a:	1855      	adds	r5, r2, r1
 800ed2c:	42a5      	cmp	r5, r4
 800ed2e:	d10b      	bne.n	800ed48 <_free_r+0x78>
 800ed30:	6824      	ldr	r4, [r4, #0]
 800ed32:	4421      	add	r1, r4
 800ed34:	1854      	adds	r4, r2, r1
 800ed36:	42a3      	cmp	r3, r4
 800ed38:	6011      	str	r1, [r2, #0]
 800ed3a:	d1dd      	bne.n	800ecf8 <_free_r+0x28>
 800ed3c:	681c      	ldr	r4, [r3, #0]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	6053      	str	r3, [r2, #4]
 800ed42:	4421      	add	r1, r4
 800ed44:	6011      	str	r1, [r2, #0]
 800ed46:	e7d7      	b.n	800ecf8 <_free_r+0x28>
 800ed48:	d902      	bls.n	800ed50 <_free_r+0x80>
 800ed4a:	230c      	movs	r3, #12
 800ed4c:	6003      	str	r3, [r0, #0]
 800ed4e:	e7d3      	b.n	800ecf8 <_free_r+0x28>
 800ed50:	6825      	ldr	r5, [r4, #0]
 800ed52:	1961      	adds	r1, r4, r5
 800ed54:	428b      	cmp	r3, r1
 800ed56:	bf04      	itt	eq
 800ed58:	6819      	ldreq	r1, [r3, #0]
 800ed5a:	685b      	ldreq	r3, [r3, #4]
 800ed5c:	6063      	str	r3, [r4, #4]
 800ed5e:	bf04      	itt	eq
 800ed60:	1949      	addeq	r1, r1, r5
 800ed62:	6021      	streq	r1, [r4, #0]
 800ed64:	6054      	str	r4, [r2, #4]
 800ed66:	e7c7      	b.n	800ecf8 <_free_r+0x28>
 800ed68:	b003      	add	sp, #12
 800ed6a:	bd30      	pop	{r4, r5, pc}
 800ed6c:	20000294 	.word	0x20000294

0800ed70 <_malloc_r>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	1ccd      	adds	r5, r1, #3
 800ed74:	f025 0503 	bic.w	r5, r5, #3
 800ed78:	3508      	adds	r5, #8
 800ed7a:	2d0c      	cmp	r5, #12
 800ed7c:	bf38      	it	cc
 800ed7e:	250c      	movcc	r5, #12
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	4606      	mov	r6, r0
 800ed84:	db01      	blt.n	800ed8a <_malloc_r+0x1a>
 800ed86:	42a9      	cmp	r1, r5
 800ed88:	d903      	bls.n	800ed92 <_malloc_r+0x22>
 800ed8a:	230c      	movs	r3, #12
 800ed8c:	6033      	str	r3, [r6, #0]
 800ed8e:	2000      	movs	r0, #0
 800ed90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed92:	f000 fa8d 	bl	800f2b0 <__malloc_lock>
 800ed96:	4921      	ldr	r1, [pc, #132]	; (800ee1c <_malloc_r+0xac>)
 800ed98:	680a      	ldr	r2, [r1, #0]
 800ed9a:	4614      	mov	r4, r2
 800ed9c:	b99c      	cbnz	r4, 800edc6 <_malloc_r+0x56>
 800ed9e:	4f20      	ldr	r7, [pc, #128]	; (800ee20 <_malloc_r+0xb0>)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	b923      	cbnz	r3, 800edae <_malloc_r+0x3e>
 800eda4:	4621      	mov	r1, r4
 800eda6:	4630      	mov	r0, r6
 800eda8:	f000 f996 	bl	800f0d8 <_sbrk_r>
 800edac:	6038      	str	r0, [r7, #0]
 800edae:	4629      	mov	r1, r5
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f991 	bl	800f0d8 <_sbrk_r>
 800edb6:	1c43      	adds	r3, r0, #1
 800edb8:	d123      	bne.n	800ee02 <_malloc_r+0x92>
 800edba:	230c      	movs	r3, #12
 800edbc:	6033      	str	r3, [r6, #0]
 800edbe:	4630      	mov	r0, r6
 800edc0:	f000 fa7c 	bl	800f2bc <__malloc_unlock>
 800edc4:	e7e3      	b.n	800ed8e <_malloc_r+0x1e>
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	1b5b      	subs	r3, r3, r5
 800edca:	d417      	bmi.n	800edfc <_malloc_r+0x8c>
 800edcc:	2b0b      	cmp	r3, #11
 800edce:	d903      	bls.n	800edd8 <_malloc_r+0x68>
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	441c      	add	r4, r3
 800edd4:	6025      	str	r5, [r4, #0]
 800edd6:	e004      	b.n	800ede2 <_malloc_r+0x72>
 800edd8:	6863      	ldr	r3, [r4, #4]
 800edda:	42a2      	cmp	r2, r4
 800eddc:	bf0c      	ite	eq
 800edde:	600b      	streq	r3, [r1, #0]
 800ede0:	6053      	strne	r3, [r2, #4]
 800ede2:	4630      	mov	r0, r6
 800ede4:	f000 fa6a 	bl	800f2bc <__malloc_unlock>
 800ede8:	f104 000b 	add.w	r0, r4, #11
 800edec:	1d23      	adds	r3, r4, #4
 800edee:	f020 0007 	bic.w	r0, r0, #7
 800edf2:	1ac2      	subs	r2, r0, r3
 800edf4:	d0cc      	beq.n	800ed90 <_malloc_r+0x20>
 800edf6:	1a1b      	subs	r3, r3, r0
 800edf8:	50a3      	str	r3, [r4, r2]
 800edfa:	e7c9      	b.n	800ed90 <_malloc_r+0x20>
 800edfc:	4622      	mov	r2, r4
 800edfe:	6864      	ldr	r4, [r4, #4]
 800ee00:	e7cc      	b.n	800ed9c <_malloc_r+0x2c>
 800ee02:	1cc4      	adds	r4, r0, #3
 800ee04:	f024 0403 	bic.w	r4, r4, #3
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d0e3      	beq.n	800edd4 <_malloc_r+0x64>
 800ee0c:	1a21      	subs	r1, r4, r0
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f000 f962 	bl	800f0d8 <_sbrk_r>
 800ee14:	3001      	adds	r0, #1
 800ee16:	d1dd      	bne.n	800edd4 <_malloc_r+0x64>
 800ee18:	e7cf      	b.n	800edba <_malloc_r+0x4a>
 800ee1a:	bf00      	nop
 800ee1c:	20000294 	.word	0x20000294
 800ee20:	20000298 	.word	0x20000298

0800ee24 <__sfputc_r>:
 800ee24:	6893      	ldr	r3, [r2, #8]
 800ee26:	3b01      	subs	r3, #1
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	b410      	push	{r4}
 800ee2c:	6093      	str	r3, [r2, #8]
 800ee2e:	da08      	bge.n	800ee42 <__sfputc_r+0x1e>
 800ee30:	6994      	ldr	r4, [r2, #24]
 800ee32:	42a3      	cmp	r3, r4
 800ee34:	db01      	blt.n	800ee3a <__sfputc_r+0x16>
 800ee36:	290a      	cmp	r1, #10
 800ee38:	d103      	bne.n	800ee42 <__sfputc_r+0x1e>
 800ee3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee3e:	f7fe ba45 	b.w	800d2cc <__swbuf_r>
 800ee42:	6813      	ldr	r3, [r2, #0]
 800ee44:	1c58      	adds	r0, r3, #1
 800ee46:	6010      	str	r0, [r2, #0]
 800ee48:	7019      	strb	r1, [r3, #0]
 800ee4a:	4608      	mov	r0, r1
 800ee4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <__sfputs_r>:
 800ee52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee54:	4606      	mov	r6, r0
 800ee56:	460f      	mov	r7, r1
 800ee58:	4614      	mov	r4, r2
 800ee5a:	18d5      	adds	r5, r2, r3
 800ee5c:	42ac      	cmp	r4, r5
 800ee5e:	d101      	bne.n	800ee64 <__sfputs_r+0x12>
 800ee60:	2000      	movs	r0, #0
 800ee62:	e007      	b.n	800ee74 <__sfputs_r+0x22>
 800ee64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee68:	463a      	mov	r2, r7
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff ffda 	bl	800ee24 <__sfputc_r>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d1f3      	bne.n	800ee5c <__sfputs_r+0xa>
 800ee74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee78 <_vfiprintf_r>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	460d      	mov	r5, r1
 800ee7e:	b09d      	sub	sp, #116	; 0x74
 800ee80:	4614      	mov	r4, r2
 800ee82:	4698      	mov	r8, r3
 800ee84:	4606      	mov	r6, r0
 800ee86:	b118      	cbz	r0, 800ee90 <_vfiprintf_r+0x18>
 800ee88:	6983      	ldr	r3, [r0, #24]
 800ee8a:	b90b      	cbnz	r3, 800ee90 <_vfiprintf_r+0x18>
 800ee8c:	f7ff fa72 	bl	800e374 <__sinit>
 800ee90:	4b89      	ldr	r3, [pc, #548]	; (800f0b8 <_vfiprintf_r+0x240>)
 800ee92:	429d      	cmp	r5, r3
 800ee94:	d11b      	bne.n	800eece <_vfiprintf_r+0x56>
 800ee96:	6875      	ldr	r5, [r6, #4]
 800ee98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee9a:	07d9      	lsls	r1, r3, #31
 800ee9c:	d405      	bmi.n	800eeaa <_vfiprintf_r+0x32>
 800ee9e:	89ab      	ldrh	r3, [r5, #12]
 800eea0:	059a      	lsls	r2, r3, #22
 800eea2:	d402      	bmi.n	800eeaa <_vfiprintf_r+0x32>
 800eea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea6:	f7ff fb08 	bl	800e4ba <__retarget_lock_acquire_recursive>
 800eeaa:	89ab      	ldrh	r3, [r5, #12]
 800eeac:	071b      	lsls	r3, r3, #28
 800eeae:	d501      	bpl.n	800eeb4 <_vfiprintf_r+0x3c>
 800eeb0:	692b      	ldr	r3, [r5, #16]
 800eeb2:	b9eb      	cbnz	r3, 800eef0 <_vfiprintf_r+0x78>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7fe fa5a 	bl	800d370 <__swsetup_r>
 800eebc:	b1c0      	cbz	r0, 800eef0 <_vfiprintf_r+0x78>
 800eebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eec0:	07dc      	lsls	r4, r3, #31
 800eec2:	d50e      	bpl.n	800eee2 <_vfiprintf_r+0x6a>
 800eec4:	f04f 30ff 	mov.w	r0, #4294967295
 800eec8:	b01d      	add	sp, #116	; 0x74
 800eeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eece:	4b7b      	ldr	r3, [pc, #492]	; (800f0bc <_vfiprintf_r+0x244>)
 800eed0:	429d      	cmp	r5, r3
 800eed2:	d101      	bne.n	800eed8 <_vfiprintf_r+0x60>
 800eed4:	68b5      	ldr	r5, [r6, #8]
 800eed6:	e7df      	b.n	800ee98 <_vfiprintf_r+0x20>
 800eed8:	4b79      	ldr	r3, [pc, #484]	; (800f0c0 <_vfiprintf_r+0x248>)
 800eeda:	429d      	cmp	r5, r3
 800eedc:	bf08      	it	eq
 800eede:	68f5      	ldreq	r5, [r6, #12]
 800eee0:	e7da      	b.n	800ee98 <_vfiprintf_r+0x20>
 800eee2:	89ab      	ldrh	r3, [r5, #12]
 800eee4:	0598      	lsls	r0, r3, #22
 800eee6:	d4ed      	bmi.n	800eec4 <_vfiprintf_r+0x4c>
 800eee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eeea:	f7ff fae7 	bl	800e4bc <__retarget_lock_release_recursive>
 800eeee:	e7e9      	b.n	800eec4 <_vfiprintf_r+0x4c>
 800eef0:	2300      	movs	r3, #0
 800eef2:	9309      	str	r3, [sp, #36]	; 0x24
 800eef4:	2320      	movs	r3, #32
 800eef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eefa:	f8cd 800c 	str.w	r8, [sp, #12]
 800eefe:	2330      	movs	r3, #48	; 0x30
 800ef00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f0c4 <_vfiprintf_r+0x24c>
 800ef04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef08:	f04f 0901 	mov.w	r9, #1
 800ef0c:	4623      	mov	r3, r4
 800ef0e:	469a      	mov	sl, r3
 800ef10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef14:	b10a      	cbz	r2, 800ef1a <_vfiprintf_r+0xa2>
 800ef16:	2a25      	cmp	r2, #37	; 0x25
 800ef18:	d1f9      	bne.n	800ef0e <_vfiprintf_r+0x96>
 800ef1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ef1e:	d00b      	beq.n	800ef38 <_vfiprintf_r+0xc0>
 800ef20:	465b      	mov	r3, fp
 800ef22:	4622      	mov	r2, r4
 800ef24:	4629      	mov	r1, r5
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff ff93 	bl	800ee52 <__sfputs_r>
 800ef2c:	3001      	adds	r0, #1
 800ef2e:	f000 80aa 	beq.w	800f086 <_vfiprintf_r+0x20e>
 800ef32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef34:	445a      	add	r2, fp
 800ef36:	9209      	str	r2, [sp, #36]	; 0x24
 800ef38:	f89a 3000 	ldrb.w	r3, [sl]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 80a2 	beq.w	800f086 <_vfiprintf_r+0x20e>
 800ef42:	2300      	movs	r3, #0
 800ef44:	f04f 32ff 	mov.w	r2, #4294967295
 800ef48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef4c:	f10a 0a01 	add.w	sl, sl, #1
 800ef50:	9304      	str	r3, [sp, #16]
 800ef52:	9307      	str	r3, [sp, #28]
 800ef54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef58:	931a      	str	r3, [sp, #104]	; 0x68
 800ef5a:	4654      	mov	r4, sl
 800ef5c:	2205      	movs	r2, #5
 800ef5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef62:	4858      	ldr	r0, [pc, #352]	; (800f0c4 <_vfiprintf_r+0x24c>)
 800ef64:	f7f1 f93c 	bl	80001e0 <memchr>
 800ef68:	9a04      	ldr	r2, [sp, #16]
 800ef6a:	b9d8      	cbnz	r0, 800efa4 <_vfiprintf_r+0x12c>
 800ef6c:	06d1      	lsls	r1, r2, #27
 800ef6e:	bf44      	itt	mi
 800ef70:	2320      	movmi	r3, #32
 800ef72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef76:	0713      	lsls	r3, r2, #28
 800ef78:	bf44      	itt	mi
 800ef7a:	232b      	movmi	r3, #43	; 0x2b
 800ef7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef80:	f89a 3000 	ldrb.w	r3, [sl]
 800ef84:	2b2a      	cmp	r3, #42	; 0x2a
 800ef86:	d015      	beq.n	800efb4 <_vfiprintf_r+0x13c>
 800ef88:	9a07      	ldr	r2, [sp, #28]
 800ef8a:	4654      	mov	r4, sl
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f04f 0c0a 	mov.w	ip, #10
 800ef92:	4621      	mov	r1, r4
 800ef94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef98:	3b30      	subs	r3, #48	; 0x30
 800ef9a:	2b09      	cmp	r3, #9
 800ef9c:	d94e      	bls.n	800f03c <_vfiprintf_r+0x1c4>
 800ef9e:	b1b0      	cbz	r0, 800efce <_vfiprintf_r+0x156>
 800efa0:	9207      	str	r2, [sp, #28]
 800efa2:	e014      	b.n	800efce <_vfiprintf_r+0x156>
 800efa4:	eba0 0308 	sub.w	r3, r0, r8
 800efa8:	fa09 f303 	lsl.w	r3, r9, r3
 800efac:	4313      	orrs	r3, r2
 800efae:	9304      	str	r3, [sp, #16]
 800efb0:	46a2      	mov	sl, r4
 800efb2:	e7d2      	b.n	800ef5a <_vfiprintf_r+0xe2>
 800efb4:	9b03      	ldr	r3, [sp, #12]
 800efb6:	1d19      	adds	r1, r3, #4
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	9103      	str	r1, [sp, #12]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bfbb      	ittet	lt
 800efc0:	425b      	neglt	r3, r3
 800efc2:	f042 0202 	orrlt.w	r2, r2, #2
 800efc6:	9307      	strge	r3, [sp, #28]
 800efc8:	9307      	strlt	r3, [sp, #28]
 800efca:	bfb8      	it	lt
 800efcc:	9204      	strlt	r2, [sp, #16]
 800efce:	7823      	ldrb	r3, [r4, #0]
 800efd0:	2b2e      	cmp	r3, #46	; 0x2e
 800efd2:	d10c      	bne.n	800efee <_vfiprintf_r+0x176>
 800efd4:	7863      	ldrb	r3, [r4, #1]
 800efd6:	2b2a      	cmp	r3, #42	; 0x2a
 800efd8:	d135      	bne.n	800f046 <_vfiprintf_r+0x1ce>
 800efda:	9b03      	ldr	r3, [sp, #12]
 800efdc:	1d1a      	adds	r2, r3, #4
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	9203      	str	r2, [sp, #12]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	bfb8      	it	lt
 800efe6:	f04f 33ff 	movlt.w	r3, #4294967295
 800efea:	3402      	adds	r4, #2
 800efec:	9305      	str	r3, [sp, #20]
 800efee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f0d4 <_vfiprintf_r+0x25c>
 800eff2:	7821      	ldrb	r1, [r4, #0]
 800eff4:	2203      	movs	r2, #3
 800eff6:	4650      	mov	r0, sl
 800eff8:	f7f1 f8f2 	bl	80001e0 <memchr>
 800effc:	b140      	cbz	r0, 800f010 <_vfiprintf_r+0x198>
 800effe:	2340      	movs	r3, #64	; 0x40
 800f000:	eba0 000a 	sub.w	r0, r0, sl
 800f004:	fa03 f000 	lsl.w	r0, r3, r0
 800f008:	9b04      	ldr	r3, [sp, #16]
 800f00a:	4303      	orrs	r3, r0
 800f00c:	3401      	adds	r4, #1
 800f00e:	9304      	str	r3, [sp, #16]
 800f010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f014:	482c      	ldr	r0, [pc, #176]	; (800f0c8 <_vfiprintf_r+0x250>)
 800f016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f01a:	2206      	movs	r2, #6
 800f01c:	f7f1 f8e0 	bl	80001e0 <memchr>
 800f020:	2800      	cmp	r0, #0
 800f022:	d03f      	beq.n	800f0a4 <_vfiprintf_r+0x22c>
 800f024:	4b29      	ldr	r3, [pc, #164]	; (800f0cc <_vfiprintf_r+0x254>)
 800f026:	bb1b      	cbnz	r3, 800f070 <_vfiprintf_r+0x1f8>
 800f028:	9b03      	ldr	r3, [sp, #12]
 800f02a:	3307      	adds	r3, #7
 800f02c:	f023 0307 	bic.w	r3, r3, #7
 800f030:	3308      	adds	r3, #8
 800f032:	9303      	str	r3, [sp, #12]
 800f034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f036:	443b      	add	r3, r7
 800f038:	9309      	str	r3, [sp, #36]	; 0x24
 800f03a:	e767      	b.n	800ef0c <_vfiprintf_r+0x94>
 800f03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f040:	460c      	mov	r4, r1
 800f042:	2001      	movs	r0, #1
 800f044:	e7a5      	b.n	800ef92 <_vfiprintf_r+0x11a>
 800f046:	2300      	movs	r3, #0
 800f048:	3401      	adds	r4, #1
 800f04a:	9305      	str	r3, [sp, #20]
 800f04c:	4619      	mov	r1, r3
 800f04e:	f04f 0c0a 	mov.w	ip, #10
 800f052:	4620      	mov	r0, r4
 800f054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f058:	3a30      	subs	r2, #48	; 0x30
 800f05a:	2a09      	cmp	r2, #9
 800f05c:	d903      	bls.n	800f066 <_vfiprintf_r+0x1ee>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0c5      	beq.n	800efee <_vfiprintf_r+0x176>
 800f062:	9105      	str	r1, [sp, #20]
 800f064:	e7c3      	b.n	800efee <_vfiprintf_r+0x176>
 800f066:	fb0c 2101 	mla	r1, ip, r1, r2
 800f06a:	4604      	mov	r4, r0
 800f06c:	2301      	movs	r3, #1
 800f06e:	e7f0      	b.n	800f052 <_vfiprintf_r+0x1da>
 800f070:	ab03      	add	r3, sp, #12
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	462a      	mov	r2, r5
 800f076:	4b16      	ldr	r3, [pc, #88]	; (800f0d0 <_vfiprintf_r+0x258>)
 800f078:	a904      	add	r1, sp, #16
 800f07a:	4630      	mov	r0, r6
 800f07c:	f7fd fcce 	bl	800ca1c <_printf_float>
 800f080:	4607      	mov	r7, r0
 800f082:	1c78      	adds	r0, r7, #1
 800f084:	d1d6      	bne.n	800f034 <_vfiprintf_r+0x1bc>
 800f086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f088:	07d9      	lsls	r1, r3, #31
 800f08a:	d405      	bmi.n	800f098 <_vfiprintf_r+0x220>
 800f08c:	89ab      	ldrh	r3, [r5, #12]
 800f08e:	059a      	lsls	r2, r3, #22
 800f090:	d402      	bmi.n	800f098 <_vfiprintf_r+0x220>
 800f092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f094:	f7ff fa12 	bl	800e4bc <__retarget_lock_release_recursive>
 800f098:	89ab      	ldrh	r3, [r5, #12]
 800f09a:	065b      	lsls	r3, r3, #25
 800f09c:	f53f af12 	bmi.w	800eec4 <_vfiprintf_r+0x4c>
 800f0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0a2:	e711      	b.n	800eec8 <_vfiprintf_r+0x50>
 800f0a4:	ab03      	add	r3, sp, #12
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	462a      	mov	r2, r5
 800f0aa:	4b09      	ldr	r3, [pc, #36]	; (800f0d0 <_vfiprintf_r+0x258>)
 800f0ac:	a904      	add	r1, sp, #16
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f7fd ff58 	bl	800cf64 <_printf_i>
 800f0b4:	e7e4      	b.n	800f080 <_vfiprintf_r+0x208>
 800f0b6:	bf00      	nop
 800f0b8:	08010628 	.word	0x08010628
 800f0bc:	08010648 	.word	0x08010648
 800f0c0:	08010608 	.word	0x08010608
 800f0c4:	080107c4 	.word	0x080107c4
 800f0c8:	080107ce 	.word	0x080107ce
 800f0cc:	0800ca1d 	.word	0x0800ca1d
 800f0d0:	0800ee53 	.word	0x0800ee53
 800f0d4:	080107ca 	.word	0x080107ca

0800f0d8 <_sbrk_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d06      	ldr	r5, [pc, #24]	; (800f0f4 <_sbrk_r+0x1c>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	f7f8 fb54 	bl	8007790 <_sbrk>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_sbrk_r+0x1a>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_sbrk_r+0x1a>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	200008c4 	.word	0x200008c4

0800f0f8 <__sread>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f100:	f000 f8e2 	bl	800f2c8 <_read_r>
 800f104:	2800      	cmp	r0, #0
 800f106:	bfab      	itete	ge
 800f108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f10a:	89a3      	ldrhlt	r3, [r4, #12]
 800f10c:	181b      	addge	r3, r3, r0
 800f10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f112:	bfac      	ite	ge
 800f114:	6563      	strge	r3, [r4, #84]	; 0x54
 800f116:	81a3      	strhlt	r3, [r4, #12]
 800f118:	bd10      	pop	{r4, pc}

0800f11a <__swrite>:
 800f11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f11e:	461f      	mov	r7, r3
 800f120:	898b      	ldrh	r3, [r1, #12]
 800f122:	05db      	lsls	r3, r3, #23
 800f124:	4605      	mov	r5, r0
 800f126:	460c      	mov	r4, r1
 800f128:	4616      	mov	r6, r2
 800f12a:	d505      	bpl.n	800f138 <__swrite+0x1e>
 800f12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f130:	2302      	movs	r3, #2
 800f132:	2200      	movs	r2, #0
 800f134:	f000 f898 	bl	800f268 <_lseek_r>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f142:	81a3      	strh	r3, [r4, #12]
 800f144:	4632      	mov	r2, r6
 800f146:	463b      	mov	r3, r7
 800f148:	4628      	mov	r0, r5
 800f14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f14e:	f000 b817 	b.w	800f180 <_write_r>

0800f152 <__sseek>:
 800f152:	b510      	push	{r4, lr}
 800f154:	460c      	mov	r4, r1
 800f156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f15a:	f000 f885 	bl	800f268 <_lseek_r>
 800f15e:	1c43      	adds	r3, r0, #1
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	bf15      	itete	ne
 800f164:	6560      	strne	r0, [r4, #84]	; 0x54
 800f166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f16e:	81a3      	strheq	r3, [r4, #12]
 800f170:	bf18      	it	ne
 800f172:	81a3      	strhne	r3, [r4, #12]
 800f174:	bd10      	pop	{r4, pc}

0800f176 <__sclose>:
 800f176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f17a:	f000 b831 	b.w	800f1e0 <_close_r>
	...

0800f180 <_write_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	; (800f1a0 <_write_r+0x20>)
 800f184:	4604      	mov	r4, r0
 800f186:	4608      	mov	r0, r1
 800f188:	4611      	mov	r1, r2
 800f18a:	2200      	movs	r2, #0
 800f18c:	602a      	str	r2, [r5, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	f7f5 f8ca 	bl	8004328 <_write>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_write_r+0x1e>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_write_r+0x1e>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	200008c4 	.word	0x200008c4

0800f1a4 <__assert_func>:
 800f1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1a6:	4614      	mov	r4, r2
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <__assert_func+0x2c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	68d8      	ldr	r0, [r3, #12]
 800f1b2:	b14c      	cbz	r4, 800f1c8 <__assert_func+0x24>
 800f1b4:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <__assert_func+0x30>)
 800f1b6:	9100      	str	r1, [sp, #0]
 800f1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1bc:	4906      	ldr	r1, [pc, #24]	; (800f1d8 <__assert_func+0x34>)
 800f1be:	462b      	mov	r3, r5
 800f1c0:	f000 f81e 	bl	800f200 <fiprintf>
 800f1c4:	f000 f89f 	bl	800f306 <abort>
 800f1c8:	4b04      	ldr	r3, [pc, #16]	; (800f1dc <__assert_func+0x38>)
 800f1ca:	461c      	mov	r4, r3
 800f1cc:	e7f3      	b.n	800f1b6 <__assert_func+0x12>
 800f1ce:	bf00      	nop
 800f1d0:	20000010 	.word	0x20000010
 800f1d4:	080107d5 	.word	0x080107d5
 800f1d8:	080107e2 	.word	0x080107e2
 800f1dc:	08010810 	.word	0x08010810

0800f1e0 <_close_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d06      	ldr	r5, [pc, #24]	; (800f1fc <_close_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f8 fa9b 	bl	8007726 <_close>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_close_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_close_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	200008c4 	.word	0x200008c4

0800f200 <fiprintf>:
 800f200:	b40e      	push	{r1, r2, r3}
 800f202:	b503      	push	{r0, r1, lr}
 800f204:	4601      	mov	r1, r0
 800f206:	ab03      	add	r3, sp, #12
 800f208:	4805      	ldr	r0, [pc, #20]	; (800f220 <fiprintf+0x20>)
 800f20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20e:	6800      	ldr	r0, [r0, #0]
 800f210:	9301      	str	r3, [sp, #4]
 800f212:	f7ff fe31 	bl	800ee78 <_vfiprintf_r>
 800f216:	b002      	add	sp, #8
 800f218:	f85d eb04 	ldr.w	lr, [sp], #4
 800f21c:	b003      	add	sp, #12
 800f21e:	4770      	bx	lr
 800f220:	20000010 	.word	0x20000010

0800f224 <_fstat_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d07      	ldr	r5, [pc, #28]	; (800f244 <_fstat_r+0x20>)
 800f228:	2300      	movs	r3, #0
 800f22a:	4604      	mov	r4, r0
 800f22c:	4608      	mov	r0, r1
 800f22e:	4611      	mov	r1, r2
 800f230:	602b      	str	r3, [r5, #0]
 800f232:	f7f8 fa84 	bl	800773e <_fstat>
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	d102      	bne.n	800f240 <_fstat_r+0x1c>
 800f23a:	682b      	ldr	r3, [r5, #0]
 800f23c:	b103      	cbz	r3, 800f240 <_fstat_r+0x1c>
 800f23e:	6023      	str	r3, [r4, #0]
 800f240:	bd38      	pop	{r3, r4, r5, pc}
 800f242:	bf00      	nop
 800f244:	200008c4 	.word	0x200008c4

0800f248 <_isatty_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4d06      	ldr	r5, [pc, #24]	; (800f264 <_isatty_r+0x1c>)
 800f24c:	2300      	movs	r3, #0
 800f24e:	4604      	mov	r4, r0
 800f250:	4608      	mov	r0, r1
 800f252:	602b      	str	r3, [r5, #0]
 800f254:	f7f8 fa83 	bl	800775e <_isatty>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_isatty_r+0x1a>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_isatty_r+0x1a>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	200008c4 	.word	0x200008c4

0800f268 <_lseek_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4d07      	ldr	r5, [pc, #28]	; (800f288 <_lseek_r+0x20>)
 800f26c:	4604      	mov	r4, r0
 800f26e:	4608      	mov	r0, r1
 800f270:	4611      	mov	r1, r2
 800f272:	2200      	movs	r2, #0
 800f274:	602a      	str	r2, [r5, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	f7f8 fa7c 	bl	8007774 <_lseek>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	d102      	bne.n	800f286 <_lseek_r+0x1e>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	b103      	cbz	r3, 800f286 <_lseek_r+0x1e>
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	200008c4 	.word	0x200008c4

0800f28c <__ascii_mbtowc>:
 800f28c:	b082      	sub	sp, #8
 800f28e:	b901      	cbnz	r1, 800f292 <__ascii_mbtowc+0x6>
 800f290:	a901      	add	r1, sp, #4
 800f292:	b142      	cbz	r2, 800f2a6 <__ascii_mbtowc+0x1a>
 800f294:	b14b      	cbz	r3, 800f2aa <__ascii_mbtowc+0x1e>
 800f296:	7813      	ldrb	r3, [r2, #0]
 800f298:	600b      	str	r3, [r1, #0]
 800f29a:	7812      	ldrb	r2, [r2, #0]
 800f29c:	1e10      	subs	r0, r2, #0
 800f29e:	bf18      	it	ne
 800f2a0:	2001      	movne	r0, #1
 800f2a2:	b002      	add	sp, #8
 800f2a4:	4770      	bx	lr
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	e7fb      	b.n	800f2a2 <__ascii_mbtowc+0x16>
 800f2aa:	f06f 0001 	mvn.w	r0, #1
 800f2ae:	e7f8      	b.n	800f2a2 <__ascii_mbtowc+0x16>

0800f2b0 <__malloc_lock>:
 800f2b0:	4801      	ldr	r0, [pc, #4]	; (800f2b8 <__malloc_lock+0x8>)
 800f2b2:	f7ff b902 	b.w	800e4ba <__retarget_lock_acquire_recursive>
 800f2b6:	bf00      	nop
 800f2b8:	200008bc 	.word	0x200008bc

0800f2bc <__malloc_unlock>:
 800f2bc:	4801      	ldr	r0, [pc, #4]	; (800f2c4 <__malloc_unlock+0x8>)
 800f2be:	f7ff b8fd 	b.w	800e4bc <__retarget_lock_release_recursive>
 800f2c2:	bf00      	nop
 800f2c4:	200008bc 	.word	0x200008bc

0800f2c8 <_read_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4d07      	ldr	r5, [pc, #28]	; (800f2e8 <_read_r+0x20>)
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	4608      	mov	r0, r1
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	602a      	str	r2, [r5, #0]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	f7f8 fa08 	bl	80076ec <_read>
 800f2dc:	1c43      	adds	r3, r0, #1
 800f2de:	d102      	bne.n	800f2e6 <_read_r+0x1e>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	b103      	cbz	r3, 800f2e6 <_read_r+0x1e>
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	200008c4 	.word	0x200008c4

0800f2ec <__ascii_wctomb>:
 800f2ec:	b149      	cbz	r1, 800f302 <__ascii_wctomb+0x16>
 800f2ee:	2aff      	cmp	r2, #255	; 0xff
 800f2f0:	bf85      	ittet	hi
 800f2f2:	238a      	movhi	r3, #138	; 0x8a
 800f2f4:	6003      	strhi	r3, [r0, #0]
 800f2f6:	700a      	strbls	r2, [r1, #0]
 800f2f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2fc:	bf98      	it	ls
 800f2fe:	2001      	movls	r0, #1
 800f300:	4770      	bx	lr
 800f302:	4608      	mov	r0, r1
 800f304:	4770      	bx	lr

0800f306 <abort>:
 800f306:	b508      	push	{r3, lr}
 800f308:	2006      	movs	r0, #6
 800f30a:	f000 f82b 	bl	800f364 <raise>
 800f30e:	2001      	movs	r0, #1
 800f310:	f7f8 f9e2 	bl	80076d8 <_exit>

0800f314 <_raise_r>:
 800f314:	291f      	cmp	r1, #31
 800f316:	b538      	push	{r3, r4, r5, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	460d      	mov	r5, r1
 800f31c:	d904      	bls.n	800f328 <_raise_r+0x14>
 800f31e:	2316      	movs	r3, #22
 800f320:	6003      	str	r3, [r0, #0]
 800f322:	f04f 30ff 	mov.w	r0, #4294967295
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f32a:	b112      	cbz	r2, 800f332 <_raise_r+0x1e>
 800f32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f330:	b94b      	cbnz	r3, 800f346 <_raise_r+0x32>
 800f332:	4620      	mov	r0, r4
 800f334:	f000 f830 	bl	800f398 <_getpid_r>
 800f338:	462a      	mov	r2, r5
 800f33a:	4601      	mov	r1, r0
 800f33c:	4620      	mov	r0, r4
 800f33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f342:	f000 b817 	b.w	800f374 <_kill_r>
 800f346:	2b01      	cmp	r3, #1
 800f348:	d00a      	beq.n	800f360 <_raise_r+0x4c>
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	d103      	bne.n	800f356 <_raise_r+0x42>
 800f34e:	2316      	movs	r3, #22
 800f350:	6003      	str	r3, [r0, #0]
 800f352:	2001      	movs	r0, #1
 800f354:	e7e7      	b.n	800f326 <_raise_r+0x12>
 800f356:	2400      	movs	r4, #0
 800f358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f35c:	4628      	mov	r0, r5
 800f35e:	4798      	blx	r3
 800f360:	2000      	movs	r0, #0
 800f362:	e7e0      	b.n	800f326 <_raise_r+0x12>

0800f364 <raise>:
 800f364:	4b02      	ldr	r3, [pc, #8]	; (800f370 <raise+0xc>)
 800f366:	4601      	mov	r1, r0
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	f7ff bfd3 	b.w	800f314 <_raise_r>
 800f36e:	bf00      	nop
 800f370:	20000010 	.word	0x20000010

0800f374 <_kill_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	; (800f394 <_kill_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	602b      	str	r3, [r5, #0]
 800f382:	f7f8 f999 	bl	80076b8 <_kill>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_kill_r+0x1c>
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_kill_r+0x1c>
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	200008c4 	.word	0x200008c4

0800f398 <_getpid_r>:
 800f398:	f7f8 b986 	b.w	80076a8 <_getpid>

0800f39c <asinf>:
 800f39c:	b508      	push	{r3, lr}
 800f39e:	ed2d 8b02 	vpush	{d8}
 800f3a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f3a6:	f000 f8c5 	bl	800f534 <__ieee754_asinf>
 800f3aa:	4b13      	ldr	r3, [pc, #76]	; (800f3f8 <asinf+0x5c>)
 800f3ac:	f993 3000 	ldrsb.w	r3, [r3]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	eef0 8a40 	vmov.f32	s17, s0
 800f3b6:	d01a      	beq.n	800f3ee <asinf+0x52>
 800f3b8:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c0:	d615      	bvs.n	800f3ee <asinf+0x52>
 800f3c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f3c6:	f000 fdd3 	bl	800ff70 <fabsf>
 800f3ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d6:	dd0a      	ble.n	800f3ee <asinf+0x52>
 800f3d8:	f7fd fa4e 	bl	800c878 <__errno>
 800f3dc:	ecbd 8b02 	vpop	{d8}
 800f3e0:	2321      	movs	r3, #33	; 0x21
 800f3e2:	6003      	str	r3, [r0, #0]
 800f3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f3e8:	4804      	ldr	r0, [pc, #16]	; (800f3fc <asinf+0x60>)
 800f3ea:	f000 bdd5 	b.w	800ff98 <nanf>
 800f3ee:	eeb0 0a68 	vmov.f32	s0, s17
 800f3f2:	ecbd 8b02 	vpop	{d8}
 800f3f6:	bd08      	pop	{r3, pc}
 800f3f8:	200001e0 	.word	0x200001e0
 800f3fc:	08010810 	.word	0x08010810

0800f400 <atan2f>:
 800f400:	f000 b97e 	b.w	800f700 <__ieee754_atan2f>

0800f404 <powf>:
 800f404:	b508      	push	{r3, lr}
 800f406:	ed2d 8b04 	vpush	{d8-d9}
 800f40a:	eeb0 9a40 	vmov.f32	s18, s0
 800f40e:	eef0 8a60 	vmov.f32	s17, s1
 800f412:	f000 fa15 	bl	800f840 <__ieee754_powf>
 800f416:	4b43      	ldr	r3, [pc, #268]	; (800f524 <powf+0x120>)
 800f418:	f993 3000 	ldrsb.w	r3, [r3]
 800f41c:	3301      	adds	r3, #1
 800f41e:	eeb0 8a40 	vmov.f32	s16, s0
 800f422:	d012      	beq.n	800f44a <powf+0x46>
 800f424:	eef4 8a68 	vcmp.f32	s17, s17
 800f428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42c:	d60d      	bvs.n	800f44a <powf+0x46>
 800f42e:	eeb4 9a49 	vcmp.f32	s18, s18
 800f432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f436:	d70d      	bvc.n	800f454 <powf+0x50>
 800f438:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f444:	bf08      	it	eq
 800f446:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f44a:	eeb0 0a48 	vmov.f32	s0, s16
 800f44e:	ecbd 8b04 	vpop	{d8-d9}
 800f452:	bd08      	pop	{r3, pc}
 800f454:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f528 <powf+0x124>
 800f458:	eeb4 9a69 	vcmp.f32	s18, s19
 800f45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f460:	d116      	bne.n	800f490 <powf+0x8c>
 800f462:	eef4 8a69 	vcmp.f32	s17, s19
 800f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46a:	d057      	beq.n	800f51c <powf+0x118>
 800f46c:	eeb0 0a68 	vmov.f32	s0, s17
 800f470:	f000 fd85 	bl	800ff7e <finitef>
 800f474:	2800      	cmp	r0, #0
 800f476:	d0e8      	beq.n	800f44a <powf+0x46>
 800f478:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f480:	d5e3      	bpl.n	800f44a <powf+0x46>
 800f482:	f7fd f9f9 	bl	800c878 <__errno>
 800f486:	2321      	movs	r3, #33	; 0x21
 800f488:	6003      	str	r3, [r0, #0]
 800f48a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f52c <powf+0x128>
 800f48e:	e7dc      	b.n	800f44a <powf+0x46>
 800f490:	f000 fd75 	bl	800ff7e <finitef>
 800f494:	bb50      	cbnz	r0, 800f4ec <powf+0xe8>
 800f496:	eeb0 0a49 	vmov.f32	s0, s18
 800f49a:	f000 fd70 	bl	800ff7e <finitef>
 800f49e:	b328      	cbz	r0, 800f4ec <powf+0xe8>
 800f4a0:	eeb0 0a68 	vmov.f32	s0, s17
 800f4a4:	f000 fd6b 	bl	800ff7e <finitef>
 800f4a8:	b300      	cbz	r0, 800f4ec <powf+0xe8>
 800f4aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800f4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b2:	d706      	bvc.n	800f4c2 <powf+0xbe>
 800f4b4:	f7fd f9e0 	bl	800c878 <__errno>
 800f4b8:	2321      	movs	r3, #33	; 0x21
 800f4ba:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f4be:	6003      	str	r3, [r0, #0]
 800f4c0:	e7c3      	b.n	800f44a <powf+0x46>
 800f4c2:	f7fd f9d9 	bl	800c878 <__errno>
 800f4c6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f4ca:	2322      	movs	r3, #34	; 0x22
 800f4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d0:	6003      	str	r3, [r0, #0]
 800f4d2:	d508      	bpl.n	800f4e6 <powf+0xe2>
 800f4d4:	eeb0 0a68 	vmov.f32	s0, s17
 800f4d8:	f000 fd64 	bl	800ffa4 <rintf>
 800f4dc:	eeb4 0a68 	vcmp.f32	s0, s17
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	d1d1      	bne.n	800f48a <powf+0x86>
 800f4e6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f530 <powf+0x12c>
 800f4ea:	e7ae      	b.n	800f44a <powf+0x46>
 800f4ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f4:	d1a9      	bne.n	800f44a <powf+0x46>
 800f4f6:	eeb0 0a49 	vmov.f32	s0, s18
 800f4fa:	f000 fd40 	bl	800ff7e <finitef>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d0a3      	beq.n	800f44a <powf+0x46>
 800f502:	eeb0 0a68 	vmov.f32	s0, s17
 800f506:	f000 fd3a 	bl	800ff7e <finitef>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d09d      	beq.n	800f44a <powf+0x46>
 800f50e:	f7fd f9b3 	bl	800c878 <__errno>
 800f512:	2322      	movs	r3, #34	; 0x22
 800f514:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f528 <powf+0x124>
 800f518:	6003      	str	r3, [r0, #0]
 800f51a:	e796      	b.n	800f44a <powf+0x46>
 800f51c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f520:	e793      	b.n	800f44a <powf+0x46>
 800f522:	bf00      	nop
 800f524:	200001e0 	.word	0x200001e0
 800f528:	00000000 	.word	0x00000000
 800f52c:	ff800000 	.word	0xff800000
 800f530:	7f800000 	.word	0x7f800000

0800f534 <__ieee754_asinf>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	ee10 5a10 	vmov	r5, s0
 800f53a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f53e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f542:	ed2d 8b04 	vpush	{d8-d9}
 800f546:	d10c      	bne.n	800f562 <__ieee754_asinf+0x2e>
 800f548:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800f6c0 <__ieee754_asinf+0x18c>
 800f54c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f6c4 <__ieee754_asinf+0x190>
 800f550:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f554:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f558:	eeb0 0a67 	vmov.f32	s0, s15
 800f55c:	ecbd 8b04 	vpop	{d8-d9}
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	dd04      	ble.n	800f56e <__ieee754_asinf+0x3a>
 800f564:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f568:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f56c:	e7f6      	b.n	800f55c <__ieee754_asinf+0x28>
 800f56e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f572:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f576:	da0b      	bge.n	800f590 <__ieee754_asinf+0x5c>
 800f578:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f57c:	da52      	bge.n	800f624 <__ieee754_asinf+0xf0>
 800f57e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800f6c8 <__ieee754_asinf+0x194>
 800f582:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f586:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58e:	dce5      	bgt.n	800f55c <__ieee754_asinf+0x28>
 800f590:	f000 fcee 	bl	800ff70 <fabsf>
 800f594:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f598:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f59c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f5a0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800f6cc <__ieee754_asinf+0x198>
 800f5a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f6d0 <__ieee754_asinf+0x19c>
 800f5a8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800f6d4 <__ieee754_asinf+0x1a0>
 800f5ac:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f5b0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800f6d8 <__ieee754_asinf+0x1a4>
 800f5b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f5b8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f6dc <__ieee754_asinf+0x1a8>
 800f5bc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f5c0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800f6e0 <__ieee754_asinf+0x1ac>
 800f5c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f5c8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f6e4 <__ieee754_asinf+0x1b0>
 800f5cc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f5d0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800f6e8 <__ieee754_asinf+0x1b4>
 800f5d4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f5d8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800f6ec <__ieee754_asinf+0x1b8>
 800f5dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f5e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f6f0 <__ieee754_asinf+0x1bc>
 800f5e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f5e8:	eeb0 0a48 	vmov.f32	s0, s16
 800f5ec:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f5f0:	f000 fbe6 	bl	800fdc0 <__ieee754_sqrtf>
 800f5f4:	4b3f      	ldr	r3, [pc, #252]	; (800f6f4 <__ieee754_asinf+0x1c0>)
 800f5f6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f5fa:	429c      	cmp	r4, r3
 800f5fc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f600:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f604:	dd3d      	ble.n	800f682 <__ieee754_asinf+0x14e>
 800f606:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f60a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800f6f8 <__ieee754_asinf+0x1c4>
 800f60e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f612:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f6c4 <__ieee754_asinf+0x190>
 800f616:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f61a:	2d00      	cmp	r5, #0
 800f61c:	bfd8      	it	le
 800f61e:	eeb1 0a40 	vnegle.f32	s0, s0
 800f622:	e79b      	b.n	800f55c <__ieee754_asinf+0x28>
 800f624:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f628:	eddf 6a28 	vldr	s13, [pc, #160]	; 800f6cc <__ieee754_asinf+0x198>
 800f62c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f6d0 <__ieee754_asinf+0x19c>
 800f630:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f6e4 <__ieee754_asinf+0x1b0>
 800f634:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f638:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f6d8 <__ieee754_asinf+0x1a4>
 800f63c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f640:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800f6dc <__ieee754_asinf+0x1a8>
 800f644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f648:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f6e0 <__ieee754_asinf+0x1ac>
 800f64c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f650:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800f6d4 <__ieee754_asinf+0x1a0>
 800f654:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f658:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f6e8 <__ieee754_asinf+0x1b4>
 800f65c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f660:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800f6ec <__ieee754_asinf+0x1b8>
 800f664:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f668:	eddf 6a21 	vldr	s13, [pc, #132]	; 800f6f0 <__ieee754_asinf+0x1bc>
 800f66c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f674:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f678:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f67c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f680:	e76c      	b.n	800f55c <__ieee754_asinf+0x28>
 800f682:	ee10 3a10 	vmov	r3, s0
 800f686:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f68a:	f023 030f 	bic.w	r3, r3, #15
 800f68e:	ee07 3a10 	vmov	s14, r3
 800f692:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f696:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f69a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f69e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800f6a2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f6c0 <__ieee754_asinf+0x18c>
 800f6a6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800f6aa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800f6ae:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800f6fc <__ieee754_asinf+0x1c8>
 800f6b2:	eeb0 6a40 	vmov.f32	s12, s0
 800f6b6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f6ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f6be:	e7aa      	b.n	800f616 <__ieee754_asinf+0xe2>
 800f6c0:	b33bbd2e 	.word	0xb33bbd2e
 800f6c4:	3fc90fdb 	.word	0x3fc90fdb
 800f6c8:	7149f2ca 	.word	0x7149f2ca
 800f6cc:	3811ef08 	.word	0x3811ef08
 800f6d0:	3a4f7f04 	.word	0x3a4f7f04
 800f6d4:	3e2aaaab 	.word	0x3e2aaaab
 800f6d8:	bd241146 	.word	0xbd241146
 800f6dc:	3e4e0aa8 	.word	0x3e4e0aa8
 800f6e0:	bea6b090 	.word	0xbea6b090
 800f6e4:	3d9dc62e 	.word	0x3d9dc62e
 800f6e8:	bf303361 	.word	0xbf303361
 800f6ec:	4001572d 	.word	0x4001572d
 800f6f0:	c019d139 	.word	0xc019d139
 800f6f4:	3f799999 	.word	0x3f799999
 800f6f8:	333bbd2e 	.word	0x333bbd2e
 800f6fc:	3f490fdb 	.word	0x3f490fdb

0800f700 <__ieee754_atan2f>:
 800f700:	ee10 2a90 	vmov	r2, s1
 800f704:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f708:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f70c:	b510      	push	{r4, lr}
 800f70e:	eef0 7a40 	vmov.f32	s15, s0
 800f712:	dc06      	bgt.n	800f722 <__ieee754_atan2f+0x22>
 800f714:	ee10 0a10 	vmov	r0, s0
 800f718:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f71c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f720:	dd04      	ble.n	800f72c <__ieee754_atan2f+0x2c>
 800f722:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f726:	eeb0 0a67 	vmov.f32	s0, s15
 800f72a:	bd10      	pop	{r4, pc}
 800f72c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f730:	d103      	bne.n	800f73a <__ieee754_atan2f+0x3a>
 800f732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f736:	f000 bb47 	b.w	800fdc8 <atanf>
 800f73a:	1794      	asrs	r4, r2, #30
 800f73c:	f004 0402 	and.w	r4, r4, #2
 800f740:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f744:	b943      	cbnz	r3, 800f758 <__ieee754_atan2f+0x58>
 800f746:	2c02      	cmp	r4, #2
 800f748:	d05e      	beq.n	800f808 <__ieee754_atan2f+0x108>
 800f74a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f81c <__ieee754_atan2f+0x11c>
 800f74e:	2c03      	cmp	r4, #3
 800f750:	bf08      	it	eq
 800f752:	eef0 7a47 	vmoveq.f32	s15, s14
 800f756:	e7e6      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f758:	b941      	cbnz	r1, 800f76c <__ieee754_atan2f+0x6c>
 800f75a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f820 <__ieee754_atan2f+0x120>
 800f75e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f824 <__ieee754_atan2f+0x124>
 800f762:	2800      	cmp	r0, #0
 800f764:	bfb8      	it	lt
 800f766:	eef0 7a40 	vmovlt.f32	s15, s0
 800f76a:	e7dc      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f76c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f770:	d110      	bne.n	800f794 <__ieee754_atan2f+0x94>
 800f772:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f776:	f104 34ff 	add.w	r4, r4, #4294967295
 800f77a:	d107      	bne.n	800f78c <__ieee754_atan2f+0x8c>
 800f77c:	2c02      	cmp	r4, #2
 800f77e:	d846      	bhi.n	800f80e <__ieee754_atan2f+0x10e>
 800f780:	4b29      	ldr	r3, [pc, #164]	; (800f828 <__ieee754_atan2f+0x128>)
 800f782:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f786:	edd4 7a00 	vldr	s15, [r4]
 800f78a:	e7cc      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f78c:	2c02      	cmp	r4, #2
 800f78e:	d841      	bhi.n	800f814 <__ieee754_atan2f+0x114>
 800f790:	4b26      	ldr	r3, [pc, #152]	; (800f82c <__ieee754_atan2f+0x12c>)
 800f792:	e7f6      	b.n	800f782 <__ieee754_atan2f+0x82>
 800f794:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f798:	d0df      	beq.n	800f75a <__ieee754_atan2f+0x5a>
 800f79a:	1a5b      	subs	r3, r3, r1
 800f79c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f7a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f7a4:	da1a      	bge.n	800f7dc <__ieee754_atan2f+0xdc>
 800f7a6:	2a00      	cmp	r2, #0
 800f7a8:	da01      	bge.n	800f7ae <__ieee754_atan2f+0xae>
 800f7aa:	313c      	adds	r1, #60	; 0x3c
 800f7ac:	db19      	blt.n	800f7e2 <__ieee754_atan2f+0xe2>
 800f7ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f7b2:	f000 fbdd 	bl	800ff70 <fabsf>
 800f7b6:	f000 fb07 	bl	800fdc8 <atanf>
 800f7ba:	eef0 7a40 	vmov.f32	s15, s0
 800f7be:	2c01      	cmp	r4, #1
 800f7c0:	d012      	beq.n	800f7e8 <__ieee754_atan2f+0xe8>
 800f7c2:	2c02      	cmp	r4, #2
 800f7c4:	d017      	beq.n	800f7f6 <__ieee754_atan2f+0xf6>
 800f7c6:	2c00      	cmp	r4, #0
 800f7c8:	d0ad      	beq.n	800f726 <__ieee754_atan2f+0x26>
 800f7ca:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f830 <__ieee754_atan2f+0x130>
 800f7ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f7d2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f834 <__ieee754_atan2f+0x134>
 800f7d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f7da:	e7a4      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f7dc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f820 <__ieee754_atan2f+0x120>
 800f7e0:	e7ed      	b.n	800f7be <__ieee754_atan2f+0xbe>
 800f7e2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f838 <__ieee754_atan2f+0x138>
 800f7e6:	e7ea      	b.n	800f7be <__ieee754_atan2f+0xbe>
 800f7e8:	ee17 3a90 	vmov	r3, s15
 800f7ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7f0:	ee07 3a90 	vmov	s15, r3
 800f7f4:	e797      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f7f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f830 <__ieee754_atan2f+0x130>
 800f7fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f7fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f834 <__ieee754_atan2f+0x134>
 800f802:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f806:	e78e      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f808:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f834 <__ieee754_atan2f+0x134>
 800f80c:	e78b      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f80e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f83c <__ieee754_atan2f+0x13c>
 800f812:	e788      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f814:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f838 <__ieee754_atan2f+0x138>
 800f818:	e785      	b.n	800f726 <__ieee754_atan2f+0x26>
 800f81a:	bf00      	nop
 800f81c:	c0490fdb 	.word	0xc0490fdb
 800f820:	3fc90fdb 	.word	0x3fc90fdb
 800f824:	bfc90fdb 	.word	0xbfc90fdb
 800f828:	0801091c 	.word	0x0801091c
 800f82c:	08010928 	.word	0x08010928
 800f830:	33bbbd2e 	.word	0x33bbbd2e
 800f834:	40490fdb 	.word	0x40490fdb
 800f838:	00000000 	.word	0x00000000
 800f83c:	3f490fdb 	.word	0x3f490fdb

0800f840 <__ieee754_powf>:
 800f840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f844:	ee10 5a90 	vmov	r5, s1
 800f848:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f84c:	ed2d 8b02 	vpush	{d8}
 800f850:	eeb0 8a40 	vmov.f32	s16, s0
 800f854:	eef0 8a60 	vmov.f32	s17, s1
 800f858:	f000 8291 	beq.w	800fd7e <__ieee754_powf+0x53e>
 800f85c:	ee10 8a10 	vmov	r8, s0
 800f860:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f864:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f868:	dc06      	bgt.n	800f878 <__ieee754_powf+0x38>
 800f86a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f86e:	dd0a      	ble.n	800f886 <__ieee754_powf+0x46>
 800f870:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f874:	f000 8283 	beq.w	800fd7e <__ieee754_powf+0x53e>
 800f878:	ecbd 8b02 	vpop	{d8}
 800f87c:	48d8      	ldr	r0, [pc, #864]	; (800fbe0 <__ieee754_powf+0x3a0>)
 800f87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f882:	f000 bb89 	b.w	800ff98 <nanf>
 800f886:	f1b8 0f00 	cmp.w	r8, #0
 800f88a:	da1f      	bge.n	800f8cc <__ieee754_powf+0x8c>
 800f88c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f890:	da2e      	bge.n	800f8f0 <__ieee754_powf+0xb0>
 800f892:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f896:	f2c0 827b 	blt.w	800fd90 <__ieee754_powf+0x550>
 800f89a:	15fb      	asrs	r3, r7, #23
 800f89c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f8a0:	fa47 f603 	asr.w	r6, r7, r3
 800f8a4:	fa06 f303 	lsl.w	r3, r6, r3
 800f8a8:	42bb      	cmp	r3, r7
 800f8aa:	f040 8271 	bne.w	800fd90 <__ieee754_powf+0x550>
 800f8ae:	f006 0601 	and.w	r6, r6, #1
 800f8b2:	f1c6 0602 	rsb	r6, r6, #2
 800f8b6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f8ba:	d120      	bne.n	800f8fe <__ieee754_powf+0xbe>
 800f8bc:	2d00      	cmp	r5, #0
 800f8be:	f280 8264 	bge.w	800fd8a <__ieee754_powf+0x54a>
 800f8c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8c6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f8ca:	e00d      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f8cc:	2600      	movs	r6, #0
 800f8ce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f8d2:	d1f0      	bne.n	800f8b6 <__ieee754_powf+0x76>
 800f8d4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f8d8:	f000 8251 	beq.w	800fd7e <__ieee754_powf+0x53e>
 800f8dc:	dd0a      	ble.n	800f8f4 <__ieee754_powf+0xb4>
 800f8de:	2d00      	cmp	r5, #0
 800f8e0:	f280 8250 	bge.w	800fd84 <__ieee754_powf+0x544>
 800f8e4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800fbe4 <__ieee754_powf+0x3a4>
 800f8e8:	ecbd 8b02 	vpop	{d8}
 800f8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f0:	2602      	movs	r6, #2
 800f8f2:	e7ec      	b.n	800f8ce <__ieee754_powf+0x8e>
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	daf5      	bge.n	800f8e4 <__ieee754_powf+0xa4>
 800f8f8:	eeb1 0a68 	vneg.f32	s0, s17
 800f8fc:	e7f4      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f8fe:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f902:	d102      	bne.n	800f90a <__ieee754_powf+0xca>
 800f904:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f908:	e7ee      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f90a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f90e:	eeb0 0a48 	vmov.f32	s0, s16
 800f912:	d108      	bne.n	800f926 <__ieee754_powf+0xe6>
 800f914:	f1b8 0f00 	cmp.w	r8, #0
 800f918:	db05      	blt.n	800f926 <__ieee754_powf+0xe6>
 800f91a:	ecbd 8b02 	vpop	{d8}
 800f91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f922:	f000 ba4d 	b.w	800fdc0 <__ieee754_sqrtf>
 800f926:	f000 fb23 	bl	800ff70 <fabsf>
 800f92a:	b124      	cbz	r4, 800f936 <__ieee754_powf+0xf6>
 800f92c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f930:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f934:	d117      	bne.n	800f966 <__ieee754_powf+0x126>
 800f936:	2d00      	cmp	r5, #0
 800f938:	bfbc      	itt	lt
 800f93a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f93e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f942:	f1b8 0f00 	cmp.w	r8, #0
 800f946:	dacf      	bge.n	800f8e8 <__ieee754_powf+0xa8>
 800f948:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f94c:	ea54 0306 	orrs.w	r3, r4, r6
 800f950:	d104      	bne.n	800f95c <__ieee754_powf+0x11c>
 800f952:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f956:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f95a:	e7c5      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f95c:	2e01      	cmp	r6, #1
 800f95e:	d1c3      	bne.n	800f8e8 <__ieee754_powf+0xa8>
 800f960:	eeb1 0a40 	vneg.f32	s0, s0
 800f964:	e7c0      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f966:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f96a:	3801      	subs	r0, #1
 800f96c:	ea56 0300 	orrs.w	r3, r6, r0
 800f970:	d104      	bne.n	800f97c <__ieee754_powf+0x13c>
 800f972:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f976:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f97a:	e7b5      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f97c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f980:	dd6b      	ble.n	800fa5a <__ieee754_powf+0x21a>
 800f982:	4b99      	ldr	r3, [pc, #612]	; (800fbe8 <__ieee754_powf+0x3a8>)
 800f984:	429c      	cmp	r4, r3
 800f986:	dc06      	bgt.n	800f996 <__ieee754_powf+0x156>
 800f988:	2d00      	cmp	r5, #0
 800f98a:	daab      	bge.n	800f8e4 <__ieee754_powf+0xa4>
 800f98c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800fbec <__ieee754_powf+0x3ac>
 800f990:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f994:	e7a8      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800f996:	4b96      	ldr	r3, [pc, #600]	; (800fbf0 <__ieee754_powf+0x3b0>)
 800f998:	429c      	cmp	r4, r3
 800f99a:	dd02      	ble.n	800f9a2 <__ieee754_powf+0x162>
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	dcf5      	bgt.n	800f98c <__ieee754_powf+0x14c>
 800f9a0:	e7a0      	b.n	800f8e4 <__ieee754_powf+0xa4>
 800f9a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9aa:	eddf 6a92 	vldr	s13, [pc, #584]	; 800fbf4 <__ieee754_powf+0x3b4>
 800f9ae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f9b2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f9b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f9ba:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f9be:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9c6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800fbf8 <__ieee754_powf+0x3b8>
 800f9ca:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f9ce:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800fbfc <__ieee754_powf+0x3bc>
 800f9d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f9d6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fc00 <__ieee754_powf+0x3c0>
 800f9da:	eef0 6a67 	vmov.f32	s13, s15
 800f9de:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f9e2:	ee16 3a90 	vmov	r3, s13
 800f9e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f9ea:	f023 030f 	bic.w	r3, r3, #15
 800f9ee:	ee00 3a90 	vmov	s1, r3
 800f9f2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f9f6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f9fa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f9fe:	f025 050f 	bic.w	r5, r5, #15
 800fa02:	ee07 5a10 	vmov	s14, r5
 800fa06:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fa0a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800fa0e:	ee07 3a90 	vmov	s15, r3
 800fa12:	eee7 0a27 	vfma.f32	s1, s14, s15
 800fa16:	3e01      	subs	r6, #1
 800fa18:	ea56 0200 	orrs.w	r2, r6, r0
 800fa1c:	ee07 5a10 	vmov	s14, r5
 800fa20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa24:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fa28:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800fa2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fa30:	ee17 4a10 	vmov	r4, s14
 800fa34:	bf08      	it	eq
 800fa36:	eeb0 8a40 	vmoveq.f32	s16, s0
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fa40:	f340 8184 	ble.w	800fd4c <__ieee754_powf+0x50c>
 800fa44:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800fa48:	f340 80fc 	ble.w	800fc44 <__ieee754_powf+0x404>
 800fa4c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800fbec <__ieee754_powf+0x3ac>
 800fa50:	ee28 0a27 	vmul.f32	s0, s16, s15
 800fa54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fa58:	e746      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800fa5a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800fa5e:	bf01      	itttt	eq
 800fa60:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800fc04 <__ieee754_powf+0x3c4>
 800fa64:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fa68:	f06f 0217 	mvneq.w	r2, #23
 800fa6c:	ee17 4a90 	vmoveq	r4, s15
 800fa70:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800fa74:	bf18      	it	ne
 800fa76:	2200      	movne	r2, #0
 800fa78:	3b7f      	subs	r3, #127	; 0x7f
 800fa7a:	4413      	add	r3, r2
 800fa7c:	4a62      	ldr	r2, [pc, #392]	; (800fc08 <__ieee754_powf+0x3c8>)
 800fa7e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800fa82:	4294      	cmp	r4, r2
 800fa84:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800fa88:	dd06      	ble.n	800fa98 <__ieee754_powf+0x258>
 800fa8a:	4a60      	ldr	r2, [pc, #384]	; (800fc0c <__ieee754_powf+0x3cc>)
 800fa8c:	4294      	cmp	r4, r2
 800fa8e:	f340 80a4 	ble.w	800fbda <__ieee754_powf+0x39a>
 800fa92:	3301      	adds	r3, #1
 800fa94:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800fa98:	2400      	movs	r4, #0
 800fa9a:	4a5d      	ldr	r2, [pc, #372]	; (800fc10 <__ieee754_powf+0x3d0>)
 800fa9c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800faa0:	ee07 1a90 	vmov	s15, r1
 800faa4:	ed92 7a00 	vldr	s14, [r2]
 800faa8:	4a5a      	ldr	r2, [pc, #360]	; (800fc14 <__ieee754_powf+0x3d4>)
 800faaa:	ee37 6a27 	vadd.f32	s12, s14, s15
 800faae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fab2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800fab6:	1049      	asrs	r1, r1, #1
 800fab8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800fabc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800fac0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800fac4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800fac8:	ee06 1a10 	vmov	s12, r1
 800facc:	ee65 4a26 	vmul.f32	s9, s10, s13
 800fad0:	ee36 7a47 	vsub.f32	s14, s12, s14
 800fad4:	ee14 7a90 	vmov	r7, s9
 800fad8:	4017      	ands	r7, r2
 800fada:	ee05 7a90 	vmov	s11, r7
 800fade:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800fae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fae6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800fc18 <__ieee754_powf+0x3d8>
 800faea:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800faee:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800faf2:	ee25 6a26 	vmul.f32	s12, s10, s13
 800faf6:	eddf 6a49 	vldr	s13, [pc, #292]	; 800fc1c <__ieee754_powf+0x3dc>
 800fafa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fafe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800fc20 <__ieee754_powf+0x3e0>
 800fb02:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fb06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fbf4 <__ieee754_powf+0x3b4>
 800fb0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fb0e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fc24 <__ieee754_powf+0x3e4>
 800fb12:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fb16:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800fc28 <__ieee754_powf+0x3e8>
 800fb1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fb1e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fb22:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fb26:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fb2a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fb2e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fb32:	eef0 7a45 	vmov.f32	s15, s10
 800fb36:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb3e:	ee17 1a90 	vmov	r1, s15
 800fb42:	4011      	ands	r1, r2
 800fb44:	ee07 1a90 	vmov	s15, r1
 800fb48:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fb4c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800fb50:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fb54:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fb58:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fb5c:	eeb0 6a47 	vmov.f32	s12, s14
 800fb60:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fb64:	ee16 1a10 	vmov	r1, s12
 800fb68:	4011      	ands	r1, r2
 800fb6a:	ee06 1a90 	vmov	s13, r1
 800fb6e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fb72:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800fc2c <__ieee754_powf+0x3ec>
 800fb76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800fc30 <__ieee754_powf+0x3f0>
 800fb7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fb7e:	ee06 1a10 	vmov	s12, r1
 800fb82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb86:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fc34 <__ieee754_powf+0x3f4>
 800fb8a:	492b      	ldr	r1, [pc, #172]	; (800fc38 <__ieee754_powf+0x3f8>)
 800fb8c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fb90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb94:	edd1 7a00 	vldr	s15, [r1]
 800fb98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb9c:	ee07 3a90 	vmov	s15, r3
 800fba0:	4b26      	ldr	r3, [pc, #152]	; (800fc3c <__ieee754_powf+0x3fc>)
 800fba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fba6:	eef0 7a47 	vmov.f32	s15, s14
 800fbaa:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fbae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbb2:	edd4 0a00 	vldr	s1, [r4]
 800fbb6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbbe:	ee17 3a90 	vmov	r3, s15
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	ee07 3a90 	vmov	s15, r3
 800fbc8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800fbcc:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800fbd0:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fbd4:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fbd8:	e70f      	b.n	800f9fa <__ieee754_powf+0x1ba>
 800fbda:	2401      	movs	r4, #1
 800fbdc:	e75d      	b.n	800fa9a <__ieee754_powf+0x25a>
 800fbde:	bf00      	nop
 800fbe0:	08010810 	.word	0x08010810
 800fbe4:	00000000 	.word	0x00000000
 800fbe8:	3f7ffff7 	.word	0x3f7ffff7
 800fbec:	7149f2ca 	.word	0x7149f2ca
 800fbf0:	3f800007 	.word	0x3f800007
 800fbf4:	3eaaaaab 	.word	0x3eaaaaab
 800fbf8:	3fb8aa3b 	.word	0x3fb8aa3b
 800fbfc:	36eca570 	.word	0x36eca570
 800fc00:	3fb8aa00 	.word	0x3fb8aa00
 800fc04:	4b800000 	.word	0x4b800000
 800fc08:	001cc471 	.word	0x001cc471
 800fc0c:	005db3d6 	.word	0x005db3d6
 800fc10:	08010934 	.word	0x08010934
 800fc14:	fffff000 	.word	0xfffff000
 800fc18:	3e6c3255 	.word	0x3e6c3255
 800fc1c:	3e53f142 	.word	0x3e53f142
 800fc20:	3e8ba305 	.word	0x3e8ba305
 800fc24:	3edb6db7 	.word	0x3edb6db7
 800fc28:	3f19999a 	.word	0x3f19999a
 800fc2c:	3f76384f 	.word	0x3f76384f
 800fc30:	3f763800 	.word	0x3f763800
 800fc34:	369dc3a0 	.word	0x369dc3a0
 800fc38:	08010944 	.word	0x08010944
 800fc3c:	0801093c 	.word	0x0801093c
 800fc40:	3338aa3c 	.word	0x3338aa3c
 800fc44:	f040 8092 	bne.w	800fd6c <__ieee754_powf+0x52c>
 800fc48:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fc40 <__ieee754_powf+0x400>
 800fc4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc50:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fc54:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	f73f aef6 	bgt.w	800fa4c <__ieee754_powf+0x20c>
 800fc60:	15db      	asrs	r3, r3, #23
 800fc62:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fc66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fc6a:	4103      	asrs	r3, r0
 800fc6c:	4423      	add	r3, r4
 800fc6e:	4949      	ldr	r1, [pc, #292]	; (800fd94 <__ieee754_powf+0x554>)
 800fc70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc74:	3a7f      	subs	r2, #127	; 0x7f
 800fc76:	4111      	asrs	r1, r2
 800fc78:	ea23 0101 	bic.w	r1, r3, r1
 800fc7c:	ee07 1a10 	vmov	s14, r1
 800fc80:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fc84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fc88:	f1c2 0217 	rsb	r2, r2, #23
 800fc8c:	4110      	asrs	r0, r2
 800fc8e:	2c00      	cmp	r4, #0
 800fc90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc94:	bfb8      	it	lt
 800fc96:	4240      	neglt	r0, r0
 800fc98:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fc9c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800fd98 <__ieee754_powf+0x558>
 800fca0:	ee17 3a10 	vmov	r3, s14
 800fca4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fca8:	f023 030f 	bic.w	r3, r3, #15
 800fcac:	ee07 3a10 	vmov	s14, r3
 800fcb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcb4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fcb8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fd9c <__ieee754_powf+0x55c>
 800fcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fcc4:	eddf 6a36 	vldr	s13, [pc, #216]	; 800fda0 <__ieee754_powf+0x560>
 800fcc8:	eeb0 0a67 	vmov.f32	s0, s15
 800fccc:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fcd0:	eeb0 6a40 	vmov.f32	s12, s0
 800fcd4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fcd8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fcdc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fce0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fda4 <__ieee754_powf+0x564>
 800fce4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800fda8 <__ieee754_powf+0x568>
 800fce8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fcec:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800fdac <__ieee754_powf+0x56c>
 800fcf0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fcf4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800fdb0 <__ieee754_powf+0x570>
 800fcf8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fcfc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800fdb4 <__ieee754_powf+0x574>
 800fd00:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fd04:	eeb0 6a40 	vmov.f32	s12, s0
 800fd08:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fd0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fd10:	eeb0 7a46 	vmov.f32	s14, s12
 800fd14:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fd18:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fd1c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800fd20:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fd24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fd2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fd34:	ee10 3a10 	vmov	r3, s0
 800fd38:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fd3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fd40:	da1a      	bge.n	800fd78 <__ieee754_powf+0x538>
 800fd42:	f000 f98b 	bl	801005c <scalbnf>
 800fd46:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fd4a:	e5cd      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800fd4c:	4a1a      	ldr	r2, [pc, #104]	; (800fdb8 <__ieee754_powf+0x578>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	dd02      	ble.n	800fd58 <__ieee754_powf+0x518>
 800fd52:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800fdbc <__ieee754_powf+0x57c>
 800fd56:	e67b      	b.n	800fa50 <__ieee754_powf+0x210>
 800fd58:	d108      	bne.n	800fd6c <__ieee754_powf+0x52c>
 800fd5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fd5e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd66:	f6ff af7b 	blt.w	800fc60 <__ieee754_powf+0x420>
 800fd6a:	e7f2      	b.n	800fd52 <__ieee754_powf+0x512>
 800fd6c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fd70:	f73f af76 	bgt.w	800fc60 <__ieee754_powf+0x420>
 800fd74:	2000      	movs	r0, #0
 800fd76:	e78f      	b.n	800fc98 <__ieee754_powf+0x458>
 800fd78:	ee00 3a10 	vmov	s0, r3
 800fd7c:	e7e3      	b.n	800fd46 <__ieee754_powf+0x506>
 800fd7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fd82:	e5b1      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800fd84:	eeb0 0a68 	vmov.f32	s0, s17
 800fd88:	e5ae      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800fd8a:	eeb0 0a48 	vmov.f32	s0, s16
 800fd8e:	e5ab      	b.n	800f8e8 <__ieee754_powf+0xa8>
 800fd90:	2600      	movs	r6, #0
 800fd92:	e590      	b.n	800f8b6 <__ieee754_powf+0x76>
 800fd94:	007fffff 	.word	0x007fffff
 800fd98:	3f317218 	.word	0x3f317218
 800fd9c:	35bfbe8c 	.word	0x35bfbe8c
 800fda0:	3f317200 	.word	0x3f317200
 800fda4:	3331bb4c 	.word	0x3331bb4c
 800fda8:	b5ddea0e 	.word	0xb5ddea0e
 800fdac:	388ab355 	.word	0x388ab355
 800fdb0:	bb360b61 	.word	0xbb360b61
 800fdb4:	3e2aaaab 	.word	0x3e2aaaab
 800fdb8:	43160000 	.word	0x43160000
 800fdbc:	0da24260 	.word	0x0da24260

0800fdc0 <__ieee754_sqrtf>:
 800fdc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <atanf>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	ee10 5a10 	vmov	r5, s0
 800fdce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fdd2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fdd6:	eef0 7a40 	vmov.f32	s15, s0
 800fdda:	db10      	blt.n	800fdfe <atanf+0x36>
 800fddc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fde0:	dd04      	ble.n	800fdec <atanf+0x24>
 800fde2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fde6:	eeb0 0a67 	vmov.f32	s0, s15
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ff24 <atanf+0x15c>
 800fdf0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ff28 <atanf+0x160>
 800fdf4:	2d00      	cmp	r5, #0
 800fdf6:	bfd8      	it	le
 800fdf8:	eef0 7a40 	vmovle.f32	s15, s0
 800fdfc:	e7f3      	b.n	800fde6 <atanf+0x1e>
 800fdfe:	4b4b      	ldr	r3, [pc, #300]	; (800ff2c <atanf+0x164>)
 800fe00:	429c      	cmp	r4, r3
 800fe02:	dc10      	bgt.n	800fe26 <atanf+0x5e>
 800fe04:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fe08:	da0a      	bge.n	800fe20 <atanf+0x58>
 800fe0a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ff30 <atanf+0x168>
 800fe0e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fe12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe16:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1e:	dce2      	bgt.n	800fde6 <atanf+0x1e>
 800fe20:	f04f 33ff 	mov.w	r3, #4294967295
 800fe24:	e013      	b.n	800fe4e <atanf+0x86>
 800fe26:	f000 f8a3 	bl	800ff70 <fabsf>
 800fe2a:	4b42      	ldr	r3, [pc, #264]	; (800ff34 <atanf+0x16c>)
 800fe2c:	429c      	cmp	r4, r3
 800fe2e:	dc4f      	bgt.n	800fed0 <atanf+0x108>
 800fe30:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fe34:	429c      	cmp	r4, r3
 800fe36:	dc41      	bgt.n	800febc <atanf+0xf4>
 800fe38:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fe3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fe40:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fe44:	2300      	movs	r3, #0
 800fe46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fe54:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ff38 <atanf+0x170>
 800fe58:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800ff3c <atanf+0x174>
 800fe5c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ff40 <atanf+0x178>
 800fe60:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800ff44 <atanf+0x17c>
 800fe64:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fe68:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fe6c:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ff48 <atanf+0x180>
 800fe70:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fe74:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800ff4c <atanf+0x184>
 800fe78:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fe7c:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ff50 <atanf+0x188>
 800fe80:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fe84:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800ff54 <atanf+0x18c>
 800fe88:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fe8c:	eddf 5a32 	vldr	s11, [pc, #200]	; 800ff58 <atanf+0x190>
 800fe90:	eee7 5a05 	vfma.f32	s11, s14, s10
 800fe94:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800ff5c <atanf+0x194>
 800fe98:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fe9c:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ff60 <atanf+0x198>
 800fea0:	eee5 5a07 	vfma.f32	s11, s10, s14
 800fea4:	eea5 0a87 	vfma.f32	s0, s11, s14
 800fea8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800feac:	eea6 0a26 	vfma.f32	s0, s12, s13
 800feb0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800feb4:	d121      	bne.n	800fefa <atanf+0x132>
 800feb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800feba:	e794      	b.n	800fde6 <atanf+0x1e>
 800febc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fec0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fec4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fec8:	2301      	movs	r3, #1
 800feca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fece:	e7be      	b.n	800fe4e <atanf+0x86>
 800fed0:	4b24      	ldr	r3, [pc, #144]	; (800ff64 <atanf+0x19c>)
 800fed2:	429c      	cmp	r4, r3
 800fed4:	dc0b      	bgt.n	800feee <atanf+0x126>
 800fed6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800feda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fede:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fee2:	2302      	movs	r3, #2
 800fee4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800feec:	e7af      	b.n	800fe4e <atanf+0x86>
 800feee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fef2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fef6:	2303      	movs	r3, #3
 800fef8:	e7a9      	b.n	800fe4e <atanf+0x86>
 800fefa:	4a1b      	ldr	r2, [pc, #108]	; (800ff68 <atanf+0x1a0>)
 800fefc:	491b      	ldr	r1, [pc, #108]	; (800ff6c <atanf+0x1a4>)
 800fefe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ff02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ff06:	ed93 7a00 	vldr	s14, [r3]
 800ff0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ff14:	ed92 0a00 	vldr	s0, [r2]
 800ff18:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ff1c:	bfb8      	it	lt
 800ff1e:	eef1 7a67 	vneglt.f32	s15, s15
 800ff22:	e760      	b.n	800fde6 <atanf+0x1e>
 800ff24:	3fc90fdb 	.word	0x3fc90fdb
 800ff28:	bfc90fdb 	.word	0xbfc90fdb
 800ff2c:	3edfffff 	.word	0x3edfffff
 800ff30:	7149f2ca 	.word	0x7149f2ca
 800ff34:	3f97ffff 	.word	0x3f97ffff
 800ff38:	3c8569d7 	.word	0x3c8569d7
 800ff3c:	3d4bda59 	.word	0x3d4bda59
 800ff40:	bd15a221 	.word	0xbd15a221
 800ff44:	be4ccccd 	.word	0xbe4ccccd
 800ff48:	3d886b35 	.word	0x3d886b35
 800ff4c:	3dba2e6e 	.word	0x3dba2e6e
 800ff50:	3e124925 	.word	0x3e124925
 800ff54:	3eaaaaab 	.word	0x3eaaaaab
 800ff58:	bd6ef16b 	.word	0xbd6ef16b
 800ff5c:	bd9d8795 	.word	0xbd9d8795
 800ff60:	bde38e38 	.word	0xbde38e38
 800ff64:	401bffff 	.word	0x401bffff
 800ff68:	0801094c 	.word	0x0801094c
 800ff6c:	0801095c 	.word	0x0801095c

0800ff70 <fabsf>:
 800ff70:	ee10 3a10 	vmov	r3, s0
 800ff74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff78:	ee00 3a10 	vmov	s0, r3
 800ff7c:	4770      	bx	lr

0800ff7e <finitef>:
 800ff7e:	b082      	sub	sp, #8
 800ff80:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ff84:	9801      	ldr	r0, [sp, #4]
 800ff86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff8a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ff8e:	bfac      	ite	ge
 800ff90:	2000      	movge	r0, #0
 800ff92:	2001      	movlt	r0, #1
 800ff94:	b002      	add	sp, #8
 800ff96:	4770      	bx	lr

0800ff98 <nanf>:
 800ff98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ffa0 <nanf+0x8>
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop
 800ffa0:	7fc00000 	.word	0x7fc00000

0800ffa4 <rintf>:
 800ffa4:	ee10 2a10 	vmov	r2, s0
 800ffa8:	b513      	push	{r0, r1, r4, lr}
 800ffaa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ffae:	397f      	subs	r1, #127	; 0x7f
 800ffb0:	2916      	cmp	r1, #22
 800ffb2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ffb6:	dc47      	bgt.n	8010048 <rintf+0xa4>
 800ffb8:	b32b      	cbz	r3, 8010006 <rintf+0x62>
 800ffba:	2900      	cmp	r1, #0
 800ffbc:	ee10 3a10 	vmov	r3, s0
 800ffc0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800ffc4:	da21      	bge.n	801000a <rintf+0x66>
 800ffc6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800ffca:	425b      	negs	r3, r3
 800ffcc:	4921      	ldr	r1, [pc, #132]	; (8010054 <rintf+0xb0>)
 800ffce:	0a5b      	lsrs	r3, r3, #9
 800ffd0:	0d12      	lsrs	r2, r2, #20
 800ffd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffd6:	0512      	lsls	r2, r2, #20
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ffde:	ee07 3a90 	vmov	s15, r3
 800ffe2:	edd1 6a00 	vldr	s13, [r1]
 800ffe6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800ffea:	ed8d 7a01 	vstr	s14, [sp, #4]
 800ffee:	eddd 7a01 	vldr	s15, [sp, #4]
 800fff2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fff6:	ee17 3a90 	vmov	r3, s15
 800fffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fffe:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8010002:	ee00 3a10 	vmov	s0, r3
 8010006:	b002      	add	sp, #8
 8010008:	bd10      	pop	{r4, pc}
 801000a:	4a13      	ldr	r2, [pc, #76]	; (8010058 <rintf+0xb4>)
 801000c:	410a      	asrs	r2, r1
 801000e:	4213      	tst	r3, r2
 8010010:	d0f9      	beq.n	8010006 <rintf+0x62>
 8010012:	0854      	lsrs	r4, r2, #1
 8010014:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8010018:	d006      	beq.n	8010028 <rintf+0x84>
 801001a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801001e:	ea23 0304 	bic.w	r3, r3, r4
 8010022:	fa42 f101 	asr.w	r1, r2, r1
 8010026:	430b      	orrs	r3, r1
 8010028:	4a0a      	ldr	r2, [pc, #40]	; (8010054 <rintf+0xb0>)
 801002a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801002e:	ed90 7a00 	vldr	s14, [r0]
 8010032:	ee07 3a90 	vmov	s15, r3
 8010036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801003a:	edcd 7a01 	vstr	s15, [sp, #4]
 801003e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010042:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010046:	e7de      	b.n	8010006 <rintf+0x62>
 8010048:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801004c:	d3db      	bcc.n	8010006 <rintf+0x62>
 801004e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010052:	e7d8      	b.n	8010006 <rintf+0x62>
 8010054:	0801096c 	.word	0x0801096c
 8010058:	007fffff 	.word	0x007fffff

0801005c <scalbnf>:
 801005c:	ee10 3a10 	vmov	r3, s0
 8010060:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010064:	d025      	beq.n	80100b2 <scalbnf+0x56>
 8010066:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801006a:	d302      	bcc.n	8010072 <scalbnf+0x16>
 801006c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010070:	4770      	bx	lr
 8010072:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010076:	d122      	bne.n	80100be <scalbnf+0x62>
 8010078:	4b2a      	ldr	r3, [pc, #168]	; (8010124 <scalbnf+0xc8>)
 801007a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010128 <scalbnf+0xcc>
 801007e:	4298      	cmp	r0, r3
 8010080:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010084:	db16      	blt.n	80100b4 <scalbnf+0x58>
 8010086:	ee10 3a10 	vmov	r3, s0
 801008a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801008e:	3a19      	subs	r2, #25
 8010090:	4402      	add	r2, r0
 8010092:	2afe      	cmp	r2, #254	; 0xfe
 8010094:	dd15      	ble.n	80100c2 <scalbnf+0x66>
 8010096:	ee10 3a10 	vmov	r3, s0
 801009a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801012c <scalbnf+0xd0>
 801009e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010130 <scalbnf+0xd4>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	eeb0 7a67 	vmov.f32	s14, s15
 80100a8:	bfb8      	it	lt
 80100aa:	eef0 7a66 	vmovlt.f32	s15, s13
 80100ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 80100b2:	4770      	bx	lr
 80100b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010134 <scalbnf+0xd8>
 80100b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100bc:	4770      	bx	lr
 80100be:	0dd2      	lsrs	r2, r2, #23
 80100c0:	e7e6      	b.n	8010090 <scalbnf+0x34>
 80100c2:	2a00      	cmp	r2, #0
 80100c4:	dd06      	ble.n	80100d4 <scalbnf+0x78>
 80100c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80100ce:	ee00 3a10 	vmov	s0, r3
 80100d2:	4770      	bx	lr
 80100d4:	f112 0f16 	cmn.w	r2, #22
 80100d8:	da1a      	bge.n	8010110 <scalbnf+0xb4>
 80100da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100de:	4298      	cmp	r0, r3
 80100e0:	ee10 3a10 	vmov	r3, s0
 80100e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100e8:	dd0a      	ble.n	8010100 <scalbnf+0xa4>
 80100ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801012c <scalbnf+0xd0>
 80100ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010130 <scalbnf+0xd4>
 80100f2:	eef0 7a40 	vmov.f32	s15, s0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	bf18      	it	ne
 80100fa:	eeb0 0a47 	vmovne.f32	s0, s14
 80100fe:	e7db      	b.n	80100b8 <scalbnf+0x5c>
 8010100:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010134 <scalbnf+0xd8>
 8010104:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010138 <scalbnf+0xdc>
 8010108:	eef0 7a40 	vmov.f32	s15, s0
 801010c:	2b00      	cmp	r3, #0
 801010e:	e7f3      	b.n	80100f8 <scalbnf+0x9c>
 8010110:	3219      	adds	r2, #25
 8010112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010116:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801011a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801013c <scalbnf+0xe0>
 801011e:	ee07 3a10 	vmov	s14, r3
 8010122:	e7c4      	b.n	80100ae <scalbnf+0x52>
 8010124:	ffff3cb0 	.word	0xffff3cb0
 8010128:	4c000000 	.word	0x4c000000
 801012c:	7149f2ca 	.word	0x7149f2ca
 8010130:	f149f2ca 	.word	0xf149f2ca
 8010134:	0da24260 	.word	0x0da24260
 8010138:	8da24260 	.word	0x8da24260
 801013c:	33000000 	.word	0x33000000

08010140 <_init>:
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010142:	bf00      	nop
 8010144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010146:	bc08      	pop	{r3}
 8010148:	469e      	mov	lr, r3
 801014a:	4770      	bx	lr

0801014c <_fini>:
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	bf00      	nop
 8010150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010152:	bc08      	pop	{r3}
 8010154:	469e      	mov	lr, r3
 8010156:	4770      	bx	lr
