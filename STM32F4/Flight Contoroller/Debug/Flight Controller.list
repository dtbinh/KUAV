
Flight Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001194c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08011ae0  08011ae0  00021ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124d8  080124d8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080124d8  080124d8  000224d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124e0  080124e0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124e0  080124e0  000224e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124e4  080124e4  000224e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080124e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001e8  080126cc  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  080126cc  000308d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b460  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004737  00000000  00000000  0004b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0004fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00051440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026059  00000000  00000000  00052950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6b2  00000000  00000000  000789a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfcd4  00000000  00000000  0009305b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b8  00000000  00000000  00162d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ac4 	.word	0x08011ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011ac4 	.word	0x08011ac4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	619a      	str	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <AT24C08_Page_Write>:
 */
#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	  unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	121b      	asrs	r3, r3, #8
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	73fb      	strb	r3, [r7, #15]
	  unsigned char wordAddress = (page*16) & 0xff;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	73bb      	strb	r3, [r7, #14]

	  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <AT24C08_Page_Write+0x68>)
 8000f4a:	f7ff ffd7 	bl	8000efc <LL_GPIO_ResetOutputPin>
	  HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	2301      	movs	r3, #1
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <AT24C08_Page_Write+0x6c>)
 8000f66:	f008 fdb7 	bl	8009ad8 <HAL_I2C_Mem_Write>
	  HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f007 fd9c 	bl	8008aa8 <HAL_Delay>
	  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <AT24C08_Page_Write+0x68>)
 8000f76:	f7ff ffb3 	bl	8000ee0 <LL_GPIO_SetOutputPin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020800 	.word	0x40020800
 8000f88:	200006f4 	.word	0x200006f4

08000f8c <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	  unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	121b      	asrs	r3, r3, #8
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
	  unsigned char wordAddress = (page*16) & 0xff;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	73bb      	strb	r3, [r7, #14]

	  HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <AT24C08_Page_Read+0x4c>)
 8000fcc:	f008 fe7e 	bl	8009ccc <HAL_I2C_Mem_Read>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200006f4 	.word	0x200006f4

08000fdc <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe8:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fec:	ed87 1a00 	vstr	s2, [r7]
 8000ff0:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8000ff2:	2345      	movs	r3, #69	; 0x45
 8000ff4:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000ff6:	2350      	movs	r3, #80	; 0x50
 8000ff8:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8001006:	7d7b      	ldrb	r3, [r7, #21]
 8001008:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8001016:	7d3b      	ldrb	r3, [r7, #20]
 8001018:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 800101a:	7d7b      	ldrb	r3, [r7, #21]
 800101c:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001020:	7dbb      	ldrb	r3, [r7, #22]
 8001022:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 800103c:	7dbb      	ldrb	r3, [r7, #22]
 800103e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
 8001052:	e00c      	b.n	800106e <EP_PIDGain_Write+0x92>
	{
		chksum -= buf_write[i];
 8001054:	f107 0218 	add.w	r2, r7, #24
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106a:	3301      	adds	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	2b0e      	cmp	r3, #14
 8001072:	ddef      	ble.n	8001054 <EP_PIDGain_Write+0x78>
	}
	buf_write[15] = chksum;
 8001074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(id)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d83e      	bhi.n	8001100 <EP_PIDGain_Write+0x124>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <EP_PIDGain_Write+0xac>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010a1 	.word	0x080010a1
 800108c:	080010b1 	.word	0x080010b1
 8001090:	080010c1 	.word	0x080010c1
 8001094:	080010d1 	.word	0x080010d1
 8001098:	080010e1 	.word	0x080010e1
 800109c:	080010f1 	.word	0x080010f1
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	2210      	movs	r2, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff37 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ae:	e027      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	2210      	movs	r2, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff ff2f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010be:	e01f      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	2210      	movs	r2, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff ff27 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ce:	e017      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2210      	movs	r2, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	2003      	movs	r0, #3
 80010da:	f7ff ff1f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010de:	e00f      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2210      	movs	r2, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff ff17 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010ee:	e007      	b.n	8001100 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	2210      	movs	r2, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	2005      	movs	r0, #5
 80010fa:	f7ff ff0f 	bl	8000f1c <AT24C08_Page_Write>
		break;
 80010fe:	bf00      	nop
	}
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d83e      	bhi.n	800119c <EP_PIDGain_Read+0x94>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <EP_PIDGain_Read+0x1c>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	0800113d 	.word	0x0800113d
 8001128:	0800114d 	.word	0x0800114d
 800112c:	0800115d 	.word	0x0800115d
 8001130:	0800116d 	.word	0x0800116d
 8001134:	0800117d 	.word	0x0800117d
 8001138:	0800118d 	.word	0x0800118d
		{
		case 0:
			AT24C08_Page_Read(0, &buf_read[0], 16);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	2210      	movs	r2, #16
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff ff21 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800114a:	e027      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 1:
			AT24C08_Page_Read(1, &buf_read[0], 16);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2210      	movs	r2, #16
 8001152:	4619      	mov	r1, r3
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff19 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800115a:	e01f      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 2:
			AT24C08_Page_Read(2, &buf_read[0], 16);
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2210      	movs	r2, #16
 8001162:	4619      	mov	r1, r3
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ff11 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800116a:	e017      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 3:
			AT24C08_Page_Read(3, &buf_read[0], 16);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	2210      	movs	r2, #16
 8001172:	4619      	mov	r1, r3
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff ff09 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800117a:	e00f      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 4:
			AT24C08_Page_Read(4, &buf_read[0], 16);
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	2210      	movs	r2, #16
 8001182:	4619      	mov	r1, r3
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff ff01 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800118a:	e007      	b.n	800119c <EP_PIDGain_Read+0x94>
		case 5:
			AT24C08_Page_Read(5, &buf_read[0], 16);
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2210      	movs	r2, #16
 8001192:	4619      	mov	r1, r3
 8001194:	2005      	movs	r0, #5
 8001196:	f7ff fef9 	bl	8000f8c <AT24C08_Page_Read>
			break;
 800119a:	bf00      	nop
		}

	unsigned char chksum = 0xff;
 800119c:	23ff      	movs	r3, #255	; 0xff
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for(int i=0; i<15; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a6:	e00c      	b.n	80011c2 <EP_PIDGain_Read+0xba>
	{
		chksum -= buf_read[i];
 80011a8:	f107 0218 	add.w	r2, r7, #24
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0; i<15; i++)
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	3301      	adds	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	2b0e      	cmp	r3, #14
 80011c6:	ddef      	ble.n	80011a8 <EP_PIDGain_Read+0xa0>
	}

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d12f      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
 80011d4:	7e3b      	ldrb	r3, [r7, #24]
 80011d6:	2b45      	cmp	r3, #69	; 0x45
 80011d8:	d12c      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
 80011da:	7e7b      	ldrb	r3, [r7, #25]
 80011dc:	2b50      	cmp	r3, #80	; 0x50
 80011de:	d129      	bne.n	8001234 <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 80011e0:	7efb      	ldrb	r3, [r7, #27]
 80011e2:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 80011e4:	7f3b      	ldrb	r3, [r7, #28]
 80011e6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011ec:	7fbb      	ldrb	r3, [r7, #30]
 80011ee:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011fe:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8001200:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001204:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800120a:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 8001212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001216:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800121c:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 8001224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001228:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]

		return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <EP_PIDGain_Read+0x12e>
	}

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop

08001240 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f023 0210 	bic.w	r2, r3, #16
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d101      	bne.n	80012c4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	330c      	adds	r3, #12
 80012fc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_GPIO_IsInputPinSet>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4013      	ands	r3, r2
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_SetOutputPin>:
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_GPIO_ResetOutputPin>:
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800

080013d4 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2228      	movs	r2, #40	; 0x28
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00b feb0 	bl	800d148 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013fc:	f7ff ffd2 	bl	80013a4 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001400:	2002      	movs	r0, #2
 8001402:	f7ff ffb7 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001406:	2004      	movs	r0, #4
 8001408:	f7ff ffb4 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff ffb1 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001412:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001416:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001418:	2302      	movs	r3, #2
 800141a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001428:	2305      	movs	r3, #5
 800142a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4841      	ldr	r0, [pc, #260]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001432:	f00a ff00 	bl	800c236 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800143a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800143e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001452:	2318      	movs	r3, #24
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 800146a:	f00b f8b4 	bl	800c5d6 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800146e:	2100      	movs	r1, #0
 8001470:	4832      	ldr	r0, [pc, #200]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 8001472:	f7ff fef5 	bl	8001260 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	4831      	ldr	r0, [pc, #196]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800147c:	f7ff ff6b 	bl	8001356 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001484:	482c      	ldr	r0, [pc, #176]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001486:	f7ff ff66 	bl	8001356 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	482d      	ldr	r0, [pc, #180]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001490:	f7ff ff61 	bl	8001356 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800149a:	2301      	movs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4822      	ldr	r0, [pc, #136]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014b0:	f00a fec1 	bl	800c236 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ba:	2301      	movs	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	481c      	ldr	r0, [pc, #112]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014d0:	f00a feb1 	bl	800c236 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014f0:	f00a fea1 	bl	800c236 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001508:	f00a fe95 	bl	800c236 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <BNO080_GPIO_SPI_Initialization+0x168>)
 800150e:	f7ff fe97 	bl	8001240 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 8001512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001518:	f7ff ff0f 	bl	800133a <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 800151c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <BNO080_GPIO_SPI_Initialization+0x170>)
 8001522:	f7ff ff0a 	bl	800133a <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <BNO080_GPIO_SPI_Initialization+0x16c>)
 800152c:	f7ff ff05 	bl	800133a <LL_GPIO_SetOutputPin>
}
 8001530:	bf00      	nop
 8001532:	3740      	adds	r7, #64	; 0x40
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020400 	.word	0x40020400
 800153c:	40003800 	.word	0x40003800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800154e:	f7ff ff41 	bl	80013d4 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8001552:	482e      	ldr	r0, [pc, #184]	; (800160c <BNO080_Initialization+0xc4>)
 8001554:	f00c fa6a 	bl	800da2c <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <BNO080_Initialization+0xc8>)
 800155e:	f7ff feec 	bl	800133a <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	482b      	ldr	r0, [pc, #172]	; (8001614 <BNO080_Initialization+0xcc>)
 8001568:	f7ff fee7 	bl	800133a <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4829      	ldr	r0, [pc, #164]	; (8001618 <BNO080_Initialization+0xd0>)
 8001572:	f7ff fef0 	bl	8001356 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001576:	20c8      	movs	r0, #200	; 0xc8
 8001578:	f007 fa96 	bl	8008aa8 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	4825      	ldr	r0, [pc, #148]	; (8001618 <BNO080_Initialization+0xd0>)
 8001582:	f7ff feda 	bl	800133a <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001586:	f000 fc53 	bl	8001e30 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800158a:	f000 fc51 	bl	8001e30 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800158e:	f000 fc73 	bl	8001e78 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001592:	f000 fc4d 	bl	8001e30 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001596:	f000 fc6f 	bl	8001e78 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <BNO080_Initialization+0xd4>)
 800159c:	22f9      	movs	r2, #249	; 0xf9
 800159e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <BNO080_Initialization+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80015a6:	2102      	movs	r1, #2
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 fcd5 	bl	8001f58 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80015ae:	f000 fc3f 	bl	8001e30 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80015b2:	f000 fc61 	bl	8001e78 <BNO080_receivePacket>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d11b      	bne.n	80015f4 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <BNO080_Initialization+0xd8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <BNO080_Initialization+0xd8>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <BNO080_Initialization+0xd8>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	4618      	mov	r0, r3
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <BNO080_Initialization+0xd8>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4603      	mov	r3, r0
 80015d6:	4813      	ldr	r0, [pc, #76]	; (8001624 <BNO080_Initialization+0xdc>)
 80015d8:	f00c fa28 	bl	800da2c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <BNO080_Initialization+0xd4>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2bf8      	cmp	r3, #248	; 0xf8
 80015e2:	d107      	bne.n	80015f4 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <BNO080_Initialization+0xd4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <BNO080_Initialization+0xe0>)
 80015ec:	f00c fa1e 	bl	800da2c <iprintf>
			return (0);
 80015f0:	2300      	movs	r3, #0
 80015f2:	e007      	b.n	8001604 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <BNO080_Initialization+0xd4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	22f8      	movs	r2, #248	; 0xf8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <BNO080_Initialization+0xe4>)
 80015fe:	f00c fa15 	bl	800da2c <iprintf>
	return (1); //Something went wrong
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08011ae0 	.word	0x08011ae0
 8001610:	40020400 	.word	0x40020400
 8001614:	40020000 	.word	0x40020000
 8001618:	40020800 	.word	0x40020800
 800161c:	200002f4 	.word	0x200002f4
 8001620:	200002a0 	.word	0x200002a0
 8001624:	08011af4 	.word	0x08011af4
 8001628:	08011b0c 	.word	0x08011b0c
 800162c:	08011b2c 	.word	0x08011b2c

08001630 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800163a:	bf00      	nop
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <SPI2_SendByte+0x40>)
 800163e:	f7ff fe35 	bl	80012ac <LL_SPI_IsActiveFlag_TXE>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f9      	beq.n	800163c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4619      	mov	r1, r3
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <SPI2_SendByte+0x40>)
 800164e:	f7ff fe4d 	bl	80012ec <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001652:	bf00      	nop
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <SPI2_SendByte+0x40>)
 8001656:	f7ff fe16 	bl	8001286 <LL_SPI_IsActiveFlag_RXNE>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f9      	beq.n	8001654 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <SPI2_SendByte+0x40>)
 8001662:	f7ff fe36 	bl	80012d2 <LL_SPI_ReceiveData8>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40003800 	.word	0x40003800

08001674 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <BNO080_dataAvailable+0x50>)
 800167e:	f7ff fe47 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <BNO080_dataAvailable+0x18>
		return (0);
 8001688:	2300      	movs	r3, #0
 800168a:	e019      	b.n	80016c0 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800168c:	f000 fbf4 	bl	8001e78 <BNO080_receivePacket>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d113      	bne.n	80016be <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <BNO080_dataAvailable+0x54>)
 8001698:	789b      	ldrb	r3, [r3, #2]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <BNO080_dataAvailable+0x3a>
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <BNO080_dataAvailable+0x58>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2bfb      	cmp	r3, #251	; 0xfb
 80016a4:	d103      	bne.n	80016ae <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80016a6:	f000 f82f 	bl	8001708 <BNO080_parseInputReport>
			return (1);
 80016aa:	2301      	movs	r3, #1
 80016ac:	e008      	b.n	80016c0 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <BNO080_dataAvailable+0x54>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d103      	bne.n	80016be <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80016b6:	f000 f80b 	bl	80016d0 <BNO080_parseCommandReport>
			return (1);
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800
 80016c8:	200002a0 	.word	0x200002a0
 80016cc:	200002f4 	.word	0x200002f4

080016d0 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2bf1      	cmp	r3, #241	; 0xf1
 80016dc:	d109      	bne.n	80016f2 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d103      	bne.n	80016f2 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <BNO080_parseCommandReport+0x30>)
 80016ec:	795a      	ldrb	r2, [r3, #5]
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <BNO080_parseCommandReport+0x34>)
 80016f0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200002f4 	.word	0x200002f4
 8001704:	20000377 	.word	0x20000377

08001708 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800170e:	4b98      	ldr	r3, [pc, #608]	; (8001970 <BNO080_parseInputReport+0x268>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b96      	ldr	r3, [pc, #600]	; (8001970 <BNO080_parseInputReport+0x268>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001720:	8a3b      	ldrh	r3, [r7, #16]
 8001722:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001726:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001728:	8a3b      	ldrh	r3, [r7, #16]
 800172a:	3b04      	subs	r3, #4
 800172c:	b29b      	uxth	r3, r3
 800172e:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001730:	4b90      	ldr	r3, [pc, #576]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	4a8f      	ldr	r2, [pc, #572]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001738:	78d2      	ldrb	r2, [r2, #3]
 800173a:	0412      	lsls	r2, r2, #16
 800173c:	4313      	orrs	r3, r2
 800173e:	4a8d      	ldr	r2, [pc, #564]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001740:	7892      	ldrb	r2, [r2, #2]
 8001742:	0212      	lsls	r2, r2, #8
 8001744:	4313      	orrs	r3, r2
 8001746:	4a8b      	ldr	r2, [pc, #556]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001748:	7852      	ldrb	r2, [r2, #1]
 800174a:	4313      	orrs	r3, r2
 800174c:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <BNO080_parseInputReport+0x270>)
 800174e:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001750:	4b88      	ldr	r3, [pc, #544]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001752:	79db      	ldrb	r3, [r3, #7]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 800175a:	4b86      	ldr	r3, [pc, #536]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800175c:	7a9b      	ldrb	r3, [r3, #10]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b84      	ldr	r3, [pc, #528]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001764:	7a5b      	ldrb	r3, [r3, #9]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800176e:	4b81      	ldr	r3, [pc, #516]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001778:	7adb      	ldrb	r3, [r3, #11]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001782:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001784:	7b9b      	ldrb	r3, [r3, #14]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b7a      	ldr	r3, [pc, #488]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800179e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017a2:	2b0e      	cmp	r3, #14
 80017a4:	dd09      	ble.n	80017ba <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017a8:	7c1b      	ldrb	r3, [r3, #16]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017b0:	7bdb      	ldrb	r3, [r3, #15]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80017ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	dd09      	ble.n	80017d6 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80017c2:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017c4:	7c9b      	ldrb	r3, [r3, #18]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017cc:	7c5b      	ldrb	r3, [r3, #17]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80017d6:	4b67      	ldr	r3, [pc, #412]	; (8001974 <BNO080_parseInputReport+0x26c>)
 80017d8:	795b      	ldrb	r3, [r3, #5]
 80017da:	2b1e      	cmp	r3, #30
 80017dc:	dc46      	bgt.n	800186c <BNO080_parseInputReport+0x164>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f340 80bf 	ble.w	8001962 <BNO080_parseInputReport+0x25a>
 80017e4:	3b01      	subs	r3, #1
 80017e6:	2b1d      	cmp	r3, #29
 80017e8:	f200 80bb 	bhi.w	8001962 <BNO080_parseInputReport+0x25a>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <BNO080_parseInputReport+0xec>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001873 	.word	0x08001873
 80017f8:	080018ab 	.word	0x080018ab
 80017fc:	080018c7 	.word	0x080018c7
 8001800:	0800188f 	.word	0x0800188f
 8001804:	080018e3 	.word	0x080018e3
 8001808:	08001963 	.word	0x08001963
 800180c:	08001963 	.word	0x08001963
 8001810:	080018e3 	.word	0x080018e3
 8001814:	08001963 	.word	0x08001963
 8001818:	08001963 	.word	0x08001963
 800181c:	08001963 	.word	0x08001963
 8001820:	08001963 	.word	0x08001963
 8001824:	08001963 	.word	0x08001963
 8001828:	08001963 	.word	0x08001963
 800182c:	08001963 	.word	0x08001963
 8001830:	08001963 	.word	0x08001963
 8001834:	0800190b 	.word	0x0800190b
 8001838:	08001963 	.word	0x08001963
 800183c:	08001913 	.word	0x08001913
 8001840:	08001963 	.word	0x08001963
 8001844:	08001963 	.word	0x08001963
 8001848:	08001963 	.word	0x08001963
 800184c:	08001963 	.word	0x08001963
 8001850:	08001963 	.word	0x08001963
 8001854:	08001963 	.word	0x08001963
 8001858:	08001963 	.word	0x08001963
 800185c:	08001963 	.word	0x08001963
 8001860:	08001963 	.word	0x08001963
 8001864:	08001963 	.word	0x08001963
 8001868:	0800191d 	.word	0x0800191d
 800186c:	2bf1      	cmp	r3, #241	; 0xf1
 800186e:	d06d      	beq.n	800194c <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001870:	e077      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <BNO080_parseInputReport+0x274>)
 8001878:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800187a:	4a41      	ldr	r2, [pc, #260]	; (8001980 <BNO080_parseInputReport+0x278>)
 800187c:	89bb      	ldrh	r3, [r7, #12]
 800187e:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <BNO080_parseInputReport+0x27c>)
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001886:	4a40      	ldr	r2, [pc, #256]	; (8001988 <BNO080_parseInputReport+0x280>)
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	8013      	strh	r3, [r2, #0]
			break;
 800188c:	e069      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <BNO080_parseInputReport+0x284>)
 8001894:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001896:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <BNO080_parseInputReport+0x288>)
 8001898:	89bb      	ldrh	r3, [r7, #12]
 800189a:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 800189c:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <BNO080_parseInputReport+0x28c>)
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <BNO080_parseInputReport+0x290>)
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	8013      	strh	r3, [r2, #0]
			break;
 80018a8:	e05b      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <BNO080_parseInputReport+0x294>)
 80018b0:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80018b2:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <BNO080_parseInputReport+0x298>)
 80018b4:	89bb      	ldrh	r3, [r7, #12]
 80018b6:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80018b8:	4a3a      	ldr	r2, [pc, #232]	; (80019a4 <BNO080_parseInputReport+0x29c>)
 80018ba:	897b      	ldrh	r3, [r7, #10]
 80018bc:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <BNO080_parseInputReport+0x2a0>)
 80018c0:	893b      	ldrh	r3, [r7, #8]
 80018c2:	8013      	strh	r3, [r2, #0]
			break;
 80018c4:	e04d      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <BNO080_parseInputReport+0x2a4>)
 80018cc:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80018ce:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <BNO080_parseInputReport+0x2a8>)
 80018d0:	89bb      	ldrh	r3, [r7, #12]
 80018d2:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80018d4:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <BNO080_parseInputReport+0x2ac>)
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80018da:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <BNO080_parseInputReport+0x2b0>)
 80018dc:	893b      	ldrh	r3, [r7, #8]
 80018de:	8013      	strh	r3, [r2, #0]
			break;
 80018e0:	e03f      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <BNO080_parseInputReport+0x2b4>)
 80018e8:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018ea:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <BNO080_parseInputReport+0x2b8>)
 80018ec:	89bb      	ldrh	r3, [r7, #12]
 80018ee:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018f0:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <BNO080_parseInputReport+0x2bc>)
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018f6:	4a34      	ldr	r2, [pc, #208]	; (80019c8 <BNO080_parseInputReport+0x2c0>)
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80018fc:	4a33      	ldr	r2, [pc, #204]	; (80019cc <BNO080_parseInputReport+0x2c4>)
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <BNO080_parseInputReport+0x2c8>)
 8001904:	8abb      	ldrh	r3, [r7, #20]
 8001906:	8013      	strh	r3, [r2, #0]
			break;
 8001908:	e02b      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <BNO080_parseInputReport+0x2cc>)
 800190c:	893b      	ldrh	r3, [r7, #8]
 800190e:	8013      	strh	r3, [r2, #0]
			break;
 8001910:	e027      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <BNO080_parseInputReport+0x26c>)
 8001914:	7a5a      	ldrb	r2, [r3, #9]
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <BNO080_parseInputReport+0x2d0>)
 8001918:	701a      	strb	r2, [r3, #0]
			break;
 800191a:	e022      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800191e:	7a9a      	ldrb	r2, [r3, #10]
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <BNO080_parseInputReport+0x2d4>)
 8001922:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001924:	2300      	movs	r3, #0
 8001926:	74fb      	strb	r3, [r7, #19]
 8001928:	e00c      	b.n	8001944 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	f103 020b 	add.w	r2, r3, #11
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <BNO080_parseInputReport+0x2d8>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	440b      	add	r3, r1
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800193a:	5c8a      	ldrb	r2, [r1, r2]
 800193c:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	3301      	adds	r3, #1
 8001942:	74fb      	strb	r3, [r7, #19]
 8001944:	7cfb      	ldrb	r3, [r7, #19]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d9ef      	bls.n	800192a <BNO080_parseInputReport+0x222>
			break;
 800194a:	e00a      	b.n	8001962 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800194e:	79db      	ldrb	r3, [r3, #7]
 8001950:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b07      	cmp	r3, #7
 8001956:	d103      	bne.n	8001960 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <BNO080_parseInputReport+0x26c>)
 800195a:	7a9a      	ldrb	r2, [r3, #10]
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <BNO080_parseInputReport+0x2dc>)
 800195e:	701a      	strb	r2, [r3, #0]
			break;
 8001960:	bf00      	nop
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200002a0 	.word	0x200002a0
 8001974:	200002f4 	.word	0x200002f4
 8001978:	200002a8 	.word	0x200002a8
 800197c:	2000037c 	.word	0x2000037c
 8001980:	20000374 	.word	0x20000374
 8001984:	20000380 	.word	0x20000380
 8001988:	200002de 	.word	0x200002de
 800198c:	200002da 	.word	0x200002da
 8001990:	200002ae 	.word	0x200002ae
 8001994:	20000378 	.word	0x20000378
 8001998:	200002ea 	.word	0x200002ea
 800199c:	200002ec 	.word	0x200002ec
 80019a0:	200002ee 	.word	0x200002ee
 80019a4:	200002d6 	.word	0x200002d6
 80019a8:	200002d4 	.word	0x200002d4
 80019ac:	200002a4 	.word	0x200002a4
 80019b0:	200002d8 	.word	0x200002d8
 80019b4:	2000037a 	.word	0x2000037a
 80019b8:	200002dc 	.word	0x200002dc
 80019bc:	200002ac 	.word	0x200002ac
 80019c0:	2000037e 	.word	0x2000037e
 80019c4:	200002e8 	.word	0x200002e8
 80019c8:	2000029c 	.word	0x2000029c
 80019cc:	200002a6 	.word	0x200002a6
 80019d0:	200002e0 	.word	0x200002e0
 80019d4:	20000382 	.word	0x20000382
 80019d8:	200002f0 	.word	0x200002f0
 80019dc:	20000376 	.word	0x20000376
 80019e0:	200002e4 	.word	0x200002e4
 80019e4:	20000377 	.word	0x20000377

080019e8 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <BNO080_getQuatI+0x24>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <BNO080_getQuatI+0x28>)
 80019f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8bb 	bl	8001b78 <BNO080_qToFloat>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000037e 	.word	0x2000037e
 8001a10:	20000000 	.word	0x20000000

08001a14 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <BNO080_getQuatJ+0x24>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <BNO080_getQuatJ+0x28>)
 8001a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f8a5 	bl	8001b78 <BNO080_qToFloat>
 8001a2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200002e8 	.word	0x200002e8
 8001a3c:	20000000 	.word	0x20000000

08001a40 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <BNO080_getQuatK+0x24>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <BNO080_getQuatK+0x28>)
 8001a4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f88f 	bl	8001b78 <BNO080_qToFloat>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000029c 	.word	0x2000029c
 8001a68:	20000000 	.word	0x20000000

08001a6c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <BNO080_getQuatReal+0x24>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <BNO080_getQuatReal+0x28>)
 8001a78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f879 	bl	8001b78 <BNO080_qToFloat>
 8001a86:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200002a6 	.word	0x200002a6
 8001a94:	20000000 	.word	0x20000000

08001a98 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <BNO080_getQuatRadianAccuracy+0x24>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <BNO080_getQuatRadianAccuracy+0x28>)
 8001aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f863 	bl	8001b78 <BNO080_qToFloat>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002e0 	.word	0x200002e0
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <BNO080_getQuatAccuracy+0x14>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002ac 	.word	0x200002ac

08001adc <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <BNO080_getMagX+0x24>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <BNO080_getMagX+0x28>)
 8001ae8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f841 	bl	8001b78 <BNO080_qToFloat>
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	20000002 	.word	0x20000002

08001b08 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <BNO080_getMagY+0x24>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <BNO080_getMagY+0x28>)
 8001b14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f82b 	bl	8001b78 <BNO080_qToFloat>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000037a 	.word	0x2000037a
 8001b30:	20000002 	.word	0x20000002

08001b34 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <BNO080_getMagZ+0x24>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <BNO080_getMagZ+0x28>)
 8001b40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f815 	bl	8001b78 <BNO080_qToFloat>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200002dc 	.word	0x200002dc
 8001b5c:	20000002 	.word	0x20000002

08001b60 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <BNO080_getMagAccuracy+0x14>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	200002a4 	.word	0x200002a4

08001b78 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	80fb      	strh	r3, [r7, #6]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	eef0 0a67 	vmov.f32	s1, s15
 8001ba8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bac:	f00e f90c 	bl	800fdc8 <powf>
 8001bb0:	eef0 7a40 	vmov.f32	s15, s0
 8001bb4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	ecbd 8b02 	vpop	{d8}
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2005      	movs	r0, #5
 8001bd8:	f000 f83a 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f000 f82b 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f81c 	bl	8001c50 <BNO080_setFeatureCommand>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001c24:	2004      	movs	r0, #4
 8001c26:	f000 f885 	bl	8001d34 <BNO080_sendCalibrateCommand>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <BNO080_calibrationComplete+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <BNO080_calibrationComplete+0x10>
		return (1);
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <BNO080_calibrationComplete+0x12>
	return (0);
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000377 	.word	0x20000377

08001c50 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c60:	22fd      	movs	r2, #253	; 0xfd
 8001c62:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c82:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c8c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001c96:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0e1b      	lsrs	r3, r3, #24
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001ca0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cc0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cca:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cd4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0e1b      	lsrs	r3, r3, #24
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <BNO080_setFeatureCommand+0xa0>)
 8001cde:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001ce0:	2111      	movs	r1, #17
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f000 f938 	bl	8001f58 <BNO080_sendPacket>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002f4 	.word	0x200002f4

08001cf4 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d00:	22f2      	movs	r2, #242	; 0xf2
 8001d02:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <BNO080_sendCommand+0x3c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	b2d1      	uxtb	r1, r2
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <BNO080_sendCommand+0x3c>)
 8001d0e:	7011      	strb	r1, [r2, #0]
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d12:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001d14:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <BNO080_sendCommand+0x38>)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001d1a:	210c      	movs	r1, #12
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f000 f91b 	bl	8001f58 <BNO080_sendPacket>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002f4 	.word	0x200002f4
 8001d30:	2000020a 	.word	0x2000020a

08001d34 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d3e:	2303      	movs	r3, #3
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e006      	b.n	8001d52 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b0b      	cmp	r3, #11
 8001d56:	d9f5      	bls.n	8001d44 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	70da      	strb	r2, [r3, #3]
 8001d64:	e020      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d103      	bne.n	8001d74 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	711a      	strb	r2, [r3, #4]
 8001d72:	e019      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d103      	bne.n	8001d82 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	715a      	strb	r2, [r3, #5]
 8001d80:	e012      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d103      	bne.n	8001d90 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	71da      	strb	r2, [r3, #7]
 8001d8e:	e00b      	b.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d108      	bne.n	8001da8 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <BNO080_sendCalibrateCommand+0x88>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <BNO080_sendCalibrateCommand+0x8c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001dae:	2007      	movs	r0, #7
 8001db0:	f7ff ffa0 	bl	8001cf4 <BNO080_sendCommand>
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200002f4 	.word	0x200002f4
 8001dc0:	20000377 	.word	0x20000377

08001dc4 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dca:	2303      	movs	r3, #3
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	e006      	b.n	8001dde <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <BNO080_requestCalibrationStatus+0x34>)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	d9f5      	bls.n	8001dd0 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <BNO080_requestCalibrationStatus+0x34>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001dea:	2007      	movs	r0, #7
 8001dec:	f7ff ff82 	bl	8001cf4 <BNO080_sendCommand>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200002f4 	.word	0x200002f4

08001dfc <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001e02:	2303      	movs	r3, #3
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e006      	b.n	8001e16 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <BNO080_saveCalibration+0x30>)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	3301      	adds	r3, #1
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b0b      	cmp	r3, #11
 8001e1a:	d9f5      	bls.n	8001e08 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001e1c:	2006      	movs	r0, #6
 8001e1e:	f7ff ff69 	bl	8001cf4 <BNO080_sendCommand>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200002f4 	.word	0x200002f4

08001e30 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e00c      	b.n	8001e56 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <BNO080_waitForSPI+0x40>)
 8001e42:	f7ff fa65 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00a      	b.n	8001e66 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d1ee      	bne.n	8001e3c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <BNO080_waitForSPI+0x44>)
 8001e60:	f00b fe6a 	bl	800db38 <puts>
	return (0);
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40020800 	.word	0x40020800
 8001e74:	08011b78 	.word	0x08011b78

08001e78 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e82:	4831      	ldr	r0, [pc, #196]	; (8001f48 <BNO080_receivePacket+0xd0>)
 8001e84:	f7ff fa44 	bl	8001310 <LL_GPIO_IsInputPinSet>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e056      	b.n	8001f40 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e96:	482d      	ldr	r0, [pc, #180]	; (8001f4c <BNO080_receivePacket+0xd4>)
 8001e98:	f7ff fa5d 	bl	8001356 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fbc7 	bl	8001630 <SPI2_SendByte>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fbc2 	bl	8001630 <SPI2_SendByte>
 8001eac:	4603      	mov	r3, r0
 8001eae:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fbbd 	bl	8001630 <SPI2_SendByte>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fbb8 	bl	8001630 <SPI2_SendByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ec6:	7b7b      	ldrb	r3, [r7, #13]
 8001ec8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <BNO080_receivePacket+0xd8>)
 8001ed8:	7abb      	ldrb	r3, [r7, #10]
 8001eda:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ef0:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001ef2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001efa:	2300      	movs	r3, #0
 8001efc:	e020      	b.n	8001f40 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001efe:	893b      	ldrh	r3, [r7, #8]
 8001f00:	3b04      	subs	r3, #4
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	e00e      	b.n	8001f2a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001f0c:	20ff      	movs	r0, #255	; 0xff
 8001f0e:	f7ff fb8f 	bl	8001630 <SPI2_SendByte>
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	2b7f      	cmp	r3, #127	; 0x7f
 8001f1a:	d803      	bhi.n	8001f24 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <BNO080_receivePacket+0xdc>)
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	3301      	adds	r3, #1
 8001f28:	81fb      	strh	r3, [r7, #14]
 8001f2a:	89fa      	ldrh	r2, [r7, #14]
 8001f2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbeb      	blt.n	8001f0c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <BNO080_receivePacket+0xd4>)
 8001f3a:	f7ff f9fe 	bl	800133a <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	200002a0 	.word	0x200002a0
 8001f54:	200002f4 	.word	0x200002f4

08001f58 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f6e:	f7ff ff5f 	bl	8001e30 <BNO080_waitForSPI>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e032      	b.n	8001fe2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <BNO080_sendPacket+0x94>)
 8001f82:	f7ff f9e8 	bl	8001356 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb51 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fb4b 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb47 	bl	8001630 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <BNO080_sendPacket+0x98>)
 8001fa6:	5cd2      	ldrb	r2, [r2, r3]
 8001fa8:	1c51      	adds	r1, r2, #1
 8001faa:	b2c8      	uxtb	r0, r1
 8001fac:	4910      	ldr	r1, [pc, #64]	; (8001ff0 <BNO080_sendPacket+0x98>)
 8001fae:	54c8      	strb	r0, [r1, r3]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff fb3d 	bl	8001630 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e008      	b.n	8001fce <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <BNO080_sendPacket+0x9c>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb34 	bl	8001630 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3f2      	bcc.n	8001fbc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <BNO080_sendPacket+0x94>)
 8001fdc:	f7ff f9ad 	bl	800133a <LL_GPIO_SetOutputPin>

	return (1);
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	20000204 	.word	0x20000204
 8001ff4:	200002f4 	.word	0x200002f4

08001ff8 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002008:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	e00a      	b.n	8002026 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	89fa      	ldrh	r2, [r7, #14]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	3b02      	subs	r3, #2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbef      	blt.n	8002010 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	321e      	adds	r2, #30
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d10b      	bne.n	8002056 <iBus_Check_CHKSUM+0x5e>
 800203e:	89fb      	ldrh	r3, [r7, #14]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <iBus_Check_CHKSUM+0x5e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	331f      	adds	r3, #31
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <iBus_Check_CHKSUM+0x5e>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <iBus_Check_CHKSUM+0x60>
 8002056:	2300      	movs	r3, #0
 8002058:	b2db      	uxtb	r3, r3

}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3302      	adds	r3, #2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b21a      	sxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3303      	adds	r3, #3
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21b      	sxth	r3, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	b29a      	uxth	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b21a      	sxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3305      	adds	r3, #5
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3306      	adds	r3, #6
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3307      	adds	r3, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3308      	adds	r3, #8
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b21a      	sxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3309      	adds	r3, #9
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	330a      	adds	r3, #10
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b21a      	sxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	330b      	adds	r3, #11
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	b29b      	uxth	r3, r3
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	b29a      	uxth	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0FFF;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	330c      	adds	r3, #12
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21a      	sxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	330d      	adds	r3, #13
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21b      	sxth	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b21b      	sxth	r3, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	b29a      	uxth	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	819a      	strh	r2, [r3, #12]
	iBus->SwB = (data[14] | data[15]<<8) & 0x0FFF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	330e      	adds	r3, #14
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b21a      	sxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	330f      	adds	r3, #15
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b21b      	sxth	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b21b      	sxth	r3, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	b29a      	uxth	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	815a      	strh	r2, [r3, #10]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0FFF;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3310      	adds	r3, #16
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b21a      	sxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3311      	adds	r3, #17
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	b29a      	uxth	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0FFF;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3312      	adds	r3, #18
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3313      	adds	r3, #19
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b29b      	uxth	r3, r3
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	b29a      	uxth	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0FFF;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3314      	adds	r3, #20
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3315      	adds	r3, #21
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	b29a      	uxth	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13]>>4);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	330d      	adds	r3, #13
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	751a      	strb	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7d1b      	ldrb	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_SPI_Enable>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_SPI_SetStandard>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0210 	bic.w	r2, r3, #16
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	605a      	str	r2, [r3, #4]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_SPI_IsActiveFlag_TXE>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d101      	bne.n	8002284 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_SPI_ReceiveData8>:
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	b2db      	uxtb	r3, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_SPI_TransmitData8>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	330c      	adds	r3, #12
 80022bc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_GPIO_IsInputPinSet>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	4013      	ands	r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_GPIO_SetOutputPin>:
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_GPIO_ResetOutputPin>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_AHB1_GRP1_EnableClock>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40023800 	.word	0x40023800

08002364 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 800236e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <LL_APB2_GRP1_EnableClock+0x2c>)
 800237a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40023800 	.word	0x40023800

08002394 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	; 0x40
 8002398:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	2228      	movs	r2, #40	; 0x28
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00a fed0 	bl	800d148 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80023b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023bc:	f7ff ffd2 	bl	8002364 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff ffb7 	bl	8002334 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80023c6:	2004      	movs	r0, #4
 80023c8:	f7ff ffb4 	bl	8002334 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80023cc:	23e0      	movs	r3, #224	; 0xe0
 80023ce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023d0:	2302      	movs	r3, #2
 80023d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80023e0:	2305      	movs	r3, #5
 80023e2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4825      	ldr	r0, [pc, #148]	; (8002480 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80023ea:	f009 ff24 	bl	800c236 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023f6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023fc:	2302      	movs	r3, #2
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002400:	2301      	movs	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800240a:	2310      	movs	r3, #16
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002416:	230a      	movs	r3, #10
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800241a:	f107 0318 	add.w	r3, r7, #24
 800241e:	4619      	mov	r1, r3
 8002420:	4818      	ldr	r0, [pc, #96]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002422:	f00a f8d8 	bl	800c5d6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002426:	2100      	movs	r1, #0
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800242a:	f7ff fef9 	bl	8002220 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800242e:	2110      	movs	r1, #16
 8002430:	4815      	ldr	r0, [pc, #84]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002432:	f7ff ff70 	bl	8002316 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002436:	2310      	movs	r3, #16
 8002438:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800243a:	2301      	movs	r3, #1
 800243c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	480e      	ldr	r0, [pc, #56]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002450:	f009 fef1 	bl	800c236 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002454:	2320      	movs	r3, #32
 8002456:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4808      	ldr	r0, [pc, #32]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002466:	f009 fee6 	bl	800c236 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800246c:	f7ff fec8 	bl	8002200 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002470:	2110      	movs	r1, #16
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002474:	f7ff ff41 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 8002478:	bf00      	nop
 800247a:	3740      	adds	r7, #64	; 0x40
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020000 	.word	0x40020000
 8002484:	40013000 	.word	0x40013000
 8002488:	40020800 	.word	0x40020800

0800248c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002496:	bf00      	nop
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <SPI1_SendByte+0x40>)
 800249a:	f7ff fee7 	bl	800226c <LL_SPI_IsActiveFlag_TXE>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f9      	beq.n	8002498 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <SPI1_SendByte+0x40>)
 80024aa:	f7ff feff 	bl	80022ac <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80024ae:	bf00      	nop
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <SPI1_SendByte+0x40>)
 80024b2:	f7ff fec8 	bl	8002246 <LL_SPI_IsActiveFlag_RXNE>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f9      	beq.n	80024b0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <SPI1_SendByte+0x40>)
 80024be:	f7ff fee8 	bl	8002292 <LL_SPI_ReceiveData8>
 80024c2:	4603      	mov	r3, r0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013000 	.word	0x40013000

080024d0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80024da:	2110      	movs	r1, #16
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <ICM20602_Readbyte+0x3c>)
 80024de:	f7ff ff1a 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ffce 	bl	800248c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff ffcb 	bl	800248c <SPI1_SendByte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80024fa:	2110      	movs	r1, #16
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <ICM20602_Readbyte+0x3c>)
 80024fe:	f7ff fefc 	bl	80022fa <LL_GPIO_SetOutputPin>
	
	return val;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40020800 	.word	0x40020800

08002510 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	603a      	str	r2, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	460b      	mov	r3, r1
 800251e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002524:	2110      	movs	r1, #16
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <ICM20602_Readbytes+0x58>)
 8002528:	f7ff fef5 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ffa9 	bl	800248c <SPI1_SendByte>
	while(i < len)
 800253a:	e009      	b.n	8002550 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60fa      	str	r2, [r7, #12]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	18d4      	adds	r4, r2, r3
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff ffa0 	bl	800248c <SPI1_SendByte>
 800254c:	4603      	mov	r3, r0
 800254e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3f1      	bcc.n	800253c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002558:	2110      	movs	r1, #16
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <ICM20602_Readbytes+0x58>)
 800255c:	f7ff fecd 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40020800 	.word	0x40020800

0800256c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	460a      	mov	r2, r1
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	4613      	mov	r3, r2
 800257a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800257c:	2110      	movs	r1, #16
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <ICM20602_Writebyte+0x40>)
 8002580:	f7ff fec9 	bl	8002316 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff7d 	bl	800248c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff79 	bl	800248c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800259a:	2110      	movs	r1, #16
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <ICM20602_Writebyte+0x40>)
 800259e:	f7ff feac 	bl	80022fa <LL_GPIO_SetOutputPin>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40020800 	.word	0x40020800

080025b0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80025c4:	463b      	mov	r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80025cc:	f7ff fee2 	bl	8002394 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80025d0:	4833      	ldr	r0, [pc, #204]	; (80026a0 <ICM20602_Initialization+0xf0>)
 80025d2:	f00b fa2b 	bl	800da2c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80025d6:	2075      	movs	r0, #117	; 0x75
 80025d8:	f7ff ff7a 	bl	80024d0 <ICM20602_Readbyte>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d105      	bne.n	80025f2 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	4619      	mov	r1, r3
 80025ea:	482e      	ldr	r0, [pc, #184]	; (80026a4 <ICM20602_Initialization+0xf4>)
 80025ec:	f00b fa1e 	bl	800da2c <iprintf>
 80025f0:	e012      	b.n	8002618 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d00f      	beq.n	8002618 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80025f8:	2075      	movs	r0, #117	; 0x75
 80025fa:	f7ff ff69 	bl	80024d0 <ICM20602_Readbyte>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b12      	cmp	r3, #18
 8002606:	d007      	beq.n	8002618 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2212      	movs	r2, #18
 800260c:	4619      	mov	r1, r3
 800260e:	4826      	ldr	r0, [pc, #152]	; (80026a8 <ICM20602_Initialization+0xf8>)
 8002610:	f00b fa0c 	bl	800da2c <iprintf>
			return 1; //ERROR
 8002614:	2301      	movs	r3, #1
 8002616:	e03f      	b.n	8002698 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	206b      	movs	r0, #107	; 0x6b
 800261c:	f7ff ffa6 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002620:	2032      	movs	r0, #50	; 0x32
 8002622:	f006 fa41 	bl	8008aa8 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002626:	2101      	movs	r1, #1
 8002628:	206b      	movs	r0, #107	; 0x6b
 800262a:	f7ff ff9f 	bl	800256c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800262e:	2032      	movs	r0, #50	; 0x32
 8002630:	f006 fa3a 	bl	8008aa8 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002634:	2138      	movs	r1, #56	; 0x38
 8002636:	206c      	movs	r0, #108	; 0x6c
 8002638:	f7ff ff98 	bl	800256c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 800263c:	2032      	movs	r0, #50	; 0x32
 800263e:	f006 fa33 	bl	8008aa8 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002642:	2100      	movs	r1, #0
 8002644:	2019      	movs	r0, #25
 8002646:	f7ff ff91 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 800264a:	2032      	movs	r0, #50	; 0x32
 800264c:	f006 fa2c 	bl	8008aa8 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002650:	2105      	movs	r1, #5
 8002652:	201a      	movs	r0, #26
 8002654:	f7ff ff8a 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002658:	2032      	movs	r0, #50	; 0x32
 800265a:	f006 fa25 	bl	8008aa8 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x08); // Gyro sensitivity 500 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800265e:	2108      	movs	r1, #8
 8002660:	201b      	movs	r0, #27
 8002662:	f7ff ff83 	bl	800256c <ICM20602_Writebyte>
//	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
	HAL_Delay(50);
 8002666:	2032      	movs	r0, #50	; 0x32
 8002668:	f006 fa1e 	bl	8008aa8 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 800266c:	2118      	movs	r1, #24
 800266e:	201c      	movs	r0, #28
 8002670:	f7ff ff7c 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002674:	2032      	movs	r0, #50	; 0x32
 8002676:	f006 fa17 	bl	8008aa8 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800267a:	2103      	movs	r1, #3
 800267c:	201d      	movs	r0, #29
 800267e:	f7ff ff75 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002682:	2032      	movs	r0, #50	; 0x32
 8002684:	f006 fa10 	bl	8008aa8 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002688:	2101      	movs	r1, #1
 800268a:	2038      	movs	r0, #56	; 0x38
 800268c:	f7ff ff6e 	bl	800256c <ICM20602_Writebyte>
	HAL_Delay(50);
 8002690:	2032      	movs	r0, #50	; 0x32
 8002692:	f006 fa09 	bl	8008aa8 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	08011b8c 	.word	0x08011b8c
 80026a4:	08011ba4 	.word	0x08011ba4
 80026a8:	08011bc8 	.word	0x08011bc8

080026ac <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	461a      	mov	r2, r3
 80026ba:	2106      	movs	r1, #6
 80026bc:	2043      	movs	r0, #67	; 0x43
 80026be:	f7ff ff27 	bl	8002510 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80026c2:	7a3b      	ldrb	r3, [r7, #8]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80026d4:	7abb      	ldrb	r3, [r7, #10]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b219      	sxth	r1, r3
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	b21a      	sxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3302      	adds	r3, #2
 80026e2:	430a      	orrs	r2, r1
 80026e4:	b212      	sxth	r2, r2
 80026e6:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	b219      	sxth	r1, r3
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	430a      	orrs	r2, r1
 80026f8:	b212      	sxth	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002708:	2120      	movs	r1, #32
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <ICM20602_DataReady+0x14>)
 800270c:	f7ff fde0 	bl	80022d0 <LL_GPIO_IsInputPinSet>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020800 	.word	0x40020800

0800271c <LL_SPI_Enable>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_SPI_SetStandard>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_SPI_IsActiveFlag_TXE>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d101      	bne.n	80027a0 <LL_SPI_IsActiveFlag_TXE+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_SPI_ReceiveData8>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	b2db      	uxtb	r3, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_SPI_TransmitData8>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	330c      	adds	r3, #12
 80027d8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	701a      	strb	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_GPIO_IsInputPinSet>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_GPIO_SetOutputPin>:
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_GPIO_ResetOutputPin>:
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_AHB1_GRP1_EnableClock>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40023800 	.word	0x40023800

08002880 <LL_APB1_GRP1_EnableClock>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40023800 	.word	0x40023800

080028b0 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b090      	sub	sp, #64	; 0x40
 80028b4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80028b6:	f107 0318 	add.w	r3, r7, #24
 80028ba:	2228      	movs	r2, #40	; 0x28
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f00a fc42 	bl	800d148 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	463b      	mov	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80028d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028d8:	f7ff ffd2 	bl	8002880 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028dc:	2002      	movs	r0, #2
 80028de:	f7ff ffb7 	bl	8002850 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80028e2:	2338      	movs	r3, #56	; 0x38
 80028e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028e6:	2302      	movs	r3, #2
 80028e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80028f6:	2306      	movs	r3, #6
 80028f8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	463b      	mov	r3, r7
 80028fc:	4619      	mov	r1, r3
 80028fe:	4826      	ldr	r0, [pc, #152]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002900:	f009 fc99 	bl	800c236 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002908:	f44f 7382 	mov.w	r3, #260	; 0x104
 800290c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002912:	2302      	movs	r3, #2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002916:	2301      	movs	r3, #1
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800291a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002920:	2308      	movs	r3, #8
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800292c:	230a      	movs	r3, #10
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4619      	mov	r1, r3
 8002936:	4819      	ldr	r0, [pc, #100]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002938:	f009 fe4d 	bl	800c5d6 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800293c:	2100      	movs	r1, #0
 800293e:	4817      	ldr	r0, [pc, #92]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002940:	f7ff fefc 	bl	800273c <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002948:	f7ff ff73 	bl	8002832 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002950:	2301      	movs	r3, #1
 8002952:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002960:	463b      	mov	r3, r7
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002966:	f009 fc66 	bl	800c236 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002972:	2301      	movs	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002976:	463b      	mov	r3, r7
 8002978:	4619      	mov	r1, r3
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800297c:	f009 fc5b 	bl	800c236 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002982:	f7ff fecb 	bl	800271c <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800298a:	f7ff ff44 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 800298e:	bf00      	nop
 8002990:	3740      	adds	r7, #64	; 0x40
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40020400 	.word	0x40020400
 800299c:	40003c00 	.word	0x40003c00

080029a0 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80029aa:	bf00      	nop
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <SPI3_SendByte+0x40>)
 80029ae:	f7ff feeb 	bl	8002788 <LL_SPI_IsActiveFlag_TXE>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f9      	beq.n	80029ac <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <SPI3_SendByte+0x40>)
 80029be:	f7ff ff03 	bl	80027c8 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80029c2:	bf00      	nop
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <SPI3_SendByte+0x40>)
 80029c6:	f7ff fecc 	bl	8002762 <LL_SPI_IsActiveFlag_RXNE>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f9      	beq.n	80029c4 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <SPI3_SendByte+0x40>)
 80029d2:	f7ff feec 	bl	80027ae <LL_SPI_ReceiveData8>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40003c00 	.word	0x40003c00

080029e4 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <LPS22HH_Readbyte+0x3c>)
 80029f2:	f7ff ff1e 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ffce 	bl	80029a0 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7ff ffcb 	bl	80029a0 <SPI3_SendByte>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <LPS22HH_Readbyte+0x3c>)
 8002a12:	f7ff ff00 	bl	8002816 <LL_GPIO_SetOutputPin>
	
	return val;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40020400 	.word	0x40020400

08002a24 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	603a      	str	r2, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	460b      	mov	r3, r1
 8002a32:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4810      	ldr	r0, [pc, #64]	; (8002a7c <LPS22HH_Readbytes+0x58>)
 8002a3c:	f7ff fef9 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffa9 	bl	80029a0 <SPI3_SendByte>
	while(i < len)
 8002a4e:	e009      	b.n	8002a64 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60fa      	str	r2, [r7, #12]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	18d4      	adds	r4, r2, r3
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff ffa0 	bl	80029a0 <SPI3_SendByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002a64:	79bb      	ldrb	r3, [r7, #6]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3f1      	bcc.n	8002a50 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <LPS22HH_Readbytes+0x58>)
 8002a70:	f7ff fed1 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	40020400 	.word	0x40020400

08002a80 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	460a      	mov	r2, r1
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <LPS22HH_Writebyte+0x40>)
 8002a94:	f7ff fecd 	bl	8002832 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff7d 	bl	80029a0 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff79 	bl	80029a0 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <LPS22HH_Writebyte+0x40>)
 8002ab2:	f7ff feb0 	bl	8002816 <LL_GPIO_SetOutputPin>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40020400 	.word	0x40020400

08002ac4 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002ace:	f7ff feef 	bl	80028b0 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002ad2:	4841      	ldr	r0, [pc, #260]	; (8002bd8 <LPS22HH_Initialization+0x114>)
 8002ad4:	f00a ffaa 	bl	800da2c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002ad8:	200f      	movs	r0, #15
 8002ada:	f7ff ff83 	bl	80029e4 <LPS22HH_Readbyte>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2bb3      	cmp	r3, #179	; 0xb3
 8002ae6:	d105      	bne.n	8002af4 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4619      	mov	r1, r3
 8002aec:	483b      	ldr	r0, [pc, #236]	; (8002bdc <LPS22HH_Initialization+0x118>)
 8002aee:	f00a ff9d 	bl	800da2c <iprintf>
 8002af2:	e012      	b.n	8002b1a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2bb3      	cmp	r3, #179	; 0xb3
 8002af8:	d00f      	beq.n	8002b1a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff ff72 	bl	80029e4 <LPS22HH_Readbyte>
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2bb3      	cmp	r3, #179	; 0xb3
 8002b08:	d007      	beq.n	8002b1a <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	22b3      	movs	r2, #179	; 0xb3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4833      	ldr	r0, [pc, #204]	; (8002be0 <LPS22HH_Initialization+0x11c>)
 8002b12:	f00a ff8b 	bl	800da2c <iprintf>
			return 1; //ERROR
 8002b16:	2301      	movs	r3, #1
 8002b18:	e059      	b.n	8002bce <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	2011      	movs	r0, #17
 8002b1e:	f7ff ffaf 	bl	8002a80 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002b22:	2011      	movs	r0, #17
 8002b24:	f7ff ff5e 	bl	80029e4 <LPS22HH_Readbyte>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f7      	bne.n	8002b22 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b32:	2010      	movs	r0, #16
 8002b34:	f7ff ff56 	bl	80029e4 <LPS22HH_Readbyte>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b42:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	4619      	mov	r1, r3
 8002b48:	2010      	movs	r0, #16
 8002b4a:	f7ff ff99 	bl	8002a80 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b52:	2010      	movs	r0, #16
 8002b54:	f7ff ff46 	bl	80029e4 <LPS22HH_Readbyte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f7ff ff41 	bl	80029e4 <LPS22HH_Readbyte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	f043 030c 	orr.w	r3, r3, #12
 8002b6c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	4619      	mov	r1, r3
 8002b72:	2010      	movs	r0, #16
 8002b74:	f7ff ff84 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b78:	2010      	movs	r0, #16
 8002b7a:	f7ff ff33 	bl	80029e4 <LPS22HH_Readbyte>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b8a:	79bb      	ldrb	r3, [r7, #6]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	2010      	movs	r0, #16
 8002b90:	f7ff ff76 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002b94:	2011      	movs	r0, #17
 8002b96:	f7ff ff25 	bl	80029e4 <LPS22HH_Readbyte>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	2011      	movs	r0, #17
 8002bac:	f7ff ff68 	bl	8002a80 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002bb0:	2012      	movs	r0, #18
 8002bb2:	f7ff ff17 	bl	80029e4 <LPS22HH_Readbyte>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	2012      	movs	r0, #18
 8002bc8:	f7ff ff5a 	bl	8002a80 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08011bf4 	.word	0x08011bf4
 8002bdc:	08011c08 	.word	0x08011c08
 8002be0:	08011c2c 	.word	0x08011c2c

08002be4 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <LPS22HH_DataReady+0x14>)
 8002bec:	f7ff fdfe 	bl	80027ec <LL_GPIO_IsInputPinSet>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40020400 	.word	0x40020400

08002bfc <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	2103      	movs	r1, #3
 8002c08:	2028      	movs	r0, #40	; 0x28
 8002c0a:	f7ff ff0b 	bl	8002a24 <LPS22HH_Readbytes>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	2102      	movs	r1, #2
 8002c22:	202b      	movs	r0, #43	; 0x2b
 8002c24:	f7ff fefe 	bl	8002a24 <LPS22HH_Readbytes>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c3a:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c42:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002c88 <getAltitude2+0x58>
 8002c46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c4a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002c8c <getAltitude2+0x5c>
 8002c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c52:	f00d f8b9 	bl	800fdc8 <powf>
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
 8002c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c62:	edd7 7a00 	vldr	s15, [r7]
 8002c66:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c90 <getAltitude2+0x60>
 8002c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c94 <getAltitude2+0x64>
 8002c76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	447d5000 	.word	0x447d5000
 8002c8c:	3e42c9b7 	.word	0x3e42c9b7
 8002c90:	43889333 	.word	0x43889333
 8002c94:	3bd4fdf4 	.word	0x3bd4fdf4

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <LL_AHB1_GRP1_EnableClock>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4013      	ands	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40023800 	.word	0x40023800

08002e6c <LL_APB1_GRP1_EnableClock>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e78:	4907      	ldr	r1, [pc, #28]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40023800 	.word	0x40023800

08002e9c <M8N_TransmitData>:
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
0xBF
}; //Save current configuration, Devices: BBR, FLASH, I2C-EEPROM, SPI-FLASH,

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
	for(int i=0; i<len; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e011      	b.n	8002ed2 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002eae:	bf00      	nop
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <M8N_TransmitData+0x48>)
 8002eb2:	f7ff ffa0 	bl	8002df6 <LL_USART_IsActiveFlag_TXE>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f9      	beq.n	8002eb0 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <M8N_TransmitData+0x48>)
 8002ec8:	f7ff ffa8 	bl	8002e1c <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dbe9      	blt.n	8002eae <M8N_TransmitData+0x12>
	}
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40004c00 	.word	0x40004c00

08002ee8 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002f12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f16:	f7ff ffa9 	bl	8002e6c <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f7ff ff8e 	bl	8002e3c <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8002f20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f24:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f26:	2302      	movs	r3, #2
 8002f28:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002f36:	2308      	movs	r3, #8
 8002f38:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <M8N_UART4_Initialization+0xbc>)
 8002f40:	f009 f979 	bl	800c236 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002f44:	f7ff fea8 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fef8 	bl	8002d44 <NVIC_EncodePriority>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4619      	mov	r1, r3
 8002f58:	2034      	movs	r0, #52	; 0x34
 8002f5a:	f7ff fec9 	bl	8002cf0 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002f5e:	2034      	movs	r0, #52	; 0x34
 8002f60:	f7ff fea8 	bl	8002cb4 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002f64:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002f68:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f76:	230c      	movs	r3, #12
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	4619      	mov	r1, r3
 8002f88:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f8a:	f00a f833 	bl	800cff4 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002f8e:	4806      	ldr	r0, [pc, #24]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f90:	f7ff ff1b 	bl	8002dca <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <M8N_UART4_Initialization+0xc0>)
 8002f96:	f7ff ff08 	bl	8002daa <LL_USART_Enable>
}
 8002f9a:	bf00      	nop
 8002f9c:	3738      	adds	r7, #56	; 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40004c00 	.word	0x40004c00

08002fac <M8N_Initialization>:

void M8N_Initialization(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002fb0:	f7ff ff9a 	bl	8002ee8 <M8N_UART4_Initialization>
	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002fb4:	211c      	movs	r1, #28
 8002fb6:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <M8N_Initialization+0x44>)
 8002fb8:	f7ff ff70 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fbc:	2064      	movs	r0, #100	; 0x64
 8002fbe:	f005 fd73 	bl	8008aa8 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <M8N_Initialization+0x48>)
 8002fc6:	f7ff ff69 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fca:	2064      	movs	r0, #100	; 0x64
 8002fcc:	f005 fd6c 	bl	8008aa8 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002fd0:	210e      	movs	r1, #14
 8002fd2:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <M8N_Initialization+0x4c>)
 8002fd4:	f7ff ff62 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	f005 fd65 	bl	8008aa8 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002fde:	2115      	movs	r1, #21
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <M8N_Initialization+0x50>)
 8002fe2:	f7ff ff5b 	bl	8002e9c <M8N_TransmitData>
	HAL_Delay(100);
 8002fe6:	2064      	movs	r0, #100	; 0x64
 8002fe8:	f005 fd5e 	bl	8008aa8 <HAL_Delay>
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	08011e40 	.word	0x08011e40
 8002ff4:	08011e5c 	.word	0x08011e5c
 8002ff8:	08011e6c 	.word	0x08011e6c
 8002ffc:	08011e7c 	.word	0x08011e7c

08003000 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	2300      	movs	r3, #0
 8003012:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8003014:	2302      	movs	r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e00d      	b.n	8003036 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	4413      	add	r3, r2
 8003026:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8003028:	7bba      	ldrb	r2, [r7, #14]
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	4413      	add	r3, r2
 800302e:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3301      	adds	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	3b02      	subs	r3, #2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbec      	blt.n	800301a <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	3b02      	subs	r3, #2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	429a      	cmp	r2, r3
 800304e:	d109      	bne.n	8003064 <M8N_UBX_CHKSUM_Check+0x64>
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	3b01      	subs	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	7bba      	ldrb	r2, [r7, #14]
 800305c:	429a      	cmp	r2, r3
 800305e:	d101      	bne.n	8003064 <M8N_UBX_CHKSUM_Check+0x64>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <M8N_UBX_CHKSUM_Check+0x66>
 8003064:	2300      	movs	r3, #0
 8003066:	b2db      	uxtb	r3, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	789a      	ldrb	r2, [r3, #2]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	78da      	ldrb	r2, [r3, #3]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data [5]<<8;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b21a      	sxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3305      	adds	r3, #5
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24 ;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3306      	adds	r3, #6
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3307      	adds	r3, #7
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3308      	adds	r3, #8
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3309      	adds	r3, #9
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	4313      	orrs	r3, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24 ;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	330a      	adds	r3, #10
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	330b      	adds	r3, #11
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	330c      	adds	r3, #12
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	330d      	adds	r3, #13
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	431a      	orrs	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24 ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	330e      	adds	r3, #14
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	330f      	adds	r3, #15
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3310      	adds	r3, #16
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3311      	adds	r3, #17
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	431a      	orrs	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	611a      	str	r2, [r3, #16]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24 ;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3312      	adds	r3, #18
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3313      	adds	r3, #19
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3314      	adds	r3, #20
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3315      	adds	r3, #21
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	431a      	orrs	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	619a      	str	r2, [r3, #24]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24 ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3316      	adds	r3, #22
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3317      	adds	r3, #23
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3318      	adds	r3, #24
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3319      	adds	r3, #25
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	61da      	str	r2, [r3, #28]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24 ;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	331a      	adds	r3, #26
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	331b      	adds	r3, #27
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	331c      	adds	r3, #28
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	331d      	adds	r3, #29
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	4313      	orrs	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	621a      	str	r2, [r3, #32]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24 ;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	331e      	adds	r3, #30
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	331f      	adds	r3, #31
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3321      	adds	r3, #33	; 0x21
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4313      	orrs	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

//	posllh->lon_f64 = posllh->lon/ 10000000.;
//	posllh->lat_f64 = posllh->lat/ 10000000.;

}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80031f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80031f4:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	649a      	str	r2, [r3, #72]	; 0x48
	axis->out.meas_value = angle;			//BNO080 rotation angle
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800323c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 8003240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 2000
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003254:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003440 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd03      	ble.n	800326a <Double_Roll_Pitch_PID_Calculation+0x86>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a77      	ldr	r2, [pc, #476]	; (8003444 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c
 8003268:	e00c      	b.n	8003284 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003270:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003448 <Double_Roll_Pitch_PID_Calculation+0x264>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d502      	bpl.n	8003284 <Double_Roll_Pitch_PID_Calculation+0xa0>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a72      	ldr	r2, [pc, #456]	; (800344c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 800329a:	edd7 7a00 	vldr	s15, [r7]
 800329e:	eef1 7a67 	vneg.f32	s15, s15
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80032ae:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003450 <Double_Roll_Pitch_PID_Calculation+0x26c>
 80032b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032bc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003454 <Double_Roll_Pitch_PID_Calculation+0x270>
 80032c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80032f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	ed93 7a03 	vldr	s14, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	edd3 7a04 	vldr	s15, [r3, #16]
 800331e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	ed93 7a06 	vldr	s14, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	ed93 7a08 	vldr	s14, [r3, #32]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	edd3 7a06 	vldr	s15, [r3, #24]
 800334a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 800334e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003362:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003458 <Double_Roll_Pitch_PID_Calculation+0x274>
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dd03      	ble.n	8003378 <Double_Roll_Pitch_PID_Calculation+0x194>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <Double_Roll_Pitch_PID_Calculation+0x278>)
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
 8003376:	e00c      	b.n	8003392 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800337e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003460 <Double_Roll_Pitch_PID_Calculation+0x27c>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d502      	bpl.n	8003392 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a35      	ldr	r2, [pc, #212]	; (8003464 <Double_Roll_Pitch_PID_Calculation+0x280>)
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	ed93 7a08 	vldr	s14, [r3, #32]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	edd3 7a01 	vldr	s15, [r3, #4]
 800339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80033b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b8:	eeb1 7a67 	vneg.f32	s14, s15
 80033bc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800343c <Double_Roll_Pitch_PID_Calculation+0x258>
 80033c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80033e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80033ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	edd3 7a02 	vldr	s15, [r3, #8]
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800341a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/****************************************************************************************/
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	3a83126f 	.word	0x3a83126f
 8003440:	44fa0000 	.word	0x44fa0000
 8003444:	44fa0000 	.word	0x44fa0000
 8003448:	c4fa0000 	.word	0xc4fa0000
 800344c:	c4fa0000 	.word	0xc4fa0000
 8003450:	3ecccccd 	.word	0x3ecccccd
 8003454:	3f19999a 	.word	0x3f19999a
 8003458:	43fa0000 	.word	0x43fa0000
 800345c:	43fa0000 	.word	0x43fa0000
 8003460:	c3fa0000 	.word	0xc3fa0000
 8003464:	c3fa0000 	.word	0xc3fa0000

08003468 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	ed87 0a02 	vstr	s0, [r7, #8]
 8003474:	edc7 0a01 	vstr	s1, [r7, #4]
 8003478:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	ed93 7a03 	vldr	s14, [r3, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	edd3 7a04 	vldr	s15, [r3, #16]
 8003494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80034a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800358c <Single_Yaw_Heading_PID_Calculation+0x124>
 80034a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	dd0a      	ble.n	80034c8 <Single_Yaw_Heading_PID_Calculation+0x60>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034b8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003590 <Single_Yaw_Heading_PID_Calculation+0x128>
 80034bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	edc3 7a06 	vstr	s15, [r3, #24]
 80034c6:	e013      	b.n	80034f0 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80034ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003594 <Single_Yaw_Heading_PID_Calculation+0x12c>
 80034d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	d509      	bpl.n	80034f0 <Single_Yaw_Heading_PID_Calculation+0x88>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	edd3 7a06 	vldr	s15, [r3, #24]
 80034e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003590 <Single_Yaw_Heading_PID_Calculation+0x128>
 80034e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	ed93 7a08 	vldr	s14, [r3, #32]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003512:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003598 <Single_Yaw_Heading_PID_Calculation+0x130>
 8003516:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	ed93 7a08 	vldr	s14, [r3, #32]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 800353a:	edd7 7a00 	vldr	s15, [r7]
 800353e:	eef1 7a67 	vneg.f32	s15, s15
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	edd3 7a02 	vldr	s15, [r3, #8]
 8003554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800356a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/***************************************************************/
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	43340000 	.word	0x43340000
 8003590:	43b40000 	.word	0x43b40000
 8003594:	c3340000 	.word	0xc3340000
 8003598:	3a83126f 	.word	0x3a83126f

0800359c <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80035a8:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80035c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80035f0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003684 <Single_Yaw_Rate_PID_Calculation+0xe8>
 80035f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	ed93 7a08 	vldr	s14, [r3, #32]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	edd3 7a01 	vldr	s15, [r3, #4]
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	ed93 7a04 	vldr	s14, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	edd3 7a05 	vldr	s15, [r3, #20]
 8003624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003628:	eeb1 7a67 	vneg.f32	s14, s15
 800362c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003684 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8003630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	edd3 7a02 	vldr	s15, [r3, #8]
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/*******************************************************************/
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	3a83126f 	.word	0x3a83126f

08003688 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 80036a8:	4812      	ldr	r0, [pc, #72]	; (80036f4 <Reset_All_PID_Integrator+0x50>)
 80036aa:	f7ff ffed 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 80036ae:	4812      	ldr	r0, [pc, #72]	; (80036f8 <Reset_All_PID_Integrator+0x54>)
 80036b0:	f7ff ffea 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80036b4:	4811      	ldr	r0, [pc, #68]	; (80036fc <Reset_All_PID_Integrator+0x58>)
 80036b6:	f7ff ffe7 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80036ba:	4811      	ldr	r0, [pc, #68]	; (8003700 <Reset_All_PID_Integrator+0x5c>)
 80036bc:	f7ff ffe4 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80036c0:	4810      	ldr	r0, [pc, #64]	; (8003704 <Reset_All_PID_Integrator+0x60>)
 80036c2:	f7ff ffe1 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80036c6:	4810      	ldr	r0, [pc, #64]	; (8003708 <Reset_All_PID_Integrator+0x64>)
 80036c8:	f7ff ffde 	bl	8003688 <Reset_PID_Integrator>

	Reset_PID_Integrator(&altitude.in);
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <Reset_All_PID_Integrator+0x68>)
 80036ce:	f7ff ffdb 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&altitude.out);
 80036d2:	480f      	ldr	r0, [pc, #60]	; (8003710 <Reset_All_PID_Integrator+0x6c>)
 80036d4:	f7ff ffd8 	bl	8003688 <Reset_PID_Integrator>

	Reset_PID_Integrator(&gps_lat.in);
 80036d8:	480e      	ldr	r0, [pc, #56]	; (8003714 <Reset_All_PID_Integrator+0x70>)
 80036da:	f7ff ffd5 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lat.out);
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <Reset_All_PID_Integrator+0x74>)
 80036e0:	f7ff ffd2 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lon.in);
 80036e4:	480d      	ldr	r0, [pc, #52]	; (800371c <Reset_All_PID_Integrator+0x78>)
 80036e6:	f7ff ffcf 	bl	8003688 <Reset_PID_Integrator>
	Reset_PID_Integrator(&gps_lon.out);
 80036ea:	480d      	ldr	r0, [pc, #52]	; (8003720 <Reset_All_PID_Integrator+0x7c>)
 80036ec:	f7ff ffcc 	bl	8003688 <Reset_PID_Integrator>
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000670 	.word	0x20000670
 80036f8:	200006ac 	.word	0x200006ac
 80036fc:	200005f8 	.word	0x200005f8
 8003700:	20000634 	.word	0x20000634
 8003704:	200005bc 	.word	0x200005bc
 8003708:	20000418 	.word	0x20000418
 800370c:	20000544 	.word	0x20000544
 8003710:	20000580 	.word	0x20000580
 8003714:	20000454 	.word	0x20000454
 8003718:	20000490 	.word	0x20000490
 800371c:	200004cc 	.word	0x200004cc
 8003720:	20000508 	.word	0x20000508

08003724 <Double_Altitude_PID_Calculation>:


void Double_Altitude_PID_Calculation(PIDDouble* axis, float set_point_altitude, float current_altitude)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003730:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_altitude;	//Set point of outer PID control
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	649a      	str	r2, [r3, #72]	; 0x48
	axis->out.meas_value = current_altitude;		//Actual Altitude from Fusion
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	64da      	str	r2, [r3, #76]	; 0x4c

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003778:	eddf 6a96 	vldr	s13, [pc, #600]	; 80039d4 <Double_Altitude_PID_Calculation+0x2b0>
 800377c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003790:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80039d8 <Double_Altitude_PID_Calculation+0x2b4>
 8003794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	dd03      	ble.n	80037a6 <Double_Altitude_PID_Calculation+0x82>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a8e      	ldr	r2, [pc, #568]	; (80039dc <Double_Altitude_PID_Calculation+0x2b8>)
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037a4:	e00c      	b.n	80037c0 <Double_Altitude_PID_Calculation+0x9c>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80037ac:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80039e0 <Double_Altitude_PID_Calculation+0x2bc>
 80037b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	d502      	bpl.n	80037c0 <Double_Altitude_PID_Calculation+0x9c>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a89      	ldr	r2, [pc, #548]	; (80039e4 <Double_Altitude_PID_Calculation+0x2c0>)
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

	axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev) / DT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80037e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e6:	eeb1 7a67 	vneg.f32	s14, s15
 80037ea:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80039d4 <Double_Altitude_PID_Calculation+0x2b0>
 80037ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	axis->out.meas_value_prev = axis->out.meas_value;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	651a      	str	r2, [r3, #80]	; 0x50

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003806:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80039e8 <Double_Altitude_PID_Calculation+0x2c4>
 800380a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003814:	eddf 6a75 	vldr	s13, [pc, #468]	; 80039ec <Double_Altitude_PID_Calculation+0x2c8>
 8003818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800381c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	/****************************************************************************************/

	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = -(axis->out.error_deriv_filt);					//ICM-20602 angular rate
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800386a:	eef1 7a67 	vneg.f32	s15, s15
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	edc3 7a04 	vstr	s15, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	ed93 7a03 	vldr	s14, [r3, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80038ac:	eddf 6a49 	vldr	s13, [pc, #292]	; 80039d4 <Double_Altitude_PID_Calculation+0x2b0>
 80038b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80038c4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80039d8 <Double_Altitude_PID_Calculation+0x2b4>
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	dd03      	ble.n	80038da <Double_Altitude_PID_Calculation+0x1b6>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a41      	ldr	r2, [pc, #260]	; (80039dc <Double_Altitude_PID_Calculation+0x2b8>)
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038d8:	e00c      	b.n	80038f4 <Double_Altitude_PID_Calculation+0x1d0>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80038e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80039e0 <Double_Altitude_PID_Calculation+0x2bc>
 80038e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	d502      	bpl.n	80038f4 <Double_Altitude_PID_Calculation+0x1d0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <Double_Altitude_PID_Calculation+0x2c0>)
 80038f2:	65da      	str	r2, [r3, #92]	; 0x5c
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	edd3 7a05 	vldr	s15, [r3, #20]
 8003916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391a:	eeb1 7a67 	vneg.f32	s14, s15
 800391e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80039d4 <Double_Altitude_PID_Calculation+0x2b0>
 8003922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800393a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800393e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003948:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800394c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	edd3 7a02 	vldr	s15, [r3, #8]
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800397c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	/****************************************************************************************/
if (axis->in.pid_result < -5000) axis->in.pid_result = -5000;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003996:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80039f0 <Double_Altitude_PID_Calculation+0x2cc>
 800399a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a2:	d502      	bpl.n	80039aa <Double_Altitude_PID_Calculation+0x286>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <Double_Altitude_PID_Calculation+0x2d0>)
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
if (axis->in.pid_result > 16800) axis->in.pid_result = 16800;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80039b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039f8 <Double_Altitude_PID_Calculation+0x2d4>
 80039b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039bc:	dc00      	bgt.n	80039c0 <Double_Altitude_PID_Calculation+0x29c>

}
 80039be:	e002      	b.n	80039c6 <Double_Altitude_PID_Calculation+0x2a2>
if (axis->in.pid_result > 16800) axis->in.pid_result = 16800;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <Double_Altitude_PID_Calculation+0x2d8>)
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	3a83126f 	.word	0x3a83126f
 80039d8:	43fa0000 	.word	0x43fa0000
 80039dc:	43fa0000 	.word	0x43fa0000
 80039e0:	c3fa0000 	.word	0xc3fa0000
 80039e4:	c3fa0000 	.word	0xc3fa0000
 80039e8:	3ecccccd 	.word	0x3ecccccd
 80039ec:	3f19999a 	.word	0x3f19999a
 80039f0:	c59c4000 	.word	0xc59c4000
 80039f4:	c59c4000 	.word	0xc59c4000
 80039f8:	46834000 	.word	0x46834000
 80039fc:	46834000 	.word	0x46834000

08003a00 <Double_GPS_PID_Calculation>:

void Double_GPS_PID_Calculation(PIDDouble* axis, float set_point_gps, float gps)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a0c:	edc7 0a01 	vstr	s1, [r7, #4]
   /*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/

   axis->out.reference = set_point_gps;   //Set point of outer PID control
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	649a      	str	r2, [r3, #72]	; 0x48
   axis->out.meas_value = gps;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	64da      	str	r2, [r3, #76]	; 0x4c

   axis->out.error = axis->out.reference - axis->out.meas_value;   //Define error of outer loop
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
   axis->out.p_result = axis->out.error * axis->out.kp;         //Calculate P result of outer loop
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

   axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;   //Define summation of outer loop
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a54:	eddf 6a88 	vldr	s13, [pc, #544]	; 8003c78 <Double_GPS_PID_Calculation+0x278>
 8003a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
   if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a6c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003c7c <Double_GPS_PID_Calculation+0x27c>
 8003a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a78:	dd03      	ble.n	8003a82 <Double_GPS_PID_Calculation+0x82>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a80      	ldr	r2, [pc, #512]	; (8003c80 <Double_GPS_PID_Calculation+0x280>)
 8003a7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a80:	e00c      	b.n	8003a9c <Double_GPS_PID_Calculation+0x9c>
   else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a88:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003c84 <Double_GPS_PID_Calculation+0x284>
 8003a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	d502      	bpl.n	8003a9c <Double_GPS_PID_Calculation+0x9c>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a7b      	ldr	r2, [pc, #492]	; (8003c88 <Double_GPS_PID_Calculation+0x288>)
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c
   axis->out.i_result = axis->out.error_sum * axis->out.ki;         //Calculate I result of outer loop
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

   axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev)/DT;//Define derivative of outer loop
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac2:	eeb1 7a67 	vneg.f32	s14, s15
 8003ac6:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003c78 <Double_GPS_PID_Calculation+0x278>
 8003aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
   axis->out.meas_value_prev = axis->out.meas_value;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	651a      	str	r2, [r3, #80]	; 0x50

#if !OUTER_DERIV_FILT_ENABLE
   axis->out.d_result = axis->out.error_deriv * axis->out.kd;         //Calculate D result of outer loop
#else
   axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;   //filter for derivative
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003ae2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003c8c <Double_GPS_PID_Calculation+0x28c>
 8003ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003af0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003c90 <Double_GPS_PID_Calculation+0x290>
 8003af4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
   axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;                           //Calculate D result of inner loop
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
#endif

   axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
   /****************************************************************************************/

   /************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
   axis->in.reference = axis->out.pid_result;   //Set point of inner PID control is the PID result of outer loop (for double PID control)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	60da      	str	r2, [r3, #12]
   axis->in.meas_value = -(axis->out.error_deriv);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003b46:	eef1 7a67 	vneg.f32	s15, s15
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	edc3 7a04 	vstr	s15, [r3, #16]

   axis->in.error = axis->in.reference - axis->in.meas_value;   //Define error of inner loop
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	edc3 7a06 	vstr	s15, [r3, #24]
   axis->in.p_result = axis->in.error * axis->in.kp;         //Calculate P result of inner loop
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	edd3 7a00 	vldr	s15, [r3]
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

   axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;   //Define summation of inner loop
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003c78 <Double_GPS_PID_Calculation+0x278>
 8003b8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	edc3 7a08 	vstr	s15, [r3, #32]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
   if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003ba0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003c7c <Double_GPS_PID_Calculation+0x27c>
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	dd03      	ble.n	8003bb6 <Double_GPS_PID_Calculation+0x1b6>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <Double_GPS_PID_Calculation+0x280>)
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bb4:	e00c      	b.n	8003bd0 <Double_GPS_PID_Calculation+0x1d0>
   else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003bbc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003c84 <Double_GPS_PID_Calculation+0x284>
 8003bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	d502      	bpl.n	8003bd0 <Double_GPS_PID_Calculation+0x1d0>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	; (8003c88 <Double_GPS_PID_Calculation+0x288>)
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c
   axis->in.i_result = axis->in.error_sum * axis->in.ki;                     //Calculate I result of inner loop
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

   axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;   //Define derivative of inner loop
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	ed93 7a04 	vldr	s14, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf6:	eeb1 7a67 	vneg.f32	s14, s15
 8003bfa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003c78 <Double_GPS_PID_Calculation+0x278>
 8003bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
   axis->in.meas_value_prev = axis->in.meas_value;                           //Refresh value_prev to the latest value
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
   axis->in.d_result = axis->in.error_deriv * axis->in.kd;            //Calculate D result of inner loop
#else
   axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;   //filter for derivative
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003c24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
   axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;                        //Calculate D result of inner loop
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
#endif

   axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
   /****************************************************************************************/
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	3a83126f 	.word	0x3a83126f
 8003c7c:	43fa0000 	.word	0x43fa0000
 8003c80:	43fa0000 	.word	0x43fa0000
 8003c84:	c3fa0000 	.word	0xc3fa0000
 8003c88:	c3fa0000 	.word	0xc3fa0000
 8003c8c:	3ecccccd 	.word	0x3ecccccd
 8003c90:	3f19999a 	.word	0x3f19999a

08003c94 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	ed93 7a00 	vldr	s14, [r3]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	edd3 6a00 	vldr	s13, [r3]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	edd3 6a00 	vldr	s13, [r3]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	edd3 6a00 	vldr	s13, [r3]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf8:	f000 f90e 	bl	8003f18 <invSqrt>
 8003cfc:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	edd3 7a00 	vldr	s15, [r3]
 8003d42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8003d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8003d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d72:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	eef0 0a67 	vmov.f32	s1, s15
 8003d9e:	eeb0 0a66 	vmov.f32	s0, s13
 8003da2:	f00c f80f 	bl	800fdc4 <atan2f>
 8003da6:	eef0 7a40 	vmov.f32	s15, s0
 8003daa:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <Quaternion_Update+0x26c>)
 8003dac:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8003db0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dbc:	edd7 6a06 	vldr	s13, [r7, #24]
 8003dc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd4:	f00b ffc4 	bl	800fd60 <asinf>
 8003dd8:	eef0 7a40 	vmov.f32	s15, s0
 8003ddc:	eef1 7a67 	vneg.f32	s15, s15
 8003de0:	4b48      	ldr	r3, [pc, #288]	; (8003f04 <Quaternion_Update+0x270>)
 8003de2:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8003de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8003dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df2:	edd7 6a04 	vldr	s13, [r7, #16]
 8003df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e02:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e06:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e32:	eef0 0a67 	vmov.f32	s1, s15
 8003e36:	eeb0 0a66 	vmov.f32	s0, s13
 8003e3a:	f00b ffc3 	bl	800fdc4 <atan2f>
 8003e3e:	eef0 7a40 	vmov.f32	s15, s0
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <Quaternion_Update+0x274>)
 8003e44:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <Quaternion_Update+0x26c>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003f0c <Quaternion_Update+0x278>
 8003e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <Quaternion_Update+0x26c>)
 8003e58:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <Quaternion_Update+0x270>)
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003f0c <Quaternion_Update+0x278>
 8003e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <Quaternion_Update+0x270>)
 8003e6c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <Quaternion_Update+0x274>)
 8003e72:	edd3 7a00 	vldr	s15, [r3]
 8003e76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003f0c <Quaternion_Update+0x278>
 8003e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <Quaternion_Update+0x274>)
 8003e80:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <Quaternion_Update+0x274>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e92:	db0a      	blt.n	8003eaa <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <Quaternion_Update+0x274>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003f10 <Quaternion_Update+0x27c>
 8003e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <Quaternion_Update+0x274>)
 8003ea4:	edc3 7a00 	vstr	s15, [r3]
 8003ea8:	e007      	b.n	8003eba <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <Quaternion_Update+0x274>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	eef1 7a67 	vneg.f32	s15, s15
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <Quaternion_Update+0x274>)
 8003eb6:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <Quaternion_Update+0x26c>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	db0a      	blt.n	8003ee0 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <Quaternion_Update+0x26c>)
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003f14 <Quaternion_Update+0x280>
 8003ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <Quaternion_Update+0x26c>)
 8003eda:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003ede:	e00b      	b.n	8003ef8 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <Quaternion_Update+0x26c>)
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003f14 <Quaternion_Update+0x280>
 8003eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eee:	eef1 7a67 	vneg.f32	s15, s15
 8003ef2:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <Quaternion_Update+0x26c>)
 8003ef4:	edc3 7a00 	vstr	s15, [r3]
}
 8003ef8:	bf00      	nop
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200006f0 	.word	0x200006f0
 8003f04:	200006e8 	.word	0x200006e8
 8003f08:	200006ec 	.word	0x200006ec
 8003f0c:	42652ee1 	.word	0x42652ee1
 8003f10:	43b40000 	.word	0x43b40000
 8003f14:	43340000 	.word	0x43340000

08003f18 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f2e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	105a      	asrs	r2, r3, #1
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <invSqrt+0x74>)
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f54:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f64:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f74:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	ee07 3a90 	vmov	s15, r3
}
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	5f3759df 	.word	0x5f3759df

08003f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <MX_DMA_Init+0x3c>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <MX_DMA_Init+0x3c>)
 8003fa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <MX_DMA_Init+0x3c>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	2046      	movs	r0, #70	; 0x46
 8003fb8:	f004 fe75 	bl	8008ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003fbc:	2046      	movs	r0, #70	; 0x46
 8003fbe:	f004 fe8e 	bl	8008cde <HAL_NVIC_EnableIRQ>

}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <LL_GPIO_SetOutputPin>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	619a      	str	r2, [r3, #24]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_GPIO_ResetOutputPin>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <LL_AHB1_GRP1_EnableClock>:
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004018:	4907      	ldr	r1, [pc, #28]	; (8004038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4013      	ands	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40023800 	.word	0x40023800

0800403c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004042:	463b      	mov	r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	611a      	str	r2, [r3, #16]
 8004050:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004052:	2004      	movs	r0, #4
 8004054:	f7ff ffda 	bl	800400c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004058:	2080      	movs	r0, #128	; 0x80
 800405a:	f7ff ffd7 	bl	800400c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800405e:	2001      	movs	r0, #1
 8004060:	f7ff ffd4 	bl	800400c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004064:	2002      	movs	r0, #2
 8004066:	f7ff ffd1 	bl	800400c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800406a:	2008      	movs	r0, #8
 800406c:	f7ff ffce 	bl	800400c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8004070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004074:	482e      	ldr	r0, [pc, #184]	; (8004130 <MX_GPIO_Init+0xf4>)
 8004076:	f7ff ffab 	bl	8003fd0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800407a:	f240 2117 	movw	r1, #535	; 0x217
 800407e:	482c      	ldr	r0, [pc, #176]	; (8004130 <MX_GPIO_Init+0xf4>)
 8004080:	f7ff ffb4 	bl	8003fec <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8004084:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004088:	482a      	ldr	r0, [pc, #168]	; (8004134 <MX_GPIO_Init+0xf8>)
 800408a:	f7ff ffaf 	bl	8003fec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800408e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004092:	4829      	ldr	r0, [pc, #164]	; (8004138 <MX_GPIO_Init+0xfc>)
 8004094:	f7ff ffaa 	bl	8003fec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8004098:	f242 2317 	movw	r3, #8727	; 0x2217
 800409c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800409e:	2301      	movs	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ae:	463b      	mov	r3, r7
 80040b0:	4619      	mov	r1, r3
 80040b2:	481f      	ldr	r0, [pc, #124]	; (8004130 <MX_GPIO_Init+0xf4>)
 80040b4:	f008 f8bf 	bl	800c236 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80040b8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80040bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	463b      	mov	r3, r7
 80040c8:	4619      	mov	r1, r3
 80040ca:	4819      	ldr	r0, [pc, #100]	; (8004130 <MX_GPIO_Init+0xf4>)
 80040cc:	f008 f8b3 	bl	800c236 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80040d0:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80040d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040d6:	2301      	movs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e6:	463b      	mov	r3, r7
 80040e8:	4619      	mov	r1, r3
 80040ea:	4812      	ldr	r0, [pc, #72]	; (8004134 <MX_GPIO_Init+0xf8>)
 80040ec:	f008 f8a3 	bl	800c236 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80040f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040f6:	2301      	movs	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004106:	463b      	mov	r3, r7
 8004108:	4619      	mov	r1, r3
 800410a:	480b      	ldr	r0, [pc, #44]	; (8004138 <MX_GPIO_Init+0xfc>)
 800410c:	f008 f893 	bl	800c236 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004114:	2300      	movs	r3, #0
 8004116:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411c:	463b      	mov	r3, r7
 800411e:	4619      	mov	r1, r3
 8004120:	4804      	ldr	r0, [pc, #16]	; (8004134 <MX_GPIO_Init+0xf8>)
 8004122:	f008 f888 	bl	800c236 <LL_GPIO_Init>

}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40020800 	.word	0x40020800
 8004134:	40020400 	.word	0x40020400
 8004138:	40020000 	.word	0x40020000

0800413c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <MX_I2C1_Init+0x50>)
 8004142:	4a13      	ldr	r2, [pc, #76]	; (8004190 <MX_I2C1_Init+0x54>)
 8004144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <MX_I2C1_Init+0x50>)
 8004148:	4a12      	ldr	r2, [pc, #72]	; (8004194 <MX_I2C1_Init+0x58>)
 800414a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <MX_I2C1_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <MX_I2C1_Init+0x50>)
 800415a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800415e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <MX_I2C1_Init+0x50>)
 8004162:	2200      	movs	r2, #0
 8004164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <MX_I2C1_Init+0x50>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <MX_I2C1_Init+0x50>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <MX_I2C1_Init+0x50>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004178:	4804      	ldr	r0, [pc, #16]	; (800418c <MX_I2C1_Init+0x50>)
 800417a:	f005 fb69 	bl	8009850 <HAL_I2C_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004184:	f003 f96a 	bl	800745c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200006f4 	.word	0x200006f4
 8004190:	40005400 	.word	0x40005400
 8004194:	00061a80 	.word	0x00061a80

08004198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <HAL_I2C_MspInit+0x84>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d12c      	bne.n	8004214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041dc:	2312      	movs	r3, #18
 80041de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041e0:	2301      	movs	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e8:	2304      	movs	r3, #4
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	480c      	ldr	r0, [pc, #48]	; (8004224 <HAL_I2C_MspInit+0x8c>)
 80041f4:	f005 f990 	bl	8009518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_I2C_MspInit+0x88>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_I2C_MspInit+0x88>)
 8004202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_I2C_MspInit+0x88>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004214:	bf00      	nop
 8004216:	3728      	adds	r7, #40	; 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40005400 	.word	0x40005400
 8004220:	40023800 	.word	0x40023800
 8004224:	40020400 	.word	0x40020400

08004228 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	43db      	mvns	r3, r3
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_USART_IsActiveFlag_TXE>:
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_USART_EnableIT_RXNE>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_USART_TransmitData8>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	605a      	str	r2, [r3, #4]
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_GPIO_SetOutputPin>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	619a      	str	r2, [r3, #24]
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_GPIO_ResetOutputPin>:
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	041a      	lsls	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	4013      	ands	r3, r2
 8004362:	041a      	lsls	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43d9      	mvns	r1, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	400b      	ands	r3, r1
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	619a      	str	r2, [r3, #24]
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e014      	b.n	80043bc <_write+0x3c>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8004392:	bf00      	nop
 8004394:	480e      	ldr	r0, [pc, #56]	; (80043d0 <_write+0x50>)
 8004396:	f7ff ff8a 	bl	80042ae <LL_USART_IsActiveFlag_TXE>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f9      	beq.n	8004394 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	4809      	ldr	r0, [pc, #36]	; (80043d0 <_write+0x50>)
 80043ac:	f7ff ffa2 	bl	80042f4 <LL_USART_TransmitData8>
		HAL_Delay(1);
 80043b0:	2001      	movs	r0, #1
 80043b2:	f004 fb79 	bl	8008aa8 <HAL_Delay>
	for(int i=0;i<len;i++)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	dbe6      	blt.n	8004392 <_write+0x12>
	}
}
 80043c4:	bf00      	nop
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40011400 	.word	0x40011400
 80043d4:	00000000 	.word	0x00000000

080043d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b09a      	sub	sp, #104	; 0x68
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
float q[4];
float quatRadianAccuracy;
short gyro_x_offset = -6, gyro_y_offset = -19, gyro_z_offset = 4;
 80043e0:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80043e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043e8:	f64f 73ed 	movw	r3, #65517	; 0xffed
 80043ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043f0:	2304      	movs	r3, #4
 80043f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
unsigned char motor_arming_flag = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
unsigned short iBus_SwA_Prev = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
unsigned char iBus_rx_cnt = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
float yaw_heading_reference;

unsigned int landing_throttle = 38640;
 8004406:	f249 63f0 	movw	r3, #38640	; 0x96f0
 800440a:	63bb      	str	r3, [r7, #56]	; 0x38
int manual_throttle;
int gps_cnt = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
int baro_cnt = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	65bb      	str	r3, [r7, #88]	; 0x58

unsigned int last_lon;
unsigned int last_lat;
uint8_t mode = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
float BNO080_Pitch_Offset = 1.1f;
 800441a:	4b9d      	ldr	r3, [pc, #628]	; (8004690 <main+0x2b8>)
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
float BNO080_Roll_Offset = 0;
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004424:	f004 face 	bl	80089c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004428:	f002 fc68 	bl	8006cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800442c:	f7ff fe06 	bl	800403c <MX_GPIO_Init>
  MX_DMA_Init();
 8004430:	f7ff fdae 	bl	8003f90 <MX_DMA_Init>
  MX_TIM3_Init();
 8004434:	f003 fe6e 	bl	8008114 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8004438:	f004 f9b8 	bl	80087ac <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800443c:	f003 f8c0 	bl	80075c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 8004440:	f003 f86c 	bl	800751c <MX_SPI1_Init>
  MX_UART5_Init();
 8004444:	f004 f910 	bl	8008668 <MX_UART5_Init>
  MX_TIM5_Init();
 8004448:	f003 fed6 	bl	80081f8 <MX_TIM5_Init>
  MX_TIM7_Init();
 800444c:	f003 ff78 	bl	8008340 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004450:	f004 f982 	bl	8008758 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8004454:	f003 f908 	bl	8007668 <MX_SPI3_Init>
  MX_I2C1_Init();
 8004458:	f7ff fe70 	bl	800413c <MX_I2C1_Init>
  MX_UART4_Init();
 800445c:	f004 f8a2 	bl	80085a4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 8004460:	488c      	ldr	r0, [pc, #560]	; (8004694 <main+0x2bc>)
 8004462:	f7ff fee1 	bl	8004228 <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(UART4); //GPS
 8004466:	488c      	ldr	r0, [pc, #560]	; (8004698 <main+0x2c0>)
 8004468:	f7ff ff34 	bl	80042d4 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B;
 800446c:	488b      	ldr	r0, [pc, #556]	; (800469c <main+0x2c4>)
 800446e:	f7ff ff31 	bl	80042d4 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 8004472:	488b      	ldr	r0, [pc, #556]	; (80046a0 <main+0x2c8>)
 8004474:	f7ff ff2e 	bl	80042d4 <LL_USART_EnableIT_RXNE>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); // Telemetry
 8004478:	2201      	movs	r2, #1
 800447a:	498a      	ldr	r1, [pc, #552]	; (80046a4 <main+0x2cc>)
 800447c:	488a      	ldr	r0, [pc, #552]	; (80046a8 <main+0x2d0>)
 800447e:	f006 ff3f 	bl	800b300 <HAL_UART_Receive_IT>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8004482:	488a      	ldr	r0, [pc, #552]	; (80046ac <main+0x2d4>)
 8004484:	f7ff fed0 	bl	8004228 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1); //Enable Timer Counting
 8004488:	2101      	movs	r1, #1
 800448a:	4888      	ldr	r0, [pc, #544]	; (80046ac <main+0x2d4>)
 800448c:	f7ff fedc 	bl	8004248 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2); //Enable Timer Counting
 8004490:	2110      	movs	r1, #16
 8004492:	4886      	ldr	r0, [pc, #536]	; (80046ac <main+0x2d4>)
 8004494:	f7ff fed8 	bl	8004248 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3); //Enable Timer Counting
 8004498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800449c:	4883      	ldr	r0, [pc, #524]	; (80046ac <main+0x2d4>)
 800449e:	f7ff fed3 	bl	8004248 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 80044a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044a6:	4881      	ldr	r0, [pc, #516]	; (80046ac <main+0x2d4>)
 80044a8:	f7ff fece 	bl	8004248 <LL_TIM_CC_EnableChannel>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 80044ac:	4880      	ldr	r0, [pc, #512]	; (80046b0 <main+0x2d8>)
 80044ae:	f7ff febb 	bl	8004228 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 80044b2:	487f      	ldr	r0, [pc, #508]	; (80046b0 <main+0x2d8>)
 80044b4:	f7ff feeb 	bl	800428e <LL_TIM_EnableIT_UPDATE>


  TIM3->PSC = 1000;
 80044b8:	4b76      	ldr	r3, [pc, #472]	; (8004694 <main+0x2bc>)
 80044ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044c4:	4873      	ldr	r0, [pc, #460]	; (8004694 <main+0x2bc>)
 80044c6:	f7ff febf 	bl	8004248 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 80044ca:	203c      	movs	r0, #60	; 0x3c
 80044cc:	f004 faec 	bl	8008aa8 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d4:	486f      	ldr	r0, [pc, #444]	; (8004694 <main+0x2bc>)
 80044d6:	f7ff fec8 	bl	800426a <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 80044da:	203c      	movs	r0, #60	; 0x3c
 80044dc:	f004 fae4 	bl	8008aa8 <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044e4:	486b      	ldr	r0, [pc, #428]	; (8004694 <main+0x2bc>)
 80044e6:	f7ff feaf 	bl	8004248 <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 80044ea:	203c      	movs	r0, #60	; 0x3c
 80044ec:	f004 fadc 	bl	8008aa8 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044f4:	4867      	ldr	r0, [pc, #412]	; (8004694 <main+0x2bc>)
 80044f6:	f7ff feb8 	bl	800426a <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 80044fa:	203c      	movs	r0, #60	; 0x3c
 80044fc:	f004 fad4 	bl	8008aa8 <HAL_Delay>


  printf("Checking sensor connection!\n");
 8004500:	486c      	ldr	r0, [pc, #432]	; (80046b4 <main+0x2dc>)
 8004502:	f009 fb19 	bl	800db38 <puts>

  if(BNO080_Initialization() != 0)
 8004506:	f7fd f81f 	bl	8001548 <BNO080_Initialization>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03a      	beq.n	8004586 <main+0x1ae>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004514:	485f      	ldr	r0, [pc, #380]	; (8004694 <main+0x2bc>)
 8004516:	f7ff fe97 	bl	8004248 <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 800451a:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <main+0x2bc>)
 800451c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8004522:	2064      	movs	r0, #100	; 0x64
 8004524:	f004 fac0 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 1500;
 8004528:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <main+0x2bc>)
 800452a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8004530:	2064      	movs	r0, #100	; 0x64
 8004532:	f004 fab9 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004536:	4b57      	ldr	r3, [pc, #348]	; (8004694 <main+0x2bc>)
 8004538:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 800453e:	2064      	movs	r0, #100	; 0x64
 8004540:	f004 fab2 	bl	8008aa8 <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004548:	4852      	ldr	r0, [pc, #328]	; (8004694 <main+0x2bc>)
 800454a:	f7ff fe8e 	bl	800426a <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...");
 800454e:	485a      	ldr	r0, [pc, #360]	; (80046b8 <main+0x2e0>)
 8004550:	f009 fa6c 	bl	800da2c <iprintf>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004558:	484e      	ldr	r0, [pc, #312]	; (8004694 <main+0x2bc>)
 800455a:	f7ff fe86 	bl	800426a <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800455e:	2101      	movs	r1, #1
 8004560:	4856      	ldr	r0, [pc, #344]	; (80046bc <main+0x2e4>)
 8004562:	f7ff fef3 	bl	800434c <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8004566:	20c8      	movs	r0, #200	; 0xc8
 8004568:	f004 fa9e 	bl	8008aa8 <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800456c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004570:	4848      	ldr	r0, [pc, #288]	; (8004694 <main+0x2bc>)
 8004572:	f7ff fe69 	bl	8004248 <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004576:	2101      	movs	r1, #1
 8004578:	4850      	ldr	r0, [pc, #320]	; (80046bc <main+0x2e4>)
 800457a:	f7ff fee7 	bl	800434c <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 800457e:	20c8      	movs	r0, #200	; 0xc8
 8004580:	f004 fa92 	bl	8008aa8 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004584:	e7e6      	b.n	8004554 <main+0x17c>
	  }
  }
  BNO080_enableRotationVector(2500);
 8004586:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800458a:	f7fd fb1c 	bl	8001bc6 <BNO080_enableRotationVector>

  if(ICM20602_Initialization() !=0 )
 800458e:	f7fe f80f 	bl	80025b0 <ICM20602_Initialization>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d03a      	beq.n	800460e <main+0x236>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800459c:	483d      	ldr	r0, [pc, #244]	; (8004694 <main+0x2bc>)
 800459e:	f7ff fe53 	bl	8004248 <LL_TIM_CC_EnableChannel>

	  	  TIM3->PSC = 1000;
 80045a2:	4b3c      	ldr	r3, [pc, #240]	; (8004694 <main+0x2bc>)
 80045a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 80045aa:	2064      	movs	r0, #100	; 0x64
 80045ac:	f004 fa7c 	bl	8008aa8 <HAL_Delay>
	  	  TIM3->PSC = 1500;
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <main+0x2bc>)
 80045b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 80045b8:	2064      	movs	r0, #100	; 0x64
 80045ba:	f004 fa75 	bl	8008aa8 <HAL_Delay>
	  	  TIM3->PSC = 2000;
 80045be:	4b35      	ldr	r3, [pc, #212]	; (8004694 <main+0x2bc>)
 80045c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28
	  	  HAL_Delay(100);
 80045c6:	2064      	movs	r0, #100	; 0x64
 80045c8:	f004 fa6e 	bl	8008aa8 <HAL_Delay>

	  	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045d0:	4830      	ldr	r0, [pc, #192]	; (8004694 <main+0x2bc>)
 80045d2:	f7ff fe4a 	bl	800426a <LL_TIM_CC_DisableChannel>

	  	  printf("\nICM20602 failed. Program shutting down...");
 80045d6:	483a      	ldr	r0, [pc, #232]	; (80046c0 <main+0x2e8>)
 80045d8:	f009 fa28 	bl	800da2c <iprintf>
	  	  while(1)
	  	  {
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045e0:	482c      	ldr	r0, [pc, #176]	; (8004694 <main+0x2bc>)
 80045e2:	f7ff fe42 	bl	800426a <LL_TIM_CC_DisableChannel>
	  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80045e6:	2102      	movs	r1, #2
 80045e8:	4834      	ldr	r0, [pc, #208]	; (80046bc <main+0x2e4>)
 80045ea:	f7ff feaf 	bl	800434c <LL_GPIO_TogglePin>
	  		  HAL_Delay(200);
 80045ee:	20c8      	movs	r0, #200	; 0xc8
 80045f0:	f004 fa5a 	bl	8008aa8 <HAL_Delay>
	  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045f8:	4826      	ldr	r0, [pc, #152]	; (8004694 <main+0x2bc>)
 80045fa:	f7ff fe25 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80045fe:	2102      	movs	r1, #2
 8004600:	482e      	ldr	r0, [pc, #184]	; (80046bc <main+0x2e4>)
 8004602:	f7ff fea3 	bl	800434c <LL_GPIO_TogglePin>
	  		  HAL_Delay(200);
 8004606:	20c8      	movs	r0, #200	; 0xc8
 8004608:	f004 fa4e 	bl	8008aa8 <HAL_Delay>
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800460c:	e7e6      	b.n	80045dc <main+0x204>
	  	  }
  }

  /*LPS22HH Initialization*/
  if(LPS22HH_Initialization() != 0)
 800460e:	f7fe fa59 	bl	8002ac4 <LPS22HH_Initialization>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d057      	beq.n	80046c8 <main+0x2f0>
    {
  	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800461c:	481d      	ldr	r0, [pc, #116]	; (8004694 <main+0x2bc>)
 800461e:	f7ff fe13 	bl	8004248 <LL_TIM_CC_EnableChannel>

  	  TIM3->PSC = 1000;
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <main+0x2bc>)
 8004624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 800462a:	2064      	movs	r0, #100	; 0x64
 800462c:	f004 fa3c 	bl	8008aa8 <HAL_Delay>
  	  TIM3->PSC = 1500;
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <main+0x2bc>)
 8004632:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 8004638:	2064      	movs	r0, #100	; 0x64
 800463a:	f004 fa35 	bl	8008aa8 <HAL_Delay>
  	  TIM3->PSC = 2000;
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <main+0x2bc>)
 8004640:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
  	  HAL_Delay(100);
 8004646:	2064      	movs	r0, #100	; 0x64
 8004648:	f004 fa2e 	bl	8008aa8 <HAL_Delay>

  	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800464c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004650:	4810      	ldr	r0, [pc, #64]	; (8004694 <main+0x2bc>)
 8004652:	f7ff fe0a 	bl	800426a <LL_TIM_CC_DisableChannel>

  	  printf("\nLPS22HH failed. Program shutting down...");
 8004656:	481b      	ldr	r0, [pc, #108]	; (80046c4 <main+0x2ec>)
 8004658:	f009 f9e8 	bl	800da2c <iprintf>
  	  while(1)
  	  {
  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800465c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <main+0x2bc>)
 8004662:	f7ff fe02 	bl	800426a <LL_TIM_CC_DisableChannel>
  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004666:	2104      	movs	r1, #4
 8004668:	4814      	ldr	r0, [pc, #80]	; (80046bc <main+0x2e4>)
 800466a:	f7ff fe6f 	bl	800434c <LL_GPIO_TogglePin>
  		  HAL_Delay(200);
 800466e:	20c8      	movs	r0, #200	; 0xc8
 8004670:	f004 fa1a 	bl	8008aa8 <HAL_Delay>
  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <main+0x2bc>)
 800467a:	f7ff fde5 	bl	8004248 <LL_TIM_CC_EnableChannel>
  		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800467e:	2104      	movs	r1, #4
 8004680:	480e      	ldr	r0, [pc, #56]	; (80046bc <main+0x2e4>)
 8004682:	f7ff fe63 	bl	800434c <LL_GPIO_TogglePin>
  		  HAL_Delay(200);
 8004686:	20c8      	movs	r0, #200	; 0xc8
 8004688:	f004 fa0e 	bl	8008aa8 <HAL_Delay>
  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800468c:	e7e6      	b.n	800465c <main+0x284>
 800468e:	bf00      	nop
 8004690:	3f8ccccd 	.word	0x3f8ccccd
 8004694:	40000400 	.word	0x40000400
 8004698:	40004c00 	.word	0x40004c00
 800469c:	40005000 	.word	0x40005000
 80046a0:	40011400 	.word	0x40011400
 80046a4:	20000281 	.word	0x20000281
 80046a8:	20000878 	.word	0x20000878
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40001400 	.word	0x40001400
 80046b4:	08011c58 	.word	0x08011c58
 80046b8:	08011c74 	.word	0x08011c74
 80046bc:	40020800 	.word	0x40020800
 80046c0:	08011ca0 	.word	0x08011ca0
 80046c4:	08011ccc 	.word	0x08011ccc
    }



  /*GNSS Initialization*/
  M8N_Initialization();
 80046c8:	f7fe fc70 	bl	8002fac <M8N_Initialization>
//  gyro_y_offset = gyro_y_offset/250.f;
//  gyro_z_offset = gyro_z_offset/250.f;
//
//  HAL_Delay(5);

  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 80046cc:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80046d0:	4613      	mov	r3, r2
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	121b      	asrs	r3, r3, #8
 80046da:	4619      	mov	r1, r3
 80046dc:	2013      	movs	r0, #19
 80046de:	f7fd ff45 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 80046e2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80046e6:	4613      	mov	r3, r2
 80046e8:	07db      	lsls	r3, r3, #31
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4619      	mov	r1, r3
 80046f0:	2014      	movs	r0, #20
 80046f2:	f7fd ff3b 	bl	800256c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 80046f6:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80046fa:	4613      	mov	r3, r2
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	121b      	asrs	r3, r3, #8
 8004704:	4619      	mov	r1, r3
 8004706:	2015      	movs	r0, #21
 8004708:	f7fd ff30 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 800470c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8004710:	4613      	mov	r3, r2
 8004712:	07db      	lsls	r3, r3, #31
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4619      	mov	r1, r3
 800471a:	2016      	movs	r0, #22
 800471c:	f7fd ff26 	bl	800256c <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 8004720:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8004724:	4613      	mov	r3, r2
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	121b      	asrs	r3, r3, #8
 800472e:	4619      	mov	r1, r3
 8004730:	2017      	movs	r0, #23
 8004732:	f7fd ff1b 	bl	800256c <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8004736:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800473a:	4613      	mov	r3, r2
 800473c:	07db      	lsls	r3, r3, #31
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4619      	mov	r1, r3
 8004744:	2018      	movs	r0, #24
 8004746:	f7fd ff11 	bl	800256c <ICM20602_Writebyte>

  printf("All sensor OK!\n\n");
 800474a:	48b6      	ldr	r0, [pc, #728]	; (8004a24 <main+0x64c>)
 800474c:	f009 f9f4 	bl	800db38 <puts>

  /*************Save Initial Gain into EEPROM**************/

EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004750:	4bb5      	ldr	r3, [pc, #724]	; (8004a28 <main+0x650>)
 8004752:	4ab6      	ldr	r2, [pc, #728]	; (8004a2c <main+0x654>)
 8004754:	49b6      	ldr	r1, [pc, #728]	; (8004a30 <main+0x658>)
 8004756:	2000      	movs	r0, #0
 8004758:	f7fc fcd6 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 800475c:	4bb4      	ldr	r3, [pc, #720]	; (8004a30 <main+0x658>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	4bb3      	ldr	r3, [pc, #716]	; (8004a30 <main+0x658>)
 8004764:	ed93 7a01 	vldr	s14, [r3, #4]
 8004768:	4bb1      	ldr	r3, [pc, #708]	; (8004a30 <main+0x658>)
 800476a:	edd3 6a02 	vldr	s13, [r3, #8]
 800476e:	eeb0 1a66 	vmov.f32	s2, s13
 8004772:	eef0 0a47 	vmov.f32	s1, s14
 8004776:	eeb0 0a67 	vmov.f32	s0, s15
 800477a:	2100      	movs	r1, #0
 800477c:	48ad      	ldr	r0, [pc, #692]	; (8004a34 <main+0x65c>)
 800477e:	f002 fd71 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004782:	230a      	movs	r3, #10
 8004784:	2214      	movs	r2, #20
 8004786:	49ab      	ldr	r1, [pc, #684]	; (8004a34 <main+0x65c>)
 8004788:	48ab      	ldr	r0, [pc, #684]	; (8004a38 <main+0x660>)
 800478a:	f006 fce2 	bl	800b152 <HAL_UART_Transmit>

EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd);
 800478e:	4bab      	ldr	r3, [pc, #684]	; (8004a3c <main+0x664>)
 8004790:	4aab      	ldr	r2, [pc, #684]	; (8004a40 <main+0x668>)
 8004792:	49ac      	ldr	r1, [pc, #688]	; (8004a44 <main+0x66c>)
 8004794:	2001      	movs	r0, #1
 8004796:	f7fc fcb7 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800479a:	4ba5      	ldr	r3, [pc, #660]	; (8004a30 <main+0x658>)
 800479c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80047a0:	4ba3      	ldr	r3, [pc, #652]	; (8004a30 <main+0x658>)
 80047a2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80047a6:	4ba2      	ldr	r3, [pc, #648]	; (8004a30 <main+0x658>)
 80047a8:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80047ac:	eeb0 1a66 	vmov.f32	s2, s13
 80047b0:	eef0 0a47 	vmov.f32	s1, s14
 80047b4:	eeb0 0a67 	vmov.f32	s0, s15
 80047b8:	2101      	movs	r1, #1
 80047ba:	489e      	ldr	r0, [pc, #632]	; (8004a34 <main+0x65c>)
 80047bc:	f002 fd52 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80047c0:	230a      	movs	r3, #10
 80047c2:	2214      	movs	r2, #20
 80047c4:	499b      	ldr	r1, [pc, #620]	; (8004a34 <main+0x65c>)
 80047c6:	489c      	ldr	r0, [pc, #624]	; (8004a38 <main+0x660>)
 80047c8:	f006 fcc3 	bl	800b152 <HAL_UART_Transmit>

EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 80047cc:	4b9e      	ldr	r3, [pc, #632]	; (8004a48 <main+0x670>)
 80047ce:	4a9f      	ldr	r2, [pc, #636]	; (8004a4c <main+0x674>)
 80047d0:	499f      	ldr	r1, [pc, #636]	; (8004a50 <main+0x678>)
 80047d2:	2002      	movs	r0, #2
 80047d4:	f7fc fc98 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 80047d8:	4b9d      	ldr	r3, [pc, #628]	; (8004a50 <main+0x678>)
 80047da:	edd3 7a00 	vldr	s15, [r3]
 80047de:	4b9c      	ldr	r3, [pc, #624]	; (8004a50 <main+0x678>)
 80047e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80047e4:	4b9a      	ldr	r3, [pc, #616]	; (8004a50 <main+0x678>)
 80047e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80047ea:	eeb0 1a66 	vmov.f32	s2, s13
 80047ee:	eef0 0a47 	vmov.f32	s1, s14
 80047f2:	eeb0 0a67 	vmov.f32	s0, s15
 80047f6:	2102      	movs	r1, #2
 80047f8:	488e      	ldr	r0, [pc, #568]	; (8004a34 <main+0x65c>)
 80047fa:	f002 fd33 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80047fe:	230a      	movs	r3, #10
 8004800:	2214      	movs	r2, #20
 8004802:	498c      	ldr	r1, [pc, #560]	; (8004a34 <main+0x65c>)
 8004804:	488c      	ldr	r0, [pc, #560]	; (8004a38 <main+0x660>)
 8004806:	f006 fca4 	bl	800b152 <HAL_UART_Transmit>

EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 800480a:	4b92      	ldr	r3, [pc, #584]	; (8004a54 <main+0x67c>)
 800480c:	4a92      	ldr	r2, [pc, #584]	; (8004a58 <main+0x680>)
 800480e:	4993      	ldr	r1, [pc, #588]	; (8004a5c <main+0x684>)
 8004810:	2003      	movs	r0, #3
 8004812:	f7fc fc79 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004816:	4b8e      	ldr	r3, [pc, #568]	; (8004a50 <main+0x678>)
 8004818:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800481c:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <main+0x678>)
 800481e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004822:	4b8b      	ldr	r3, [pc, #556]	; (8004a50 <main+0x678>)
 8004824:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004828:	eeb0 1a66 	vmov.f32	s2, s13
 800482c:	eef0 0a47 	vmov.f32	s1, s14
 8004830:	eeb0 0a67 	vmov.f32	s0, s15
 8004834:	2103      	movs	r1, #3
 8004836:	487f      	ldr	r0, [pc, #508]	; (8004a34 <main+0x65c>)
 8004838:	f002 fd14 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800483c:	230a      	movs	r3, #10
 800483e:	2214      	movs	r2, #20
 8004840:	497c      	ldr	r1, [pc, #496]	; (8004a34 <main+0x65c>)
 8004842:	487d      	ldr	r0, [pc, #500]	; (8004a38 <main+0x660>)
 8004844:	f006 fc85 	bl	800b152 <HAL_UART_Transmit>

EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 8004848:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <main+0x688>)
 800484a:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <main+0x68c>)
 800484c:	4986      	ldr	r1, [pc, #536]	; (8004a68 <main+0x690>)
 800484e:	2004      	movs	r0, #4
 8004850:	f7fc fc5a 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004854:	4b84      	ldr	r3, [pc, #528]	; (8004a68 <main+0x690>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <main+0x690>)
 800485c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004860:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <main+0x690>)
 8004862:	edd3 6a02 	vldr	s13, [r3, #8]
 8004866:	eeb0 1a66 	vmov.f32	s2, s13
 800486a:	eef0 0a47 	vmov.f32	s1, s14
 800486e:	eeb0 0a67 	vmov.f32	s0, s15
 8004872:	2104      	movs	r1, #4
 8004874:	486f      	ldr	r0, [pc, #444]	; (8004a34 <main+0x65c>)
 8004876:	f002 fcf5 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800487a:	230a      	movs	r3, #10
 800487c:	2214      	movs	r2, #20
 800487e:	496d      	ldr	r1, [pc, #436]	; (8004a34 <main+0x65c>)
 8004880:	486d      	ldr	r0, [pc, #436]	; (8004a38 <main+0x660>)
 8004882:	f006 fc66 	bl	800b152 <HAL_UART_Transmit>

EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8004886:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <main+0x694>)
 8004888:	4a79      	ldr	r2, [pc, #484]	; (8004a70 <main+0x698>)
 800488a:	497a      	ldr	r1, [pc, #488]	; (8004a74 <main+0x69c>)
 800488c:	2005      	movs	r0, #5
 800488e:	f7fc fc3b 	bl	8001108 <EP_PIDGain_Read>
Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004892:	4b78      	ldr	r3, [pc, #480]	; (8004a74 <main+0x69c>)
 8004894:	edd3 7a00 	vldr	s15, [r3]
 8004898:	4b76      	ldr	r3, [pc, #472]	; (8004a74 <main+0x69c>)
 800489a:	ed93 7a01 	vldr	s14, [r3, #4]
 800489e:	4b75      	ldr	r3, [pc, #468]	; (8004a74 <main+0x69c>)
 80048a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80048a4:	eeb0 1a66 	vmov.f32	s2, s13
 80048a8:	eef0 0a47 	vmov.f32	s1, s14
 80048ac:	eeb0 0a67 	vmov.f32	s0, s15
 80048b0:	2105      	movs	r1, #5
 80048b2:	4860      	ldr	r0, [pc, #384]	; (8004a34 <main+0x65c>)
 80048b4:	f002 fcd6 	bl	8007264 <Encode_Msg_PID_Gain>
HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80048b8:	230a      	movs	r3, #10
 80048ba:	2214      	movs	r2, #20
 80048bc:	495d      	ldr	r1, [pc, #372]	; (8004a34 <main+0x65c>)
 80048be:	485e      	ldr	r0, [pc, #376]	; (8004a38 <main+0x660>)
 80048c0:	f006 fc47 	bl	800b152 <HAL_UART_Transmit>


altitude.out.kp = 0.3;
 80048c4:	4b6c      	ldr	r3, [pc, #432]	; (8004a78 <main+0x6a0>)
 80048c6:	4a6d      	ldr	r2, [pc, #436]	; (8004a7c <main+0x6a4>)
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c
altitude.out.ki = 0;
 80048ca:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <main+0x6a0>)
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
altitude.out.kd = 0.01;
 80048d2:	4b69      	ldr	r3, [pc, #420]	; (8004a78 <main+0x6a0>)
 80048d4:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <main+0x6a8>)
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
altitude.in.kp = 150;
 80048d8:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <main+0x6a0>)
 80048da:	4a6a      	ldr	r2, [pc, #424]	; (8004a84 <main+0x6ac>)
 80048dc:	601a      	str	r2, [r3, #0]
altitude.in.ki = 0;
 80048de:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <main+0x6a0>)
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	605a      	str	r2, [r3, #4]
altitude.in.kd = 0;
 80048e6:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <main+0x6a0>)
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]

gps_lon.out.kp = 50;
 80048ee:	4b66      	ldr	r3, [pc, #408]	; (8004a88 <main+0x6b0>)
 80048f0:	4a66      	ldr	r2, [pc, #408]	; (8004a8c <main+0x6b4>)
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
gps_lon.out.ki = 0;
 80048f4:	4b64      	ldr	r3, [pc, #400]	; (8004a88 <main+0x6b0>)
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
gps_lon.out.kd = 0;
 80048fc:	4b62      	ldr	r3, [pc, #392]	; (8004a88 <main+0x6b0>)
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
gps_lon.in.kp = 2;
 8004904:	4b60      	ldr	r3, [pc, #384]	; (8004a88 <main+0x6b0>)
 8004906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800490a:	601a      	str	r2, [r3, #0]
gps_lon.in.ki = 0;
 800490c:	4b5e      	ldr	r3, [pc, #376]	; (8004a88 <main+0x6b0>)
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
gps_lon.in.kd = 0;
 8004914:	4b5c      	ldr	r3, [pc, #368]	; (8004a88 <main+0x6b0>)
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	609a      	str	r2, [r3, #8]

gps_lat.out.kp = 50;
 800491c:	4b5c      	ldr	r3, [pc, #368]	; (8004a90 <main+0x6b8>)
 800491e:	4a5b      	ldr	r2, [pc, #364]	; (8004a8c <main+0x6b4>)
 8004920:	63da      	str	r2, [r3, #60]	; 0x3c
gps_lat.out.ki = 0;
 8004922:	4b5b      	ldr	r3, [pc, #364]	; (8004a90 <main+0x6b8>)
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
gps_lat.out.kd = 0;
 800492a:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <main+0x6b8>)
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
gps_lat.in.kp = 2;
 8004932:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <main+0x6b8>)
 8004934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004938:	601a      	str	r2, [r3, #0]
gps_lat.in.ki = 0;
 800493a:	4b55      	ldr	r3, [pc, #340]	; (8004a90 <main+0x6b8>)
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	605a      	str	r2, [r3, #4]
gps_lat.in.kd = 0;
 8004942:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <main+0x6b8>)
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	609a      	str	r2, [r3, #8]

/*Receiver Detection*/
  while(Is_iBus_Received() == 0)
 800494a:	e013      	b.n	8004974 <main+0x59c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 800494c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004950:	4850      	ldr	r0, [pc, #320]	; (8004a94 <main+0x6bc>)
 8004952:	f7ff fc79 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 3000;
 8004956:	4b4f      	ldr	r3, [pc, #316]	; (8004a94 <main+0x6bc>)
 8004958:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800495e:	20c8      	movs	r0, #200	; 0xc8
 8004960:	f004 f8a2 	bl	8008aa8 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004968:	484a      	ldr	r0, [pc, #296]	; (8004a94 <main+0x6bc>)
 800496a:	f7ff fc7e 	bl	800426a <LL_TIM_CC_DisableChannel>

	  HAL_Delay(200);
 800496e:	20c8      	movs	r0, #200	; 0xc8
 8004970:	f004 f89a 	bl	8008aa8 <HAL_Delay>
  while(Is_iBus_Received() == 0)
 8004974:	f002 fa7c 	bl	8006e70 <Is_iBus_Received>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0e6      	beq.n	800494c <main+0x574>
  }

  /**************************ESC Calibration***********************************/
  if(iBus.SwC == 2000)
 800497e:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <main+0x6c0>)
 8004980:	899b      	ldrh	r3, [r3, #12]
 8004982:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004986:	f040 8089 	bne.w	8004a9c <main+0x6c4>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 800498a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800498e:	4841      	ldr	r0, [pc, #260]	; (8004a94 <main+0x6bc>)
 8004990:	f7ff fc5a 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8004994:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <main+0x6bc>)
 8004996:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 800499c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049a0:	f004 f882 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 2000;
 80049a4:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <main+0x6bc>)
 80049a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 80049ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049b0:	f004 f87a 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 1500;
 80049b4:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <main+0x6bc>)
 80049b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 80049bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049c0:	f004 f872 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 2000;
 80049c4:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <main+0x6bc>)
 80049c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 80049cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049d0:	f004 f86a 	bl	8008aa8 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80049d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049d8:	482e      	ldr	r0, [pc, #184]	; (8004a94 <main+0x6bc>)
 80049da:	f7ff fc46 	bl	800426a <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 80049de:	f002 fa1d 	bl	8006e1c <ESC_Calibration>
	  while(iBus.SwC != 1000)
 80049e2:	e019      	b.n	8004a18 <main+0x640>
	  {
		  Is_iBus_Received();
 80049e4:	f002 fa44 	bl	8006e70 <Is_iBus_Received>

		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80049e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049ec:	4829      	ldr	r0, [pc, #164]	; (8004a94 <main+0x6bc>)
 80049ee:	f7ff fc2b 	bl	8004248 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 80049f2:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <main+0x6bc>)
 80049f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80049fa:	20c8      	movs	r0, #200	; 0xc8
 80049fc:	f004 f854 	bl	8008aa8 <HAL_Delay>
		  TIM3->PSC = 2000;
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <main+0x6bc>)
 8004a02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8004a08:	20c8      	movs	r0, #200	; 0xc8
 8004a0a:	f004 f84d 	bl	8008aa8 <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a12:	4820      	ldr	r0, [pc, #128]	; (8004a94 <main+0x6bc>)
 8004a14:	f7ff fc29 	bl	800426a <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8004a18:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <main+0x6c0>)
 8004a1a:	899b      	ldrh	r3, [r3, #12]
 8004a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a20:	d1e0      	bne.n	80049e4 <main+0x60c>
 8004a22:	e0a2      	b.n	8004b6a <main+0x792>
 8004a24:	08011cf8 	.word	0x08011cf8
 8004a28:	20000678 	.word	0x20000678
 8004a2c:	20000674 	.word	0x20000674
 8004a30:	20000670 	.word	0x20000670
 8004a34:	2000079c 	.word	0x2000079c
 8004a38:	20000878 	.word	0x20000878
 8004a3c:	200006b4 	.word	0x200006b4
 8004a40:	200006b0 	.word	0x200006b0
 8004a44:	200006ac 	.word	0x200006ac
 8004a48:	20000600 	.word	0x20000600
 8004a4c:	200005fc 	.word	0x200005fc
 8004a50:	200005f8 	.word	0x200005f8
 8004a54:	2000063c 	.word	0x2000063c
 8004a58:	20000638 	.word	0x20000638
 8004a5c:	20000634 	.word	0x20000634
 8004a60:	200005c4 	.word	0x200005c4
 8004a64:	200005c0 	.word	0x200005c0
 8004a68:	200005bc 	.word	0x200005bc
 8004a6c:	20000420 	.word	0x20000420
 8004a70:	2000041c 	.word	0x2000041c
 8004a74:	20000418 	.word	0x20000418
 8004a78:	20000544 	.word	0x20000544
 8004a7c:	3e99999a 	.word	0x3e99999a
 8004a80:	3c23d70a 	.word	0x3c23d70a
 8004a84:	43160000 	.word	0x43160000
 8004a88:	200004cc 	.word	0x200004cc
 8004a8c:	42480000 	.word	0x42480000
 8004a90:	20000454 	.word	0x20000454
 8004a94:	40000400 	.word	0x40000400
 8004a98:	20000384 	.word	0x20000384
	  }
  }


  /**************************BNO080 Calibration********************************/
  else if(iBus.SwC == 1500)
 8004a9c:	4ba1      	ldr	r3, [pc, #644]	; (8004d24 <main+0x94c>)
 8004a9e:	899b      	ldrh	r3, [r3, #12]
 8004aa0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d160      	bne.n	8004b6a <main+0x792>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aac:	489e      	ldr	r0, [pc, #632]	; (8004d28 <main+0x950>)
 8004aae:	f7ff fbcb 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 8004ab2:	4b9d      	ldr	r3, [pc, #628]	; (8004d28 <main+0x950>)
 8004ab4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004abe:	f003 fff3 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004ac2:	4b99      	ldr	r3, [pc, #612]	; (8004d28 <main+0x950>)
 8004ac4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ace:	f003 ffeb 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 1500;
 8004ad2:	4b95      	ldr	r3, [pc, #596]	; (8004d28 <main+0x950>)
 8004ad4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004ada:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ade:	f003 ffe3 	bl	8008aa8 <HAL_Delay>
	  TIM3->PSC = 2000;
 8004ae2:	4b91      	ldr	r3, [pc, #580]	; (8004d28 <main+0x950>)
 8004ae4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(500);
 8004aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aee:	f003 ffdb 	bl	8008aa8 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004af6:	488c      	ldr	r0, [pc, #560]	; (8004d28 <main+0x950>)
 8004af8:	f7ff fbb7 	bl	800426a <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 8004afc:	f002 f9d8 	bl	8006eb0 <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 8004b00:	e019      	b.n	8004b36 <main+0x75e>
	  	  {
	  		  Is_iBus_Received();
 8004b02:	f002 f9b5 	bl	8006e70 <Is_iBus_Received>

	  		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b0a:	4887      	ldr	r0, [pc, #540]	; (8004d28 <main+0x950>)
 8004b0c:	f7ff fb9c 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  		  TIM3->PSC = 1500;
 8004b10:	4b85      	ldr	r3, [pc, #532]	; (8004d28 <main+0x950>)
 8004b12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28
	  		  HAL_Delay(200);
 8004b18:	20c8      	movs	r0, #200	; 0xc8
 8004b1a:	f003 ffc5 	bl	8008aa8 <HAL_Delay>
	  		  TIM3->PSC = 2000;
 8004b1e:	4b82      	ldr	r3, [pc, #520]	; (8004d28 <main+0x950>)
 8004b20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
	  		  HAL_Delay(200);
 8004b26:	20c8      	movs	r0, #200	; 0xc8
 8004b28:	f003 ffbe 	bl	8008aa8 <HAL_Delay>
	  		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b30:	487d      	ldr	r0, [pc, #500]	; (8004d28 <main+0x950>)
 8004b32:	f7ff fb9a 	bl	800426a <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8004b36:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <main+0x94c>)
 8004b38:	899b      	ldrh	r3, [r3, #12]
 8004b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3e:	d1e0      	bne.n	8004b02 <main+0x72a>
	  	  }
  }

  /*********************Check Throttle value is minimum************************/
  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 8004b40:	e013      	b.n	8004b6a <main+0x792>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b46:	4878      	ldr	r0, [pc, #480]	; (8004d28 <main+0x950>)
 8004b48:	f7ff fb7e 	bl	8004248 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1000;
 8004b4c:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <main+0x950>)
 8004b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 8004b54:	2046      	movs	r0, #70	; 0x46
 8004b56:	f003 ffa7 	bl	8008aa8 <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b5e:	4872      	ldr	r0, [pc, #456]	; (8004d28 <main+0x950>)
 8004b60:	f7ff fb83 	bl	800426a <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 8004b64:	2046      	movs	r0, #70	; 0x46
 8004b66:	f003 ff9f 	bl	8008aa8 <HAL_Delay>
  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 8004b6a:	f002 f931 	bl	8006dd0 <Is_iBus_Throttle_min>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0e6      	beq.n	8004b42 <main+0x76a>
 8004b74:	4b6b      	ldr	r3, [pc, #428]	; (8004d24 <main+0x94c>)
 8004b76:	891b      	ldrh	r3, [r3, #8]
 8004b78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b7c:	d0e1      	beq.n	8004b42 <main+0x76a>
  }

  /*LPS22HH Initial Offset*/
  for(int i=0; i<20; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b82:	e03e      	b.n	8004c02 <main+0x82a>
  {
	  if(LPS22HH_DataReady() == 1)
 8004b84:	f7fe f82e 	bl	8002be4 <LPS22HH_DataReady>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d136      	bne.n	8004bfc <main+0x824>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004b8e:	4867      	ldr	r0, [pc, #412]	; (8004d2c <main+0x954>)
 8004b90:	f7fe f834 	bl	8002bfc <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004b94:	4866      	ldr	r0, [pc, #408]	; (8004d30 <main+0x958>)
 8004b96:	f7fe f83e 	bl	8002c16 <LPS22HH_GetTemperature>

		  //Default Unit = 1m
		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <main+0x954>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004d34 <main+0x95c>
 8004baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bae:	4b5f      	ldr	r3, [pc, #380]	; (8004d2c <main+0x954>)
 8004bb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bbc:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8004d38 <main+0x960>
 8004bc0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004bc4:	eef0 0a66 	vmov.f32	s1, s13
 8004bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bcc:	f7fe f830 	bl	8002c30 <getAltitude2>
 8004bd0:	eef0 7a40 	vmov.f32	s15, s0
 8004bd4:	4b55      	ldr	r3, [pc, #340]	; (8004d2c <main+0x954>)
 8004bd6:	edc3 7a02 	vstr	s15, [r3, #8]
		  baro_offset += LPS22HH.baroAlt;
 8004bda:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <main+0x954>)
 8004bdc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004be0:	4b56      	ldr	r3, [pc, #344]	; (8004d3c <main+0x964>)
 8004be2:	edd3 7a00 	vldr	s15, [r3]
 8004be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bea:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <main+0x964>)
 8004bec:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(100);
 8004bf0:	2064      	movs	r0, #100	; 0x64
 8004bf2:	f003 ff59 	bl	8008aa8 <HAL_Delay>

		  baro_cnt++;
 8004bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	65bb      	str	r3, [r7, #88]	; 0x58
  for(int i=0; i<20; i++)
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfe:	3301      	adds	r3, #1
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	2b13      	cmp	r3, #19
 8004c06:	ddbd      	ble.n	8004b84 <main+0x7ac>
	  }
  }

  baro_offset = baro_offset / baro_cnt;
 8004c08:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <main+0x964>)
 8004c0a:	edd3 6a00 	vldr	s13, [r3]
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <main+0x964>)
 8004c1e:	edc3 7a00 	vstr	s15, [r3]
//
//  gps_height_offset /= gps_cnt;

  /********************* FC Ready to Fly ************************/

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 8004c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c26:	4840      	ldr	r0, [pc, #256]	; (8004d28 <main+0x950>)
 8004c28:	f7ff fb0e 	bl	8004248 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <main+0x950>)
 8004c2e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004c34:	2064      	movs	r0, #100	; 0x64
 8004c36:	f003 ff37 	bl	8008aa8 <HAL_Delay>
  TIM3->PSC = 1500;
 8004c3a:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <main+0x950>)
 8004c3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004c42:	2064      	movs	r0, #100	; 0x64
 8004c44:	f003 ff30 	bl	8008aa8 <HAL_Delay>
  TIM3->PSC = 1000;
 8004c48:	4b37      	ldr	r3, [pc, #220]	; (8004d28 <main+0x950>)
 8004c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8004c50:	2064      	movs	r0, #100	; 0x64
 8004c52:	f003 ff29 	bl	8008aa8 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c5a:	4833      	ldr	r0, [pc, #204]	; (8004d28 <main+0x950>)
 8004c5c:	f7ff fb05 	bl	800426a <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8004c60:	4837      	ldr	r0, [pc, #220]	; (8004d40 <main+0x968>)
 8004c62:	f008 ff69 	bl	800db38 <puts>
//
//		  XAVIER_Parsing(&nx_rx_buf, &XAVIER);
//	  }

	  /********************* GPS Data Parsing ************************/
	  if(m8n_rx_cplt_flag == 1) // GPS receive checking
 8004c66:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <main+0x96c>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d145      	bne.n	8004cfa <main+0x922>
	  {
		  m8n_rx_cplt_flag == 0;

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 8004c6e:	2124      	movs	r1, #36	; 0x24
 8004c70:	4835      	ldr	r0, [pc, #212]	; (8004d48 <main+0x970>)
 8004c72:	f7fe f9c5 	bl	8003000 <M8N_UBX_CHKSUM_Check>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d13e      	bne.n	8004cfa <main+0x922>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4833      	ldr	r0, [pc, #204]	; (8004d4c <main+0x974>)
 8004c80:	f7ff fb64 	bl	800434c <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004c84:	4932      	ldr	r1, [pc, #200]	; (8004d50 <main+0x978>)
 8004c86:	4830      	ldr	r0, [pc, #192]	; (8004d48 <main+0x970>)
 8004c88:	f7fe f9f4 	bl	8003074 <M8N_UBX_NAV_POSLLH_Parsing>
			  posllh.height -= gps_height_offset;
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <main+0x978>)
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <main+0x97c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	4a2e      	ldr	r2, [pc, #184]	; (8004d50 <main+0x978>)
 8004c98:	6193      	str	r3, [r2, #24]

			  if((posllh.lon - posllh.lon_prev > 500) || (posllh.lon - posllh.lon_prev < -500)) posllh.lon = posllh.lon_prev;
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <main+0x978>)
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <main+0x978>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ca8:	dc07      	bgt.n	8004cba <main+0x8e2>
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <main+0x978>)
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	4b28      	ldr	r3, [pc, #160]	; (8004d50 <main+0x978>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8004cb8:	da03      	bge.n	8004cc2 <main+0x8ea>
 8004cba:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <main+0x978>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <main+0x978>)
 8004cc0:	6093      	str	r3, [r2, #8]
			  if((posllh.lat - posllh.lat_prev > 500) || (posllh.lat - posllh.lat_prev < -500)) posllh.lat = posllh.lat_prev;
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <main+0x978>)
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <main+0x978>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cd0:	dc07      	bgt.n	8004ce2 <main+0x90a>
 8004cd2:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <main+0x978>)
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <main+0x978>)
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8004ce0:	da03      	bge.n	8004cea <main+0x912>
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <main+0x978>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <main+0x978>)
 8004ce8:	6113      	str	r3, [r2, #16]

			  posllh.lon_prev = posllh.lon;
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <main+0x978>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <main+0x978>)
 8004cf0:	60d3      	str	r3, [r2, #12]
			  posllh.lat_prev = posllh.lat;
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <main+0x978>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <main+0x978>)
 8004cf8:	6153      	str	r3, [r2, #20]
//			  printf(" ", XAVIER.mode);
		  }
	  }

	  /********************* Telemetry Communication ************************/
	  if(telemetry_rx_cplt_flag == 1) //Receive GCS Message
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <main+0x980>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f040 83a2 	bne.w	8005448 <main+0x1070>
	  	  {
	  		  telemetry_rx_cplt_flag = 0;
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <main+0x980>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]

	  		  if(iBus.SwA == 1000) //Check FS-i6 Switch A
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <main+0x94c>)
 8004d0c:	891b      	ldrh	r3, [r3, #8]
 8004d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d12:	f040 8399 	bne.w	8005448 <main+0x1070>
	  		  {
	  			  unsigned char chksum = 0xff;
 8004d16:	23ff      	movs	r3, #255	; 0xff
 8004d18:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d20:	e028      	b.n	8004d74 <main+0x99c>
 8004d22:	bf00      	nop
 8004d24:	20000384 	.word	0x20000384
 8004d28:	40000400 	.word	0x40000400
 8004d2c:	200003d0 	.word	0x200003d0
 8004d30:	200003d4 	.word	0x200003d4
 8004d34:	45800000 	.word	0x45800000
 8004d38:	42c80000 	.word	0x42c80000
 8004d3c:	20000210 	.word	0x20000210
 8004d40:	08011d08 	.word	0x08011d08
 8004d44:	2000027f 	.word	0x2000027f
 8004d48:	200007f4 	.word	0x200007f4
 8004d4c:	40020800 	.word	0x40020800
 8004d50:	200003e0 	.word	0x200003e0
 8004d54:	20000214 	.word	0x20000214
 8004d58:	20000794 	.word	0x20000794
 8004d5c:	4aac      	ldr	r2, [pc, #688]	; (8005010 <main+0xc38>)
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	4413      	add	r3, r2
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d70:	3301      	adds	r3, #1
 8004d72:	647b      	str	r3, [r7, #68]	; 0x44
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	2b12      	cmp	r3, #18
 8004d78:	ddf0      	ble.n	8004d5c <main+0x984>

	  			  if(chksum == telemetry_rx_buf[19]) //Check checksum of GCS Message
 8004d7a:	4ba5      	ldr	r3, [pc, #660]	; (8005010 <main+0xc38>)
 8004d7c:	7cdb      	ldrb	r3, [r3, #19]
 8004d7e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004d82:	429a      	cmp	r2, r3
 8004d84:	f040 8360 	bne.w	8005448 <main+0x1070>
	  			  {
	  				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d8c:	48a1      	ldr	r0, [pc, #644]	; (8005014 <main+0xc3c>)
 8004d8e:	f7ff fa5b 	bl	8004248 <LL_TIM_CC_EnableChannel>

	  				  TIM3->PSC = 1000;
 8004d92:	4ba0      	ldr	r3, [pc, #640]	; (8005014 <main+0xc3c>)
 8004d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
	  				  HAL_Delay(10);
 8004d9a:	200a      	movs	r0, #10
 8004d9c:	f003 fe84 	bl	8008aa8 <HAL_Delay>

	  				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004da4:	489b      	ldr	r0, [pc, #620]	; (8005014 <main+0xc3c>)
 8004da6:	f7ff fa60 	bl	800426a <LL_TIM_CC_DisableChannel>

	  				  switch(telemetry_rx_buf[2]) //Check ID of GCS Message
 8004daa:	4b99      	ldr	r3, [pc, #612]	; (8005010 <main+0xc38>)
 8004dac:	789b      	ldrb	r3, [r3, #2]
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	f200 8359 	bhi.w	8005466 <main+0x108e>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <main+0x9e4>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	08004e85 	.word	0x08004e85
 8004dc4:	08004f09 	.word	0x08004f09
 8004dc8:	08004f8d 	.word	0x08004f8d
 8004dcc:	0800505d 	.word	0x0800505d
 8004dd0:	080050e1 	.word	0x080050e1
 8004dd4:	08005467 	.word	0x08005467
 8004dd8:	08005467 	.word	0x08005467
 8004ddc:	08005467 	.word	0x08005467
 8004de0:	08005467 	.word	0x08005467
 8004de4:	08005467 	.word	0x08005467
 8004de8:	08005467 	.word	0x08005467
 8004dec:	08005467 	.word	0x08005467
 8004df0:	08005467 	.word	0x08005467
 8004df4:	08005467 	.word	0x08005467
 8004df8:	08005467 	.word	0x08005467
 8004dfc:	08005165 	.word	0x08005165
	  				  {
	  				  case 0:
	  					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <main+0xc40>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a85      	ldr	r2, [pc, #532]	; (800501c <main+0xc44>)
 8004e06:	6013      	str	r3, [r2, #0]
	  					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8004e08:	4b85      	ldr	r3, [pc, #532]	; (8005020 <main+0xc48>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a83      	ldr	r2, [pc, #524]	; (800501c <main+0xc44>)
 8004e0e:	6053      	str	r3, [r2, #4]
	  					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8004e10:	4b84      	ldr	r3, [pc, #528]	; (8005024 <main+0xc4c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a81      	ldr	r2, [pc, #516]	; (800501c <main+0xc44>)
 8004e16:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004e18:	4b7d      	ldr	r3, [pc, #500]	; (8005010 <main+0xc38>)
 8004e1a:	789b      	ldrb	r3, [r3, #2]
 8004e1c:	4a7f      	ldr	r2, [pc, #508]	; (800501c <main+0xc44>)
 8004e1e:	edd2 7a00 	vldr	s15, [r2]
 8004e22:	4a7e      	ldr	r2, [pc, #504]	; (800501c <main+0xc44>)
 8004e24:	ed92 7a01 	vldr	s14, [r2, #4]
 8004e28:	4a7c      	ldr	r2, [pc, #496]	; (800501c <main+0xc44>)
 8004e2a:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e2e:	eeb0 1a66 	vmov.f32	s2, s13
 8004e32:	eef0 0a47 	vmov.f32	s1, s14
 8004e36:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fc f8ce 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004e40:	4b73      	ldr	r3, [pc, #460]	; (8005010 <main+0xc38>)
 8004e42:	7898      	ldrb	r0, [r3, #2]
 8004e44:	4b78      	ldr	r3, [pc, #480]	; (8005028 <main+0xc50>)
 8004e46:	4a79      	ldr	r2, [pc, #484]	; (800502c <main+0xc54>)
 8004e48:	4974      	ldr	r1, [pc, #464]	; (800501c <main+0xc44>)
 8004e4a:	f7fc f95d 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004e4e:	4b70      	ldr	r3, [pc, #448]	; (8005010 <main+0xc38>)
 8004e50:	789b      	ldrb	r3, [r3, #2]
 8004e52:	4a72      	ldr	r2, [pc, #456]	; (800501c <main+0xc44>)
 8004e54:	edd2 7a00 	vldr	s15, [r2]
 8004e58:	4a70      	ldr	r2, [pc, #448]	; (800501c <main+0xc44>)
 8004e5a:	ed92 7a01 	vldr	s14, [r2, #4]
 8004e5e:	4a6f      	ldr	r2, [pc, #444]	; (800501c <main+0xc44>)
 8004e60:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e64:	eeb0 1a66 	vmov.f32	s2, s13
 8004e68:	eef0 0a47 	vmov.f32	s1, s14
 8004e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e70:	4619      	mov	r1, r3
 8004e72:	486f      	ldr	r0, [pc, #444]	; (8005030 <main+0xc58>)
 8004e74:	f002 f9f6 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004e78:	2214      	movs	r2, #20
 8004e7a:	496d      	ldr	r1, [pc, #436]	; (8005030 <main+0xc58>)
 8004e7c:	486d      	ldr	r0, [pc, #436]	; (8005034 <main+0xc5c>)
 8004e7e:	f006 f9fa 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 8004e82:	e2f0      	b.n	8005466 <main+0x108e>
	  				  case 1:
	  					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8004e84:	4b64      	ldr	r3, [pc, #400]	; (8005018 <main+0xc40>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a64      	ldr	r2, [pc, #400]	; (800501c <main+0xc44>)
 8004e8a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8004e8c:	4b64      	ldr	r3, [pc, #400]	; (8005020 <main+0xc48>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a62      	ldr	r2, [pc, #392]	; (800501c <main+0xc44>)
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
	  					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8004e94:	4b63      	ldr	r3, [pc, #396]	; (8005024 <main+0xc4c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a60      	ldr	r2, [pc, #384]	; (800501c <main+0xc44>)
 8004e9a:	6453      	str	r3, [r2, #68]	; 0x44
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004e9c:	4b5c      	ldr	r3, [pc, #368]	; (8005010 <main+0xc38>)
 8004e9e:	789b      	ldrb	r3, [r3, #2]
 8004ea0:	4a5e      	ldr	r2, [pc, #376]	; (800501c <main+0xc44>)
 8004ea2:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004ea6:	4a5d      	ldr	r2, [pc, #372]	; (800501c <main+0xc44>)
 8004ea8:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004eac:	4a5b      	ldr	r2, [pc, #364]	; (800501c <main+0xc44>)
 8004eae:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004eb2:	eeb0 1a66 	vmov.f32	s2, s13
 8004eb6:	eef0 0a47 	vmov.f32	s1, s14
 8004eba:	eeb0 0a67 	vmov.f32	s0, s15
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc f88c 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8004ec4:	4b52      	ldr	r3, [pc, #328]	; (8005010 <main+0xc38>)
 8004ec6:	7898      	ldrb	r0, [r3, #2]
 8004ec8:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <main+0xc60>)
 8004eca:	4a5c      	ldr	r2, [pc, #368]	; (800503c <main+0xc64>)
 8004ecc:	495c      	ldr	r1, [pc, #368]	; (8005040 <main+0xc68>)
 8004ece:	f7fc f91b 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004ed2:	4b4f      	ldr	r3, [pc, #316]	; (8005010 <main+0xc38>)
 8004ed4:	789b      	ldrb	r3, [r3, #2]
 8004ed6:	4a51      	ldr	r2, [pc, #324]	; (800501c <main+0xc44>)
 8004ed8:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004edc:	4a4f      	ldr	r2, [pc, #316]	; (800501c <main+0xc44>)
 8004ede:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004ee2:	4a4e      	ldr	r2, [pc, #312]	; (800501c <main+0xc44>)
 8004ee4:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004ee8:	eeb0 1a66 	vmov.f32	s2, s13
 8004eec:	eef0 0a47 	vmov.f32	s1, s14
 8004ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	484e      	ldr	r0, [pc, #312]	; (8005030 <main+0xc58>)
 8004ef8:	f002 f9b4 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004efc:	2214      	movs	r2, #20
 8004efe:	494c      	ldr	r1, [pc, #304]	; (8005030 <main+0xc58>)
 8004f00:	484c      	ldr	r0, [pc, #304]	; (8005034 <main+0xc5c>)
 8004f02:	f006 f9b8 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 8004f06:	e2ae      	b.n	8005466 <main+0x108e>
	  				  case 2:
	  					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8004f08:	4b43      	ldr	r3, [pc, #268]	; (8005018 <main+0xc40>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	; (8005044 <main+0xc6c>)
 8004f0e:	6013      	str	r3, [r2, #0]
	  					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8004f10:	4b43      	ldr	r3, [pc, #268]	; (8005020 <main+0xc48>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a4b      	ldr	r2, [pc, #300]	; (8005044 <main+0xc6c>)
 8004f16:	6053      	str	r3, [r2, #4]
	  					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <main+0xc4c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a49      	ldr	r2, [pc, #292]	; (8005044 <main+0xc6c>)
 8004f1e:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <main+0xc38>)
 8004f22:	789b      	ldrb	r3, [r3, #2]
 8004f24:	4a47      	ldr	r2, [pc, #284]	; (8005044 <main+0xc6c>)
 8004f26:	edd2 7a00 	vldr	s15, [r2]
 8004f2a:	4a46      	ldr	r2, [pc, #280]	; (8005044 <main+0xc6c>)
 8004f2c:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f30:	4a44      	ldr	r2, [pc, #272]	; (8005044 <main+0xc6c>)
 8004f32:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f36:	eeb0 1a66 	vmov.f32	s2, s13
 8004f3a:	eef0 0a47 	vmov.f32	s1, s14
 8004f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc f84a 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <main+0xc38>)
 8004f4a:	7898      	ldrb	r0, [r3, #2]
 8004f4c:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <main+0xc70>)
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	; (800504c <main+0xc74>)
 8004f50:	493c      	ldr	r1, [pc, #240]	; (8005044 <main+0xc6c>)
 8004f52:	f7fc f8d9 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004f56:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <main+0xc38>)
 8004f58:	789b      	ldrb	r3, [r3, #2]
 8004f5a:	4a3a      	ldr	r2, [pc, #232]	; (8005044 <main+0xc6c>)
 8004f5c:	edd2 7a00 	vldr	s15, [r2]
 8004f60:	4a38      	ldr	r2, [pc, #224]	; (8005044 <main+0xc6c>)
 8004f62:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f66:	4a37      	ldr	r2, [pc, #220]	; (8005044 <main+0xc6c>)
 8004f68:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f6c:	eeb0 1a66 	vmov.f32	s2, s13
 8004f70:	eef0 0a47 	vmov.f32	s1, s14
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	4619      	mov	r1, r3
 8004f7a:	482d      	ldr	r0, [pc, #180]	; (8005030 <main+0xc58>)
 8004f7c:	f002 f972 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004f80:	2214      	movs	r2, #20
 8004f82:	492b      	ldr	r1, [pc, #172]	; (8005030 <main+0xc58>)
 8004f84:	482b      	ldr	r0, [pc, #172]	; (8005034 <main+0xc5c>)
 8004f86:	f006 f976 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 8004f8a:	e26c      	b.n	8005466 <main+0x108e>
	  				  case 3:
	  					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <main+0xc40>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <main+0xc6c>)
 8004f92:	63d3      	str	r3, [r2, #60]	; 0x3c
	  					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <main+0xc48>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <main+0xc6c>)
 8004f9a:	6413      	str	r3, [r2, #64]	; 0x40
	  					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8004f9c:	4b21      	ldr	r3, [pc, #132]	; (8005024 <main+0xc4c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a28      	ldr	r2, [pc, #160]	; (8005044 <main+0xc6c>)
 8004fa2:	6453      	str	r3, [r2, #68]	; 0x44
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <main+0xc38>)
 8004fa6:	789b      	ldrb	r3, [r3, #2]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	; (8005044 <main+0xc6c>)
 8004faa:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <main+0xc6c>)
 8004fb0:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <main+0xc6c>)
 8004fb6:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004fba:	eeb0 1a66 	vmov.f32	s2, s13
 8004fbe:	eef0 0a47 	vmov.f32	s1, s14
 8004fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fc f808 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 8004fcc:	4b10      	ldr	r3, [pc, #64]	; (8005010 <main+0xc38>)
 8004fce:	7898      	ldrb	r0, [r3, #2]
 8004fd0:	4b1f      	ldr	r3, [pc, #124]	; (8005050 <main+0xc78>)
 8004fd2:	4a20      	ldr	r2, [pc, #128]	; (8005054 <main+0xc7c>)
 8004fd4:	4920      	ldr	r1, [pc, #128]	; (8005058 <main+0xc80>)
 8004fd6:	f7fc f897 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <main+0xc38>)
 8004fdc:	789b      	ldrb	r3, [r3, #2]
 8004fde:	4a19      	ldr	r2, [pc, #100]	; (8005044 <main+0xc6c>)
 8004fe0:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8004fe4:	4a17      	ldr	r2, [pc, #92]	; (8005044 <main+0xc6c>)
 8004fe6:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <main+0xc6c>)
 8004fec:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 8004ff0:	eeb0 1a66 	vmov.f32	s2, s13
 8004ff4:	eef0 0a47 	vmov.f32	s1, s14
 8004ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	480c      	ldr	r0, [pc, #48]	; (8005030 <main+0xc58>)
 8005000:	f002 f930 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005004:	2214      	movs	r2, #20
 8005006:	490a      	ldr	r1, [pc, #40]	; (8005030 <main+0xc58>)
 8005008:	480a      	ldr	r0, [pc, #40]	; (8005034 <main+0xc5c>)
 800500a:	f006 f934 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 800500e:	e22a      	b.n	8005466 <main+0x108e>
 8005010:	20000780 	.word	0x20000780
 8005014:	40000400 	.word	0x40000400
 8005018:	20000783 	.word	0x20000783
 800501c:	20000670 	.word	0x20000670
 8005020:	20000787 	.word	0x20000787
 8005024:	2000078b 	.word	0x2000078b
 8005028:	20000678 	.word	0x20000678
 800502c:	20000674 	.word	0x20000674
 8005030:	2000079c 	.word	0x2000079c
 8005034:	20000878 	.word	0x20000878
 8005038:	200006b4 	.word	0x200006b4
 800503c:	200006b0 	.word	0x200006b0
 8005040:	200006ac 	.word	0x200006ac
 8005044:	200005f8 	.word	0x200005f8
 8005048:	20000600 	.word	0x20000600
 800504c:	200005fc 	.word	0x200005fc
 8005050:	2000063c 	.word	0x2000063c
 8005054:	20000638 	.word	0x20000638
 8005058:	20000634 	.word	0x20000634
	  				  case 4:
	  					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 800505c:	4ba0      	ldr	r3, [pc, #640]	; (80052e0 <main+0xf08>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4aa0      	ldr	r2, [pc, #640]	; (80052e4 <main+0xf0c>)
 8005062:	6013      	str	r3, [r2, #0]
	  					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8005064:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <main+0xf10>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a9e      	ldr	r2, [pc, #632]	; (80052e4 <main+0xf0c>)
 800506a:	6053      	str	r3, [r2, #4]
	  					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 800506c:	4b9f      	ldr	r3, [pc, #636]	; (80052ec <main+0xf14>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a9c      	ldr	r2, [pc, #624]	; (80052e4 <main+0xf0c>)
 8005072:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005074:	4b9e      	ldr	r3, [pc, #632]	; (80052f0 <main+0xf18>)
 8005076:	789b      	ldrb	r3, [r3, #2]
 8005078:	4a9a      	ldr	r2, [pc, #616]	; (80052e4 <main+0xf0c>)
 800507a:	edd2 7a00 	vldr	s15, [r2]
 800507e:	4a99      	ldr	r2, [pc, #612]	; (80052e4 <main+0xf0c>)
 8005080:	ed92 7a01 	vldr	s14, [r2, #4]
 8005084:	4a97      	ldr	r2, [pc, #604]	; (80052e4 <main+0xf0c>)
 8005086:	edd2 6a02 	vldr	s13, [r2, #8]
 800508a:	eeb0 1a66 	vmov.f32	s2, s13
 800508e:	eef0 0a47 	vmov.f32	s1, s14
 8005092:	eeb0 0a67 	vmov.f32	s0, s15
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb ffa0 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 800509c:	4b94      	ldr	r3, [pc, #592]	; (80052f0 <main+0xf18>)
 800509e:	7898      	ldrb	r0, [r3, #2]
 80050a0:	4b94      	ldr	r3, [pc, #592]	; (80052f4 <main+0xf1c>)
 80050a2:	4a95      	ldr	r2, [pc, #596]	; (80052f8 <main+0xf20>)
 80050a4:	498f      	ldr	r1, [pc, #572]	; (80052e4 <main+0xf0c>)
 80050a6:	f7fc f82f 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80050aa:	4b91      	ldr	r3, [pc, #580]	; (80052f0 <main+0xf18>)
 80050ac:	789b      	ldrb	r3, [r3, #2]
 80050ae:	4a8d      	ldr	r2, [pc, #564]	; (80052e4 <main+0xf0c>)
 80050b0:	edd2 7a00 	vldr	s15, [r2]
 80050b4:	4a8b      	ldr	r2, [pc, #556]	; (80052e4 <main+0xf0c>)
 80050b6:	ed92 7a01 	vldr	s14, [r2, #4]
 80050ba:	4a8a      	ldr	r2, [pc, #552]	; (80052e4 <main+0xf0c>)
 80050bc:	edd2 6a02 	vldr	s13, [r2, #8]
 80050c0:	eeb0 1a66 	vmov.f32	s2, s13
 80050c4:	eef0 0a47 	vmov.f32	s1, s14
 80050c8:	eeb0 0a67 	vmov.f32	s0, s15
 80050cc:	4619      	mov	r1, r3
 80050ce:	488b      	ldr	r0, [pc, #556]	; (80052fc <main+0xf24>)
 80050d0:	f002 f8c8 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80050d4:	2214      	movs	r2, #20
 80050d6:	4989      	ldr	r1, [pc, #548]	; (80052fc <main+0xf24>)
 80050d8:	4889      	ldr	r0, [pc, #548]	; (8005300 <main+0xf28>)
 80050da:	f006 f8cc 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 80050de:	e1c2      	b.n	8005466 <main+0x108e>
	  				  case 5:
	  					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 80050e0:	4b7f      	ldr	r3, [pc, #508]	; (80052e0 <main+0xf08>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a87      	ldr	r2, [pc, #540]	; (8005304 <main+0xf2c>)
 80050e6:	6013      	str	r3, [r2, #0]
	  					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 80050e8:	4b7f      	ldr	r3, [pc, #508]	; (80052e8 <main+0xf10>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a85      	ldr	r2, [pc, #532]	; (8005304 <main+0xf2c>)
 80050ee:	6053      	str	r3, [r2, #4]
	  					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 80050f0:	4b7e      	ldr	r3, [pc, #504]	; (80052ec <main+0xf14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a83      	ldr	r2, [pc, #524]	; (8005304 <main+0xf2c>)
 80050f6:	6093      	str	r3, [r2, #8]
	  					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80050f8:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <main+0xf18>)
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	4a81      	ldr	r2, [pc, #516]	; (8005304 <main+0xf2c>)
 80050fe:	edd2 7a00 	vldr	s15, [r2]
 8005102:	4a80      	ldr	r2, [pc, #512]	; (8005304 <main+0xf2c>)
 8005104:	ed92 7a01 	vldr	s14, [r2, #4]
 8005108:	4a7e      	ldr	r2, [pc, #504]	; (8005304 <main+0xf2c>)
 800510a:	edd2 6a02 	vldr	s13, [r2, #8]
 800510e:	eeb0 1a66 	vmov.f32	s2, s13
 8005112:	eef0 0a47 	vmov.f32	s1, s14
 8005116:	eeb0 0a67 	vmov.f32	s0, s15
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb ff5e 	bl	8000fdc <EP_PIDGain_Write>
	  					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8005120:	4b73      	ldr	r3, [pc, #460]	; (80052f0 <main+0xf18>)
 8005122:	7898      	ldrb	r0, [r3, #2]
 8005124:	4b78      	ldr	r3, [pc, #480]	; (8005308 <main+0xf30>)
 8005126:	4a79      	ldr	r2, [pc, #484]	; (800530c <main+0xf34>)
 8005128:	4976      	ldr	r1, [pc, #472]	; (8005304 <main+0xf2c>)
 800512a:	f7fb ffed 	bl	8001108 <EP_PIDGain_Read>
	  					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800512e:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <main+0xf18>)
 8005130:	789b      	ldrb	r3, [r3, #2]
 8005132:	4a74      	ldr	r2, [pc, #464]	; (8005304 <main+0xf2c>)
 8005134:	edd2 7a00 	vldr	s15, [r2]
 8005138:	4a72      	ldr	r2, [pc, #456]	; (8005304 <main+0xf2c>)
 800513a:	ed92 7a01 	vldr	s14, [r2, #4]
 800513e:	4a71      	ldr	r2, [pc, #452]	; (8005304 <main+0xf2c>)
 8005140:	edd2 6a02 	vldr	s13, [r2, #8]
 8005144:	eeb0 1a66 	vmov.f32	s2, s13
 8005148:	eef0 0a47 	vmov.f32	s1, s14
 800514c:	eeb0 0a67 	vmov.f32	s0, s15
 8005150:	4619      	mov	r1, r3
 8005152:	486a      	ldr	r0, [pc, #424]	; (80052fc <main+0xf24>)
 8005154:	f002 f886 	bl	8007264 <Encode_Msg_PID_Gain>
	  					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8005158:	2214      	movs	r2, #20
 800515a:	4968      	ldr	r1, [pc, #416]	; (80052fc <main+0xf24>)
 800515c:	4868      	ldr	r0, [pc, #416]	; (8005300 <main+0xf28>)
 800515e:	f006 f88a 	bl	800b276 <HAL_UART_Transmit_IT>
	  					  break;
 8005162:	e180      	b.n	8005466 <main+0x108e>
	  				  case 0x10:
	  					  switch(telemetry_rx_buf[3]) //Check PID Gain ID of GCS PID Gain Request Message
 8005164:	4b62      	ldr	r3, [pc, #392]	; (80052f0 <main+0xf18>)
 8005166:	78db      	ldrb	r3, [r3, #3]
 8005168:	2b06      	cmp	r3, #6
 800516a:	f200 817b 	bhi.w	8005464 <main+0x108c>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <main+0xd9c>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005191 	.word	0x08005191
 8005178:	080051c9 	.word	0x080051c9
 800517c:	08005201 	.word	0x08005201
 8005180:	08005239 	.word	0x08005239
 8005184:	08005271 	.word	0x08005271
 8005188:	080052a9 	.word	0x080052a9
 800518c:	08005319 	.word	0x08005319
	  					  {
	  					  case 0:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8005190:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <main+0xf18>)
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	4a5e      	ldr	r2, [pc, #376]	; (8005310 <main+0xf38>)
 8005196:	edd2 7a00 	vldr	s15, [r2]
 800519a:	4a5d      	ldr	r2, [pc, #372]	; (8005310 <main+0xf38>)
 800519c:	ed92 7a01 	vldr	s14, [r2, #4]
 80051a0:	4a5b      	ldr	r2, [pc, #364]	; (8005310 <main+0xf38>)
 80051a2:	edd2 6a02 	vldr	s13, [r2, #8]
 80051a6:	eeb0 1a66 	vmov.f32	s2, s13
 80051aa:	eef0 0a47 	vmov.f32	s1, s14
 80051ae:	eeb0 0a67 	vmov.f32	s0, s15
 80051b2:	4619      	mov	r1, r3
 80051b4:	4851      	ldr	r0, [pc, #324]	; (80052fc <main+0xf24>)
 80051b6:	f002 f855 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80051ba:	230a      	movs	r3, #10
 80051bc:	2214      	movs	r2, #20
 80051be:	494f      	ldr	r1, [pc, #316]	; (80052fc <main+0xf24>)
 80051c0:	484f      	ldr	r0, [pc, #316]	; (8005300 <main+0xf28>)
 80051c2:	f005 ffc6 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 80051c6:	e13e      	b.n	8005446 <main+0x106e>
	  					  case 1:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 80051c8:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <main+0xf18>)
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	4a50      	ldr	r2, [pc, #320]	; (8005310 <main+0xf38>)
 80051ce:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80051d2:	4a4f      	ldr	r2, [pc, #316]	; (8005310 <main+0xf38>)
 80051d4:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 80051d8:	4a4d      	ldr	r2, [pc, #308]	; (8005310 <main+0xf38>)
 80051da:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 80051de:	eeb0 1a66 	vmov.f32	s2, s13
 80051e2:	eef0 0a47 	vmov.f32	s1, s14
 80051e6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ea:	4619      	mov	r1, r3
 80051ec:	4843      	ldr	r0, [pc, #268]	; (80052fc <main+0xf24>)
 80051ee:	f002 f839 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80051f2:	230a      	movs	r3, #10
 80051f4:	2214      	movs	r2, #20
 80051f6:	4941      	ldr	r1, [pc, #260]	; (80052fc <main+0xf24>)
 80051f8:	4841      	ldr	r0, [pc, #260]	; (8005300 <main+0xf28>)
 80051fa:	f005 ffaa 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 80051fe:	e122      	b.n	8005446 <main+0x106e>
	  					  case 2:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8005200:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <main+0xf18>)
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	4a43      	ldr	r2, [pc, #268]	; (8005314 <main+0xf3c>)
 8005206:	edd2 7a00 	vldr	s15, [r2]
 800520a:	4a42      	ldr	r2, [pc, #264]	; (8005314 <main+0xf3c>)
 800520c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005210:	4a40      	ldr	r2, [pc, #256]	; (8005314 <main+0xf3c>)
 8005212:	edd2 6a02 	vldr	s13, [r2, #8]
 8005216:	eeb0 1a66 	vmov.f32	s2, s13
 800521a:	eef0 0a47 	vmov.f32	s1, s14
 800521e:	eeb0 0a67 	vmov.f32	s0, s15
 8005222:	4619      	mov	r1, r3
 8005224:	4835      	ldr	r0, [pc, #212]	; (80052fc <main+0xf24>)
 8005226:	f002 f81d 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800522a:	230a      	movs	r3, #10
 800522c:	2214      	movs	r2, #20
 800522e:	4933      	ldr	r1, [pc, #204]	; (80052fc <main+0xf24>)
 8005230:	4833      	ldr	r0, [pc, #204]	; (8005300 <main+0xf28>)
 8005232:	f005 ff8e 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 8005236:	e106      	b.n	8005446 <main+0x106e>
	  					  case 3:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8005238:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <main+0xf18>)
 800523a:	78db      	ldrb	r3, [r3, #3]
 800523c:	4a35      	ldr	r2, [pc, #212]	; (8005314 <main+0xf3c>)
 800523e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <main+0xf3c>)
 8005244:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8005248:	4a32      	ldr	r2, [pc, #200]	; (8005314 <main+0xf3c>)
 800524a:	edd2 6a11 	vldr	s13, [r2, #68]	; 0x44
 800524e:	eeb0 1a66 	vmov.f32	s2, s13
 8005252:	eef0 0a47 	vmov.f32	s1, s14
 8005256:	eeb0 0a67 	vmov.f32	s0, s15
 800525a:	4619      	mov	r1, r3
 800525c:	4827      	ldr	r0, [pc, #156]	; (80052fc <main+0xf24>)
 800525e:	f002 f801 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005262:	230a      	movs	r3, #10
 8005264:	2214      	movs	r2, #20
 8005266:	4925      	ldr	r1, [pc, #148]	; (80052fc <main+0xf24>)
 8005268:	4825      	ldr	r0, [pc, #148]	; (8005300 <main+0xf28>)
 800526a:	f005 ff72 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 800526e:	e0ea      	b.n	8005446 <main+0x106e>
	  					  case 4:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005270:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <main+0xf18>)
 8005272:	78db      	ldrb	r3, [r3, #3]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <main+0xf0c>)
 8005276:	edd2 7a00 	vldr	s15, [r2]
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <main+0xf0c>)
 800527c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <main+0xf0c>)
 8005282:	edd2 6a02 	vldr	s13, [r2, #8]
 8005286:	eeb0 1a66 	vmov.f32	s2, s13
 800528a:	eef0 0a47 	vmov.f32	s1, s14
 800528e:	eeb0 0a67 	vmov.f32	s0, s15
 8005292:	4619      	mov	r1, r3
 8005294:	4819      	ldr	r0, [pc, #100]	; (80052fc <main+0xf24>)
 8005296:	f001 ffe5 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800529a:	230a      	movs	r3, #10
 800529c:	2214      	movs	r2, #20
 800529e:	4917      	ldr	r1, [pc, #92]	; (80052fc <main+0xf24>)
 80052a0:	4817      	ldr	r0, [pc, #92]	; (8005300 <main+0xf28>)
 80052a2:	f005 ff56 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 80052a6:	e0ce      	b.n	8005446 <main+0x106e>
	  					  case 5:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <main+0xf18>)
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <main+0xf2c>)
 80052ae:	edd2 7a00 	vldr	s15, [r2]
 80052b2:	4a14      	ldr	r2, [pc, #80]	; (8005304 <main+0xf2c>)
 80052b4:	ed92 7a01 	vldr	s14, [r2, #4]
 80052b8:	4a12      	ldr	r2, [pc, #72]	; (8005304 <main+0xf2c>)
 80052ba:	edd2 6a02 	vldr	s13, [r2, #8]
 80052be:	eeb0 1a66 	vmov.f32	s2, s13
 80052c2:	eef0 0a47 	vmov.f32	s1, s14
 80052c6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ca:	4619      	mov	r1, r3
 80052cc:	480b      	ldr	r0, [pc, #44]	; (80052fc <main+0xf24>)
 80052ce:	f001 ffc9 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80052d2:	230a      	movs	r3, #10
 80052d4:	2214      	movs	r2, #20
 80052d6:	4909      	ldr	r1, [pc, #36]	; (80052fc <main+0xf24>)
 80052d8:	4809      	ldr	r0, [pc, #36]	; (8005300 <main+0xf28>)
 80052da:	f005 ff3a 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 80052de:	e0b2      	b.n	8005446 <main+0x106e>
 80052e0:	20000783 	.word	0x20000783
 80052e4:	200005bc 	.word	0x200005bc
 80052e8:	20000787 	.word	0x20000787
 80052ec:	2000078b 	.word	0x2000078b
 80052f0:	20000780 	.word	0x20000780
 80052f4:	200005c4 	.word	0x200005c4
 80052f8:	200005c0 	.word	0x200005c0
 80052fc:	2000079c 	.word	0x2000079c
 8005300:	20000878 	.word	0x20000878
 8005304:	20000418 	.word	0x20000418
 8005308:	20000420 	.word	0x20000420
 800530c:	2000041c 	.word	0x2000041c
 8005310:	20000670 	.word	0x20000670
 8005314:	200005f8 	.word	0x200005f8
	  					  case 6:
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8005318:	4b4c      	ldr	r3, [pc, #304]	; (800544c <main+0x1074>)
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	4b4b      	ldr	r3, [pc, #300]	; (800544c <main+0x1074>)
 8005320:	ed93 7a01 	vldr	s14, [r3, #4]
 8005324:	4b49      	ldr	r3, [pc, #292]	; (800544c <main+0x1074>)
 8005326:	edd3 6a02 	vldr	s13, [r3, #8]
 800532a:	eeb0 1a66 	vmov.f32	s2, s13
 800532e:	eef0 0a47 	vmov.f32	s1, s14
 8005332:	eeb0 0a67 	vmov.f32	s0, s15
 8005336:	2100      	movs	r1, #0
 8005338:	4845      	ldr	r0, [pc, #276]	; (8005450 <main+0x1078>)
 800533a:	f001 ff93 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800533e:	230a      	movs	r3, #10
 8005340:	2214      	movs	r2, #20
 8005342:	4943      	ldr	r1, [pc, #268]	; (8005450 <main+0x1078>)
 8005344:	4843      	ldr	r0, [pc, #268]	; (8005454 <main+0x107c>)
 8005346:	f005 ff04 	bl	800b152 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <main+0x1074>)
 800534c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005350:	4b3e      	ldr	r3, [pc, #248]	; (800544c <main+0x1074>)
 8005352:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <main+0x1074>)
 8005358:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800535c:	eeb0 1a66 	vmov.f32	s2, s13
 8005360:	eef0 0a47 	vmov.f32	s1, s14
 8005364:	eeb0 0a67 	vmov.f32	s0, s15
 8005368:	2101      	movs	r1, #1
 800536a:	4839      	ldr	r0, [pc, #228]	; (8005450 <main+0x1078>)
 800536c:	f001 ff7a 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005370:	230a      	movs	r3, #10
 8005372:	2214      	movs	r2, #20
 8005374:	4936      	ldr	r1, [pc, #216]	; (8005450 <main+0x1078>)
 8005376:	4837      	ldr	r0, [pc, #220]	; (8005454 <main+0x107c>)
 8005378:	f005 feeb 	bl	800b152 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 800537c:	4b36      	ldr	r3, [pc, #216]	; (8005458 <main+0x1080>)
 800537e:	edd3 7a00 	vldr	s15, [r3]
 8005382:	4b35      	ldr	r3, [pc, #212]	; (8005458 <main+0x1080>)
 8005384:	ed93 7a01 	vldr	s14, [r3, #4]
 8005388:	4b33      	ldr	r3, [pc, #204]	; (8005458 <main+0x1080>)
 800538a:	edd3 6a02 	vldr	s13, [r3, #8]
 800538e:	eeb0 1a66 	vmov.f32	s2, s13
 8005392:	eef0 0a47 	vmov.f32	s1, s14
 8005396:	eeb0 0a67 	vmov.f32	s0, s15
 800539a:	2102      	movs	r1, #2
 800539c:	482c      	ldr	r0, [pc, #176]	; (8005450 <main+0x1078>)
 800539e:	f001 ff61 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053a2:	230a      	movs	r3, #10
 80053a4:	2214      	movs	r2, #20
 80053a6:	492a      	ldr	r1, [pc, #168]	; (8005450 <main+0x1078>)
 80053a8:	482a      	ldr	r0, [pc, #168]	; (8005454 <main+0x107c>)
 80053aa:	f005 fed2 	bl	800b152 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <main+0x1080>)
 80053b0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80053b4:	4b28      	ldr	r3, [pc, #160]	; (8005458 <main+0x1080>)
 80053b6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <main+0x1080>)
 80053bc:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80053c0:	eeb0 1a66 	vmov.f32	s2, s13
 80053c4:	eef0 0a47 	vmov.f32	s1, s14
 80053c8:	eeb0 0a67 	vmov.f32	s0, s15
 80053cc:	2103      	movs	r1, #3
 80053ce:	4820      	ldr	r0, [pc, #128]	; (8005450 <main+0x1078>)
 80053d0:	f001 ff48 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80053d4:	230a      	movs	r3, #10
 80053d6:	2214      	movs	r2, #20
 80053d8:	491d      	ldr	r1, [pc, #116]	; (8005450 <main+0x1078>)
 80053da:	481e      	ldr	r0, [pc, #120]	; (8005454 <main+0x107c>)
 80053dc:	f005 feb9 	bl	800b152 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <main+0x1084>)
 80053e2:	edd3 7a00 	vldr	s15, [r3]
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <main+0x1084>)
 80053e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <main+0x1084>)
 80053ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80053f2:	eeb0 1a66 	vmov.f32	s2, s13
 80053f6:	eef0 0a47 	vmov.f32	s1, s14
 80053fa:	eeb0 0a67 	vmov.f32	s0, s15
 80053fe:	2104      	movs	r1, #4
 8005400:	4813      	ldr	r0, [pc, #76]	; (8005450 <main+0x1078>)
 8005402:	f001 ff2f 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005406:	230a      	movs	r3, #10
 8005408:	2214      	movs	r2, #20
 800540a:	4911      	ldr	r1, [pc, #68]	; (8005450 <main+0x1078>)
 800540c:	4811      	ldr	r0, [pc, #68]	; (8005454 <main+0x107c>)
 800540e:	f005 fea0 	bl	800b152 <HAL_UART_Transmit>
	  						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <main+0x1088>)
 8005414:	edd3 7a00 	vldr	s15, [r3]
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <main+0x1088>)
 800541a:	ed93 7a01 	vldr	s14, [r3, #4]
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <main+0x1088>)
 8005420:	edd3 6a02 	vldr	s13, [r3, #8]
 8005424:	eeb0 1a66 	vmov.f32	s2, s13
 8005428:	eef0 0a47 	vmov.f32	s1, s14
 800542c:	eeb0 0a67 	vmov.f32	s0, s15
 8005430:	2105      	movs	r1, #5
 8005432:	4807      	ldr	r0, [pc, #28]	; (8005450 <main+0x1078>)
 8005434:	f001 ff16 	bl	8007264 <Encode_Msg_PID_Gain>
	  						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005438:	230a      	movs	r3, #10
 800543a:	2214      	movs	r2, #20
 800543c:	4904      	ldr	r1, [pc, #16]	; (8005450 <main+0x1078>)
 800543e:	4805      	ldr	r0, [pc, #20]	; (8005454 <main+0x107c>)
 8005440:	f005 fe87 	bl	800b152 <HAL_UART_Transmit>
	  						  break;
 8005444:	bf00      	nop
	  					  }
	  					  break;
 8005446:	e00d      	b.n	8005464 <main+0x108c>
	  				  }
	  			  }
 8005448:	bf00      	nop
 800544a:	e00c      	b.n	8005466 <main+0x108e>
 800544c:	20000670 	.word	0x20000670
 8005450:	2000079c 	.word	0x2000079c
 8005454:	20000878 	.word	0x20000878
 8005458:	200005f8 	.word	0x200005f8
 800545c:	200005bc 	.word	0x200005bc
 8005460:	20000418 	.word	0x20000418
	  					  break;
 8005464:	bf00      	nop
	  		  }
	  	  }


	  /********************* Flight Mode Detection / ESC Control / PID Calculation ************************/
	  if(tim7_1ms_flag==1)
 8005466:	4b9b      	ldr	r3, [pc, #620]	; (80056d4 <main+0x12fc>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	f041 8177 	bne.w	800675e <main+0x2386>
	  {
		  tim7_1ms_flag = 0;
 8005470:	4b98      	ldr	r3, [pc, #608]	; (80056d4 <main+0x12fc>)
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]

		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500)*0.07f, BNO080_Pitch, ICM20602.gyro_x);
 8005476:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <main+0x1300>)
 8005478:	885b      	ldrh	r3, [r3, #2]
 800547a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005486:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80056dc <main+0x1304>
 800548a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800548e:	4b94      	ldr	r3, [pc, #592]	; (80056e0 <main+0x1308>)
 8005490:	ed93 7a00 	vldr	s14, [r3]
 8005494:	4b93      	ldr	r3, [pc, #588]	; (80056e4 <main+0x130c>)
 8005496:	edd3 6a07 	vldr	s13, [r3, #28]
 800549a:	eeb0 1a66 	vmov.f32	s2, s13
 800549e:	eef0 0a47 	vmov.f32	s1, s14
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	4890      	ldr	r0, [pc, #576]	; (80056e8 <main+0x1310>)
 80054a8:	f7fd fe9c 	bl	80031e4 <Double_Roll_Pitch_PID_Calculation>
		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500)*0.07f, BNO080_Roll, ICM20602.gyro_y);
 80054ac:	4b8a      	ldr	r3, [pc, #552]	; (80056d8 <main+0x1300>)
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054bc:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80056dc <main+0x1304>
 80054c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054c4:	4b89      	ldr	r3, [pc, #548]	; (80056ec <main+0x1314>)
 80054c6:	ed93 7a00 	vldr	s14, [r3]
 80054ca:	4b86      	ldr	r3, [pc, #536]	; (80056e4 <main+0x130c>)
 80054cc:	edd3 6a08 	vldr	s13, [r3, #32]
 80054d0:	eeb0 1a66 	vmov.f32	s2, s13
 80054d4:	eef0 0a47 	vmov.f32	s1, s14
 80054d8:	eeb0 0a67 	vmov.f32	s0, s15
 80054dc:	4884      	ldr	r0, [pc, #528]	; (80056f0 <main+0x1318>)
 80054de:	f7fd fe81 	bl	80031e4 <Double_Roll_Pitch_PID_Calculation>

		  if(iBus.SwA == 2000 && iBus.SwB == 1000 && iBus.SwD == 2000 && iBus.LV < 1550 && iBus.LV > 1450) //Altitude Holding Mode
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <main+0x1300>)
 80054e4:	891b      	ldrh	r3, [r3, #8]
 80054e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054ea:	f040 81e7 	bne.w	80058bc <main+0x14e4>
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <main+0x1300>)
 80054f0:	895b      	ldrh	r3, [r3, #10]
 80054f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f6:	f040 81e1 	bne.w	80058bc <main+0x14e4>
 80054fa:	4b77      	ldr	r3, [pc, #476]	; (80056d8 <main+0x1300>)
 80054fc:	89db      	ldrh	r3, [r3, #14]
 80054fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005502:	f040 81db 	bne.w	80058bc <main+0x14e4>
 8005506:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <main+0x1300>)
 8005508:	889b      	ldrh	r3, [r3, #4]
 800550a:	f240 620d 	movw	r2, #1549	; 0x60d
 800550e:	4293      	cmp	r3, r2
 8005510:	f200 81d4 	bhi.w	80058bc <main+0x14e4>
 8005514:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <main+0x1300>)
 8005516:	889b      	ldrh	r3, [r3, #4]
 8005518:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800551c:	4293      	cmp	r3, r2
 800551e:	f240 81cd 	bls.w	80058bc <main+0x14e4>
		  {
			  Double_Altitude_PID_Calculation(&altitude, last_altitude, actual_pressure_fast);
 8005522:	4b74      	ldr	r3, [pc, #464]	; (80056f4 <main+0x131c>)
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <main+0x1320>)
 800552a:	ed93 7a00 	vldr	s14, [r3]
 800552e:	eef0 0a47 	vmov.f32	s1, s14
 8005532:	eeb0 0a67 	vmov.f32	s0, s15
 8005536:	4871      	ldr	r0, [pc, #452]	; (80056fc <main+0x1324>)
 8005538:	f7fe f8f4 	bl	8003724 <Double_Altitude_PID_Calculation>

			  if(iBus.LH < 1485 || iBus.LH > 1515)
 800553c:	4b66      	ldr	r3, [pc, #408]	; (80056d8 <main+0x1300>)
 800553e:	88db      	ldrh	r3, [r3, #6]
 8005540:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <main+0x117e>
 8005548:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <main+0x1300>)
 800554a:	88db      	ldrh	r3, [r3, #6]
 800554c:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8005550:	4293      	cmp	r3, r2
 8005552:	f240 80e3 	bls.w	800571c <main+0x1344>
			  {
				  yaw_heading_reference = BNO080_Yaw;
 8005556:	4b6a      	ldr	r3, [pc, #424]	; (8005700 <main+0x1328>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
				  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH-1500), ICM20602.gyro_z);
 800555c:	4b5e      	ldr	r3, [pc, #376]	; (80056d8 <main+0x1300>)
 800555e:	88db      	ldrh	r3, [r3, #6]
 8005560:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800556c:	4b5d      	ldr	r3, [pc, #372]	; (80056e4 <main+0x130c>)
 800556e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005572:	eef0 0a47 	vmov.f32	s1, s14
 8005576:	eeb0 0a67 	vmov.f32	s0, s15
 800557a:	4862      	ldr	r0, [pc, #392]	; (8005704 <main+0x132c>)
 800557c:	f7fe f80e 	bl	800359c <Single_Yaw_Rate_PID_Calculation>

				  ccr1 = 84000 + landing_throttle - pitch.in.pid_result + roll.in.pid_result -yaw_rate.pid_result+altitude.in.pid_result;
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005586:	3320      	adds	r3, #32
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005590:	4b55      	ldr	r3, [pc, #340]	; (80056e8 <main+0x1310>)
 8005592:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800559a:	4b55      	ldr	r3, [pc, #340]	; (80056f0 <main+0x1318>)
 800559c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a4:	4b57      	ldr	r3, [pc, #348]	; (8005704 <main+0x132c>)
 80055a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ae:	4b53      	ldr	r3, [pc, #332]	; (80056fc <main+0x1324>)
 80055b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055bc:	ee17 2a90 	vmov	r2, s15
 80055c0:	4b51      	ldr	r3, [pc, #324]	; (8005708 <main+0x1330>)
 80055c2:	601a      	str	r2, [r3, #0]
				  ccr2 = 84000 + landing_throttle + pitch.in.pid_result + roll.in.pid_result +yaw_rate.pid_result+altitude.in.pid_result;
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80055ca:	3320      	adds	r3, #32
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055d4:	4b44      	ldr	r3, [pc, #272]	; (80056e8 <main+0x1310>)
 80055d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055de:	4b44      	ldr	r3, [pc, #272]	; (80056f0 <main+0x1318>)
 80055e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <main+0x132c>)
 80055ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055f2:	4b42      	ldr	r3, [pc, #264]	; (80056fc <main+0x1324>)
 80055f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005600:	ee17 2a90 	vmov	r2, s15
 8005604:	4b41      	ldr	r3, [pc, #260]	; (800570c <main+0x1334>)
 8005606:	601a      	str	r2, [r3, #0]
				  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 8005608:	4b40      	ldr	r3, [pc, #256]	; (800570c <main+0x1334>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005710 <main+0x1338>
 8005618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800561c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005620:	ee17 2a90 	vmov	r2, s15
 8005624:	4b39      	ldr	r3, [pc, #228]	; (800570c <main+0x1334>)
 8005626:	601a      	str	r2, [r3, #0]
				  ccr3 = 84000 + landing_throttle + pitch.in.pid_result - roll.in.pid_result -yaw_rate.pid_result+altitude.in.pid_result;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800562e:	3320      	adds	r3, #32
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <main+0x1310>)
 800563a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800563e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005642:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <main+0x1318>)
 8005644:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <main+0x132c>)
 800564e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005656:	4b29      	ldr	r3, [pc, #164]	; (80056fc <main+0x1324>)
 8005658:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800565c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005664:	ee17 2a90 	vmov	r2, s15
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <main+0x133c>)
 800566a:	601a      	str	r2, [r3, #0]
				  ccr4 = 84000 + landing_throttle - pitch.in.pid_result - roll.in.pid_result +yaw_rate.pid_result+altitude.in.pid_result;
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005672:	3320      	adds	r3, #32
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <main+0x1310>)
 800567e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <main+0x1318>)
 8005688:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800568c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005690:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <main+0x132c>)
 8005692:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <main+0x1324>)
 800569c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80056a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a8:	ee17 2a90 	vmov	r2, s15
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <main+0x1340>)
 80056ae:	601a      	str	r2, [r3, #0]
				  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <main+0x1340>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056bc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005710 <main+0x1338>
 80056c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c8:	ee17 2a90 	vmov	r2, s15
 80056cc:	4b12      	ldr	r3, [pc, #72]	; (8005718 <main+0x1340>)
 80056ce:	601a      	str	r2, [r3, #0]
			  if(iBus.LH < 1485 || iBus.LH > 1515)
 80056d0:	f001 b83b 	b.w	800674a <main+0x2372>
 80056d4:	20000282 	.word	0x20000282
 80056d8:	20000384 	.word	0x20000384
 80056dc:	3d8f5c29 	.word	0x3d8f5c29
 80056e0:	200006f0 	.word	0x200006f0
 80056e4:	200003a8 	.word	0x200003a8
 80056e8:	200005f8 	.word	0x200005f8
 80056ec:	200006e8 	.word	0x200006e8
 80056f0:	20000670 	.word	0x20000670
 80056f4:	20000760 	.word	0x20000760
 80056f8:	20000270 	.word	0x20000270
 80056fc:	20000544 	.word	0x20000544
 8005700:	200006ec 	.word	0x200006ec
 8005704:	20000418 	.word	0x20000418
 8005708:	2000075c 	.word	0x2000075c
 800570c:	20000770 	.word	0x20000770
 8005710:	3f68f5c3 	.word	0x3f68f5c3
 8005714:	20000798 	.word	0x20000798
 8005718:	20000774 	.word	0x20000774
			  }
			  else
			  {
				  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 800571c:	4b5c      	ldr	r3, [pc, #368]	; (8005890 <main+0x14b8>)
 800571e:	edd3 7a00 	vldr	s15, [r3]
 8005722:	4b5c      	ldr	r3, [pc, #368]	; (8005894 <main+0x14bc>)
 8005724:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005728:	eeb0 1a47 	vmov.f32	s2, s14
 800572c:	eef0 0a67 	vmov.f32	s1, s15
 8005730:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8005734:	4858      	ldr	r0, [pc, #352]	; (8005898 <main+0x14c0>)
 8005736:	f7fd fe97 	bl	8003468 <Single_Yaw_Heading_PID_Calculation>
				  ccr1 = 84000 + landing_throttle - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005740:	3320      	adds	r3, #32
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800574a:	4b54      	ldr	r3, [pc, #336]	; (800589c <main+0x14c4>)
 800574c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005754:	4b52      	ldr	r3, [pc, #328]	; (80058a0 <main+0x14c8>)
 8005756:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800575a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575e:	4b4e      	ldr	r3, [pc, #312]	; (8005898 <main+0x14c0>)
 8005760:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005768:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <main+0x14cc>)
 800576a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800576e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005776:	ee17 2a90 	vmov	r2, s15
 800577a:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <main+0x14d0>)
 800577c:	601a      	str	r2, [r3, #0]
				  ccr2 = 84000 + landing_throttle + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005784:	3320      	adds	r3, #32
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800578e:	4b43      	ldr	r3, [pc, #268]	; (800589c <main+0x14c4>)
 8005790:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <main+0x14c8>)
 800579a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800579e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057a2:	4b3d      	ldr	r3, [pc, #244]	; (8005898 <main+0x14c0>)
 80057a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ac:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <main+0x14cc>)
 80057ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ba:	ee17 2a90 	vmov	r2, s15
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <main+0x14d4>)
 80057c0:	601a      	str	r2, [r3, #0]
				  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 80057c2:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <main+0x14d4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80058b0 <main+0x14d8>
 80057d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057da:	ee17 2a90 	vmov	r2, s15
 80057de:	4b33      	ldr	r3, [pc, #204]	; (80058ac <main+0x14d4>)
 80057e0:	601a      	str	r2, [r3, #0]
				  ccr3 = 84000 + landing_throttle + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80057e8:	3320      	adds	r3, #32
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057f2:	4b2a      	ldr	r3, [pc, #168]	; (800589c <main+0x14c4>)
 80057f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80057f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057fc:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <main+0x14c8>)
 80057fe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005802:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <main+0x14c0>)
 8005808:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800580c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005810:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <main+0x14cc>)
 8005812:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800581a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581e:	ee17 2a90 	vmov	r2, s15
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <main+0x14dc>)
 8005824:	601a      	str	r2, [r3, #0]
				  ccr4 = 84000 + landing_throttle - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 800582c:	3320      	adds	r3, #32
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005836:	4b19      	ldr	r3, [pc, #100]	; (800589c <main+0x14c4>)
 8005838:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800583c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <main+0x14c8>)
 8005842:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005846:	ee37 7a67 	vsub.f32	s14, s14, s15
 800584a:	4b13      	ldr	r3, [pc, #76]	; (8005898 <main+0x14c0>)
 800584c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <main+0x14cc>)
 8005856:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800585a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800585e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005862:	ee17 2a90 	vmov	r2, s15
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <main+0x14e0>)
 8005868:	601a      	str	r2, [r3, #0]
				  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 800586a:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <main+0x14e0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80058b0 <main+0x14d8>
 800587a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800587e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005882:	ee17 2a90 	vmov	r2, s15
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <main+0x14e0>)
 8005888:	601a      	str	r2, [r3, #0]
			  if(iBus.LH < 1485 || iBus.LH > 1515)
 800588a:	f000 bf5e 	b.w	800674a <main+0x2372>
 800588e:	bf00      	nop
 8005890:	200006ec 	.word	0x200006ec
 8005894:	200003a8 	.word	0x200003a8
 8005898:	200005bc 	.word	0x200005bc
 800589c:	200005f8 	.word	0x200005f8
 80058a0:	20000670 	.word	0x20000670
 80058a4:	20000544 	.word	0x20000544
 80058a8:	2000075c 	.word	0x2000075c
 80058ac:	20000770 	.word	0x20000770
 80058b0:	3f68f5c3 	.word	0x3f68f5c3
 80058b4:	20000798 	.word	0x20000798
 80058b8:	20000774 	.word	0x20000774
			  }
		  }


		  else if(iBus.SwA == 2000 && iBus.SwB == 2000 && iBus.LV < 1550 && iBus.LV > 1450) //GPS holding Mode
 80058bc:	4bc7      	ldr	r3, [pc, #796]	; (8005bdc <main+0x1804>)
 80058be:	891b      	ldrh	r3, [r3, #8]
 80058c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058c4:	f040 8456 	bne.w	8006174 <main+0x1d9c>
 80058c8:	4bc4      	ldr	r3, [pc, #784]	; (8005bdc <main+0x1804>)
 80058ca:	895b      	ldrh	r3, [r3, #10]
 80058cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058d0:	f040 8450 	bne.w	8006174 <main+0x1d9c>
 80058d4:	4bc1      	ldr	r3, [pc, #772]	; (8005bdc <main+0x1804>)
 80058d6:	889b      	ldrh	r3, [r3, #4]
 80058d8:	f240 620d 	movw	r2, #1549	; 0x60d
 80058dc:	4293      	cmp	r3, r2
 80058de:	f200 8449 	bhi.w	8006174 <main+0x1d9c>
 80058e2:	4bbe      	ldr	r3, [pc, #760]	; (8005bdc <main+0x1804>)
 80058e4:	889b      	ldrh	r3, [r3, #4]
 80058e6:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f240 8442 	bls.w	8006174 <main+0x1d9c>
		  {
			  Double_GPS_PID_Calculation(&gps_lon, last_lon, posllh.lon);
 80058f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	4bb9      	ldr	r3, [pc, #740]	; (8005be0 <main+0x1808>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	ee07 3a10 	vmov	s14, r3
 8005902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005906:	eef0 0a47 	vmov.f32	s1, s14
 800590a:	eeb0 0a67 	vmov.f32	s0, s15
 800590e:	48b5      	ldr	r0, [pc, #724]	; (8005be4 <main+0x180c>)
 8005910:	f7fe f876 	bl	8003a00 <Double_GPS_PID_Calculation>
			  Double_GPS_PID_Calculation(&gps_lat, last_lat, posllh.lat);
 8005914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	4bb0      	ldr	r3, [pc, #704]	; (8005be0 <main+0x1808>)
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	ee07 3a10 	vmov	s14, r3
 8005926:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800592a:	eef0 0a47 	vmov.f32	s1, s14
 800592e:	eeb0 0a67 	vmov.f32	s0, s15
 8005932:	48ad      	ldr	r0, [pc, #692]	; (8005be8 <main+0x1810>)
 8005934:	f7fe f864 	bl	8003a00 <Double_GPS_PID_Calculation>
			  Double_Altitude_PID_Calculation(&altitude, last_altitude, actual_pressure_fast);
 8005938:	4bac      	ldr	r3, [pc, #688]	; (8005bec <main+0x1814>)
 800593a:	edd3 7a00 	vldr	s15, [r3]
 800593e:	4bac      	ldr	r3, [pc, #688]	; (8005bf0 <main+0x1818>)
 8005940:	ed93 7a00 	vldr	s14, [r3]
 8005944:	eef0 0a47 	vmov.f32	s1, s14
 8005948:	eeb0 0a67 	vmov.f32	s0, s15
 800594c:	48a9      	ldr	r0, [pc, #676]	; (8005bf4 <main+0x181c>)
 800594e:	f7fd fee9 	bl	8003724 <Double_Altitude_PID_Calculation>

			  if ( (abs(iBus.RH-1500) < 50) && (abs(iBus.RV-1500) <50))
 8005952:	4ba2      	ldr	r3, [pc, #648]	; (8005bdc <main+0x1804>)
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800595a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800595e:	f2c0 834d 	blt.w	8005ffc <main+0x1c24>
 8005962:	4b9e      	ldr	r3, [pc, #632]	; (8005bdc <main+0x1804>)
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800596a:	2b31      	cmp	r3, #49	; 0x31
 800596c:	f300 8346 	bgt.w	8005ffc <main+0x1c24>
 8005970:	4b9a      	ldr	r3, [pc, #616]	; (8005bdc <main+0x1804>)
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005978:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800597c:	f2c0 833e 	blt.w	8005ffc <main+0x1c24>
 8005980:	4b96      	ldr	r3, [pc, #600]	; (8005bdc <main+0x1804>)
 8005982:	885b      	ldrh	r3, [r3, #2]
 8005984:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005988:	2b31      	cmp	r3, #49	; 0x31
 800598a:	f300 8337 	bgt.w	8005ffc <main+0x1c24>
			  {
				  Single_Yaw_Heading_PID_Calculation(&yaw_heading, 0 , BNO080_Yaw, ICM20602.gyro_z);
 800598e:	4b9a      	ldr	r3, [pc, #616]	; (8005bf8 <main+0x1820>)
 8005990:	edd3 7a00 	vldr	s15, [r3]
 8005994:	4b99      	ldr	r3, [pc, #612]	; (8005bfc <main+0x1824>)
 8005996:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800599a:	eeb0 1a47 	vmov.f32	s2, s14
 800599e:	eef0 0a67 	vmov.f32	s1, s15
 80059a2:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8005c00 <main+0x1828>
 80059a6:	4897      	ldr	r0, [pc, #604]	; (8005c04 <main+0x182c>)
 80059a8:	f7fd fd5e 	bl	8003468 <Single_Yaw_Heading_PID_Calculation>
				  ccr1 = 84000 + landing_throttle - gps_lon.in.pid_result * (-sin(theta_radian)) + gps_lat.in.pid_result * cos(theta_radian) + gps_lon.in.pid_result * cos(theta_radian) + gps_lat.in.pid_result * sin(theta_radian) -yaw_heading.pid_result  + altitude.in.pid_result;
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80059b2:	3320      	adds	r3, #32
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fa fda5 	bl	8000504 <__aeabi_ui2d>
 80059ba:	4682      	mov	sl, r0
 80059bc:	468b      	mov	fp, r1
 80059be:	4b89      	ldr	r3, [pc, #548]	; (8005be4 <main+0x180c>)
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fa fdc0 	bl	8000548 <__aeabi_f2d>
 80059c8:	e9c7 0100 	strd	r0, r1, [r7]
 80059cc:	4b8e      	ldr	r3, [pc, #568]	; (8005c08 <main+0x1830>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fa fdb9 	bl	8000548 <__aeabi_f2d>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	ec43 2b10 	vmov	d0, r2, r3
 80059de:	f00a f96b 	bl	800fcb8 <sin>
 80059e2:	ec53 2b10 	vmov	r2, r3, d0
 80059e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ea:	f7fa fe05 	bl	80005f8 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4650      	mov	r0, sl
 80059f4:	4659      	mov	r1, fp
 80059f6:	f7fa fc49 	bl	800028c <__adddf3>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	e9c7 2300 	strd	r2, r3, [r7]
 8005a02:	4b79      	ldr	r3, [pc, #484]	; (8005be8 <main+0x1810>)
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fa fd9e 	bl	8000548 <__aeabi_f2d>
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	468b      	mov	fp, r1
 8005a10:	4b7d      	ldr	r3, [pc, #500]	; (8005c08 <main+0x1830>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fa fd97 	bl	8000548 <__aeabi_f2d>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	ec43 2b10 	vmov	d0, r2, r3
 8005a22:	f00a f8f9 	bl	800fc18 <cos>
 8005a26:	ec53 2b10 	vmov	r2, r3, d0
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	f7fa fde3 	bl	80005f8 <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a3a:	f7fa fc27 	bl	800028c <__adddf3>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	e9c7 2300 	strd	r2, r3, [r7]
 8005a46:	4b67      	ldr	r3, [pc, #412]	; (8005be4 <main+0x180c>)
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fa fd7c 	bl	8000548 <__aeabi_f2d>
 8005a50:	4682      	mov	sl, r0
 8005a52:	468b      	mov	fp, r1
 8005a54:	4b6c      	ldr	r3, [pc, #432]	; (8005c08 <main+0x1830>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fa fd75 	bl	8000548 <__aeabi_f2d>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	ec43 2b10 	vmov	d0, r2, r3
 8005a66:	f00a f8d7 	bl	800fc18 <cos>
 8005a6a:	ec53 2b10 	vmov	r2, r3, d0
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	f7fa fdc1 	bl	80005f8 <__aeabi_dmul>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7e:	f7fa fc05 	bl	800028c <__adddf3>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9c7 2300 	strd	r2, r3, [r7]
 8005a8a:	4b57      	ldr	r3, [pc, #348]	; (8005be8 <main+0x1810>)
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa fd5a 	bl	8000548 <__aeabi_f2d>
 8005a94:	4682      	mov	sl, r0
 8005a96:	468b      	mov	fp, r1
 8005a98:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <main+0x1830>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fa fd53 	bl	8000548 <__aeabi_f2d>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	ec43 2b10 	vmov	d0, r2, r3
 8005aaa:	f00a f905 	bl	800fcb8 <sin>
 8005aae:	ec53 2b10 	vmov	r2, r3, d0
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	f7fa fd9f 	bl	80005f8 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac2:	f7fa fbe3 	bl	800028c <__adddf3>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4692      	mov	sl, r2
 8005acc:	469b      	mov	fp, r3
 8005ace:	4b4d      	ldr	r3, [pc, #308]	; (8005c04 <main+0x182c>)
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fd38 	bl	8000548 <__aeabi_f2d>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4650      	mov	r0, sl
 8005ade:	4659      	mov	r1, fp
 8005ae0:	f7fa fbd2 	bl	8000288 <__aeabi_dsub>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4692      	mov	sl, r2
 8005aea:	469b      	mov	fp, r3
 8005aec:	4b41      	ldr	r3, [pc, #260]	; (8005bf4 <main+0x181c>)
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fa fd29 	bl	8000548 <__aeabi_f2d>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4650      	mov	r0, sl
 8005afc:	4659      	mov	r1, fp
 8005afe:	f7fa fbc5 	bl	800028c <__adddf3>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f7fb f84d 	bl	8000ba8 <__aeabi_d2uiz>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4a3e      	ldr	r2, [pc, #248]	; (8005c0c <main+0x1834>)
 8005b12:	6013      	str	r3, [r2, #0]
				  ccr2 = 84000 + landing_throttle + gps_lon.in.pid_result * (-sin(theta_radian)) + gps_lat.in.pid_result * cos(theta_radian) + gps_lon.in.pid_result * cos(theta_radian) + gps_lat.in.pid_result * sin(theta_radian) +yaw_heading.pid_result  + altitude.in.pid_result;
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005b1a:	3320      	adds	r3, #32
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fa fcf1 	bl	8000504 <__aeabi_ui2d>
 8005b22:	4682      	mov	sl, r0
 8005b24:	468b      	mov	fp, r1
 8005b26:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <main+0x180c>)
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fa fd0c 	bl	8000548 <__aeabi_f2d>
 8005b30:	e9c7 0100 	strd	r0, r1, [r7]
 8005b34:	4b34      	ldr	r3, [pc, #208]	; (8005c08 <main+0x1830>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fa fd05 	bl	8000548 <__aeabi_f2d>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	ec43 2b10 	vmov	d0, r2, r3
 8005b46:	f00a f8b7 	bl	800fcb8 <sin>
 8005b4a:	ec53 2b10 	vmov	r2, r3, d0
 8005b4e:	4614      	mov	r4, r2
 8005b50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5c:	f7fa fd4c 	bl	80005f8 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4650      	mov	r0, sl
 8005b66:	4659      	mov	r1, fp
 8005b68:	f7fa fb90 	bl	800028c <__adddf3>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	e9c7 2300 	strd	r2, r3, [r7]
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <main+0x1810>)
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fce5 	bl	8000548 <__aeabi_f2d>
 8005b7e:	4682      	mov	sl, r0
 8005b80:	468b      	mov	fp, r1
 8005b82:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <main+0x1830>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fa fcde 	bl	8000548 <__aeabi_f2d>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	ec43 2b10 	vmov	d0, r2, r3
 8005b94:	f00a f840 	bl	800fc18 <cos>
 8005b98:	ec53 2b10 	vmov	r2, r3, d0
 8005b9c:	4650      	mov	r0, sl
 8005b9e:	4659      	mov	r1, fp
 8005ba0:	f7fa fd2a 	bl	80005f8 <__aeabi_dmul>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bac:	f7fa fb6e 	bl	800028c <__adddf3>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	e9c7 2300 	strd	r2, r3, [r7]
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <main+0x180c>)
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fcc3 	bl	8000548 <__aeabi_f2d>
 8005bc2:	4682      	mov	sl, r0
 8005bc4:	468b      	mov	fp, r1
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <main+0x1830>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fa fcbc 	bl	8000548 <__aeabi_f2d>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	ec43 2b10 	vmov	d0, r2, r3
 8005bd8:	e01a      	b.n	8005c10 <main+0x1838>
 8005bda:	bf00      	nop
 8005bdc:	20000384 	.word	0x20000384
 8005be0:	200003e0 	.word	0x200003e0
 8005be4:	200004cc 	.word	0x200004cc
 8005be8:	20000454 	.word	0x20000454
 8005bec:	20000760 	.word	0x20000760
 8005bf0:	20000270 	.word	0x20000270
 8005bf4:	20000544 	.word	0x20000544
 8005bf8:	200006ec 	.word	0x200006ec
 8005bfc:	200003a8 	.word	0x200003a8
 8005c00:	00000000 	.word	0x00000000
 8005c04:	200005bc 	.word	0x200005bc
 8005c08:	20000768 	.word	0x20000768
 8005c0c:	2000075c 	.word	0x2000075c
 8005c10:	f00a f802 	bl	800fc18 <cos>
 8005c14:	ec53 2b10 	vmov	r2, r3, d0
 8005c18:	4650      	mov	r0, sl
 8005c1a:	4659      	mov	r1, fp
 8005c1c:	f7fa fcec 	bl	80005f8 <__aeabi_dmul>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c28:	f7fa fb30 	bl	800028c <__adddf3>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	e9c7 2300 	strd	r2, r3, [r7]
 8005c34:	4bc6      	ldr	r3, [pc, #792]	; (8005f50 <main+0x1b78>)
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fc85 	bl	8000548 <__aeabi_f2d>
 8005c3e:	4682      	mov	sl, r0
 8005c40:	468b      	mov	fp, r1
 8005c42:	4bc4      	ldr	r3, [pc, #784]	; (8005f54 <main+0x1b7c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fc7e 	bl	8000548 <__aeabi_f2d>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	ec43 2b10 	vmov	d0, r2, r3
 8005c54:	f00a f830 	bl	800fcb8 <sin>
 8005c58:	ec53 2b10 	vmov	r2, r3, d0
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	f7fa fcca 	bl	80005f8 <__aeabi_dmul>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6c:	f7fa fb0e 	bl	800028c <__adddf3>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4692      	mov	sl, r2
 8005c76:	469b      	mov	fp, r3
 8005c78:	4bb7      	ldr	r3, [pc, #732]	; (8005f58 <main+0x1b80>)
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa fc63 	bl	8000548 <__aeabi_f2d>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4650      	mov	r0, sl
 8005c88:	4659      	mov	r1, fp
 8005c8a:	f7fa faff 	bl	800028c <__adddf3>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4692      	mov	sl, r2
 8005c94:	469b      	mov	fp, r3
 8005c96:	4bb1      	ldr	r3, [pc, #708]	; (8005f5c <main+0x1b84>)
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fa fc54 	bl	8000548 <__aeabi_f2d>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f7fa faf0 	bl	800028c <__adddf3>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f7fa ff78 	bl	8000ba8 <__aeabi_d2uiz>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4aa9      	ldr	r2, [pc, #676]	; (8005f60 <main+0x1b88>)
 8005cbc:	6013      	str	r3, [r2, #0]
				  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 8005cbe:	4ba8      	ldr	r3, [pc, #672]	; (8005f60 <main+0x1b88>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005f64 <main+0x1b8c>
 8005cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd6:	ee17 2a90 	vmov	r2, s15
 8005cda:	4ba1      	ldr	r3, [pc, #644]	; (8005f60 <main+0x1b88>)
 8005cdc:	601a      	str	r2, [r3, #0]
				  ccr3 = 84000 + landing_throttle + gps_lon.in.pid_result * (-sin(theta_radian)) + gps_lat.in.pid_result * cos(theta_radian) - gps_lon.in.pid_result * cos(theta_radian) + gps_lat.in.pid_result * sin(theta_radian) -yaw_heading.pid_result  + altitude.in.pid_result;
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005ce4:	3320      	adds	r3, #32
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fa fc0c 	bl	8000504 <__aeabi_ui2d>
 8005cec:	4682      	mov	sl, r0
 8005cee:	468b      	mov	fp, r1
 8005cf0:	4b9d      	ldr	r3, [pc, #628]	; (8005f68 <main+0x1b90>)
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fa fc27 	bl	8000548 <__aeabi_f2d>
 8005cfa:	e9c7 0100 	strd	r0, r1, [r7]
 8005cfe:	4b95      	ldr	r3, [pc, #596]	; (8005f54 <main+0x1b7c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fc20 	bl	8000548 <__aeabi_f2d>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	ec43 2b10 	vmov	d0, r2, r3
 8005d10:	f009 ffd2 	bl	800fcb8 <sin>
 8005d14:	ec53 2b10 	vmov	r2, r3, d0
 8005d18:	4690      	mov	r8, r2
 8005d1a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d26:	f7fa fc67 	bl	80005f8 <__aeabi_dmul>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4650      	mov	r0, sl
 8005d30:	4659      	mov	r1, fp
 8005d32:	f7fa faab 	bl	800028c <__adddf3>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	e9c7 2300 	strd	r2, r3, [r7]
 8005d3e:	4b84      	ldr	r3, [pc, #528]	; (8005f50 <main+0x1b78>)
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fa fc00 	bl	8000548 <__aeabi_f2d>
 8005d48:	4682      	mov	sl, r0
 8005d4a:	468b      	mov	fp, r1
 8005d4c:	4b81      	ldr	r3, [pc, #516]	; (8005f54 <main+0x1b7c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fbf9 	bl	8000548 <__aeabi_f2d>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	ec43 2b10 	vmov	d0, r2, r3
 8005d5e:	f009 ff5b 	bl	800fc18 <cos>
 8005d62:	ec53 2b10 	vmov	r2, r3, d0
 8005d66:	4650      	mov	r0, sl
 8005d68:	4659      	mov	r1, fp
 8005d6a:	f7fa fc45 	bl	80005f8 <__aeabi_dmul>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d76:	f7fa fa89 	bl	800028c <__adddf3>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	e9c7 2300 	strd	r2, r3, [r7]
 8005d82:	4b79      	ldr	r3, [pc, #484]	; (8005f68 <main+0x1b90>)
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fbde 	bl	8000548 <__aeabi_f2d>
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	468b      	mov	fp, r1
 8005d90:	4b70      	ldr	r3, [pc, #448]	; (8005f54 <main+0x1b7c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fa fbd7 	bl	8000548 <__aeabi_f2d>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	ec43 2b10 	vmov	d0, r2, r3
 8005da2:	f009 ff39 	bl	800fc18 <cos>
 8005da6:	ec53 2b10 	vmov	r2, r3, d0
 8005daa:	4650      	mov	r0, sl
 8005dac:	4659      	mov	r1, fp
 8005dae:	f7fa fc23 	bl	80005f8 <__aeabi_dmul>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dba:	f7fa fa65 	bl	8000288 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	e9c7 2300 	strd	r2, r3, [r7]
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <main+0x1b78>)
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa fbbc 	bl	8000548 <__aeabi_f2d>
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	468b      	mov	fp, r1
 8005dd4:	4b5f      	ldr	r3, [pc, #380]	; (8005f54 <main+0x1b7c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa fbb5 	bl	8000548 <__aeabi_f2d>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	ec43 2b10 	vmov	d0, r2, r3
 8005de6:	f009 ff67 	bl	800fcb8 <sin>
 8005dea:	ec53 2b10 	vmov	r2, r3, d0
 8005dee:	4650      	mov	r0, sl
 8005df0:	4659      	mov	r1, fp
 8005df2:	f7fa fc01 	bl	80005f8 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfe:	f7fa fa45 	bl	800028c <__adddf3>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4692      	mov	sl, r2
 8005e08:	469b      	mov	fp, r3
 8005e0a:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <main+0x1b80>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fb9a 	bl	8000548 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4650      	mov	r0, sl
 8005e1a:	4659      	mov	r1, fp
 8005e1c:	f7fa fa34 	bl	8000288 <__aeabi_dsub>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4692      	mov	sl, r2
 8005e26:	469b      	mov	fp, r3
 8005e28:	4b4c      	ldr	r3, [pc, #304]	; (8005f5c <main+0x1b84>)
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb8b 	bl	8000548 <__aeabi_f2d>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4650      	mov	r0, sl
 8005e38:	4659      	mov	r1, fp
 8005e3a:	f7fa fa27 	bl	800028c <__adddf3>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	f7fa feaf 	bl	8000ba8 <__aeabi_d2uiz>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4a47      	ldr	r2, [pc, #284]	; (8005f6c <main+0x1b94>)
 8005e4e:	6013      	str	r3, [r2, #0]
				  ccr4 = 84000 + landing_throttle - gps_lon.in.pid_result * (-sin(theta_radian)) + gps_lat.in.pid_result * cos(theta_radian) - gps_lon.in.pid_result * cos(theta_radian) + gps_lat.in.pid_result * sin(theta_radian) +yaw_heading.pid_result  + altitude.in.pid_result;
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005e56:	3320      	adds	r3, #32
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb53 	bl	8000504 <__aeabi_ui2d>
 8005e5e:	4682      	mov	sl, r0
 8005e60:	468b      	mov	fp, r1
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <main+0x1b90>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fb6e 	bl	8000548 <__aeabi_f2d>
 8005e6c:	e9c7 0100 	strd	r0, r1, [r7]
 8005e70:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <main+0x1b7c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa fb67 	bl	8000548 <__aeabi_f2d>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	ec43 2b10 	vmov	d0, r2, r3
 8005e82:	f009 ff19 	bl	800fcb8 <sin>
 8005e86:	ec53 2b10 	vmov	r2, r3, d0
 8005e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e8e:	f7fa fbb3 	bl	80005f8 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4650      	mov	r0, sl
 8005e98:	4659      	mov	r1, fp
 8005e9a:	f7fa f9f7 	bl	800028c <__adddf3>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	e9c7 2300 	strd	r2, r3, [r7]
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <main+0x1b78>)
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fa fb4c 	bl	8000548 <__aeabi_f2d>
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	468b      	mov	fp, r1
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <main+0x1b7c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fb45 	bl	8000548 <__aeabi_f2d>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	ec43 2b10 	vmov	d0, r2, r3
 8005ec6:	f009 fea7 	bl	800fc18 <cos>
 8005eca:	ec53 2b10 	vmov	r2, r3, d0
 8005ece:	4650      	mov	r0, sl
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	f7fa fb91 	bl	80005f8 <__aeabi_dmul>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ede:	f7fa f9d5 	bl	800028c <__adddf3>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9c7 2300 	strd	r2, r3, [r7]
 8005eea:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <main+0x1b90>)
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa fb2a 	bl	8000548 <__aeabi_f2d>
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	468b      	mov	fp, r1
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <main+0x1b7c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fa fb23 	bl	8000548 <__aeabi_f2d>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	ec43 2b10 	vmov	d0, r2, r3
 8005f0a:	f009 fe85 	bl	800fc18 <cos>
 8005f0e:	ec53 2b10 	vmov	r2, r3, d0
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	f7fa fb6f 	bl	80005f8 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f22:	f7fa f9b1 	bl	8000288 <__aeabi_dsub>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	e9c7 2300 	strd	r2, r3, [r7]
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <main+0x1b78>)
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fa fb08 	bl	8000548 <__aeabi_f2d>
 8005f38:	4682      	mov	sl, r0
 8005f3a:	468b      	mov	fp, r1
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <main+0x1b7c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fb01 	bl	8000548 <__aeabi_f2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	ec43 2b10 	vmov	d0, r2, r3
 8005f4e:	e00f      	b.n	8005f70 <main+0x1b98>
 8005f50:	20000454 	.word	0x20000454
 8005f54:	20000768 	.word	0x20000768
 8005f58:	200005bc 	.word	0x200005bc
 8005f5c:	20000544 	.word	0x20000544
 8005f60:	20000770 	.word	0x20000770
 8005f64:	3f68f5c3 	.word	0x3f68f5c3
 8005f68:	200004cc 	.word	0x200004cc
 8005f6c:	20000798 	.word	0x20000798
 8005f70:	f009 fea2 	bl	800fcb8 <sin>
 8005f74:	ec53 2b10 	vmov	r2, r3, d0
 8005f78:	4650      	mov	r0, sl
 8005f7a:	4659      	mov	r1, fp
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f88:	f7fa f980 	bl	800028c <__adddf3>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4692      	mov	sl, r2
 8005f92:	469b      	mov	fp, r3
 8005f94:	4b6e      	ldr	r3, [pc, #440]	; (8006150 <main+0x1d78>)
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa fad5 	bl	8000548 <__aeabi_f2d>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	f7fa f971 	bl	800028c <__adddf3>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4692      	mov	sl, r2
 8005fb0:	469b      	mov	fp, r3
 8005fb2:	4b68      	ldr	r3, [pc, #416]	; (8006154 <main+0x1d7c>)
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fa fac6 	bl	8000548 <__aeabi_f2d>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa f962 	bl	800028c <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f7fa fdea 	bl	8000ba8 <__aeabi_d2uiz>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4a60      	ldr	r2, [pc, #384]	; (8006158 <main+0x1d80>)
 8005fd8:	6013      	str	r3, [r2, #0]
				  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8005fda:	4b5f      	ldr	r3, [pc, #380]	; (8006158 <main+0x1d80>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800615c <main+0x1d84>
 8005fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 2a90 	vmov	r2, s15
 8005ff6:	4b58      	ldr	r3, [pc, #352]	; (8006158 <main+0x1d80>)
 8005ff8:	601a      	str	r2, [r3, #0]
			  if ( (abs(iBus.RH-1500) < 50) && (abs(iBus.RV-1500) <50))
 8005ffa:	e3a6      	b.n	800674a <main+0x2372>
			  }
			  else
			  {
				  ccr1 = 84000 + landing_throttle - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8006002:	3320      	adds	r3, #32
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800600c:	4b54      	ldr	r3, [pc, #336]	; (8006160 <main+0x1d88>)
 800600e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006016:	4b53      	ldr	r3, [pc, #332]	; (8006164 <main+0x1d8c>)
 8006018:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800601c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006020:	4b4b      	ldr	r3, [pc, #300]	; (8006150 <main+0x1d78>)
 8006022:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006026:	ee37 7a67 	vsub.f32	s14, s14, s15
 800602a:	4b4a      	ldr	r3, [pc, #296]	; (8006154 <main+0x1d7c>)
 800602c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006038:	ee17 2a90 	vmov	r2, s15
 800603c:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <main+0x1d90>)
 800603e:	601a      	str	r2, [r3, #0]
				  ccr2 = 84000 + landing_throttle + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8006046:	3320      	adds	r3, #32
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006050:	4b43      	ldr	r3, [pc, #268]	; (8006160 <main+0x1d88>)
 8006052:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <main+0x1d8c>)
 800605c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006064:	4b3a      	ldr	r3, [pc, #232]	; (8006150 <main+0x1d78>)
 8006066:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800606a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <main+0x1d7c>)
 8006070:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607c:	ee17 2a90 	vmov	r2, s15
 8006080:	4b3a      	ldr	r3, [pc, #232]	; (800616c <main+0x1d94>)
 8006082:	601a      	str	r2, [r3, #0]
				  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 8006084:	4b39      	ldr	r3, [pc, #228]	; (800616c <main+0x1d94>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800615c <main+0x1d84>
 8006094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 2a90 	vmov	r2, s15
 80060a0:	4b32      	ldr	r3, [pc, #200]	; (800616c <main+0x1d94>)
 80060a2:	601a      	str	r2, [r3, #0]
				  ccr3 = 84000 + landing_throttle + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result + altitude.in.pid_result;
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80060aa:	3320      	adds	r3, #32
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060b4:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <main+0x1d88>)
 80060b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060be:	4b29      	ldr	r3, [pc, #164]	; (8006164 <main+0x1d8c>)
 80060c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c8:	4b21      	ldr	r3, [pc, #132]	; (8006150 <main+0x1d78>)
 80060ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060d2:	4b20      	ldr	r3, [pc, #128]	; (8006154 <main+0x1d7c>)
 80060d4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e0:	ee17 2a90 	vmov	r2, s15
 80060e4:	4b22      	ldr	r3, [pc, #136]	; (8006170 <main+0x1d98>)
 80060e6:	601a      	str	r2, [r3, #0]
				  ccr4 = 84000 + landing_throttle - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result + altitude.in.pid_result;
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80060ee:	3320      	adds	r3, #32
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060f8:	4b19      	ldr	r3, [pc, #100]	; (8006160 <main+0x1d88>)
 80060fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80060fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <main+0x1d8c>)
 8006104:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <main+0x1d78>)
 800610e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <main+0x1d7c>)
 8006118:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800611c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006124:	ee17 2a90 	vmov	r2, s15
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <main+0x1d80>)
 800612a:	601a      	str	r2, [r3, #0]
				  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <main+0x1d80>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800615c <main+0x1d84>
 800613c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006144:	ee17 2a90 	vmov	r2, s15
 8006148:	4b03      	ldr	r3, [pc, #12]	; (8006158 <main+0x1d80>)
 800614a:	601a      	str	r2, [r3, #0]
			  if ( (abs(iBus.RH-1500) < 50) && (abs(iBus.RV-1500) <50))
 800614c:	e2fd      	b.n	800674a <main+0x2372>
 800614e:	bf00      	nop
 8006150:	200005bc 	.word	0x200005bc
 8006154:	20000544 	.word	0x20000544
 8006158:	20000774 	.word	0x20000774
 800615c:	3f68f5c3 	.word	0x3f68f5c3
 8006160:	200005f8 	.word	0x200005f8
 8006164:	20000670 	.word	0x20000670
 8006168:	2000075c 	.word	0x2000075c
 800616c:	20000770 	.word	0x20000770
 8006170:	20000798 	.word	0x20000798
//				  ccr3 = 84000 + (iBus.LV - 1000) * 83.9;
//				  ccr4 = 84000 + (iBus.LV - 1000) * 83.9;
//			  }
//			  else
//			  {
				  if(iBus.LH < 1485 || iBus.LH > 1515)
 8006174:	4bbc      	ldr	r3, [pc, #752]	; (8006468 <main+0x2090>)
 8006176:	88db      	ldrh	r3, [r3, #6]
 8006178:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800617c:	4293      	cmp	r3, r2
 800617e:	d906      	bls.n	800618e <main+0x1db6>
 8006180:	4bb9      	ldr	r3, [pc, #740]	; (8006468 <main+0x2090>)
 8006182:	88db      	ldrh	r3, [r3, #6]
 8006184:	f240 52eb 	movw	r2, #1515	; 0x5eb
 8006188:	4293      	cmp	r3, r2
 800618a:	f240 8183 	bls.w	8006494 <main+0x20bc>
				  {
					  yaw_heading_reference = BNO080_Yaw;
 800618e:	4bb7      	ldr	r3, [pc, #732]	; (800646c <main+0x2094>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	65fb      	str	r3, [r7, #92]	; 0x5c
					  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH-1500), ICM20602.gyro_z);
 8006194:	4bb4      	ldr	r3, [pc, #720]	; (8006468 <main+0x2090>)
 8006196:	88db      	ldrh	r3, [r3, #6]
 8006198:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a4:	4bb2      	ldr	r3, [pc, #712]	; (8006470 <main+0x2098>)
 80061a6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80061aa:	eef0 0a47 	vmov.f32	s1, s14
 80061ae:	eeb0 0a67 	vmov.f32	s0, s15
 80061b2:	48b0      	ldr	r0, [pc, #704]	; (8006474 <main+0x209c>)
 80061b4:	f7fd f9f2 	bl	800359c <Single_Yaw_Rate_PID_Calculation>

					  ccr1 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result + roll.in.pid_result -yaw_rate.pid_result;
 80061b8:	4bab      	ldr	r3, [pc, #684]	; (8006468 <main+0x2090>)
 80061ba:	889b      	ldrh	r3, [r3, #4]
 80061bc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa f9af 	bl	8000524 <__aeabi_i2d>
 80061c6:	a3a4      	add	r3, pc, #656	; (adr r3, 8006458 <main+0x2080>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa fa14 	bl	80005f8 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	a3a1      	add	r3, pc, #644	; (adr r3, 8006460 <main+0x2088>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f7fa f855 	bl	800028c <__adddf3>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4692      	mov	sl, r2
 80061e8:	469b      	mov	fp, r3
 80061ea:	4ba3      	ldr	r3, [pc, #652]	; (8006478 <main+0x20a0>)
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa f9aa 	bl	8000548 <__aeabi_f2d>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa f844 	bl	8000288 <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4692      	mov	sl, r2
 8006206:	469b      	mov	fp, r3
 8006208:	4b9c      	ldr	r3, [pc, #624]	; (800647c <main+0x20a4>)
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	4618      	mov	r0, r3
 800620e:	f7fa f99b 	bl	8000548 <__aeabi_f2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4650      	mov	r0, sl
 8006218:	4659      	mov	r1, fp
 800621a:	f7fa f837 	bl	800028c <__adddf3>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4692      	mov	sl, r2
 8006224:	469b      	mov	fp, r3
 8006226:	4b93      	ldr	r3, [pc, #588]	; (8006474 <main+0x209c>)
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa f98c 	bl	8000548 <__aeabi_f2d>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4650      	mov	r0, sl
 8006236:	4659      	mov	r1, fp
 8006238:	f7fa f826 	bl	8000288 <__aeabi_dsub>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f7fa fcb0 	bl	8000ba8 <__aeabi_d2uiz>
 8006248:	4603      	mov	r3, r0
 800624a:	4a8d      	ldr	r2, [pc, #564]	; (8006480 <main+0x20a8>)
 800624c:	6013      	str	r3, [r2, #0]
					  ccr2 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result + roll.in.pid_result +yaw_rate.pid_result;
 800624e:	4b86      	ldr	r3, [pc, #536]	; (8006468 <main+0x2090>)
 8006250:	889b      	ldrh	r3, [r3, #4]
 8006252:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa f964 	bl	8000524 <__aeabi_i2d>
 800625c:	a37e      	add	r3, pc, #504	; (adr r3, 8006458 <main+0x2080>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7fa f9c9 	bl	80005f8 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	a37c      	add	r3, pc, #496	; (adr r3, 8006460 <main+0x2088>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa f80a 	bl	800028c <__adddf3>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4692      	mov	sl, r2
 800627e:	469b      	mov	fp, r3
 8006280:	4b7d      	ldr	r3, [pc, #500]	; (8006478 <main+0x20a0>)
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	4618      	mov	r0, r3
 8006286:	f7fa f95f 	bl	8000548 <__aeabi_f2d>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4650      	mov	r0, sl
 8006290:	4659      	mov	r1, fp
 8006292:	f7f9 fffb 	bl	800028c <__adddf3>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4692      	mov	sl, r2
 800629c:	469b      	mov	fp, r3
 800629e:	4b77      	ldr	r3, [pc, #476]	; (800647c <main+0x20a4>)
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fa f950 	bl	8000548 <__aeabi_f2d>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7f9 ffec 	bl	800028c <__adddf3>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4692      	mov	sl, r2
 80062ba:	469b      	mov	fp, r3
 80062bc:	4b6d      	ldr	r3, [pc, #436]	; (8006474 <main+0x209c>)
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fa f941 	bl	8000548 <__aeabi_f2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	f7f9 ffdd 	bl	800028c <__adddf3>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	f7fa fc65 	bl	8000ba8 <__aeabi_d2uiz>
 80062de:	4603      	mov	r3, r0
 80062e0:	4a68      	ldr	r2, [pc, #416]	; (8006484 <main+0x20ac>)
 80062e2:	6013      	str	r3, [r2, #0]
					  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 80062e4:	4b67      	ldr	r3, [pc, #412]	; (8006484 <main+0x20ac>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8006488 <main+0x20b0>
 80062f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fc:	ee17 2a90 	vmov	r2, s15
 8006300:	4b60      	ldr	r3, [pc, #384]	; (8006484 <main+0x20ac>)
 8006302:	601a      	str	r2, [r3, #0]
					  ccr3 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result - roll.in.pid_result -yaw_rate.pid_result;
 8006304:	4b58      	ldr	r3, [pc, #352]	; (8006468 <main+0x2090>)
 8006306:	889b      	ldrh	r3, [r3, #4]
 8006308:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800630c:	4618      	mov	r0, r3
 800630e:	f7fa f909 	bl	8000524 <__aeabi_i2d>
 8006312:	a351      	add	r3, pc, #324	; (adr r3, 8006458 <main+0x2080>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4610      	mov	r0, r2
 8006322:	4619      	mov	r1, r3
 8006324:	a34e      	add	r3, pc, #312	; (adr r3, 8006460 <main+0x2088>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7f9 ffaf 	bl	800028c <__adddf3>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4692      	mov	sl, r2
 8006334:	469b      	mov	fp, r3
 8006336:	4b50      	ldr	r3, [pc, #320]	; (8006478 <main+0x20a0>)
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f904 	bl	8000548 <__aeabi_f2d>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4650      	mov	r0, sl
 8006346:	4659      	mov	r1, fp
 8006348:	f7f9 ffa0 	bl	800028c <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4692      	mov	sl, r2
 8006352:	469b      	mov	fp, r3
 8006354:	4b49      	ldr	r3, [pc, #292]	; (800647c <main+0x20a4>)
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa f8f5 	bl	8000548 <__aeabi_f2d>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4650      	mov	r0, sl
 8006364:	4659      	mov	r1, fp
 8006366:	f7f9 ff8f 	bl	8000288 <__aeabi_dsub>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4692      	mov	sl, r2
 8006370:	469b      	mov	fp, r3
 8006372:	4b40      	ldr	r3, [pc, #256]	; (8006474 <main+0x209c>)
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	4618      	mov	r0, r3
 8006378:	f7fa f8e6 	bl	8000548 <__aeabi_f2d>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4650      	mov	r0, sl
 8006382:	4659      	mov	r1, fp
 8006384:	f7f9 ff80 	bl	8000288 <__aeabi_dsub>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	f7fa fc0a 	bl	8000ba8 <__aeabi_d2uiz>
 8006394:	4603      	mov	r3, r0
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <main+0x20b4>)
 8006398:	6013      	str	r3, [r2, #0]
					  ccr4 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result - roll.in.pid_result +yaw_rate.pid_result;
 800639a:	4b33      	ldr	r3, [pc, #204]	; (8006468 <main+0x2090>)
 800639c:	889b      	ldrh	r3, [r3, #4]
 800639e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa f8be 	bl	8000524 <__aeabi_i2d>
 80063a8:	a32b      	add	r3, pc, #172	; (adr r3, 8006458 <main+0x2080>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f7fa f923 	bl	80005f8 <__aeabi_dmul>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	a329      	add	r3, pc, #164	; (adr r3, 8006460 <main+0x2088>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7f9 ff64 	bl	800028c <__adddf3>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4692      	mov	sl, r2
 80063ca:	469b      	mov	fp, r3
 80063cc:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <main+0x20a0>)
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa f8b9 	bl	8000548 <__aeabi_f2d>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4650      	mov	r0, sl
 80063dc:	4659      	mov	r1, fp
 80063de:	f7f9 ff53 	bl	8000288 <__aeabi_dsub>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4692      	mov	sl, r2
 80063e8:	469b      	mov	fp, r3
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <main+0x20a4>)
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fa f8aa 	bl	8000548 <__aeabi_f2d>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4650      	mov	r0, sl
 80063fa:	4659      	mov	r1, fp
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4692      	mov	sl, r2
 8006406:	469b      	mov	fp, r3
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <main+0x209c>)
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4618      	mov	r0, r3
 800640e:	f7fa f89b 	bl	8000548 <__aeabi_f2d>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4650      	mov	r0, sl
 8006418:	4659      	mov	r1, fp
 800641a:	f7f9 ff37 	bl	800028c <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	f7fa fbbf 	bl	8000ba8 <__aeabi_d2uiz>
 800642a:	4603      	mov	r3, r0
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <main+0x20b8>)
 800642e:	6013      	str	r3, [r2, #0]
					  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <main+0x20b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006488 <main+0x20b0>
 8006440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006448:	ee17 2a90 	vmov	r2, s15
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <main+0x20b8>)
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e17b      	b.n	800674a <main+0x2372>
 8006452:	bf00      	nop
 8006454:	f3af 8000 	nop.w
 8006458:	9999999a 	.word	0x9999999a
 800645c:	4054f999 	.word	0x4054f999
 8006460:	00000000 	.word	0x00000000
 8006464:	40f48200 	.word	0x40f48200
 8006468:	20000384 	.word	0x20000384
 800646c:	200006ec 	.word	0x200006ec
 8006470:	200003a8 	.word	0x200003a8
 8006474:	20000418 	.word	0x20000418
 8006478:	200005f8 	.word	0x200005f8
 800647c:	20000670 	.word	0x20000670
 8006480:	2000075c 	.word	0x2000075c
 8006484:	20000770 	.word	0x20000770
 8006488:	3f68f5c3 	.word	0x3f68f5c3
 800648c:	20000798 	.word	0x20000798
 8006490:	20000774 	.word	0x20000774
				  }
				  else
				  {
					  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 8006494:	4bc8      	ldr	r3, [pc, #800]	; (80067b8 <main+0x23e0>)
 8006496:	edd3 7a00 	vldr	s15, [r3]
 800649a:	4bc8      	ldr	r3, [pc, #800]	; (80067bc <main+0x23e4>)
 800649c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80064a0:	eeb0 1a47 	vmov.f32	s2, s14
 80064a4:	eef0 0a67 	vmov.f32	s1, s15
 80064a8:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80064ac:	48c4      	ldr	r0, [pc, #784]	; (80067c0 <main+0x23e8>)
 80064ae:	f7fc ffdb 	bl	8003468 <Single_Yaw_Heading_PID_Calculation>
					  ccr1 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result + roll.in.pid_result -yaw_heading.pid_result;
 80064b2:	4bc4      	ldr	r3, [pc, #784]	; (80067c4 <main+0x23ec>)
 80064b4:	889b      	ldrh	r3, [r3, #4]
 80064b6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fa f832 	bl	8000524 <__aeabi_i2d>
 80064c0:	a3b9      	add	r3, pc, #740	; (adr r3, 80067a8 <main+0x23d0>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f897 	bl	80005f8 <__aeabi_dmul>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	a3b7      	add	r3, pc, #732	; (adr r3, 80067b0 <main+0x23d8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7f9 fed8 	bl	800028c <__adddf3>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4692      	mov	sl, r2
 80064e2:	469b      	mov	fp, r3
 80064e4:	4bb8      	ldr	r3, [pc, #736]	; (80067c8 <main+0x23f0>)
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fa f82d 	bl	8000548 <__aeabi_f2d>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4650      	mov	r0, sl
 80064f4:	4659      	mov	r1, fp
 80064f6:	f7f9 fec7 	bl	8000288 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4692      	mov	sl, r2
 8006500:	469b      	mov	fp, r3
 8006502:	4bb2      	ldr	r3, [pc, #712]	; (80067cc <main+0x23f4>)
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa f81e 	bl	8000548 <__aeabi_f2d>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4650      	mov	r0, sl
 8006512:	4659      	mov	r1, fp
 8006514:	f7f9 feba 	bl	800028c <__adddf3>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4692      	mov	sl, r2
 800651e:	469b      	mov	fp, r3
 8006520:	4ba7      	ldr	r3, [pc, #668]	; (80067c0 <main+0x23e8>)
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f7fa f80f 	bl	8000548 <__aeabi_f2d>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4650      	mov	r0, sl
 8006530:	4659      	mov	r1, fp
 8006532:	f7f9 fea9 	bl	8000288 <__aeabi_dsub>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	f7fa fb33 	bl	8000ba8 <__aeabi_d2uiz>
 8006542:	4603      	mov	r3, r0
 8006544:	4aa2      	ldr	r2, [pc, #648]	; (80067d0 <main+0x23f8>)
 8006546:	6013      	str	r3, [r2, #0]
					  ccr2 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result + roll.in.pid_result +yaw_heading.pid_result;
 8006548:	4b9e      	ldr	r3, [pc, #632]	; (80067c4 <main+0x23ec>)
 800654a:	889b      	ldrh	r3, [r3, #4]
 800654c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006550:	4618      	mov	r0, r3
 8006552:	f7f9 ffe7 	bl	8000524 <__aeabi_i2d>
 8006556:	a394      	add	r3, pc, #592	; (adr r3, 80067a8 <main+0x23d0>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7fa f84c 	bl	80005f8 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4610      	mov	r0, r2
 8006566:	4619      	mov	r1, r3
 8006568:	a391      	add	r3, pc, #580	; (adr r3, 80067b0 <main+0x23d8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 fe8d 	bl	800028c <__adddf3>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4692      	mov	sl, r2
 8006578:	469b      	mov	fp, r3
 800657a:	4b93      	ldr	r3, [pc, #588]	; (80067c8 <main+0x23f0>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	4618      	mov	r0, r3
 8006580:	f7f9 ffe2 	bl	8000548 <__aeabi_f2d>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	f7f9 fe7e 	bl	800028c <__adddf3>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4692      	mov	sl, r2
 8006596:	469b      	mov	fp, r3
 8006598:	4b8c      	ldr	r3, [pc, #560]	; (80067cc <main+0x23f4>)
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	4618      	mov	r0, r3
 800659e:	f7f9 ffd3 	bl	8000548 <__aeabi_f2d>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4650      	mov	r0, sl
 80065a8:	4659      	mov	r1, fp
 80065aa:	f7f9 fe6f 	bl	800028c <__adddf3>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4692      	mov	sl, r2
 80065b4:	469b      	mov	fp, r3
 80065b6:	4b82      	ldr	r3, [pc, #520]	; (80067c0 <main+0x23e8>)
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7f9 ffc4 	bl	8000548 <__aeabi_f2d>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4650      	mov	r0, sl
 80065c6:	4659      	mov	r1, fp
 80065c8:	f7f9 fe60 	bl	800028c <__adddf3>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	f7fa fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80065d8:	4603      	mov	r3, r0
 80065da:	4a7e      	ldr	r2, [pc, #504]	; (80067d4 <main+0x23fc>)
 80065dc:	6013      	str	r3, [r2, #0]
					  ccr2 = (unsigned int)((float)ccr2 * 0.91f);
 80065de:	4b7d      	ldr	r3, [pc, #500]	; (80067d4 <main+0x23fc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80067d8 <main+0x2400>
 80065ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 2a90 	vmov	r2, s15
 80065fa:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <main+0x23fc>)
 80065fc:	601a      	str	r2, [r3, #0]
					  ccr3 = 84000 + (iBus.LV - 1000) * 83.9 + pitch.in.pid_result - roll.in.pid_result -yaw_heading.pid_result;
 80065fe:	4b71      	ldr	r3, [pc, #452]	; (80067c4 <main+0x23ec>)
 8006600:	889b      	ldrh	r3, [r3, #4]
 8006602:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006606:	4618      	mov	r0, r3
 8006608:	f7f9 ff8c 	bl	8000524 <__aeabi_i2d>
 800660c:	a366      	add	r3, pc, #408	; (adr r3, 80067a8 <main+0x23d0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 fff1 	bl	80005f8 <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	a364      	add	r3, pc, #400	; (adr r3, 80067b0 <main+0x23d8>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f7f9 fe32 	bl	800028c <__adddf3>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4692      	mov	sl, r2
 800662e:	469b      	mov	fp, r3
 8006630:	4b65      	ldr	r3, [pc, #404]	; (80067c8 <main+0x23f0>)
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 ff87 	bl	8000548 <__aeabi_f2d>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4650      	mov	r0, sl
 8006640:	4659      	mov	r1, fp
 8006642:	f7f9 fe23 	bl	800028c <__adddf3>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4692      	mov	sl, r2
 800664c:	469b      	mov	fp, r3
 800664e:	4b5f      	ldr	r3, [pc, #380]	; (80067cc <main+0x23f4>)
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	4618      	mov	r0, r3
 8006654:	f7f9 ff78 	bl	8000548 <__aeabi_f2d>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 fe12 	bl	8000288 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4692      	mov	sl, r2
 800666a:	469b      	mov	fp, r3
 800666c:	4b54      	ldr	r3, [pc, #336]	; (80067c0 <main+0x23e8>)
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	4618      	mov	r0, r3
 8006672:	f7f9 ff69 	bl	8000548 <__aeabi_f2d>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4650      	mov	r0, sl
 800667c:	4659      	mov	r1, fp
 800667e:	f7f9 fe03 	bl	8000288 <__aeabi_dsub>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa fa8d 	bl	8000ba8 <__aeabi_d2uiz>
 800668e:	4603      	mov	r3, r0
 8006690:	4a52      	ldr	r2, [pc, #328]	; (80067dc <main+0x2404>)
 8006692:	6013      	str	r3, [r2, #0]
					  ccr4 = 84000 + (iBus.LV - 1000) * 83.9 - pitch.in.pid_result - roll.in.pid_result +yaw_heading.pid_result;
 8006694:	4b4b      	ldr	r3, [pc, #300]	; (80067c4 <main+0x23ec>)
 8006696:	889b      	ldrh	r3, [r3, #4]
 8006698:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800669c:	4618      	mov	r0, r3
 800669e:	f7f9 ff41 	bl	8000524 <__aeabi_i2d>
 80066a2:	a341      	add	r3, pc, #260	; (adr r3, 80067a8 <main+0x23d0>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 ffa6 	bl	80005f8 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4610      	mov	r0, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	a33e      	add	r3, pc, #248	; (adr r3, 80067b0 <main+0x23d8>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fde7 	bl	800028c <__adddf3>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4692      	mov	sl, r2
 80066c4:	469b      	mov	fp, r3
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <main+0x23f0>)
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7f9 ff3c 	bl	8000548 <__aeabi_f2d>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7f9 fdd6 	bl	8000288 <__aeabi_dsub>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4692      	mov	sl, r2
 80066e2:	469b      	mov	fp, r3
 80066e4:	4b39      	ldr	r3, [pc, #228]	; (80067cc <main+0x23f4>)
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7f9 ff2d 	bl	8000548 <__aeabi_f2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4650      	mov	r0, sl
 80066f4:	4659      	mov	r1, fp
 80066f6:	f7f9 fdc7 	bl	8000288 <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4692      	mov	sl, r2
 8006700:	469b      	mov	fp, r3
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <main+0x23e8>)
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	4618      	mov	r0, r3
 8006708:	f7f9 ff1e 	bl	8000548 <__aeabi_f2d>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4650      	mov	r0, sl
 8006712:	4659      	mov	r1, fp
 8006714:	f7f9 fdba 	bl	800028c <__adddf3>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4610      	mov	r0, r2
 800671e:	4619      	mov	r1, r3
 8006720:	f7fa fa42 	bl	8000ba8 <__aeabi_d2uiz>
 8006724:	4603      	mov	r3, r0
 8006726:	4a2e      	ldr	r2, [pc, #184]	; (80067e0 <main+0x2408>)
 8006728:	6013      	str	r3, [r2, #0]
					  ccr4 = (unsigned int)((float)ccr4 * 0.91f);
 800672a:	4b2d      	ldr	r3, [pc, #180]	; (80067e0 <main+0x2408>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80067d8 <main+0x2400>
 800673a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800673e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <main+0x2408>)
 8006748:	601a      	str	r2, [r3, #0]
				  }
			  }
			  last_lat = posllh.lat;
 800674a:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <main+0x240c>)
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	653b      	str	r3, [r7, #80]	; 0x50
			  last_lon = posllh.lon;
 8006750:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <main+0x240c>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
			  last_altitude = actual_pressure_fast;
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <main+0x2410>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a24      	ldr	r2, [pc, #144]	; (80067ec <main+0x2414>)
 800675c:	6013      	str	r3, [r2, #0]
		  }

		  if(iBus.LV < 1030 || motor_arming_flag == 0)
 800675e:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <main+0x23ec>)
 8006760:	889b      	ldrh	r3, [r3, #4]
 8006762:	f240 4205 	movw	r2, #1029	; 0x405
 8006766:	4293      	cmp	r3, r2
 8006768:	d903      	bls.n	8006772 <main+0x239a>
 800676a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <main+0x239e>
		  {
			  Reset_All_PID_Integrator();
 8006772:	f7fc ff97 	bl	80036a4 <Reset_All_PID_Integrator>
		  }


	  /********************* Motor Arming State ************************/
	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <main+0x23ec>)
 8006778:	891b      	ldrh	r3, [r3, #8]
 800677a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800677e:	d155      	bne.n	800682c <main+0x2454>
 8006780:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006784:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006788:	d050      	beq.n	800682c <main+0x2454>
	  {
		  if(iBus.LV < 1010)
 800678a:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <main+0x23ec>)
 800678c:	889b      	ldrh	r3, [r3, #4]
 800678e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006792:	4293      	cmp	r3, r2
 8006794:	d840      	bhi.n	8006818 <main+0x2440>
		  {
			  motor_arming_flag = 1;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  yaw_heading_reference = BNO080_Yaw;
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <main+0x23e0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a2:	e043      	b.n	800682c <main+0x2454>
 80067a4:	f3af 8000 	nop.w
 80067a8:	9999999a 	.word	0x9999999a
 80067ac:	4054f999 	.word	0x4054f999
 80067b0:	00000000 	.word	0x00000000
 80067b4:	40f48200 	.word	0x40f48200
 80067b8:	200006ec 	.word	0x200006ec
 80067bc:	200003a8 	.word	0x200003a8
 80067c0:	200005bc 	.word	0x200005bc
 80067c4:	20000384 	.word	0x20000384
 80067c8:	200005f8 	.word	0x200005f8
 80067cc:	20000670 	.word	0x20000670
 80067d0:	2000075c 	.word	0x2000075c
 80067d4:	20000770 	.word	0x20000770
 80067d8:	3f68f5c3 	.word	0x3f68f5c3
 80067dc:	20000798 	.word	0x20000798
 80067e0:	20000774 	.word	0x20000774
 80067e4:	200003e0 	.word	0x200003e0
 80067e8:	20000270 	.word	0x20000270
 80067ec:	20000760 	.word	0x20000760
		  }
		  else
		  {
			  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Enable Timer Counting
 80067f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067f4:	4852      	ldr	r0, [pc, #328]	; (8006940 <main+0x2568>)
 80067f6:	f7fd fd27 	bl	8004248 <LL_TIM_CC_EnableChannel>
				  TIM3->PSC = 1000;
 80067fa:	4b51      	ldr	r3, [pc, #324]	; (8006940 <main+0x2568>)
 80067fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 8006802:	2046      	movs	r0, #70	; 0x46
 8006804:	f002 f950 	bl	8008aa8 <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800680c:	484c      	ldr	r0, [pc, #304]	; (8006940 <main+0x2568>)
 800680e:	f7fd fd2c 	bl	800426a <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 8006812:	2046      	movs	r0, #70	; 0x46
 8006814:	f002 f948 	bl	8008aa8 <HAL_Delay>
			  while(Is_iBus_Throttle_min() == 0 || iBus.SwA == 2000)
 8006818:	f000 fada 	bl	8006dd0 <Is_iBus_Throttle_min>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0e6      	beq.n	80067f0 <main+0x2418>
 8006822:	4b48      	ldr	r3, [pc, #288]	; (8006944 <main+0x256c>)
 8006824:	891b      	ldrh	r3, [r3, #8]
 8006826:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800682a:	d0e1      	beq.n	80067f0 <main+0x2418>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 800682c:	4b45      	ldr	r3, [pc, #276]	; (8006944 <main+0x256c>)
 800682e:	891b      	ldrh	r3, [r3, #8]
 8006830:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	  if(iBus.SwA != 2000)
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <main+0x256c>)
 8006836:	891b      	ldrh	r3, [r3, #8]
 8006838:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800683c:	d002      	beq.n	8006844 <main+0x246c>
	  {
		  motor_arming_flag = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  }

	  if(motor_arming_flag == 1)
 8006844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006848:	2b01      	cmp	r3, #1
 800684a:	d160      	bne.n	800690e <main+0x2536>
	  {
		  if(failsafe_flag == 0)
 800684c:	4b3e      	ldr	r3, [pc, #248]	; (8006948 <main+0x2570>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d14f      	bne.n	80068f4 <main+0x251c>
		  {
			  if(iBus.LV > 1050)
 8006854:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <main+0x256c>)
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	f240 421a 	movw	r2, #1050	; 0x41a
 800685c:	4293      	cmp	r3, r2
 800685e:	d93c      	bls.n	80068da <main+0x2502>
			  {
				  //			  printf("%d\t%d\t%d\t%d\n", ccr1, ccr2, ccr3, ccr4);
				  TIM5->CCR1 = ccr1 > 167999 ? 167999 : ccr1 < 84000 ? 84000 : ccr1;
 8006860:	4b3a      	ldr	r3, [pc, #232]	; (800694c <main+0x2574>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a3a      	ldr	r2, [pc, #232]	; (8006950 <main+0x2578>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d806      	bhi.n	8006878 <main+0x24a0>
 800686a:	4b38      	ldr	r3, [pc, #224]	; (800694c <main+0x2574>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a39      	ldr	r2, [pc, #228]	; (8006954 <main+0x257c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	bf38      	it	cc
 8006874:	4613      	movcc	r3, r2
 8006876:	e000      	b.n	800687a <main+0x24a2>
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <main+0x2578>)
 800687a:	4a37      	ldr	r2, [pc, #220]	; (8006958 <main+0x2580>)
 800687c:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM5->CCR2 = ccr2 > 167999 ? 167999 : ccr2 < 84000 ? 84000 : ccr2;
 800687e:	4b37      	ldr	r3, [pc, #220]	; (800695c <main+0x2584>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a33      	ldr	r2, [pc, #204]	; (8006950 <main+0x2578>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d806      	bhi.n	8006896 <main+0x24be>
 8006888:	4b34      	ldr	r3, [pc, #208]	; (800695c <main+0x2584>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a31      	ldr	r2, [pc, #196]	; (8006954 <main+0x257c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	bf38      	it	cc
 8006892:	4613      	movcc	r3, r2
 8006894:	e000      	b.n	8006898 <main+0x24c0>
 8006896:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <main+0x2578>)
 8006898:	4a2f      	ldr	r2, [pc, #188]	; (8006958 <main+0x2580>)
 800689a:	6393      	str	r3, [r2, #56]	; 0x38
				  TIM5->CCR3 = ccr3 > 167999 ? 167999 : ccr3 < 84000 ? 84000 : ccr3;
 800689c:	4b30      	ldr	r3, [pc, #192]	; (8006960 <main+0x2588>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <main+0x2578>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d806      	bhi.n	80068b4 <main+0x24dc>
 80068a6:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <main+0x2588>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <main+0x257c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf38      	it	cc
 80068b0:	4613      	movcc	r3, r2
 80068b2:	e000      	b.n	80068b6 <main+0x24de>
 80068b4:	4b26      	ldr	r3, [pc, #152]	; (8006950 <main+0x2578>)
 80068b6:	4a28      	ldr	r2, [pc, #160]	; (8006958 <main+0x2580>)
 80068b8:	63d3      	str	r3, [r2, #60]	; 0x3c
				  TIM5->CCR4 = ccr4 > 167999 ? 167999 : ccr4 < 84000 ? 84000 : ccr4;
 80068ba:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <main+0x258c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a24      	ldr	r2, [pc, #144]	; (8006950 <main+0x2578>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d806      	bhi.n	80068d2 <main+0x24fa>
 80068c4:	4b27      	ldr	r3, [pc, #156]	; (8006964 <main+0x258c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a22      	ldr	r2, [pc, #136]	; (8006954 <main+0x257c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bf38      	it	cc
 80068ce:	4613      	movcc	r3, r2
 80068d0:	e000      	b.n	80068d4 <main+0x24fc>
 80068d2:	4b1f      	ldr	r3, [pc, #124]	; (8006950 <main+0x2578>)
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <main+0x2580>)
 80068d6:	6413      	str	r3, [r2, #64]	; 0x40
 80068d8:	e025      	b.n	8006926 <main+0x254e>
			  }
			  else
			  {
				  TIM5->CCR1 = 84000;
 80068da:	4b1f      	ldr	r3, [pc, #124]	; (8006958 <main+0x2580>)
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <main+0x257c>)
 80068de:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM5->CCR2 = 84000;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <main+0x2580>)
 80068e2:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <main+0x257c>)
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM5->CCR3 = 84000;
 80068e6:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <main+0x2580>)
 80068e8:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <main+0x257c>)
 80068ea:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM5->CCR4 = 84000;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <main+0x2580>)
 80068ee:	4a19      	ldr	r2, [pc, #100]	; (8006954 <main+0x257c>)
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
 80068f2:	e018      	b.n	8006926 <main+0x254e>
			  }
		  }
		  else
		  {
			  TIM5->CCR1 = 84000;
 80068f4:	4b18      	ldr	r3, [pc, #96]	; (8006958 <main+0x2580>)
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <main+0x257c>)
 80068f8:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 84000;
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <main+0x2580>)
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <main+0x257c>)
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 84000;
 8006900:	4b15      	ldr	r3, [pc, #84]	; (8006958 <main+0x2580>)
 8006902:	4a14      	ldr	r2, [pc, #80]	; (8006954 <main+0x257c>)
 8006904:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 84000;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <main+0x2580>)
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <main+0x257c>)
 800690a:	641a      	str	r2, [r3, #64]	; 0x40
 800690c:	e00b      	b.n	8006926 <main+0x254e>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 84000;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <main+0x2580>)
 8006910:	4a10      	ldr	r2, [pc, #64]	; (8006954 <main+0x257c>)
 8006912:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 84000;
 8006914:	4b10      	ldr	r3, [pc, #64]	; (8006958 <main+0x2580>)
 8006916:	4a0f      	ldr	r2, [pc, #60]	; (8006954 <main+0x257c>)
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 84000;
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <main+0x2580>)
 800691c:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <main+0x257c>)
 800691e:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 84000;
 8006920:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <main+0x2580>)
 8006922:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <main+0x257c>)
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
	  }


	  /********************* Telemetry Communication ************************/
	  if(tim7_20ms_flag == 1 && tim7_100ms_flag == 0)
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <main+0x2590>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d120      	bne.n	8006970 <main+0x2598>
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <main+0x2594>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d11c      	bne.n	8006970 <main+0x2598>
	  {
		  tim7_20ms_flag = 0;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <main+0x2590>)
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	e02e      	b.n	800699c <main+0x25c4>
 800693e:	bf00      	nop
 8006940:	40000400 	.word	0x40000400
 8006944:	20000384 	.word	0x20000384
 8006948:	2000020b 	.word	0x2000020b
 800694c:	2000075c 	.word	0x2000075c
 8006950:	0002903f 	.word	0x0002903f
 8006954:	00014820 	.word	0x00014820
 8006958:	40000c00 	.word	0x40000c00
 800695c:	20000770 	.word	0x20000770
 8006960:	20000798 	.word	0x20000798
 8006964:	20000774 	.word	0x20000774
 8006968:	20000283 	.word	0x20000283
 800696c:	20000284 	.word	0x20000284
//		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
//		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 8006970:	4bc2      	ldr	r3, [pc, #776]	; (8006c7c <main+0x28a4>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d111      	bne.n	800699c <main+0x25c4>
 8006978:	4bc1      	ldr	r3, [pc, #772]	; (8006c80 <main+0x28a8>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10d      	bne.n	800699c <main+0x25c4>
	  {
		  tim7_20ms_flag = 0;
 8006980:	4bbe      	ldr	r3, [pc, #760]	; (8006c7c <main+0x28a4>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 8006986:	4bbe      	ldr	r3, [pc, #760]	; (8006c80 <main+0x28a8>)
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
//		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
//		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
//		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
		  Encode_Msg_Altitude(&telemetry_tx_buf[0]);
 800698c:	48bd      	ldr	r0, [pc, #756]	; (8006c84 <main+0x28ac>)
 800698e:	f000 fcbd 	bl	800730c <Encode_Msg_Altitude>
		  HAL_UART_Transmit_DMA(&huart1, &telemetry_tx_buf[0], 14);
 8006992:	220e      	movs	r2, #14
 8006994:	49bb      	ldr	r1, [pc, #748]	; (8006c84 <main+0x28ac>)
 8006996:	48bc      	ldr	r0, [pc, #752]	; (8006c88 <main+0x28b0>)
 8006998:	f004 fce2 	bl	800b360 <HAL_UART_Transmit_DMA>


	  /***********************************************************************************************
	----------------------------Check BNO080 Sensor Value(current Angle Data)-----------------------
	   ***********************************************************************************************/
	  if(BNO080_dataAvailable() == 1)
 800699c:	f7fa fe6a 	bl	8001674 <BNO080_dataAvailable>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d155      	bne.n	8006a52 <main+0x267a>
	  {
		  q[0] = BNO080_getQuatI();
 80069a6:	f7fb f81f 	bl	80019e8 <BNO080_getQuatI>
 80069aa:	eef0 7a40 	vmov.f32	s15, s0
 80069ae:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[1] = BNO080_getQuatJ();
 80069b2:	f7fb f82f 	bl	8001a14 <BNO080_getQuatJ>
 80069b6:	eef0 7a40 	vmov.f32	s15, s0
 80069ba:	edc7 7a04 	vstr	s15, [r7, #16]
		  q[2] = BNO080_getQuatK();
 80069be:	f7fb f83f 	bl	8001a40 <BNO080_getQuatK>
 80069c2:	eef0 7a40 	vmov.f32	s15, s0
 80069c6:	edc7 7a05 	vstr	s15, [r7, #20]
		  q[3] = BNO080_getQuatReal();
 80069ca:	f7fb f84f 	bl	8001a6c <BNO080_getQuatReal>
 80069ce:	eef0 7a40 	vmov.f32	s15, s0
 80069d2:	edc7 7a06 	vstr	s15, [r7, #24]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80069d6:	f7fb f85f 	bl	8001a98 <BNO080_getQuatRadianAccuracy>
 80069da:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		  Quaternion_Update(&q[0]);
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fd f956 	bl	8003c94 <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 80069e8:	4ba8      	ldr	r3, [pc, #672]	; (8006c8c <main+0x28b4>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	eef1 7a67 	vneg.f32	s15, s15
 80069f2:	4ba6      	ldr	r3, [pc, #664]	; (8006c8c <main+0x28b4>)
 80069f4:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Roll -= BNO080_Roll_Offset;
 80069f8:	4ba4      	ldr	r3, [pc, #656]	; (8006c8c <main+0x28b4>)
 80069fa:	ed93 7a00 	vldr	s14, [r3]
 80069fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a06:	4ba1      	ldr	r3, [pc, #644]	; (8006c8c <main+0x28b4>)
 8006a08:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 8006a0c:	4ba0      	ldr	r3, [pc, #640]	; (8006c90 <main+0x28b8>)
 8006a0e:	edd3 7a00 	vldr	s15, [r3]
 8006a12:	eef1 7a67 	vneg.f32	s15, s15
 8006a16:	4b9e      	ldr	r3, [pc, #632]	; (8006c90 <main+0x28b8>)
 8006a18:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch -= BNO080_Pitch_Offset;
 8006a1c:	4b9c      	ldr	r3, [pc, #624]	; (8006c90 <main+0x28b8>)
 8006a1e:	ed93 7a00 	vldr	s14, [r3]
 8006a22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a2a:	4b99      	ldr	r3, [pc, #612]	; (8006c90 <main+0x28b8>)
 8006a2c:	edc3 7a00 	vstr	s15, [r3]

		  float theta = 360.f - BNO080_Yaw;
 8006a30:	4b98      	ldr	r3, [pc, #608]	; (8006c94 <main+0x28bc>)
 8006a32:	edd3 7a00 	vldr	s15, [r3]
 8006a36:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8006c98 <main+0x28c0>
 8006a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a3e:	edc7 7a08 	vstr	s15, [r7, #32]
		  float theta_radian = theta * 0.01745329252f;
 8006a42:	edd7 7a08 	vldr	s15, [r7, #32]
 8006a46:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006c9c <main+0x28c4>
 8006a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
	  }

	  /***********************************************************************************************
	----------------------Check ICM20602 Sensor Value(current Angular Velocity Data)------------------
	   ***********************************************************************************************/
	  if(ICM20602_DataReady() == 1)
 8006a52:	f7fb fe57 	bl	8002704 <ICM20602_DataReady>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d13c      	bne.n	8006ad6 <main+0x26fe>
	  {
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8006a5c:	4890      	ldr	r0, [pc, #576]	; (8006ca0 <main+0x28c8>)
 8006a5e:	f7fb fe25 	bl	80026ac <ICM20602_Get3AxisGyroRawData>

		  // Gyro FS=2 (+500dps max)
		  ICM20602.gyro_x = ICM20602.gyro_x_raw / 65.5f;
 8006a62:	4b90      	ldr	r3, [pc, #576]	; (8006ca4 <main+0x28cc>)
 8006a64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a70:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8006ca8 <main+0x28d0>
 8006a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a78:	4b8a      	ldr	r3, [pc, #552]	; (8006ca4 <main+0x28cc>)
 8006a7a:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw / 65.5f;
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <main+0x28cc>)
 8006a80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a8c:	eddf 6a86 	vldr	s13, [pc, #536]	; 8006ca8 <main+0x28d0>
 8006a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a94:	4b83      	ldr	r3, [pc, #524]	; (8006ca4 <main+0x28cc>)
 8006a96:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw / 65.5f;
 8006a9a:	4b82      	ldr	r3, [pc, #520]	; (8006ca4 <main+0x28cc>)
 8006a9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8006ca8 <main+0x28d0>
 8006aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ab0:	4b7c      	ldr	r3, [pc, #496]	; (8006ca4 <main+0x28cc>)
 8006ab2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 8006ab6:	4b7b      	ldr	r3, [pc, #492]	; (8006ca4 <main+0x28cc>)
 8006ab8:	edd3 7a07 	vldr	s15, [r3, #28]
 8006abc:	eef1 7a67 	vneg.f32	s15, s15
 8006ac0:	4b78      	ldr	r3, [pc, #480]	; (8006ca4 <main+0x28cc>)
 8006ac2:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 8006ac6:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <main+0x28cc>)
 8006ac8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006acc:	eef1 7a67 	vneg.f32	s15, s15
 8006ad0:	4b74      	ldr	r3, [pc, #464]	; (8006ca4 <main+0x28cc>)
 8006ad2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

//		  printf("%d, %d, %d \n", (int)ICM20602.gyro_x, (int)ICM20602.gyro_y, (int)ICM20602.gyro_z);
	  }

	  if(LPS22HH_DataReady() == 1)
 8006ad6:	f7fc f885 	bl	8002be4 <LPS22HH_DataReady>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d17b      	bne.n	8006bd8 <main+0x2800>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8006ae0:	4872      	ldr	r0, [pc, #456]	; (8006cac <main+0x28d4>)
 8006ae2:	f7fc f88b 	bl	8002bfc <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8006ae6:	4872      	ldr	r0, [pc, #456]	; (8006cb0 <main+0x28d8>)
 8006ae8:	f7fc f895 	bl	8002c16 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f); //Default Unit = 1m
 8006aec:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <main+0x28d4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006af8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006cb4 <main+0x28dc>
 8006afc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006b00:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <main+0x28d4>)
 8006b02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0e:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 8006cb8 <main+0x28e0>
 8006b12:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b16:	eef0 0a66 	vmov.f32	s1, s13
 8006b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8006b1e:	f7fc f887 	bl	8002c30 <getAltitude2>
 8006b22:	eef0 7a40 	vmov.f32	s15, s0
 8006b26:	4b61      	ldr	r3, [pc, #388]	; (8006cac <main+0x28d4>)
 8006b28:	edc3 7a02 	vstr	s15, [r3, #8]

		  pressure_total_average -= pressure_rotating_mem[pressure_rotating_mem_location];
 8006b2c:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <main+0x28e4>)
 8006b2e:	ed93 7a00 	vldr	s14, [r3]
 8006b32:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <main+0x28e8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a63      	ldr	r2, [pc, #396]	; (8006cc4 <main+0x28ec>)
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	edd3 7a00 	vldr	s15, [r3]
 8006b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b44:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <main+0x28e4>)
 8006b46:	edc3 7a00 	vstr	s15, [r3]
		  pressure_rotating_mem[pressure_rotating_mem_location] = LPS22HH.baroAlt - baro_offset;
 8006b4a:	4b58      	ldr	r3, [pc, #352]	; (8006cac <main+0x28d4>)
 8006b4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006b50:	4b5d      	ldr	r3, [pc, #372]	; (8006cc8 <main+0x28f0>)
 8006b52:	edd3 7a00 	vldr	s15, [r3]
 8006b56:	4b5a      	ldr	r3, [pc, #360]	; (8006cc0 <main+0x28e8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5e:	4a59      	ldr	r2, [pc, #356]	; (8006cc4 <main+0x28ec>)
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	edc3 7a00 	vstr	s15, [r3]
		  pressure_total_average += pressure_rotating_mem[pressure_rotating_mem_location];
 8006b68:	4b55      	ldr	r3, [pc, #340]	; (8006cc0 <main+0x28e8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a55      	ldr	r2, [pc, #340]	; (8006cc4 <main+0x28ec>)
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	ed93 7a00 	vldr	s14, [r3]
 8006b76:	4b51      	ldr	r3, [pc, #324]	; (8006cbc <main+0x28e4>)
 8006b78:	edd3 7a00 	vldr	s15, [r3]
 8006b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b80:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <main+0x28e4>)
 8006b82:	edc3 7a00 	vstr	s15, [r3]
		  pressure_rotating_mem_location++;
 8006b86:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <main+0x28e8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <main+0x28e8>)
 8006b8e:	6013      	str	r3, [r2, #0]
		  if(pressure_rotating_mem_location ==20) pressure_rotating_mem_location = 0;
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <main+0x28e8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b14      	cmp	r3, #20
 8006b96:	d102      	bne.n	8006b9e <main+0x27c6>
 8006b98:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <main+0x28e8>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
		  actual_pressure_fast = pressure_total_average / 20.0f;
 8006b9e:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <main+0x28e4>)
 8006ba0:	ed93 7a00 	vldr	s14, [r3]
 8006ba4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bac:	4b47      	ldr	r3, [pc, #284]	; (8006ccc <main+0x28f4>)
 8006bae:	edc3 7a00 	vstr	s15, [r3]
		  actual_pressure_slow = actual_pressure_slow * 0.985f + actual_pressure_fast * 0.015f;
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <main+0x28f8>)
 8006bb4:	edd3 7a00 	vldr	s15, [r3]
 8006bb8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006cd4 <main+0x28fc>
 8006bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bc0:	4b42      	ldr	r3, [pc, #264]	; (8006ccc <main+0x28f4>)
 8006bc2:	edd3 7a00 	vldr	s15, [r3]
 8006bc6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006cd8 <main+0x2900>
 8006bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <main+0x28f8>)
 8006bd4:	edc3 7a00 	vstr	s15, [r3]


	  /***********************************************************************************************
	------------------------------Toggle Led if Checksum Data is right------------------------------
	   ***********************************************************************************************/
	  if(ibus_rx_cplt_flag==1)
 8006bd8:	4b40      	ldr	r3, [pc, #256]	; (8006cdc <main+0x2904>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d123      	bne.n	8006c28 <main+0x2850>
	  {
		  ibus_rx_cplt_flag=0;
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <main+0x2904>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8006be6:	2120      	movs	r1, #32
 8006be8:	483d      	ldr	r0, [pc, #244]	; (8006ce0 <main+0x2908>)
 8006bea:	f7fb fa05 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d119      	bne.n	8006c28 <main+0x2850>
		  {
			  LL_GPIO_TogglePin(GPIOC,LL_GPIO_PIN_2);
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	483b      	ldr	r0, [pc, #236]	; (8006ce4 <main+0x290c>)
 8006bf8:	f7fd fba8 	bl	800434c <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf, &iBus);
 8006bfc:	493a      	ldr	r1, [pc, #232]	; (8006ce8 <main+0x2910>)
 8006bfe:	4838      	ldr	r0, [pc, #224]	; (8006ce0 <main+0x2908>)
 8006c00:	f7fb fa31 	bl	8002066 <iBus_Parsing>
			  iBus_rx_cnt++;
 8006c04:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

			  if(iBus_isActiveFailSafe(&iBus) == 1)
 8006c0e:	4836      	ldr	r0, [pc, #216]	; (8006ce8 <main+0x2910>)
 8006c10:	f7fb fae5 	bl	80021de <iBus_isActiveFailSafe>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d103      	bne.n	8006c22 <main+0x284a>
			  {
				  failsafe_flag = 1;
 8006c1a:	4b34      	ldr	r3, [pc, #208]	; (8006cec <main+0x2914>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e002      	b.n	8006c28 <main+0x2850>
			  }
			  else
			  {
				  failsafe_flag = 0;
 8006c22:	4b32      	ldr	r3, [pc, #200]	; (8006cec <main+0x2914>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 8006c28:	4b31      	ldr	r3, [pc, #196]	; (8006cf0 <main+0x2918>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10c      	bne.n	8006c4a <main+0x2872>
	  {
		  tim7_1000ms_flag = 0;
 8006c30:	4b2f      	ldr	r3, [pc, #188]	; (8006cf0 <main+0x2918>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 8006c36:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <main+0x286c>
		  {
			  failsafe_flag = 2;
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <main+0x2914>)
 8006c40:	2202      	movs	r2, #2
 8006c42:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	  }

	  if(failsafe_flag == 1 || failsafe_flag ==2 || low_bat_flag == 1)
 8006c4a:	4b28      	ldr	r3, [pc, #160]	; (8006cec <main+0x2914>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d007      	beq.n	8006c62 <main+0x288a>
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <main+0x2914>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d003      	beq.n	8006c62 <main+0x288a>
 8006c5a:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <main+0x291c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <main+0x2896>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Buzzer On
 8006c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c66:	4824      	ldr	r0, [pc, #144]	; (8006cf8 <main+0x2920>)
 8006c68:	f7fd faee 	bl	8004248 <LL_TIM_CC_EnableChannel>
 8006c6c:	e004      	b.n	8006c78 <main+0x28a0>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4); //Buzzer Off
 8006c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c72:	4821      	ldr	r0, [pc, #132]	; (8006cf8 <main+0x2920>)
 8006c74:	f7fd faf9 	bl	800426a <LL_TIM_CC_DisableChannel>
	  if(m8n_rx_cplt_flag == 1) // GPS receive checking
 8006c78:	f7fd bff5 	b.w	8004c66 <main+0x88e>
 8006c7c:	20000283 	.word	0x20000283
 8006c80:	20000284 	.word	0x20000284
 8006c84:	2000079c 	.word	0x2000079c
 8006c88:	20000878 	.word	0x20000878
 8006c8c:	200006e8 	.word	0x200006e8
 8006c90:	200006f0 	.word	0x200006f0
 8006c94:	200006ec 	.word	0x200006ec
 8006c98:	43b40000 	.word	0x43b40000
 8006c9c:	3c8efa35 	.word	0x3c8efa35
 8006ca0:	200003b0 	.word	0x200003b0
 8006ca4:	200003a8 	.word	0x200003a8
 8006ca8:	42830000 	.word	0x42830000
 8006cac:	200003d0 	.word	0x200003d0
 8006cb0:	200003d4 	.word	0x200003d4
 8006cb4:	45800000 	.word	0x45800000
 8006cb8:	42c80000 	.word	0x42c80000
 8006cbc:	20000218 	.word	0x20000218
 8006cc0:	2000026c 	.word	0x2000026c
 8006cc4:	2000021c 	.word	0x2000021c
 8006cc8:	20000210 	.word	0x20000210
 8006ccc:	20000270 	.word	0x20000270
 8006cd0:	20000274 	.word	0x20000274
 8006cd4:	3f7c28f6 	.word	0x3f7c28f6
 8006cd8:	3c75c28f 	.word	0x3c75c28f
 8006cdc:	20000280 	.word	0x20000280
 8006ce0:	200007d0 	.word	0x200007d0
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	20000384 	.word	0x20000384
 8006cec:	2000020b 	.word	0x2000020b
 8006cf0:	20000285 	.word	0x20000285
 8006cf4:	2000020c 	.word	0x2000020c
 8006cf8:	40000400 	.word	0x40000400

08006cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b094      	sub	sp, #80	; 0x50
 8006d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d02:	f107 0320 	add.w	r3, r7, #32
 8006d06:	2230      	movs	r2, #48	; 0x30
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f006 fa1c 	bl	800d148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d10:	f107 030c 	add.w	r3, r7, #12
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	60da      	str	r2, [r3, #12]
 8006d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	4b28      	ldr	r3, [pc, #160]	; (8006dc8 <SystemClock_Config+0xcc>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <SystemClock_Config+0xcc>)
 8006d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <SystemClock_Config+0xcc>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <SystemClock_Config+0xd0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a21      	ldr	r2, [pc, #132]	; (8006dcc <SystemClock_Config+0xd0>)
 8006d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <SystemClock_Config+0xd0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d62:	2302      	movs	r3, #2
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006d70:	23a8      	movs	r3, #168	; 0xa8
 8006d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d74:	2302      	movs	r3, #2
 8006d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006d78:	2304      	movs	r3, #4
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d7c:	f107 0320 	add.w	r3, r7, #32
 8006d80:	4618      	mov	r0, r3
 8006d82:	f003 fd25 	bl	800a7d0 <HAL_RCC_OscConfig>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006d8c:	f000 fb66 	bl	800745c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d90:	230f      	movs	r3, #15
 8006d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d94:	2302      	movs	r3, #2
 8006d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	2105      	movs	r1, #5
 8006dae:	4618      	mov	r0, r3
 8006db0:	f003 ff86 	bl	800acc0 <HAL_RCC_ClockConfig>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006dba:	f000 fb4f 	bl	800745c <Error_Handler>
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3750      	adds	r7, #80	; 0x50
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40007000 	.word	0x40007000

08006dd0 <Is_iBus_Throttle_min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_min(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <Is_iBus_Throttle_min+0x40>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d115      	bne.n	8006e08 <Is_iBus_Throttle_min+0x38>
	{
		ibus_rx_cplt_flag=0;
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <Is_iBus_Throttle_min+0x40>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8006de2:	2120      	movs	r1, #32
 8006de4:	480b      	ldr	r0, [pc, #44]	; (8006e14 <Is_iBus_Throttle_min+0x44>)
 8006de6:	f7fb f907 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10b      	bne.n	8006e08 <Is_iBus_Throttle_min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf, &iBus);
 8006df0:	4909      	ldr	r1, [pc, #36]	; (8006e18 <Is_iBus_Throttle_min+0x48>)
 8006df2:	4808      	ldr	r0, [pc, #32]	; (8006e14 <Is_iBus_Throttle_min+0x44>)
 8006df4:	f7fb f937 	bl	8002066 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 8006df8:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <Is_iBus_Throttle_min+0x48>)
 8006dfa:	889b      	ldrh	r3, [r3, #4]
 8006dfc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d801      	bhi.n	8006e08 <Is_iBus_Throttle_min+0x38>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <Is_iBus_Throttle_min+0x3a>
		}
	}

	return 0;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000280 	.word	0x20000280
 8006e14:	200007d0 	.word	0x200007d0
 8006e18:	20000384 	.word	0x20000384

08006e1c <ESC_Calibration>:

void ESC_Calibration(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 167999;
 8006e20:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <ESC_Calibration+0x48>)
 8006e22:	4a11      	ldr	r2, [pc, #68]	; (8006e68 <ESC_Calibration+0x4c>)
 8006e24:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 167999;
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <ESC_Calibration+0x48>)
 8006e28:	4a0f      	ldr	r2, [pc, #60]	; (8006e68 <ESC_Calibration+0x4c>)
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 167999;
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <ESC_Calibration+0x48>)
 8006e2e:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <ESC_Calibration+0x4c>)
 8006e30:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 167999;
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <ESC_Calibration+0x48>)
 8006e34:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <ESC_Calibration+0x4c>)
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 8006e38:	f641 3058 	movw	r0, #7000	; 0x1b58
 8006e3c:	f001 fe34 	bl	8008aa8 <HAL_Delay>

	  TIM5->CCR1 = 84000;
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <ESC_Calibration+0x48>)
 8006e42:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <ESC_Calibration+0x50>)
 8006e44:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 84000;
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <ESC_Calibration+0x48>)
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <ESC_Calibration+0x50>)
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 84000;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <ESC_Calibration+0x48>)
 8006e4e:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <ESC_Calibration+0x50>)
 8006e50:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 84000;
 8006e52:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <ESC_Calibration+0x48>)
 8006e54:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <ESC_Calibration+0x50>)
 8006e56:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 8006e58:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006e5c:	f001 fe24 	bl	8008aa8 <HAL_Delay>
}
 8006e60:	bf00      	nop
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	0002903f 	.word	0x0002903f
 8006e6c:	00014820 	.word	0x00014820

08006e70 <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <Is_iBus_Received+0x34>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10f      	bne.n	8006e9c <Is_iBus_Received+0x2c>
		{
			ibus_rx_cplt_flag=0;
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <Is_iBus_Received+0x34>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8006e82:	2120      	movs	r1, #32
 8006e84:	4808      	ldr	r0, [pc, #32]	; (8006ea8 <Is_iBus_Received+0x38>)
 8006e86:	f7fb f8b7 	bl	8001ff8 <iBus_Check_CHKSUM>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d105      	bne.n	8006e9c <Is_iBus_Received+0x2c>
			{
				iBus_Parsing(&ibus_rx_buf, &iBus);
 8006e90:	4906      	ldr	r1, [pc, #24]	; (8006eac <Is_iBus_Received+0x3c>)
 8006e92:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <Is_iBus_Received+0x38>)
 8006e94:	f7fb f8e7 	bl	8002066 <iBus_Parsing>
				return 1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <Is_iBus_Received+0x2e>
			}
		}
		return 0;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000280 	.word	0x20000280
 8006ea8:	200007d0 	.word	0x200007d0
 8006eac:	20000384 	.word	0x20000384

08006eb0 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b090      	sub	sp, #64	; 0x40
 8006eb6:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8006eb8:	f7fa fb46 	bl	8001548 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8006ebc:	f7fa feb0 	bl	8001c20 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 8006ec0:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006ec4:	f7fa fe8e 	bl	8001be4 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8006ec8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006ecc:	f7fa fe99 	bl	8001c02 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 8006ed0:	489d      	ldr	r0, [pc, #628]	; (8007148 <BNO080_Calibration+0x298>)
 8006ed2:	f006 fe31 	bl	800db38 <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 8006ed6:	489d      	ldr	r0, [pc, #628]	; (800714c <BNO080_Calibration+0x29c>)
 8006ed8:	f006 fe2e 	bl	800db38 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8006edc:	e0b8      	b.n	8007050 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 8006ede:	f7fa fbc9 	bl	8001674 <BNO080_dataAvailable>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 80ae 	bne.w	8007046 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8006eea:	f7fa fdf7 	bl	8001adc <BNO080_getMagX>
 8006eee:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8006ef2:	f7fa fe09 	bl	8001b08 <BNO080_getMagY>
 8006ef6:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8006efa:	f7fa fe1b 	bl	8001b34 <BNO080_getMagZ>
 8006efe:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8006f02:	f7fa fe2d 	bl	8001b60 <BNO080_getMagAccuracy>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8006f0a:	f7fa fd6d 	bl	80019e8 <BNO080_getQuatI>
 8006f0e:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8006f12:	f7fa fd7f 	bl	8001a14 <BNO080_getQuatJ>
 8006f16:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8006f1a:	f7fa fd91 	bl	8001a40 <BNO080_getQuatK>
 8006f1e:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8006f22:	f7fa fda3 	bl	8001a6c <BNO080_getQuatReal>
 8006f26:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8006f2a:	f7fa fdcb 	bl	8001ac4 <BNO080_getQuatAccuracy>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8006f32:	6a38      	ldr	r0, [r7, #32]
 8006f34:	f7f9 fb08 	bl	8000548 <__aeabi_f2d>
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	69f8      	ldr	r0, [r7, #28]
 8006f3e:	f7f9 fb03 	bl	8000548 <__aeabi_f2d>
 8006f42:	4604      	mov	r4, r0
 8006f44:	460d      	mov	r5, r1
 8006f46:	69b8      	ldr	r0, [r7, #24]
 8006f48:	f7f9 fafe 	bl	8000548 <__aeabi_f2d>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f54:	e9cd 4500 	strd	r4, r5, [sp]
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	487c      	ldr	r0, [pc, #496]	; (8007150 <BNO080_Calibration+0x2a0>)
 8006f5e:	f006 fd65 	bl	800da2c <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <BNO080_Calibration+0xc0>
 8006f68:	487a      	ldr	r0, [pc, #488]	; (8007154 <BNO080_Calibration+0x2a4>)
 8006f6a:	f006 fd5f 	bl	800da2c <iprintf>
 8006f6e:	e013      	b.n	8006f98 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d103      	bne.n	8006f7e <BNO080_Calibration+0xce>
 8006f76:	4878      	ldr	r0, [pc, #480]	; (8007158 <BNO080_Calibration+0x2a8>)
 8006f78:	f006 fd58 	bl	800da2c <iprintf>
 8006f7c:	e00c      	b.n	8006f98 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d103      	bne.n	8006f8c <BNO080_Calibration+0xdc>
 8006f84:	4875      	ldr	r0, [pc, #468]	; (800715c <BNO080_Calibration+0x2ac>)
 8006f86:	f006 fd51 	bl	800da2c <iprintf>
 8006f8a:	e005      	b.n	8006f98 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d102      	bne.n	8006f98 <BNO080_Calibration+0xe8>
 8006f92:	4873      	ldr	r0, [pc, #460]	; (8007160 <BNO080_Calibration+0x2b0>)
 8006f94:	f006 fd4a 	bl	800da2c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8006f98:	6938      	ldr	r0, [r7, #16]
 8006f9a:	f7f9 fad5 	bl	8000548 <__aeabi_f2d>
 8006f9e:	4682      	mov	sl, r0
 8006fa0:	468b      	mov	fp, r1
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f7f9 fad0 	bl	8000548 <__aeabi_f2d>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	6938      	ldr	r0, [r7, #16]
 8006fae:	f7f9 facb 	bl	8000548 <__aeabi_f2d>
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7f9 fac6 	bl	8000548 <__aeabi_f2d>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fc4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006fc8:	e9cd 4500 	strd	r4, r5, [sp]
 8006fcc:	4652      	mov	r2, sl
 8006fce:	465b      	mov	r3, fp
 8006fd0:	4864      	ldr	r0, [pc, #400]	; (8007164 <BNO080_Calibration+0x2b4>)
 8006fd2:	f006 fd2b 	bl	800da2c <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <BNO080_Calibration+0x134>
 8006fdc:	4862      	ldr	r0, [pc, #392]	; (8007168 <BNO080_Calibration+0x2b8>)
 8006fde:	f006 fdab 	bl	800db38 <puts>
 8006fe2:	e013      	b.n	800700c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d103      	bne.n	8006ff2 <BNO080_Calibration+0x142>
 8006fea:	4860      	ldr	r0, [pc, #384]	; (800716c <BNO080_Calibration+0x2bc>)
 8006fec:	f006 fda4 	bl	800db38 <puts>
 8006ff0:	e00c      	b.n	800700c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d103      	bne.n	8007000 <BNO080_Calibration+0x150>
 8006ff8:	485d      	ldr	r0, [pc, #372]	; (8007170 <BNO080_Calibration+0x2c0>)
 8006ffa:	f006 fd9d 	bl	800db38 <puts>
 8006ffe:	e005      	b.n	800700c <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d102      	bne.n	800700c <BNO080_Calibration+0x15c>
 8007006:	485b      	ldr	r0, [pc, #364]	; (8007174 <BNO080_Calibration+0x2c4>)
 8007008:	f006 fd96 	bl	800db38 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d110      	bne.n	8007034 <BNO080_Calibration+0x184>
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d10d      	bne.n	8007034 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8007018:	2107      	movs	r1, #7
 800701a:	4857      	ldr	r0, [pc, #348]	; (8007178 <BNO080_Calibration+0x2c8>)
 800701c:	f7fd f979 	bl	8004312 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8007020:	4b56      	ldr	r3, [pc, #344]	; (800717c <BNO080_Calibration+0x2cc>)
 8007022:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8007028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800702c:	4853      	ldr	r0, [pc, #332]	; (800717c <BNO080_Calibration+0x2cc>)
 800702e:	f7fd f90b 	bl	8004248 <LL_TIM_CC_EnableChannel>
 8007032:	e008      	b.n	8007046 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8007034:	2107      	movs	r1, #7
 8007036:	4850      	ldr	r0, [pc, #320]	; (8007178 <BNO080_Calibration+0x2c8>)
 8007038:	f7fd f979 	bl	800432e <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800703c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007040:	484e      	ldr	r0, [pc, #312]	; (800717c <BNO080_Calibration+0x2cc>)
 8007042:	f7fd f912 	bl	800426a <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8007046:	f7ff ff13 	bl	8006e70 <Is_iBus_Received>
		HAL_Delay(100);
 800704a:	2064      	movs	r0, #100	; 0x64
 800704c:	f001 fd2c 	bl	8008aa8 <HAL_Delay>
	while(iBus.SwC == 1500)
 8007050:	4b4b      	ldr	r3, [pc, #300]	; (8007180 <BNO080_Calibration+0x2d0>)
 8007052:	899b      	ldrh	r3, [r3, #12]
 8007054:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007058:	4293      	cmp	r3, r2
 800705a:	f43f af40 	beq.w	8006ede <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800705e:	2107      	movs	r1, #7
 8007060:	4845      	ldr	r0, [pc, #276]	; (8007178 <BNO080_Calibration+0x2c8>)
 8007062:	f7fd f964 	bl	800432e <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8007066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800706a:	4844      	ldr	r0, [pc, #272]	; (800717c <BNO080_Calibration+0x2cc>)
 800706c:	f7fd f8fd 	bl	800426a <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8007070:	f7fa fec4 	bl	8001dfc <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8007074:	f7fa fea6 	bl	8001dc4 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8007078:	2364      	movs	r3, #100	; 0x64
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	3b01      	subs	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02f      	beq.n	80070e8 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 8007088:	f7fa faf4 	bl	8001674 <BNO080_dataAvailable>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d026      	beq.n	80070e0 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 8007092:	f7fa fdcd 	bl	8001c30 <BNO080_calibrationComplete>
 8007096:	4603      	mov	r3, r0
 8007098:	2b01      	cmp	r3, #1
 800709a:	d121      	bne.n	80070e0 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 800709c:	4839      	ldr	r0, [pc, #228]	; (8007184 <BNO080_Calibration+0x2d4>)
 800709e:	f006 fd4b 	bl	800db38 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80070a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070a6:	4835      	ldr	r0, [pc, #212]	; (800717c <BNO080_Calibration+0x2cc>)
 80070a8:	f7fd f8ce 	bl	8004248 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80070ac:	4b33      	ldr	r3, [pc, #204]	; (800717c <BNO080_Calibration+0x2cc>)
 80070ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80070b2:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80070b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80070b8:	f001 fcf6 	bl	8008aa8 <HAL_Delay>
				TIM3->PSC = 1500;
 80070bc:	4b2f      	ldr	r3, [pc, #188]	; (800717c <BNO080_Calibration+0x2cc>)
 80070be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80070c2:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80070c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80070c8:	f001 fcee 	bl	8008aa8 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80070cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070d0:	482a      	ldr	r0, [pc, #168]	; (800717c <BNO080_Calibration+0x2cc>)
 80070d2:	f7fd f8ca 	bl	800426a <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 80070d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070da:	f001 fce5 	bl	8008aa8 <HAL_Delay>
				break;
 80070de:	e004      	b.n	80070ea <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 80070e0:	200a      	movs	r0, #10
 80070e2:	f001 fce1 	bl	8008aa8 <HAL_Delay>
		if(--counter == 0) break;
 80070e6:	e7c9      	b.n	800707c <BNO080_Calibration+0x1cc>
 80070e8:	bf00      	nop
	}
	if(counter == 0)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d120      	bne.n	8007132 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 80070f0:	4825      	ldr	r0, [pc, #148]	; (8007188 <BNO080_Calibration+0x2d8>)
 80070f2:	f006 fd21 	bl	800db38 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80070f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070fa:	4820      	ldr	r0, [pc, #128]	; (800717c <BNO080_Calibration+0x2cc>)
 80070fc:	f7fd f8a4 	bl	8004248 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8007100:	4b1e      	ldr	r3, [pc, #120]	; (800717c <BNO080_Calibration+0x2cc>)
 8007102:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8007108:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800710c:	f001 fccc 	bl	8008aa8 <HAL_Delay>
		TIM3->PSC = 2000;
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <BNO080_Calibration+0x2cc>)
 8007112:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8007118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800711c:	f001 fcc4 	bl	8008aa8 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8007120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007124:	4815      	ldr	r0, [pc, #84]	; (800717c <BNO080_Calibration+0x2cc>)
 8007126:	f7fd f8a0 	bl	800426a <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800712a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800712e:	f001 fcbb 	bl	8008aa8 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8007132:	f7fa fa09 	bl	8001548 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8007136:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800713a:	f7fa fd44 	bl	8001bc6 <BNO080_enableRotationVector>
}
 800713e:	bf00      	nop
 8007140:	3728      	adds	r7, #40	; 0x28
 8007142:	46bd      	mov	sp, r7
 8007144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007148:	08011d10 	.word	0x08011d10
 800714c:	08011d5c 	.word	0x08011d5c
 8007150:	08011d80 	.word	0x08011d80
 8007154:	08011d8c 	.word	0x08011d8c
 8007158:	08011d98 	.word	0x08011d98
 800715c:	08011da0 	.word	0x08011da0
 8007160:	08011da8 	.word	0x08011da8
 8007164:	08011db0 	.word	0x08011db0
 8007168:	08011dc0 	.word	0x08011dc0
 800716c:	08011dcc 	.word	0x08011dcc
 8007170:	08011dd0 	.word	0x08011dd0
 8007174:	08011dd8 	.word	0x08011dd8
 8007178:	40020800 	.word	0x40020800
 800717c:	40000400 	.word	0x40000400
 8007180:	20000384 	.word	0x20000384
 8007184:	08011de0 	.word	0x08011de0
 8007188:	08011e08 	.word	0x08011e08

0800718c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;
	if(huart->Instance = USART1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2d      	ldr	r2, [pc, #180]	; (800724c <HAL_UART_RxCpltCallback+0xc0>)
 8007198:	601a      	str	r2, [r3, #0]
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800719a:	2201      	movs	r2, #1
 800719c:	492c      	ldr	r1, [pc, #176]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 800719e:	482d      	ldr	r0, [pc, #180]	; (8007254 <HAL_UART_RxCpltCallback+0xc8>)
 80071a0:	f004 f8ae 	bl	800b300 <HAL_UART_Receive_IT>

		switch(cnt)
 80071a4:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b13      	cmp	r3, #19
 80071aa:	d02e      	beq.n	800720a <HAL_UART_RxCpltCallback+0x7e>
 80071ac:	2b13      	cmp	r3, #19
 80071ae:	dc3a      	bgt.n	8007226 <HAL_UART_RxCpltCallback+0x9a>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <HAL_UART_RxCpltCallback+0x2e>
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d012      	beq.n	80071de <HAL_UART_RxCpltCallback+0x52>
 80071b8:	e035      	b.n	8007226 <HAL_UART_RxCpltCallback+0x9a>
				{
				case 0:
					if(uart1_rx_data==0x47)
 80071ba:	4b25      	ldr	r3, [pc, #148]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b47      	cmp	r3, #71	; 0x47
 80071c0:	d13f      	bne.n	8007242 <HAL_UART_RxCpltCallback+0xb6>
					{
						telemetry_rx_buf[cnt]=uart1_rx_data;
 80071c2:	4b25      	ldr	r3, [pc, #148]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	4b21      	ldr	r3, [pc, #132]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 80071ca:	7819      	ldrb	r1, [r3, #0]
 80071cc:	4b23      	ldr	r3, [pc, #140]	; (800725c <HAL_UART_RxCpltCallback+0xd0>)
 80071ce:	5499      	strb	r1, [r3, r2]
						cnt++;
 80071d0:	4b21      	ldr	r3, [pc, #132]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	4b1f      	ldr	r3, [pc, #124]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071da:	701a      	strb	r2, [r3, #0]
					}
					break;
 80071dc:	e031      	b.n	8007242 <HAL_UART_RxCpltCallback+0xb6>
				case 1:
					if(uart1_rx_data==0x53)
 80071de:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b53      	cmp	r3, #83	; 0x53
 80071e4:	d10d      	bne.n	8007202 <HAL_UART_RxCpltCallback+0x76>
					{
						telemetry_rx_buf[cnt]=uart1_rx_data;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	4b18      	ldr	r3, [pc, #96]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 80071ee:	7819      	ldrb	r1, [r3, #0]
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <HAL_UART_RxCpltCallback+0xd0>)
 80071f2:	5499      	strb	r1, [r3, r2]
						cnt++;
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	4b16      	ldr	r3, [pc, #88]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 80071fe:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt=0;
					break;
 8007200:	e020      	b.n	8007244 <HAL_UART_RxCpltCallback+0xb8>
						cnt=0;
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
					break;
 8007208:	e01c      	b.n	8007244 <HAL_UART_RxCpltCallback+0xb8>

				case 19:
					telemetry_rx_buf[cnt]=uart1_rx_data;
 800720a:	4b13      	ldr	r3, [pc, #76]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	4b0f      	ldr	r3, [pc, #60]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 8007212:	7819      	ldrb	r1, [r3, #0]
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_UART_RxCpltCallback+0xd0>)
 8007216:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
					telemetry_rx_cplt_flag = 1;
 800721e:	4b10      	ldr	r3, [pc, #64]	; (8007260 <HAL_UART_RxCpltCallback+0xd4>)
 8007220:	2201      	movs	r2, #1
 8007222:	701a      	strb	r2, [r3, #0]
					break;
 8007224:	e00e      	b.n	8007244 <HAL_UART_RxCpltCallback+0xb8>

				default:
					telemetry_rx_buf[cnt]=uart1_rx_data;
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <HAL_UART_RxCpltCallback+0xc4>)
 800722e:	7819      	ldrb	r1, [r3, #0]
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_UART_RxCpltCallback+0xd0>)
 8007232:	5499      	strb	r1, [r3, r2]
					cnt++;
 8007234:	4b08      	ldr	r3, [pc, #32]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <HAL_UART_RxCpltCallback+0xcc>)
 800723e:	701a      	strb	r2, [r3, #0]
					break;
 8007240:	e000      	b.n	8007244 <HAL_UART_RxCpltCallback+0xb8>
					break;
 8007242:	bf00      	nop
				}
	}

}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40011000 	.word	0x40011000
 8007250:	20000281 	.word	0x20000281
 8007254:	20000878 	.word	0x20000878
 8007258:	20000278 	.word	0x20000278
 800725c:	20000780 	.word	0x20000780
 8007260:	20000794 	.word	0x20000794

08007264 <Encode_Msg_PID_Gain>:
		  telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
	  }
}

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6178      	str	r0, [r7, #20]
 800726c:	460b      	mov	r3, r1
 800726e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007272:	edc7 0a02 	vstr	s1, [r7, #8]
 8007276:	ed87 1a01 	vstr	s2, [r7, #4]
 800727a:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2246      	movs	r2, #70	; 0x46
 8007280:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	2243      	movs	r2, #67	; 0x43
 8007288:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[2] = id;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	3302      	adds	r3, #2
 800728e:	7cfa      	ldrb	r2, [r7, #19]
 8007290:	701a      	strb	r2, [r3, #0]

//	  memcpy(telemetry_tx_buf[3], &p, 4);
//	  memcpy(telemetry_tx_buf[7], &i, 4);
//	  memcpy(telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3303      	adds	r3, #3
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3307      	adds	r3, #7
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	330b      	adds	r3, #11
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	330f      	adds	r3, #15
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	3310      	adds	r3, #16
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3311      	adds	r3, #17
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3312      	adds	r3, #18
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	3313      	adds	r3, #19
 80072ce:	22ff      	movs	r2, #255	; 0xff
 80072d0:	701a      	strb	r2, [r3, #0]

	  for(int i=0; i<19; i++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e00e      	b.n	80072f6 <Encode_Msg_PID_Gain+0x92>
	  {
		  telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3313      	adds	r3, #19
 80072dc:	7819      	ldrb	r1, [r3, #0]
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	781a      	ldrb	r2, [r3, #0]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	3313      	adds	r3, #19
 80072ea:	1a8a      	subs	r2, r1, r2
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<19; i++)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	2b12      	cmp	r3, #18
 80072fa:	dded      	ble.n	80072d8 <Encode_Msg_PID_Gain+0x74>
	  }
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	3724      	adds	r7, #36	; 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <Encode_Msg_Altitude>:
     telemetry_tx_buf[34] = ((int)actual_pressure_fast) >> 8;
     telemetry_tx_buf[35] = ((int)actual_pressure_fast);
}

void Encode_Msg_Altitude(unsigned char* telemetry_tx_buf)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x88;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2288      	movs	r2, #136	; 0x88
 8007318:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x18;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3301      	adds	r3, #1
 800731e:	2218      	movs	r2, #24
 8007320:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = ((int)actual_pressure_fast) >> 24;
 8007322:	4b4b      	ldr	r3, [pc, #300]	; (8007450 <Encode_Msg_Altitude+0x144>)
 8007324:	edd3 7a00 	vldr	s15, [r3]
 8007328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732c:	ee17 3a90 	vmov	r3, s15
 8007330:	161a      	asrs	r2, r3, #24
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3302      	adds	r3, #2
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[3] = ((int)actual_pressure_fast) >> 16;
 800733a:	4b45      	ldr	r3, [pc, #276]	; (8007450 <Encode_Msg_Altitude+0x144>)
 800733c:	edd3 7a00 	vldr	s15, [r3]
 8007340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007344:	ee17 3a90 	vmov	r3, s15
 8007348:	141a      	asrs	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3303      	adds	r3, #3
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((int)actual_pressure_fast) >> 8;
 8007352:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <Encode_Msg_Altitude+0x144>)
 8007354:	edd3 7a00 	vldr	s15, [r3]
 8007358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800735c:	ee17 3a90 	vmov	r3, s15
 8007360:	121a      	asrs	r2, r3, #8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3304      	adds	r3, #4
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = ((int)actual_pressure_fast);
 800736a:	4b39      	ldr	r3, [pc, #228]	; (8007450 <Encode_Msg_Altitude+0x144>)
 800736c:	edd3 7a00 	vldr	s15, [r3]
 8007370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007374:	edc7 7a00 	vstr	s15, [r7]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3305      	adds	r3, #5
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[6] = ((int)last_altitude) >> 24;
 8007382:	4b34      	ldr	r3, [pc, #208]	; (8007454 <Encode_Msg_Altitude+0x148>)
 8007384:	edd3 7a00 	vldr	s15, [r3]
 8007388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800738c:	ee17 3a90 	vmov	r3, s15
 8007390:	161a      	asrs	r2, r3, #24
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3306      	adds	r3, #6
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[7] = ((int)last_altitude) >> 16;
 800739a:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <Encode_Msg_Altitude+0x148>)
 800739c:	edd3 7a00 	vldr	s15, [r3]
 80073a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073a4:	ee17 3a90 	vmov	r3, s15
 80073a8:	141a      	asrs	r2, r3, #16
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3307      	adds	r3, #7
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((int)last_altitude) >> 8;
 80073b2:	4b28      	ldr	r3, [pc, #160]	; (8007454 <Encode_Msg_Altitude+0x148>)
 80073b4:	edd3 7a00 	vldr	s15, [r3]
 80073b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073bc:	ee17 3a90 	vmov	r3, s15
 80073c0:	121a      	asrs	r2, r3, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3308      	adds	r3, #8
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = ((int)last_altitude);
 80073ca:	4b22      	ldr	r3, [pc, #136]	; (8007454 <Encode_Msg_Altitude+0x148>)
 80073cc:	edd3 7a00 	vldr	s15, [r3]
 80073d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d4:	edc7 7a00 	vstr	s15, [r7]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3309      	adds	r3, #9
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[10] = ((int)(altitude.out.error)) >> 24;
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <Encode_Msg_Altitude+0x14c>)
 80073e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80073e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ec:	ee17 3a90 	vmov	r3, s15
 80073f0:	161a      	asrs	r2, r3, #24
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	330a      	adds	r3, #10
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[11] = ((int)(altitude.out.error)) >> 16;
 80073fa:	4b17      	ldr	r3, [pc, #92]	; (8007458 <Encode_Msg_Altitude+0x14c>)
 80073fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007404:	ee17 3a90 	vmov	r3, s15
 8007408:	141a      	asrs	r2, r3, #16
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	330b      	adds	r3, #11
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((int)(altitude.out.error)) >> 8;
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <Encode_Msg_Altitude+0x14c>)
 8007414:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800741c:	ee17 3a90 	vmov	r3, s15
 8007420:	121a      	asrs	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	330c      	adds	r3, #12
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[13] = ((int)(altitude.out.error));
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <Encode_Msg_Altitude+0x14c>)
 800742c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007434:	edc7 7a00 	vstr	s15, [r7]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	330d      	adds	r3, #13
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	701a      	strb	r2, [r3, #0]

}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000270 	.word	0x20000270
 8007454:	20000760 	.word	0x20000760
 8007458:	20000544 	.word	0x20000544

0800745c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007460:	b672      	cpsid	i
}
 8007462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007464:	e7fe      	b.n	8007464 <Error_Handler+0x8>

08007466 <LL_SPI_SetStandard>:
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f023 0210 	bic.w	r2, r3, #16
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <LL_AHB1_GRP1_EnableClock>:
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007498:	4907      	ldr	r1, [pc, #28]	; (80074b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4313      	orrs	r3, r2
 800749e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80074a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4013      	ands	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074aa:	68fb      	ldr	r3, [r7, #12]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40023800 	.word	0x40023800

080074bc <LL_APB1_GRP1_EnableClock>:
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80074c4:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80074c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074c8:	4907      	ldr	r1, [pc, #28]	; (80074e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80074d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4013      	ands	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074da:	68fb      	ldr	r3, [r7, #12]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40023800 	.word	0x40023800

080074ec <LL_APB2_GRP1_EnableClock>:
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <LL_APB2_GRP1_EnableClock+0x2c>)
 80074f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f8:	4907      	ldr	r1, [pc, #28]	; (8007518 <LL_APB2_GRP1_EnableClock+0x2c>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4013      	ands	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40023800 	.word	0x40023800

0800751c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8007522:	f107 0318 	add.w	r3, r7, #24
 8007526:	2228      	movs	r2, #40	; 0x28
 8007528:	2100      	movs	r1, #0
 800752a:	4618      	mov	r0, r3
 800752c:	f005 fe0c 	bl	800d148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007530:	463b      	mov	r3, r7
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	605a      	str	r2, [r3, #4]
 8007538:	609a      	str	r2, [r3, #8]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	611a      	str	r2, [r3, #16]
 800753e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8007540:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007544:	f7ff ffd2 	bl	80074ec <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8007548:	2001      	movs	r0, #1
 800754a:	f7ff ff9f 	bl	800748c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800754e:	23e0      	movs	r3, #224	; 0xe0
 8007550:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007552:	2302      	movs	r3, #2
 8007554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007556:	2303      	movs	r3, #3
 8007558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007562:	2305      	movs	r3, #5
 8007564:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007566:	463b      	mov	r3, r7
 8007568:	4619      	mov	r1, r3
 800756a:	4813      	ldr	r0, [pc, #76]	; (80075b8 <MX_SPI1_Init+0x9c>)
 800756c:	f004 fe63 	bl	800c236 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007574:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007578:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800757a:	2300      	movs	r3, #0
 800757c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800757e:	2302      	movs	r3, #2
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007582:	2301      	movs	r3, #1
 8007584:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800758c:	2310      	movs	r3, #16
 800758e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007590:	2300      	movs	r3, #0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007594:	2300      	movs	r3, #0
 8007596:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8007598:	230a      	movs	r3, #10
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800759c:	f107 0318 	add.w	r3, r7, #24
 80075a0:	4619      	mov	r1, r3
 80075a2:	4806      	ldr	r0, [pc, #24]	; (80075bc <MX_SPI1_Init+0xa0>)
 80075a4:	f005 f817 	bl	800c5d6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80075a8:	2100      	movs	r1, #0
 80075aa:	4804      	ldr	r0, [pc, #16]	; (80075bc <MX_SPI1_Init+0xa0>)
 80075ac:	f7ff ff5b 	bl	8007466 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80075b0:	bf00      	nop
 80075b2:	3740      	adds	r7, #64	; 0x40
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40020000 	.word	0x40020000
 80075bc:	40013000 	.word	0x40013000

080075c0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b090      	sub	sp, #64	; 0x40
 80075c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80075c6:	f107 0318 	add.w	r3, r7, #24
 80075ca:	2228      	movs	r2, #40	; 0x28
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f005 fdba 	bl	800d148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d4:	463b      	mov	r3, r7
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	611a      	str	r2, [r3, #16]
 80075e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80075e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80075e8:	f7ff ff68 	bl	80074bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80075ec:	2002      	movs	r0, #2
 80075ee:	f7ff ff4d 	bl	800748c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80075f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80075f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80075f8:	2302      	movs	r3, #2
 80075fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80075fc:	2303      	movs	r3, #3
 80075fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8007608:	2305      	movs	r3, #5
 800760a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760c:	463b      	mov	r3, r7
 800760e:	4619      	mov	r1, r3
 8007610:	4813      	ldr	r0, [pc, #76]	; (8007660 <MX_SPI2_Init+0xa0>)
 8007612:	f004 fe10 	bl	800c236 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800761a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800761e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007620:	2300      	movs	r3, #0
 8007622:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007624:	2302      	movs	r3, #2
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007628:	2301      	movs	r3, #1
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800762c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8007632:	2318      	movs	r3, #24
 8007634:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007636:	2300      	movs	r3, #0
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800763a:	2300      	movs	r3, #0
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800763e:	230a      	movs	r3, #10
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8007642:	f107 0318 	add.w	r3, r7, #24
 8007646:	4619      	mov	r1, r3
 8007648:	4806      	ldr	r0, [pc, #24]	; (8007664 <MX_SPI2_Init+0xa4>)
 800764a:	f004 ffc4 	bl	800c5d6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800764e:	2100      	movs	r1, #0
 8007650:	4804      	ldr	r0, [pc, #16]	; (8007664 <MX_SPI2_Init+0xa4>)
 8007652:	f7ff ff08 	bl	8007466 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007656:	bf00      	nop
 8007658:	3740      	adds	r7, #64	; 0x40
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40020400 	.word	0x40020400
 8007664:	40003800 	.word	0x40003800

08007668 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b090      	sub	sp, #64	; 0x40
 800766c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800766e:	f107 0318 	add.w	r3, r7, #24
 8007672:	2228      	movs	r2, #40	; 0x28
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f005 fd66 	bl	800d148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800767c:	463b      	mov	r3, r7
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	605a      	str	r2, [r3, #4]
 8007684:	609a      	str	r2, [r3, #8]
 8007686:	60da      	str	r2, [r3, #12]
 8007688:	611a      	str	r2, [r3, #16]
 800768a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800768c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007690:	f7ff ff14 	bl	80074bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007694:	2002      	movs	r0, #2
 8007696:	f7ff fef9 	bl	800748c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800769a:	2338      	movs	r3, #56	; 0x38
 800769c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800769e:	2302      	movs	r3, #2
 80076a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076a2:	2303      	movs	r3, #3
 80076a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80076ae:	2306      	movs	r3, #6
 80076b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b2:	463b      	mov	r3, r7
 80076b4:	4619      	mov	r1, r3
 80076b6:	4813      	ldr	r0, [pc, #76]	; (8007704 <MX_SPI3_Init+0x9c>)
 80076b8:	f004 fdbd 	bl	800c236 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80076c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80076c4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80076c6:	2300      	movs	r3, #0
 80076c8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80076ca:	2302      	movs	r3, #2
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80076d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80076d8:	2308      	movs	r3, #8
 80076da:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80076dc:	2300      	movs	r3, #0
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80076e4:	230a      	movs	r3, #10
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80076e8:	f107 0318 	add.w	r3, r7, #24
 80076ec:	4619      	mov	r1, r3
 80076ee:	4806      	ldr	r0, [pc, #24]	; (8007708 <MX_SPI3_Init+0xa0>)
 80076f0:	f004 ff71 	bl	800c5d6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80076f4:	2100      	movs	r1, #0
 80076f6:	4804      	ldr	r0, [pc, #16]	; (8007708 <MX_SPI3_Init+0xa0>)
 80076f8:	f7ff feb5 	bl	8007466 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80076fc:	bf00      	nop
 80076fe:	3740      	adds	r7, #64	; 0x40
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40020400 	.word	0x40020400
 8007708:	40003c00 	.word	0x40003c00

0800770c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <HAL_MspInit+0x4c>)
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	4a0f      	ldr	r2, [pc, #60]	; (8007758 <HAL_MspInit+0x4c>)
 800771c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007720:	6453      	str	r3, [r2, #68]	; 0x44
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <HAL_MspInit+0x4c>)
 8007724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <HAL_MspInit+0x4c>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	4a08      	ldr	r2, [pc, #32]	; (8007758 <HAL_MspInit+0x4c>)
 8007738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773c:	6413      	str	r3, [r2, #64]	; 0x40
 800773e:	4b06      	ldr	r3, [pc, #24]	; (8007758 <HAL_MspInit+0x4c>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800

0800775c <LL_TIM_ClearFlag_UPDATE>:
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f06f 0201 	mvn.w	r2, #1
 800776a:	611a      	str	r2, [r3, #16]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_USART_IsActiveFlag_RXNE>:
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <LL_USART_ClearFlag_RXNE>:
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f06f 0220 	mvn.w	r2, #32
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <LL_USART_ReceiveData8>:
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	b2db      	uxtb	r3, r3
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077fa:	b480      	push	{r7}
 80077fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077fe:	e7fe      	b.n	80077fe <NMI_Handler+0x4>

08007800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007804:	e7fe      	b.n	8007804 <HardFault_Handler+0x4>

08007806 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007806:	b480      	push	{r7}
 8007808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800780a:	e7fe      	b.n	800780a <MemManage_Handler+0x4>

0800780c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007810:	e7fe      	b.n	8007810 <BusFault_Handler+0x4>

08007812 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007812:	b480      	push	{r7}
 8007814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007816:	e7fe      	b.n	8007816 <UsageFault_Handler+0x4>

08007818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800781c:	bf00      	nop
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007826:	b480      	push	{r7}
 8007828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800782a:	bf00      	nop
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007838:	bf00      	nop
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007846:	f001 f90f 	bl	8008a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800784a:	bf00      	nop
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007854:	4802      	ldr	r0, [pc, #8]	; (8007860 <USART1_IRQHandler+0x10>)
 8007856:	f003 fdef 	bl	800b438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000878 	.word	0x20000878

08007864 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0 ;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 8007868:	4833      	ldr	r0, [pc, #204]	; (8007938 <UART4_IRQHandler+0xd4>)
 800786a:	f7ff ff98 	bl	800779e <LL_USART_IsActiveFlag_RXNE>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d05b      	beq.n	800792c <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4);
 8007874:	4830      	ldr	r0, [pc, #192]	; (8007938 <UART4_IRQHandler+0xd4>)
 8007876:	f7ff ffa5 	bl	80077c4 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800787a:	482f      	ldr	r0, [pc, #188]	; (8007938 <UART4_IRQHandler+0xd4>)
 800787c:	f7ff ffb0 	bl	80077e0 <LL_USART_ReceiveData8>
 8007880:	4603      	mov	r3, r0
 8007882:	461a      	mov	r2, r3
 8007884:	4b2d      	ldr	r3, [pc, #180]	; (800793c <UART4_IRQHandler+0xd8>)
 8007886:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1;
 8007888:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <UART4_IRQHandler+0xdc>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 800788e:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <UART4_IRQHandler+0xe0>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b23      	cmp	r3, #35	; 0x23
 8007894:	d02e      	beq.n	80078f4 <UART4_IRQHandler+0x90>
 8007896:	2b23      	cmp	r3, #35	; 0x23
 8007898:	dc3a      	bgt.n	8007910 <UART4_IRQHandler+0xac>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <UART4_IRQHandler+0x40>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d012      	beq.n	80078c8 <UART4_IRQHandler+0x64>
 80078a2:	e035      	b.n	8007910 <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 80078a4:	4b25      	ldr	r3, [pc, #148]	; (800793c <UART4_IRQHandler+0xd8>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2bb5      	cmp	r3, #181	; 0xb5
 80078aa:	d141      	bne.n	8007930 <UART4_IRQHandler+0xcc>
				{
					m8n_rx_buf[cnt] = uart4_rx_data;
 80078ac:	4b25      	ldr	r3, [pc, #148]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b22      	ldr	r3, [pc, #136]	; (800793c <UART4_IRQHandler+0xd8>)
 80078b4:	7819      	ldrb	r1, [r3, #0]
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <UART4_IRQHandler+0xe4>)
 80078b8:	5499      	strb	r1, [r3, r2]
					cnt++;
 80078ba:	4b22      	ldr	r3, [pc, #136]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4b20      	ldr	r3, [pc, #128]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078c4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80078c6:	e033      	b.n	8007930 <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 80078c8:	4b1c      	ldr	r3, [pc, #112]	; (800793c <UART4_IRQHandler+0xd8>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b62      	cmp	r3, #98	; 0x62
 80078ce:	d10d      	bne.n	80078ec <UART4_IRQHandler+0x88>
				{
					m8n_rx_buf[cnt] = uart4_rx_data;
 80078d0:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b19      	ldr	r3, [pc, #100]	; (800793c <UART4_IRQHandler+0xd8>)
 80078d8:	7819      	ldrb	r1, [r3, #0]
 80078da:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <UART4_IRQHandler+0xe4>)
 80078dc:	5499      	strb	r1, [r3, r2]
					cnt++;
 80078de:	4b19      	ldr	r3, [pc, #100]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078e8:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 80078ea:	e022      	b.n	8007932 <UART4_IRQHandler+0xce>
					cnt = 0;
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
				break;
 80078f2:	e01e      	b.n	8007932 <UART4_IRQHandler+0xce>

			case 35:
				m8n_rx_buf[cnt] = uart4_rx_data;
 80078f4:	4b13      	ldr	r3, [pc, #76]	; (8007944 <UART4_IRQHandler+0xe0>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <UART4_IRQHandler+0xd8>)
 80078fc:	7819      	ldrb	r1, [r3, #0]
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <UART4_IRQHandler+0xe4>)
 8007900:	5499      	strb	r1, [r3, r2]
				cnt = 0;
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <UART4_IRQHandler+0xe0>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <UART4_IRQHandler+0xe8>)
 800790a:	2201      	movs	r2, #1
 800790c:	701a      	strb	r2, [r3, #0]
				break;
 800790e:	e010      	b.n	8007932 <UART4_IRQHandler+0xce>
			default:
				m8n_rx_buf[cnt] = uart4_rx_data;
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <UART4_IRQHandler+0xe0>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <UART4_IRQHandler+0xd8>)
 8007918:	7819      	ldrb	r1, [r3, #0]
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <UART4_IRQHandler+0xe4>)
 800791c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <UART4_IRQHandler+0xe0>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <UART4_IRQHandler+0xe0>)
 8007928:	701a      	strb	r2, [r3, #0]
				break;
 800792a:	e002      	b.n	8007932 <UART4_IRQHandler+0xce>
			}
		}
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <UART4_IRQHandler+0xce>
				break;
 8007930:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40004c00 	.word	0x40004c00
 800793c:	2000027a 	.word	0x2000027a
 8007940:	20000279 	.word	0x20000279
 8007944:	20000286 	.word	0x20000286
 8007948:	200007f4 	.word	0x200007f4
 800794c:	2000027f 	.word	0x2000027f

08007950 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt=0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8007954:	4833      	ldr	r0, [pc, #204]	; (8007a24 <UART5_IRQHandler+0xd4>)
 8007956:	f7ff ff22 	bl	800779e <LL_USART_IsActiveFlag_RXNE>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d05b      	beq.n	8007a18 <UART5_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8007960:	4830      	ldr	r0, [pc, #192]	; (8007a24 <UART5_IRQHandler+0xd4>)
 8007962:	f7ff ff2f 	bl	80077c4 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8007966:	482f      	ldr	r0, [pc, #188]	; (8007a24 <UART5_IRQHandler+0xd4>)
 8007968:	f7ff ff3a 	bl	80077e0 <LL_USART_ReceiveData8>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <UART5_IRQHandler+0xd8>)
 8007972:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8007974:	4b2d      	ldr	r3, [pc, #180]	; (8007a2c <UART5_IRQHandler+0xdc>)
 8007976:	2201      	movs	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 800797a:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <UART5_IRQHandler+0xe0>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b1f      	cmp	r3, #31
 8007980:	d02e      	beq.n	80079e0 <UART5_IRQHandler+0x90>
 8007982:	2b1f      	cmp	r3, #31
 8007984:	dc3a      	bgt.n	80079fc <UART5_IRQHandler+0xac>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <UART5_IRQHandler+0x40>
 800798a:	2b01      	cmp	r3, #1
 800798c:	d012      	beq.n	80079b4 <UART5_IRQHandler+0x64>
 800798e:	e035      	b.n	80079fc <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data==0x20)
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <UART5_IRQHandler+0xd8>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b20      	cmp	r3, #32
 8007996:	d141      	bne.n	8007a1c <UART5_IRQHandler+0xcc>
			{
				ibus_rx_buf[cnt]=uart5_rx_data;
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <UART5_IRQHandler+0xe0>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <UART5_IRQHandler+0xd8>)
 80079a0:	7819      	ldrb	r1, [r3, #0]
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <UART5_IRQHandler+0xe4>)
 80079a4:	5499      	strb	r1, [r3, r2]
				cnt++;
 80079a6:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079b0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80079b2:	e033      	b.n	8007a1c <UART5_IRQHandler+0xcc>
		case 1:
			if(uart5_rx_data==0x40)
 80079b4:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <UART5_IRQHandler+0xd8>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d10d      	bne.n	80079d8 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt]=uart5_rx_data;
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <UART5_IRQHandler+0xd8>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <UART5_IRQHandler+0xe4>)
 80079c8:	5499      	strb	r1, [r3, r2]
				cnt++;
 80079ca:	4b19      	ldr	r3, [pc, #100]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079d4:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt=0;
			break;
 80079d6:	e022      	b.n	8007a1e <UART5_IRQHandler+0xce>
				cnt=0;
 80079d8:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
			break;
 80079de:	e01e      	b.n	8007a1e <UART5_IRQHandler+0xce>

		case 31:
			ibus_rx_buf[cnt]=uart5_rx_data;
 80079e0:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <UART5_IRQHandler+0xd8>)
 80079e8:	7819      	ldrb	r1, [r3, #0]
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <UART5_IRQHandler+0xe4>)
 80079ec:	5499      	strb	r1, [r3, r2]
			cnt=0;
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 80079f4:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <UART5_IRQHandler+0xe8>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
			break;
 80079fa:	e010      	b.n	8007a1e <UART5_IRQHandler+0xce>

		default:
			ibus_rx_buf[cnt]=uart5_rx_data;
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <UART5_IRQHandler+0xe0>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <UART5_IRQHandler+0xd8>)
 8007a04:	7819      	ldrb	r1, [r3, #0]
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <UART5_IRQHandler+0xe4>)
 8007a08:	5499      	strb	r1, [r3, r2]
			cnt++;
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <UART5_IRQHandler+0xe0>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <UART5_IRQHandler+0xe0>)
 8007a14:	701a      	strb	r2, [r3, #0]
			break;
 8007a16:	e002      	b.n	8007a1e <UART5_IRQHandler+0xce>
		}
//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);

	}
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <UART5_IRQHandler+0xce>
			break;
 8007a1c:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40005000 	.word	0x40005000
 8007a28:	2000027c 	.word	0x2000027c
 8007a2c:	2000027b 	.word	0x2000027b
 8007a30:	20000287 	.word	0x20000287
 8007a34:	200007d0 	.word	0x200007d0
 8007a38:	20000280 	.word	0x20000280

08007a3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8007a40:	4825      	ldr	r0, [pc, #148]	; (8007ad8 <TIM7_IRQHandler+0x9c>)
 8007a42:	f7ff fe99 	bl	8007778 <LL_TIM_IsActiveFlag_UPDATE>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d043      	beq.n	8007ad4 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8007a4c:	4822      	ldr	r0, [pc, #136]	; (8007ad8 <TIM7_IRQHandler+0x9c>)
 8007a4e:	f7ff fe85 	bl	800775c <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 8007a52:	4b22      	ldr	r3, [pc, #136]	; (8007adc <TIM7_IRQHandler+0xa0>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	3301      	adds	r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b20      	ldr	r3, [pc, #128]	; (8007adc <TIM7_IRQHandler+0xa0>)
 8007a5c:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count ==1)
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <TIM7_IRQHandler+0xa0>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d105      	bne.n	8007a72 <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count=0;
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <TIM7_IRQHandler+0xa0>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag =1;
 8007a6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ae0 <TIM7_IRQHandler+0xa4>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
		}
		tim7_20ms_count++;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <TIM7_IRQHandler+0xa8>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <TIM7_IRQHandler+0xa8>)
 8007a7c:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count ==20)
 8007a7e:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <TIM7_IRQHandler+0xa8>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b14      	cmp	r3, #20
 8007a84:	d105      	bne.n	8007a92 <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count=0;
 8007a86:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <TIM7_IRQHandler+0xa8>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag =1;
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <TIM7_IRQHandler+0xac>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	701a      	strb	r2, [r3, #0]
		}
		tim7_100ms_count++;
 8007a92:	4b16      	ldr	r3, [pc, #88]	; (8007aec <TIM7_IRQHandler+0xb0>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	3301      	adds	r3, #1
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4b14      	ldr	r3, [pc, #80]	; (8007aec <TIM7_IRQHandler+0xb0>)
 8007a9c:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count ==100)
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <TIM7_IRQHandler+0xb0>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b64      	cmp	r3, #100	; 0x64
 8007aa4:	d105      	bne.n	8007ab2 <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count =0;
 8007aa6:	4b11      	ldr	r3, [pc, #68]	; (8007aec <TIM7_IRQHandler+0xb0>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag =1;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <TIM7_IRQHandler+0xb4>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
		}
		tim7_1000ms_count++;
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <TIM7_IRQHandler+0xb8>)
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <TIM7_IRQHandler+0xb8>)
 8007abc:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count ==1000)
 8007abe:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <TIM7_IRQHandler+0xb8>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ac6:	d105      	bne.n	8007ad4 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count =0;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <TIM7_IRQHandler+0xb8>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag =1;
 8007ace:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <TIM7_IRQHandler+0xbc>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007ad4:	bf00      	nop
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40001400 	.word	0x40001400
 8007adc:	20000288 	.word	0x20000288
 8007ae0:	20000282 	.word	0x20000282
 8007ae4:	20000289 	.word	0x20000289
 8007ae8:	20000283 	.word	0x20000283
 8007aec:	2000028a 	.word	0x2000028a
 8007af0:	20000284 	.word	0x20000284
 8007af4:	2000028c 	.word	0x2000028c
 8007af8:	20000285 	.word	0x20000285

08007afc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007b00:	4802      	ldr	r0, [pc, #8]	; (8007b0c <DMA2_Stream7_IRQHandler+0x10>)
 8007b02:	f001 fa9f 	bl	8009044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000818 	.word	0x20000818

08007b10 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
////		while(!LL_USART_IsActiveFlag_TXE(USART4));
////		LL_USART_TransmitData8(UART4, uart6_rx_data);
//	}

	static unsigned char cnt=0;
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8007b14:	4833      	ldr	r0, [pc, #204]	; (8007be4 <USART6_IRQHandler+0xd4>)
 8007b16:	f7ff fe42 	bl	800779e <LL_USART_IsActiveFlag_RXNE>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d05b      	beq.n	8007bd8 <USART6_IRQHandler+0xc8>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8007b20:	4830      	ldr	r0, [pc, #192]	; (8007be4 <USART6_IRQHandler+0xd4>)
 8007b22:	f7ff fe4f 	bl	80077c4 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8007b26:	482f      	ldr	r0, [pc, #188]	; (8007be4 <USART6_IRQHandler+0xd4>)
 8007b28:	f7ff fe5a 	bl	80077e0 <LL_USART_ReceiveData8>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b2d      	ldr	r3, [pc, #180]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007b32:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8007b34:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <USART6_IRQHandler+0xdc>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8007b3a:	4b2d      	ldr	r3, [pc, #180]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b0b      	cmp	r3, #11
 8007b40:	d02e      	beq.n	8007ba0 <USART6_IRQHandler+0x90>
 8007b42:	2b0b      	cmp	r3, #11
 8007b44:	dc3a      	bgt.n	8007bbc <USART6_IRQHandler+0xac>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <USART6_IRQHandler+0x40>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d012      	beq.n	8007b74 <USART6_IRQHandler+0x64>
 8007b4e:	e035      	b.n	8007bbc <USART6_IRQHandler+0xac>
		{
		case 0:
			if(uart6_rx_data==0x44)
 8007b50:	4b25      	ldr	r3, [pc, #148]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b44      	cmp	r3, #68	; 0x44
 8007b56:	d141      	bne.n	8007bdc <USART6_IRQHandler+0xcc>
			{
				nx_rx_buf[cnt]=uart6_rx_data;
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007b60:	7819      	ldrb	r1, [r3, #0]
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <USART6_IRQHandler+0xe4>)
 8007b64:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007b66:	4b22      	ldr	r3, [pc, #136]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007b72:	e033      	b.n	8007bdc <USART6_IRQHandler+0xcc>
		case 1:
			if(uart6_rx_data==0x77)
 8007b74:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b77      	cmp	r3, #119	; 0x77
 8007b7a:	d10d      	bne.n	8007b98 <USART6_IRQHandler+0x88>
			{
				nx_rx_buf[cnt]=uart6_rx_data;
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007b84:	7819      	ldrb	r1, [r3, #0]
 8007b86:	4b1b      	ldr	r3, [pc, #108]	; (8007bf4 <USART6_IRQHandler+0xe4>)
 8007b88:	5499      	strb	r1, [r3, r2]
				cnt++;
 8007b8a:	4b19      	ldr	r3, [pc, #100]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b94:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt=0;
			break;
 8007b96:	e022      	b.n	8007bde <USART6_IRQHandler+0xce>
				cnt=0;
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
			break;
 8007b9e:	e01e      	b.n	8007bde <USART6_IRQHandler+0xce>

		case 11:
			nx_rx_buf[cnt]=uart6_rx_data;
 8007ba0:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007ba8:	7819      	ldrb	r1, [r3, #0]
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <USART6_IRQHandler+0xe4>)
 8007bac:	5499      	strb	r1, [r3, r2]
			cnt=0;
 8007bae:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
			nx_rx_cplt_flag = 1;
 8007bb4:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <USART6_IRQHandler+0xe8>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	701a      	strb	r2, [r3, #0]
			break;
 8007bba:	e010      	b.n	8007bde <USART6_IRQHandler+0xce>

		default:
			nx_rx_buf[cnt]=uart6_rx_data;
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <USART6_IRQHandler+0xd8>)
 8007bc4:	7819      	ldrb	r1, [r3, #0]
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <USART6_IRQHandler+0xe4>)
 8007bc8:	5499      	strb	r1, [r3, r2]
			cnt++;
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <USART6_IRQHandler+0xe0>)
 8007bd4:	701a      	strb	r2, [r3, #0]
			break;
 8007bd6:	e002      	b.n	8007bde <USART6_IRQHandler+0xce>
		}
	}
 8007bd8:	bf00      	nop
 8007bda:	e000      	b.n	8007bde <USART6_IRQHandler+0xce>
			break;
 8007bdc:	bf00      	nop

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007bde:	bf00      	nop
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40011400 	.word	0x40011400
 8007be8:	2000027e 	.word	0x2000027e
 8007bec:	2000027d 	.word	0x2000027d
 8007bf0:	2000028e 	.word	0x2000028e
 8007bf4:	200007c4 	.word	0x200007c4
 8007bf8:	200007f0 	.word	0x200007f0

08007bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
	return 1;
 8007c00:	2301      	movs	r3, #1
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <_kill>:

int _kill(int pid, int sig)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007c16:	f005 fa6d 	bl	800d0f4 <__errno>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2216      	movs	r2, #22
 8007c1e:	601a      	str	r2, [r3, #0]
	return -1;
 8007c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <_exit>:

void _exit (int status)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007c34:	f04f 31ff 	mov.w	r1, #4294967295
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ffe7 	bl	8007c0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8007c3e:	e7fe      	b.n	8007c3e <_exit+0x12>

08007c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e00a      	b.n	8007c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007c52:	f3af 8000 	nop.w
 8007c56:	4601      	mov	r1, r0
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	60ba      	str	r2, [r7, #8]
 8007c5e:	b2ca      	uxtb	r2, r1
 8007c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	dbf0      	blt.n	8007c52 <_read+0x12>
	}

return len;
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
	return -1;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <_isatty>:

int _isatty(int file)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8007cba:	2301      	movs	r3, #1
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007cec:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <_sbrk+0x5c>)
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <_sbrk+0x60>)
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <_sbrk+0x64>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <_sbrk+0x64>)
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <_sbrk+0x68>)
 8007d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <_sbrk+0x64>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d207      	bcs.n	8007d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d14:	f005 f9ee 	bl	800d0f4 <__errno>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	220c      	movs	r2, #12
 8007d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	e009      	b.n	8007d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <_sbrk+0x64>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <_sbrk+0x64>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	4a05      	ldr	r2, [pc, #20]	; (8007d48 <_sbrk+0x64>)
 8007d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20020000 	.word	0x20020000
 8007d44:	00000400 	.word	0x00000400
 8007d48:	20000290 	.word	0x20000290
 8007d4c:	200008d0 	.word	0x200008d0

08007d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <SystemInit+0x20>)
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <SystemInit+0x20>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	e000ed00 	.word	0xe000ed00

08007d74 <__NVIC_GetPriorityGrouping>:
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <__NVIC_GetPriorityGrouping+0x18>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 0307 	and.w	r3, r3, #7
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	e000ed00 	.word	0xe000ed00

08007d90 <__NVIC_EnableIRQ>:
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	db0b      	blt.n	8007dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	f003 021f 	and.w	r2, r3, #31
 8007da8:	4907      	ldr	r1, [pc, #28]	; (8007dc8 <__NVIC_EnableIRQ+0x38>)
 8007daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	2001      	movs	r0, #1
 8007db2:	fa00 f202 	lsl.w	r2, r0, r2
 8007db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	e000e100 	.word	0xe000e100

08007dcc <__NVIC_SetPriority>:
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	db0a      	blt.n	8007df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	490c      	ldr	r1, [pc, #48]	; (8007e18 <__NVIC_SetPriority+0x4c>)
 8007de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dea:	0112      	lsls	r2, r2, #4
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	440b      	add	r3, r1
 8007df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007df4:	e00a      	b.n	8007e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4908      	ldr	r1, [pc, #32]	; (8007e1c <__NVIC_SetPriority+0x50>)
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	3b04      	subs	r3, #4
 8007e04:	0112      	lsls	r2, r2, #4
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	440b      	add	r3, r1
 8007e0a:	761a      	strb	r2, [r3, #24]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	e000e100 	.word	0xe000e100
 8007e1c:	e000ed00 	.word	0xe000ed00

08007e20 <NVIC_EncodePriority>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	b089      	sub	sp, #36	; 0x24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f1c3 0307 	rsb	r3, r3, #7
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	bf28      	it	cs
 8007e3e:	2304      	movcs	r3, #4
 8007e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3304      	adds	r3, #4
 8007e46:	2b06      	cmp	r3, #6
 8007e48:	d902      	bls.n	8007e50 <NVIC_EncodePriority+0x30>
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3b03      	subs	r3, #3
 8007e4e:	e000      	b.n	8007e52 <NVIC_EncodePriority+0x32>
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	43da      	mvns	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	401a      	ands	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e68:	f04f 31ff 	mov.w	r1, #4294967295
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	43d9      	mvns	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e78:	4313      	orrs	r3, r2
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3724      	adds	r7, #36	; 0x24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <LL_TIM_EnableARRPreload>:
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <LL_TIM_OC_EnableFast>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d01c      	beq.n	8007ef2 <LL_TIM_OC_EnableFast+0x4a>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d017      	beq.n	8007eee <LL_TIM_OC_EnableFast+0x46>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b10      	cmp	r3, #16
 8007ec2:	d012      	beq.n	8007eea <LL_TIM_OC_EnableFast+0x42>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d00d      	beq.n	8007ee6 <LL_TIM_OC_EnableFast+0x3e>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed0:	d007      	beq.n	8007ee2 <LL_TIM_OC_EnableFast+0x3a>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed8:	d101      	bne.n	8007ede <LL_TIM_OC_EnableFast+0x36>
 8007eda:	2305      	movs	r3, #5
 8007edc:	e00a      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007ede:	2306      	movs	r3, #6
 8007ee0:	e008      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	e006      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e004      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e002      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <LL_TIM_OC_EnableFast+0x4c>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3318      	adds	r3, #24
 8007efa:	4619      	mov	r1, r3
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <LL_TIM_OC_EnableFast+0x80>)
 8007f00:	5cd3      	ldrb	r3, [r2, r3]
 8007f02:	440b      	add	r3, r1
 8007f04:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4907      	ldr	r1, [pc, #28]	; (8007f2c <LL_TIM_OC_EnableFast+0x84>)
 8007f0e:	5ccb      	ldrb	r3, [r1, r3]
 8007f10:	4619      	mov	r1, r3
 8007f12:	2304      	movs	r3, #4
 8007f14:	408b      	lsls	r3, r1
 8007f16:	431a      	orrs	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	601a      	str	r2, [r3, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	08011eac 	.word	0x08011eac
 8007f2c:	08011eb4 	.word	0x08011eb4

08007f30 <LL_TIM_OC_DisableFast>:
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d01c      	beq.n	8007f7a <LL_TIM_OC_DisableFast+0x4a>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d017      	beq.n	8007f76 <LL_TIM_OC_DisableFast+0x46>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d012      	beq.n	8007f72 <LL_TIM_OC_DisableFast+0x42>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b40      	cmp	r3, #64	; 0x40
 8007f50:	d00d      	beq.n	8007f6e <LL_TIM_OC_DisableFast+0x3e>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f58:	d007      	beq.n	8007f6a <LL_TIM_OC_DisableFast+0x3a>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f60:	d101      	bne.n	8007f66 <LL_TIM_OC_DisableFast+0x36>
 8007f62:	2305      	movs	r3, #5
 8007f64:	e00a      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f66:	2306      	movs	r3, #6
 8007f68:	e008      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f6a:	2304      	movs	r3, #4
 8007f6c:	e006      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e004      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e002      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <LL_TIM_OC_DisableFast+0x4c>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3318      	adds	r3, #24
 8007f82:	4619      	mov	r1, r3
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	4a0b      	ldr	r2, [pc, #44]	; (8007fb4 <LL_TIM_OC_DisableFast+0x84>)
 8007f88:	5cd3      	ldrb	r3, [r2, r3]
 8007f8a:	440b      	add	r3, r1
 8007f8c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	4908      	ldr	r1, [pc, #32]	; (8007fb8 <LL_TIM_OC_DisableFast+0x88>)
 8007f96:	5ccb      	ldrb	r3, [r1, r3]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	408b      	lsls	r3, r1
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	401a      	ands	r2, r3
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	08011eac 	.word	0x08011eac
 8007fb8:	08011eb4 	.word	0x08011eb4

08007fbc <LL_TIM_OC_EnablePreload>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d01c      	beq.n	8008006 <LL_TIM_OC_EnablePreload+0x4a>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d017      	beq.n	8008002 <LL_TIM_OC_EnablePreload+0x46>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d012      	beq.n	8007ffe <LL_TIM_OC_EnablePreload+0x42>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d00d      	beq.n	8007ffa <LL_TIM_OC_EnablePreload+0x3e>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe4:	d007      	beq.n	8007ff6 <LL_TIM_OC_EnablePreload+0x3a>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fec:	d101      	bne.n	8007ff2 <LL_TIM_OC_EnablePreload+0x36>
 8007fee:	2305      	movs	r3, #5
 8007ff0:	e00a      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8007ff2:	2306      	movs	r3, #6
 8007ff4:	e008      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8007ff6:	2304      	movs	r3, #4
 8007ff8:	e006      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e004      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e002      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <LL_TIM_OC_EnablePreload+0x4c>
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3318      	adds	r3, #24
 800800e:	4619      	mov	r1, r3
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <LL_TIM_OC_EnablePreload+0x80>)
 8008014:	5cd3      	ldrb	r3, [r2, r3]
 8008016:	440b      	add	r3, r1
 8008018:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4907      	ldr	r1, [pc, #28]	; (8008040 <LL_TIM_OC_EnablePreload+0x84>)
 8008022:	5ccb      	ldrb	r3, [r1, r3]
 8008024:	4619      	mov	r1, r3
 8008026:	2308      	movs	r3, #8
 8008028:	408b      	lsls	r3, r1
 800802a:	431a      	orrs	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	601a      	str	r2, [r3, #0]
}
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	08011eac 	.word	0x08011eac
 8008040:	08011eb4 	.word	0x08011eb4

08008044 <LL_TIM_SetClockSource>:
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <LL_TIM_SetTriggerOutput>:
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <LL_TIM_DisableMasterSlaveMode>:
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	609a      	str	r2, [r3, #8]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <LL_AHB1_GRP1_EnableClock>:
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c0:	4907      	ldr	r1, [pc, #28]	; (80080e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80080ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4013      	ands	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	40023800 	.word	0x40023800

080080e4 <LL_APB1_GRP1_EnableClock>:
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80080ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f0:	4907      	ldr	r1, [pc, #28]	; (8008110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80080fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4013      	ands	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	40023800 	.word	0x40023800

08008114 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b094      	sub	sp, #80	; 0x50
 8008118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800811a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	609a      	str	r2, [r3, #8]
 8008126:	60da      	str	r2, [r3, #12]
 8008128:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800812a:	f107 031c 	add.w	r3, r7, #28
 800812e:	2220      	movs	r2, #32
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f005 f808 	bl	800d148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	611a      	str	r2, [r3, #16]
 8008146:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8008148:	2002      	movs	r0, #2
 800814a:	f7ff ffcb 	bl	80080e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800814e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8008152:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8008154:	2300      	movs	r3, #0
 8008156:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8008158:	2314      	movs	r3, #20
 800815a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800815c:	2300      	movs	r3, #0
 800815e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8008160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008164:	4619      	mov	r1, r3
 8008166:	4822      	ldr	r0, [pc, #136]	; (80081f0 <MX_TIM3_Init+0xdc>)
 8008168:	f004 fafa 	bl	800c760 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800816c:	4820      	ldr	r0, [pc, #128]	; (80081f0 <MX_TIM3_Init+0xdc>)
 800816e:	f7ff fe8a 	bl	8007e86 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8008172:	2100      	movs	r1, #0
 8008174:	481e      	ldr	r0, [pc, #120]	; (80081f0 <MX_TIM3_Init+0xdc>)
 8008176:	f7ff ff65 	bl	8008044 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800817a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800817e:	481c      	ldr	r0, [pc, #112]	; (80081f0 <MX_TIM3_Init+0xdc>)
 8008180:	f7ff ff1c 	bl	8007fbc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8008184:	2360      	movs	r3, #96	; 0x60
 8008186:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8008188:	2300      	movs	r3, #0
 800818a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800818c:	2300      	movs	r3, #0
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8008190:	230a      	movs	r3, #10
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8008194:	2300      	movs	r3, #0
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8008198:	f107 031c 	add.w	r3, r7, #28
 800819c:	461a      	mov	r2, r3
 800819e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081a2:	4813      	ldr	r0, [pc, #76]	; (80081f0 <MX_TIM3_Init+0xdc>)
 80081a4:	f004 fb76 	bl	800c894 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80081a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081ac:	4810      	ldr	r0, [pc, #64]	; (80081f0 <MX_TIM3_Init+0xdc>)
 80081ae:	f7ff fe7b 	bl	8007ea8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80081b2:	2100      	movs	r1, #0
 80081b4:	480e      	ldr	r0, [pc, #56]	; (80081f0 <MX_TIM3_Init+0xdc>)
 80081b6:	f7ff ff5a 	bl	800806e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80081ba:	480d      	ldr	r0, [pc, #52]	; (80081f0 <MX_TIM3_Init+0xdc>)
 80081bc:	f7ff ff6a 	bl	8008094 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80081c0:	2002      	movs	r0, #2
 80081c2:	f7ff ff77 	bl	80080b4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80081c6:	2302      	movs	r3, #2
 80081c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081ca:	2302      	movs	r3, #2
 80081cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80081da:	2302      	movs	r3, #2
 80081dc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4804      	ldr	r0, [pc, #16]	; (80081f4 <MX_TIM3_Init+0xe0>)
 80081e4:	f004 f827 	bl	800c236 <LL_GPIO_Init>

}
 80081e8:	bf00      	nop
 80081ea:	3750      	adds	r7, #80	; 0x50
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40020400 	.word	0x40020400

080081f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b094      	sub	sp, #80	; 0x50
 80081fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80081fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	605a      	str	r2, [r3, #4]
 8008208:	609a      	str	r2, [r3, #8]
 800820a:	60da      	str	r2, [r3, #12]
 800820c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800820e:	f107 031c 	add.w	r3, r7, #28
 8008212:	2220      	movs	r2, #32
 8008214:	2100      	movs	r1, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f004 ff96 	bl	800d148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	605a      	str	r2, [r3, #4]
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	60da      	str	r2, [r3, #12]
 8008228:	611a      	str	r2, [r3, #16]
 800822a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800822c:	2008      	movs	r0, #8
 800822e:	f7ff ff59 	bl	80080e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8008236:	2300      	movs	r3, #0
 8008238:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 167999;
 800823a:	4b3e      	ldr	r3, [pc, #248]	; (8008334 <MX_TIM5_Init+0x13c>)
 800823c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800823e:	2300      	movs	r3, #0
 8008240:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8008242:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008246:	4619      	mov	r1, r3
 8008248:	483b      	ldr	r0, [pc, #236]	; (8008338 <MX_TIM5_Init+0x140>)
 800824a:	f004 fa89 	bl	800c760 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800824e:	483a      	ldr	r0, [pc, #232]	; (8008338 <MX_TIM5_Init+0x140>)
 8008250:	f7ff fe19 	bl	8007e86 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8008254:	2100      	movs	r1, #0
 8008256:	4838      	ldr	r0, [pc, #224]	; (8008338 <MX_TIM5_Init+0x140>)
 8008258:	f7ff fef4 	bl	8008044 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800825c:	2101      	movs	r1, #1
 800825e:	4836      	ldr	r0, [pc, #216]	; (8008338 <MX_TIM5_Init+0x140>)
 8008260:	f7ff feac 	bl	8007fbc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8008264:	2360      	movs	r3, #96	; 0x60
 8008266:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8008268:	2300      	movs	r3, #0
 800826a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800826c:	2300      	movs	r3, #0
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8008274:	2300      	movs	r3, #0
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8008278:	f107 031c 	add.w	r3, r7, #28
 800827c:	461a      	mov	r2, r3
 800827e:	2101      	movs	r1, #1
 8008280:	482d      	ldr	r0, [pc, #180]	; (8008338 <MX_TIM5_Init+0x140>)
 8008282:	f004 fb07 	bl	800c894 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8008286:	2101      	movs	r1, #1
 8008288:	482b      	ldr	r0, [pc, #172]	; (8008338 <MX_TIM5_Init+0x140>)
 800828a:	f7ff fe0d 	bl	8007ea8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800828e:	2110      	movs	r1, #16
 8008290:	4829      	ldr	r0, [pc, #164]	; (8008338 <MX_TIM5_Init+0x140>)
 8008292:	f7ff fe93 	bl	8007fbc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8008296:	f107 031c 	add.w	r3, r7, #28
 800829a:	461a      	mov	r2, r3
 800829c:	2110      	movs	r1, #16
 800829e:	4826      	ldr	r0, [pc, #152]	; (8008338 <MX_TIM5_Init+0x140>)
 80082a0:	f004 faf8 	bl	800c894 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80082a4:	2110      	movs	r1, #16
 80082a6:	4824      	ldr	r0, [pc, #144]	; (8008338 <MX_TIM5_Init+0x140>)
 80082a8:	f7ff fe42 	bl	8007f30 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80082ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082b0:	4821      	ldr	r0, [pc, #132]	; (8008338 <MX_TIM5_Init+0x140>)
 80082b2:	f7ff fe83 	bl	8007fbc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80082b6:	f107 031c 	add.w	r3, r7, #28
 80082ba:	461a      	mov	r2, r3
 80082bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082c0:	481d      	ldr	r0, [pc, #116]	; (8008338 <MX_TIM5_Init+0x140>)
 80082c2:	f004 fae7 	bl	800c894 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80082c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ca:	481b      	ldr	r0, [pc, #108]	; (8008338 <MX_TIM5_Init+0x140>)
 80082cc:	f7ff fdec 	bl	8007ea8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80082d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082d4:	4818      	ldr	r0, [pc, #96]	; (8008338 <MX_TIM5_Init+0x140>)
 80082d6:	f7ff fe71 	bl	8007fbc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80082da:	f107 031c 	add.w	r3, r7, #28
 80082de:	461a      	mov	r2, r3
 80082e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082e4:	4814      	ldr	r0, [pc, #80]	; (8008338 <MX_TIM5_Init+0x140>)
 80082e6:	f004 fad5 	bl	800c894 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80082ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082ee:	4812      	ldr	r0, [pc, #72]	; (8008338 <MX_TIM5_Init+0x140>)
 80082f0:	f7ff fdda 	bl	8007ea8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80082f4:	2100      	movs	r1, #0
 80082f6:	4810      	ldr	r0, [pc, #64]	; (8008338 <MX_TIM5_Init+0x140>)
 80082f8:	f7ff feb9 	bl	800806e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80082fc:	480e      	ldr	r0, [pc, #56]	; (8008338 <MX_TIM5_Init+0x140>)
 80082fe:	f7ff fec9 	bl	8008094 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008302:	2001      	movs	r0, #1
 8008304:	f7ff fed6 	bl	80080b4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8008308:	230f      	movs	r3, #15
 800830a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800830c:	2302      	movs	r3, #2
 800830e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008314:	2300      	movs	r3, #0
 8008316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800831c:	2302      	movs	r3, #2
 800831e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008320:	1d3b      	adds	r3, r7, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4805      	ldr	r0, [pc, #20]	; (800833c <MX_TIM5_Init+0x144>)
 8008326:	f003 ff86 	bl	800c236 <LL_GPIO_Init>

}
 800832a:	bf00      	nop
 800832c:	3750      	adds	r7, #80	; 0x50
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	0002903f 	.word	0x0002903f
 8008338:	40000c00 	.word	0x40000c00
 800833c:	40020000 	.word	0x40020000

08008340 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8008354:	2020      	movs	r0, #32
 8008356:	f7ff fec5 	bl	80080e4 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800835a:	f7ff fd0b 	bl	8007d74 <__NVIC_GetPriorityGrouping>
 800835e:	4603      	mov	r3, r0
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fd5b 	bl	8007e20 <NVIC_EncodePriority>
 800836a:	4603      	mov	r3, r0
 800836c:	4619      	mov	r1, r3
 800836e:	2037      	movs	r0, #55	; 0x37
 8008370:	f7ff fd2c 	bl	8007dcc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8008374:	2037      	movs	r0, #55	; 0x37
 8008376:	f7ff fd0b 	bl	8007d90 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 800837a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800837e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8008384:	2301      	movs	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8008388:	1d3b      	adds	r3, r7, #4
 800838a:	4619      	mov	r1, r3
 800838c:	4808      	ldr	r0, [pc, #32]	; (80083b0 <MX_TIM7_Init+0x70>)
 800838e:	f004 f9e7 	bl	800c760 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8008392:	4807      	ldr	r0, [pc, #28]	; (80083b0 <MX_TIM7_Init+0x70>)
 8008394:	f7ff fd77 	bl	8007e86 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8008398:	2100      	movs	r1, #0
 800839a:	4805      	ldr	r0, [pc, #20]	; (80083b0 <MX_TIM7_Init+0x70>)
 800839c:	f7ff fe67 	bl	800806e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80083a0:	4803      	ldr	r0, [pc, #12]	; (80083b0 <MX_TIM7_Init+0x70>)
 80083a2:	f7ff fe77 	bl	8008094 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80083a6:	bf00      	nop
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40001400 	.word	0x40001400

080083b4 <__NVIC_GetPriorityGrouping>:
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083b8:	4b04      	ldr	r3, [pc, #16]	; (80083cc <__NVIC_GetPriorityGrouping+0x18>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	0a1b      	lsrs	r3, r3, #8
 80083be:	f003 0307 	and.w	r3, r3, #7
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	e000ed00 	.word	0xe000ed00

080083d0 <__NVIC_EnableIRQ>:
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	db0b      	blt.n	80083fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	f003 021f 	and.w	r2, r3, #31
 80083e8:	4907      	ldr	r1, [pc, #28]	; (8008408 <__NVIC_EnableIRQ+0x38>)
 80083ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	2001      	movs	r0, #1
 80083f2:	fa00 f202 	lsl.w	r2, r0, r2
 80083f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	e000e100 	.word	0xe000e100

0800840c <__NVIC_SetPriority>:
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800841c:	2b00      	cmp	r3, #0
 800841e:	db0a      	blt.n	8008436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	b2da      	uxtb	r2, r3
 8008424:	490c      	ldr	r1, [pc, #48]	; (8008458 <__NVIC_SetPriority+0x4c>)
 8008426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842a:	0112      	lsls	r2, r2, #4
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	440b      	add	r3, r1
 8008430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008434:	e00a      	b.n	800844c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4908      	ldr	r1, [pc, #32]	; (800845c <__NVIC_SetPriority+0x50>)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	3b04      	subs	r3, #4
 8008444:	0112      	lsls	r2, r2, #4
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	440b      	add	r3, r1
 800844a:	761a      	strb	r2, [r3, #24]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	e000e100 	.word	0xe000e100
 800845c:	e000ed00 	.word	0xe000ed00

08008460 <NVIC_EncodePriority>:
{
 8008460:	b480      	push	{r7}
 8008462:	b089      	sub	sp, #36	; 0x24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f1c3 0307 	rsb	r3, r3, #7
 800847a:	2b04      	cmp	r3, #4
 800847c:	bf28      	it	cs
 800847e:	2304      	movcs	r3, #4
 8008480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	3304      	adds	r3, #4
 8008486:	2b06      	cmp	r3, #6
 8008488:	d902      	bls.n	8008490 <NVIC_EncodePriority+0x30>
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	3b03      	subs	r3, #3
 800848e:	e000      	b.n	8008492 <NVIC_EncodePriority+0x32>
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008494:	f04f 32ff 	mov.w	r2, #4294967295
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	43da      	mvns	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	401a      	ands	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084a8:	f04f 31ff 	mov.w	r1, #4294967295
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	fa01 f303 	lsl.w	r3, r1, r3
 80084b2:	43d9      	mvns	r1, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b8:	4313      	orrs	r3, r2
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3724      	adds	r7, #36	; 0x24
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <LL_USART_Enable>:
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60da      	str	r2, [r3, #12]
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <LL_USART_ConfigAsyncMode>:
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	615a      	str	r2, [r3, #20]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <LL_AHB1_GRP1_EnableClock>:
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800851e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008520:	4907      	ldr	r1, [pc, #28]	; (8008540 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4313      	orrs	r3, r2
 8008526:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800852a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4013      	ands	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	40023800 	.word	0x40023800

08008544 <LL_APB1_GRP1_EnableClock>:
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <LL_APB1_GRP1_EnableClock+0x2c>)
 800854e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008550:	4907      	ldr	r1, [pc, #28]	; (8008570 <LL_APB1_GRP1_EnableClock+0x2c>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4313      	orrs	r3, r2
 8008556:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <LL_APB1_GRP1_EnableClock+0x2c>)
 800855a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4013      	ands	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008562:	68fb      	ldr	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	40023800 	.word	0x40023800

08008574 <LL_APB2_GRP1_EnableClock>:
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800857e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008580:	4907      	ldr	r1, [pc, #28]	; (80085a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4313      	orrs	r3, r2
 8008586:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800858a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4013      	ands	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008592:	68fb      	ldr	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	40023800 	.word	0x40023800

080085a4 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08e      	sub	sp, #56	; 0x38
 80085a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80085aa:	f107 031c 	add.w	r3, r7, #28
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	609a      	str	r2, [r3, #8]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	611a      	str	r2, [r3, #16]
 80085ba:	615a      	str	r2, [r3, #20]
 80085bc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085be:	1d3b      	adds	r3, r7, #4
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	611a      	str	r2, [r3, #16]
 80085cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80085ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80085d2:	f7ff ffb7 	bl	8008544 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80085d6:	2004      	movs	r0, #4
 80085d8:	f7ff ff9c 	bl	8008514 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80085dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80085e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80085e2:	2302      	movs	r3, #2
 80085e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80085e6:	2303      	movs	r3, #3
 80085e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80085ee:	2301      	movs	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80085f2:	2308      	movs	r3, #8
 80085f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085f6:	1d3b      	adds	r3, r7, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	4819      	ldr	r0, [pc, #100]	; (8008660 <MX_UART4_Init+0xbc>)
 80085fc:	f003 fe1b 	bl	800c236 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008600:	f7ff fed8 	bl	80083b4 <__NVIC_GetPriorityGrouping>
 8008604:	4603      	mov	r3, r0
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff ff28 	bl	8008460 <NVIC_EncodePriority>
 8008610:	4603      	mov	r3, r0
 8008612:	4619      	mov	r1, r3
 8008614:	2034      	movs	r0, #52	; 0x34
 8008616:	f7ff fef9 	bl	800840c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800861a:	2034      	movs	r0, #52	; 0x34
 800861c:	f7ff fed8 	bl	80083d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8008620:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8008624:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008626:	2300      	movs	r3, #0
 8008628:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800862a:	2300      	movs	r3, #0
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800862e:	2300      	movs	r3, #0
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008632:	230c      	movs	r3, #12
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008636:	2300      	movs	r3, #0
 8008638:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800863a:	2300      	movs	r3, #0
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800863e:	f107 031c 	add.w	r3, r7, #28
 8008642:	4619      	mov	r1, r3
 8008644:	4807      	ldr	r0, [pc, #28]	; (8008664 <MX_UART4_Init+0xc0>)
 8008646:	f004 fcd5 	bl	800cff4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800864a:	4806      	ldr	r0, [pc, #24]	; (8008664 <MX_UART4_Init+0xc0>)
 800864c:	f7ff ff4b 	bl	80084e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8008650:	4804      	ldr	r0, [pc, #16]	; (8008664 <MX_UART4_Init+0xc0>)
 8008652:	f7ff ff38 	bl	80084c6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008656:	bf00      	nop
 8008658:	3738      	adds	r7, #56	; 0x38
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40020800 	.word	0x40020800
 8008664:	40004c00 	.word	0x40004c00

08008668 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	; 0x38
 800866c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800866e:	f107 031c 	add.w	r3, r7, #28
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	605a      	str	r2, [r3, #4]
 8008678:	609a      	str	r2, [r3, #8]
 800867a:	60da      	str	r2, [r3, #12]
 800867c:	611a      	str	r2, [r3, #16]
 800867e:	615a      	str	r2, [r3, #20]
 8008680:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008682:	1d3b      	adds	r3, r7, #4
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	605a      	str	r2, [r3, #4]
 800868a:	609a      	str	r2, [r3, #8]
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	611a      	str	r2, [r3, #16]
 8008690:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8008692:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008696:	f7ff ff55 	bl	8008544 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800869a:	2004      	movs	r0, #4
 800869c:	f7ff ff3a 	bl	8008514 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80086a0:	2008      	movs	r0, #8
 80086a2:	f7ff ff37 	bl	8008514 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80086a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80086ac:	2302      	movs	r3, #2
 80086ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80086b0:	2303      	movs	r3, #3
 80086b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80086b8:	2301      	movs	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80086bc:	2308      	movs	r3, #8
 80086be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086c0:	1d3b      	adds	r3, r7, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4821      	ldr	r0, [pc, #132]	; (800874c <MX_UART5_Init+0xe4>)
 80086c6:	f003 fdb6 	bl	800c236 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80086ca:	2304      	movs	r3, #4
 80086cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80086ce:	2302      	movs	r3, #2
 80086d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80086d2:	2303      	movs	r3, #3
 80086d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80086da:	2301      	movs	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80086de:	2308      	movs	r3, #8
 80086e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086e2:	1d3b      	adds	r3, r7, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	481a      	ldr	r0, [pc, #104]	; (8008750 <MX_UART5_Init+0xe8>)
 80086e8:	f003 fda5 	bl	800c236 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80086ec:	f7ff fe62 	bl	80083b4 <__NVIC_GetPriorityGrouping>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff feb2 	bl	8008460 <NVIC_EncodePriority>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4619      	mov	r1, r3
 8008700:	2035      	movs	r0, #53	; 0x35
 8008702:	f7ff fe83 	bl	800840c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8008706:	2035      	movs	r0, #53	; 0x35
 8008708:	f7ff fe62 	bl	80083d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800870c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008710:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008712:	2300      	movs	r3, #0
 8008714:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800871a:	2300      	movs	r3, #0
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800871e:	2304      	movs	r3, #4
 8008720:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008722:	2300      	movs	r3, #0
 8008724:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008726:	2300      	movs	r3, #0
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800872a:	f107 031c 	add.w	r3, r7, #28
 800872e:	4619      	mov	r1, r3
 8008730:	4808      	ldr	r0, [pc, #32]	; (8008754 <MX_UART5_Init+0xec>)
 8008732:	f004 fc5f 	bl	800cff4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8008736:	4807      	ldr	r0, [pc, #28]	; (8008754 <MX_UART5_Init+0xec>)
 8008738:	f7ff fed5 	bl	80084e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800873c:	4805      	ldr	r0, [pc, #20]	; (8008754 <MX_UART5_Init+0xec>)
 800873e:	f7ff fec2 	bl	80084c6 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008742:	bf00      	nop
 8008744:	3738      	adds	r7, #56	; 0x38
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40020800 	.word	0x40020800
 8008750:	40020c00 	.word	0x40020c00
 8008754:	40005000 	.word	0x40005000

08008758 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 800875e:	4a12      	ldr	r2, [pc, #72]	; (80087a8 <MX_USART1_UART_Init+0x50>)
 8008760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 8008764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800876a:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 800876c:	2200      	movs	r2, #0
 800876e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 8008772:	2200      	movs	r2, #0
 8008774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 8008778:	2200      	movs	r2, #0
 800877a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800877c:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 800877e:	220c      	movs	r2, #12
 8008780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 8008784:	2200      	movs	r2, #0
 8008786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 800878a:	2200      	movs	r2, #0
 800878c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <MX_USART1_UART_Init+0x4c>)
 8008790:	f002 fc92 	bl	800b0b8 <HAL_UART_Init>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800879a:	f7fe fe5f 	bl	800745c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800879e:	bf00      	nop
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000878 	.word	0x20000878
 80087a8:	40011000 	.word	0x40011000

080087ac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08e      	sub	sp, #56	; 0x38
 80087b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80087b2:	f107 031c 	add.w	r3, r7, #28
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	60da      	str	r2, [r3, #12]
 80087c0:	611a      	str	r2, [r3, #16]
 80087c2:	615a      	str	r2, [r3, #20]
 80087c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	611a      	str	r2, [r3, #16]
 80087d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80087d6:	2020      	movs	r0, #32
 80087d8:	f7ff fecc 	bl	8008574 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80087dc:	2004      	movs	r0, #4
 80087de:	f7ff fe99 	bl	8008514 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80087e2:	23c0      	movs	r3, #192	; 0xc0
 80087e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80087e6:	2302      	movs	r3, #2
 80087e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80087ea:	2303      	movs	r3, #3
 80087ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80087f6:	2308      	movs	r3, #8
 80087f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4819      	ldr	r0, [pc, #100]	; (8008864 <MX_USART6_UART_Init+0xb8>)
 8008800:	f003 fd19 	bl	800c236 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008804:	f7ff fdd6 	bl	80083b4 <__NVIC_GetPriorityGrouping>
 8008808:	4603      	mov	r3, r0
 800880a:	2200      	movs	r2, #0
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fe26 	bl	8008460 <NVIC_EncodePriority>
 8008814:	4603      	mov	r3, r0
 8008816:	4619      	mov	r1, r3
 8008818:	2047      	movs	r0, #71	; 0x47
 800881a:	f7ff fdf7 	bl	800840c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800881e:	2047      	movs	r0, #71	; 0x47
 8008820:	f7ff fdd6 	bl	80083d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008824:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008828:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800882a:	2300      	movs	r3, #0
 800882c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008832:	2300      	movs	r3, #0
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008836:	230c      	movs	r3, #12
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800883a:	2300      	movs	r3, #0
 800883c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800883e:	2300      	movs	r3, #0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8008842:	f107 031c 	add.w	r3, r7, #28
 8008846:	4619      	mov	r1, r3
 8008848:	4807      	ldr	r0, [pc, #28]	; (8008868 <MX_USART6_UART_Init+0xbc>)
 800884a:	f004 fbd3 	bl	800cff4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800884e:	4806      	ldr	r0, [pc, #24]	; (8008868 <MX_USART6_UART_Init+0xbc>)
 8008850:	f7ff fe49 	bl	80084e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8008854:	4804      	ldr	r0, [pc, #16]	; (8008868 <MX_USART6_UART_Init+0xbc>)
 8008856:	f7ff fe36 	bl	80084c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800885a:	bf00      	nop
 800885c:	3738      	adds	r7, #56	; 0x38
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	40020800 	.word	0x40020800
 8008868:	40011400 	.word	0x40011400

0800886c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	; 0x28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008874:	f107 0314 	add.w	r3, r7, #20
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	605a      	str	r2, [r3, #4]
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	60da      	str	r2, [r3, #12]
 8008882:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a34      	ldr	r2, [pc, #208]	; (800895c <HAL_UART_MspInit+0xf0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d162      	bne.n	8008954 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	4b33      	ldr	r3, [pc, #204]	; (8008960 <HAL_UART_MspInit+0xf4>)
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	4a32      	ldr	r2, [pc, #200]	; (8008960 <HAL_UART_MspInit+0xf4>)
 8008898:	f043 0310 	orr.w	r3, r3, #16
 800889c:	6453      	str	r3, [r2, #68]	; 0x44
 800889e:	4b30      	ldr	r3, [pc, #192]	; (8008960 <HAL_UART_MspInit+0xf4>)
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	f003 0310 	and.w	r3, r3, #16
 80088a6:	613b      	str	r3, [r7, #16]
 80088a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	4b2c      	ldr	r3, [pc, #176]	; (8008960 <HAL_UART_MspInit+0xf4>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	4a2b      	ldr	r2, [pc, #172]	; (8008960 <HAL_UART_MspInit+0xf4>)
 80088b4:	f043 0301 	orr.w	r3, r3, #1
 80088b8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ba:	4b29      	ldr	r3, [pc, #164]	; (8008960 <HAL_UART_MspInit+0xf4>)
 80088bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80088c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80088ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088cc:	2302      	movs	r3, #2
 80088ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d4:	2303      	movs	r3, #3
 80088d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80088d8:	2307      	movs	r3, #7
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4619      	mov	r1, r3
 80088e2:	4820      	ldr	r0, [pc, #128]	; (8008964 <HAL_UART_MspInit+0xf8>)
 80088e4:	f000 fe18 	bl	8009518 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80088e8:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <HAL_UART_MspInit+0xfc>)
 80088ea:	4a20      	ldr	r2, [pc, #128]	; (800896c <HAL_UART_MspInit+0x100>)
 80088ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80088ee:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <HAL_UART_MspInit+0xfc>)
 80088f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80088f6:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <HAL_UART_MspInit+0xfc>)
 80088f8:	2240      	movs	r2, #64	; 0x40
 80088fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088fc:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <HAL_UART_MspInit+0xfc>)
 80088fe:	2200      	movs	r2, #0
 8008900:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008902:	4b19      	ldr	r3, [pc, #100]	; (8008968 <HAL_UART_MspInit+0xfc>)
 8008904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008908:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <HAL_UART_MspInit+0xfc>)
 800890c:	2200      	movs	r2, #0
 800890e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <HAL_UART_MspInit+0xfc>)
 8008912:	2200      	movs	r2, #0
 8008914:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008916:	4b14      	ldr	r3, [pc, #80]	; (8008968 <HAL_UART_MspInit+0xfc>)
 8008918:	2200      	movs	r2, #0
 800891a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <HAL_UART_MspInit+0xfc>)
 800891e:	2200      	movs	r2, #0
 8008920:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <HAL_UART_MspInit+0xfc>)
 8008924:	2200      	movs	r2, #0
 8008926:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008928:	480f      	ldr	r0, [pc, #60]	; (8008968 <HAL_UART_MspInit+0xfc>)
 800892a:	f000 f9f3 	bl	8008d14 <HAL_DMA_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008934:	f7fe fd92 	bl	800745c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <HAL_UART_MspInit+0xfc>)
 800893c:	635a      	str	r2, [r3, #52]	; 0x34
 800893e:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <HAL_UART_MspInit+0xfc>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	2025      	movs	r0, #37	; 0x25
 800894a:	f000 f9ac 	bl	8008ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800894e:	2025      	movs	r0, #37	; 0x25
 8008950:	f000 f9c5 	bl	8008cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008954:	bf00      	nop
 8008956:	3728      	adds	r7, #40	; 0x28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40011000 	.word	0x40011000
 8008960:	40023800 	.word	0x40023800
 8008964:	40020000 	.word	0x40020000
 8008968:	20000818 	.word	0x20000818
 800896c:	400264b8 	.word	0x400264b8

08008970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008974:	480d      	ldr	r0, [pc, #52]	; (80089ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008976:	490e      	ldr	r1, [pc, #56]	; (80089b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008978:	4a0e      	ldr	r2, [pc, #56]	; (80089b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800897a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800897c:	e002      	b.n	8008984 <LoopCopyDataInit>

0800897e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800897e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008982:	3304      	adds	r3, #4

08008984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008988:	d3f9      	bcc.n	800897e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800898a:	4a0b      	ldr	r2, [pc, #44]	; (80089b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800898c:	4c0b      	ldr	r4, [pc, #44]	; (80089bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800898e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008990:	e001      	b.n	8008996 <LoopFillZerobss>

08008992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008994:	3204      	adds	r2, #4

08008996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008998:	d3fb      	bcc.n	8008992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800899a:	f7ff f9d9 	bl	8007d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800899e:	f004 fbaf 	bl	800d100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80089a2:	f7fb fd19 	bl	80043d8 <main>
  bx  lr    
 80089a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80089a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80089ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80089b4:	080124e8 	.word	0x080124e8
  ldr r2, =_sbss
 80089b8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80089bc:	200008d0 	.word	0x200008d0

080089c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80089c0:	e7fe      	b.n	80089c0 <ADC_IRQHandler>
	...

080089c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089c8:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <HAL_Init+0x40>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a0d      	ldr	r2, [pc, #52]	; (8008a04 <HAL_Init+0x40>)
 80089ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <HAL_Init+0x40>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a0a      	ldr	r2, [pc, #40]	; (8008a04 <HAL_Init+0x40>)
 80089da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <HAL_Init+0x40>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a07      	ldr	r2, [pc, #28]	; (8008a04 <HAL_Init+0x40>)
 80089e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089ec:	2003      	movs	r0, #3
 80089ee:	f000 f94f 	bl	8008c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089f2:	2000      	movs	r0, #0
 80089f4:	f000 f808 	bl	8008a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089f8:	f7fe fe88 	bl	800770c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40023c00 	.word	0x40023c00

08008a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_InitTick+0x54>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <HAL_InitTick+0x58>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f967 	bl	8008cfa <HAL_SYSTICK_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e00e      	b.n	8008a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d80a      	bhi.n	8008a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	f000 f92f 	bl	8008ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a48:	4a06      	ldr	r2, [pc, #24]	; (8008a64 <HAL_InitTick+0x5c>)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000004 	.word	0x20000004
 8008a60:	2000000c 	.word	0x2000000c
 8008a64:	20000008 	.word	0x20000008

08008a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_IncTick+0x20>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <HAL_IncTick+0x24>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4413      	add	r3, r2
 8008a78:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <HAL_IncTick+0x24>)
 8008a7a:	6013      	str	r3, [r2, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	2000000c 	.word	0x2000000c
 8008a8c:	200008bc 	.word	0x200008bc

08008a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  return uwTick;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <HAL_GetTick+0x14>)
 8008a96:	681b      	ldr	r3, [r3, #0]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	200008bc 	.word	0x200008bc

08008aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ab0:	f7ff ffee 	bl	8008a90 <HAL_GetTick>
 8008ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d005      	beq.n	8008ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_Delay+0x44>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ace:	bf00      	nop
 8008ad0:	f7ff ffde 	bl	8008a90 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d8f7      	bhi.n	8008ad0 <HAL_Delay+0x28>
  {
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <__NVIC_SetPriorityGrouping>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b00:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b22:	4a04      	ldr	r2, [pc, #16]	; (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	60d3      	str	r3, [r2, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	e000ed00 	.word	0xe000ed00

08008b38 <__NVIC_GetPriorityGrouping>:
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <__NVIC_GetPriorityGrouping+0x18>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f003 0307 	and.w	r3, r3, #7
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <__NVIC_EnableIRQ>:
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db0b      	blt.n	8008b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	4907      	ldr	r1, [pc, #28]	; (8008b8c <__NVIC_EnableIRQ+0x38>)
 8008b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	2001      	movs	r0, #1
 8008b76:	fa00 f202 	lsl.w	r2, r0, r2
 8008b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	e000e100 	.word	0xe000e100

08008b90 <__NVIC_SetPriority>:
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db0a      	blt.n	8008bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	490c      	ldr	r1, [pc, #48]	; (8008bdc <__NVIC_SetPriority+0x4c>)
 8008baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bae:	0112      	lsls	r2, r2, #4
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bb8:	e00a      	b.n	8008bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4908      	ldr	r1, [pc, #32]	; (8008be0 <__NVIC_SetPriority+0x50>)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	3b04      	subs	r3, #4
 8008bc8:	0112      	lsls	r2, r2, #4
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	440b      	add	r3, r1
 8008bce:	761a      	strb	r2, [r3, #24]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	e000e100 	.word	0xe000e100
 8008be0:	e000ed00 	.word	0xe000ed00

08008be4 <NVIC_EncodePriority>:
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f1c3 0307 	rsb	r3, r3, #7
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	bf28      	it	cs
 8008c02:	2304      	movcs	r3, #4
 8008c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d902      	bls.n	8008c14 <NVIC_EncodePriority+0x30>
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3b03      	subs	r3, #3
 8008c12:	e000      	b.n	8008c16 <NVIC_EncodePriority+0x32>
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	43da      	mvns	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	401a      	ands	r2, r3
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	fa01 f303 	lsl.w	r3, r1, r3
 8008c36:	43d9      	mvns	r1, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c3c:	4313      	orrs	r3, r2
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	; 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c5c:	d301      	bcc.n	8008c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00f      	b.n	8008c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c62:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <SysTick_Config+0x40>)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c6a:	210f      	movs	r1, #15
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	f7ff ff8e 	bl	8008b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <SysTick_Config+0x40>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <SysTick_Config+0x40>)
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	e000e010 	.word	0xe000e010

08008c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ff29 	bl	8008af0 <__NVIC_SetPriorityGrouping>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	4603      	mov	r3, r0
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008cb8:	f7ff ff3e 	bl	8008b38 <__NVIC_GetPriorityGrouping>
 8008cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff8e 	bl	8008be4 <NVIC_EncodePriority>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff ff5d 	bl	8008b90 <__NVIC_SetPriority>
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff ff31 	bl	8008b54 <__NVIC_EnableIRQ>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff ffa2 	bl	8008c4c <SysTick_Config>
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d20:	f7ff feb6 	bl	8008a90 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e099      	b.n	8008e64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d50:	e00f      	b.n	8008d72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d52:	f7ff fe9d 	bl	8008a90 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b05      	cmp	r3, #5
 8008d5e:	d908      	bls.n	8008d72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2203      	movs	r2, #3
 8008d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e078      	b.n	8008e64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e8      	bne.n	8008d52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4b38      	ldr	r3, [pc, #224]	; (8008e6c <HAL_DMA_Init+0x158>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d107      	bne.n	8008ddc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d117      	bne.n	8008e36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00e      	beq.n	8008e36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fb01 	bl	8009420 <DMA_CheckFifoParam>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008e32:	2301      	movs	r3, #1
 8008e34:	e016      	b.n	8008e64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fab8 	bl	80093b4 <DMA_CalcBaseAndBitshift>
 8008e44:	4603      	mov	r3, r0
 8008e46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4c:	223f      	movs	r2, #63	; 0x3f
 8008e4e:	409a      	lsls	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	f010803f 	.word	0xf010803f

08008e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <HAL_DMA_Start_IT+0x26>
 8008e92:	2302      	movs	r3, #2
 8008e94:	e040      	b.n	8008f18 <HAL_DMA_Start_IT+0xa8>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d12f      	bne.n	8008f0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2202      	movs	r2, #2
 8008eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	68b9      	ldr	r1, [r7, #8]
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fa4a 	bl	8009358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec8:	223f      	movs	r2, #63	; 0x3f
 8008eca:	409a      	lsls	r2, r3
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0216 	orr.w	r2, r2, #22
 8008ede:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0208 	orr.w	r2, r2, #8
 8008ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0201 	orr.w	r2, r2, #1
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	e005      	b.n	8008f16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008f12:	2302      	movs	r3, #2
 8008f14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008f2e:	f7ff fdaf 	bl	8008a90 <HAL_GetTick>
 8008f32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d008      	beq.n	8008f52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2280      	movs	r2, #128	; 0x80
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e052      	b.n	8008ff8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0216 	bic.w	r2, r2, #22
 8008f60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695a      	ldr	r2, [r3, #20]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d103      	bne.n	8008f82 <HAL_DMA_Abort+0x62>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0208 	bic.w	r2, r2, #8
 8008f90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008fa2:	e013      	b.n	8008fcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008fa4:	f7ff fd74 	bl	8008a90 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d90c      	bls.n	8008fcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e015      	b.n	8008ff8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e4      	bne.n	8008fa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fde:	223f      	movs	r2, #63	; 0x3f
 8008fe0:	409a      	lsls	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d004      	beq.n	800901e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2280      	movs	r2, #128	; 0x80
 8009018:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e00c      	b.n	8009038 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2205      	movs	r2, #5
 8009022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0201 	bic.w	r2, r2, #1
 8009034:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009050:	4b92      	ldr	r3, [pc, #584]	; (800929c <HAL_DMA_IRQHandler+0x258>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a92      	ldr	r2, [pc, #584]	; (80092a0 <HAL_DMA_IRQHandler+0x25c>)
 8009056:	fba2 2303 	umull	r2, r3, r2, r3
 800905a:	0a9b      	lsrs	r3, r3, #10
 800905c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906e:	2208      	movs	r2, #8
 8009070:	409a      	lsls	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01a      	beq.n	80090b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d013      	beq.n	80090b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0204 	bic.w	r2, r2, #4
 8009096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800909c:	2208      	movs	r2, #8
 800909e:	409a      	lsls	r2, r3
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a8:	f043 0201 	orr.w	r2, r3, #1
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b4:	2201      	movs	r2, #1
 80090b6:	409a      	lsls	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d2:	2201      	movs	r2, #1
 80090d4:	409a      	lsls	r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	f043 0202 	orr.w	r2, r3, #2
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ea:	2204      	movs	r2, #4
 80090ec:	409a      	lsls	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4013      	ands	r3, r2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d012      	beq.n	800911c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009108:	2204      	movs	r2, #4
 800910a:	409a      	lsls	r2, r3
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009114:	f043 0204 	orr.w	r2, r3, #4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009120:	2210      	movs	r2, #16
 8009122:	409a      	lsls	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d043      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d03c      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913e:	2210      	movs	r2, #16
 8009140:	409a      	lsls	r2, r3
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d018      	beq.n	8009186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d108      	bne.n	8009174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d024      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
 8009172:	e01f      	b.n	80091b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01b      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
 8009184:	e016      	b.n	80091b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d107      	bne.n	80091a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0208 	bic.w	r2, r2, #8
 80091a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b8:	2220      	movs	r2, #32
 80091ba:	409a      	lsls	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4013      	ands	r3, r2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 808e 	beq.w	80092e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8086 	beq.w	80092e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091da:	2220      	movs	r2, #32
 80091dc:	409a      	lsls	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d136      	bne.n	800925c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0216 	bic.w	r2, r2, #22
 80091fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	695a      	ldr	r2, [r3, #20]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800920c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <HAL_DMA_IRQHandler+0x1da>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921a:	2b00      	cmp	r3, #0
 800921c:	d007      	beq.n	800922e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0208 	bic.w	r2, r2, #8
 800922c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009232:	223f      	movs	r2, #63	; 0x3f
 8009234:	409a      	lsls	r2, r3
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800924e:	2b00      	cmp	r3, #0
 8009250:	d07d      	beq.n	800934e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
        }
        return;
 800925a:	e078      	b.n	800934e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01c      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d108      	bne.n	800928a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927c:	2b00      	cmp	r3, #0
 800927e:	d030      	beq.n	80092e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
 8009288:	e02b      	b.n	80092e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d027      	beq.n	80092e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
 800929a:	e022      	b.n	80092e2 <HAL_DMA_IRQHandler+0x29e>
 800929c:	20000004 	.word	0x20000004
 80092a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10f      	bne.n	80092d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0210 	bic.w	r2, r2, #16
 80092c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d032      	beq.n	8009350 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d022      	beq.n	800933c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2205      	movs	r2, #5
 80092fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	3301      	adds	r3, #1
 8009312:	60bb      	str	r3, [r7, #8]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	429a      	cmp	r2, r3
 8009318:	d307      	bcc.n	800932a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1f2      	bne.n	800930e <HAL_DMA_IRQHandler+0x2ca>
 8009328:	e000      	b.n	800932c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800932a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
 800934c:	e000      	b.n	8009350 <HAL_DMA_IRQHandler+0x30c>
        return;
 800934e:	bf00      	nop
    }
  }
}
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop

08009358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	2b40      	cmp	r3, #64	; 0x40
 8009384:	d108      	bne.n	8009398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009396:	e007      	b.n	80093a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	60da      	str	r2, [r3, #12]
}
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	3b10      	subs	r3, #16
 80093c4:	4a14      	ldr	r2, [pc, #80]	; (8009418 <DMA_CalcBaseAndBitshift+0x64>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	091b      	lsrs	r3, r3, #4
 80093cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093ce:	4a13      	ldr	r2, [pc, #76]	; (800941c <DMA_CalcBaseAndBitshift+0x68>)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4413      	add	r3, r2
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d909      	bls.n	80093f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	659a      	str	r2, [r3, #88]	; 0x58
 80093f4:	e007      	b.n	8009406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80093fe:	f023 0303 	bic.w	r3, r3, #3
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	aaaaaaab 	.word	0xaaaaaaab
 800941c:	08011ebc 	.word	0x08011ebc

08009420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d11f      	bne.n	800947a <DMA_CheckFifoParam+0x5a>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b03      	cmp	r3, #3
 800943e:	d856      	bhi.n	80094ee <DMA_CheckFifoParam+0xce>
 8009440:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <DMA_CheckFifoParam+0x28>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	08009459 	.word	0x08009459
 800944c:	0800946b 	.word	0x0800946b
 8009450:	08009459 	.word	0x08009459
 8009454:	080094ef 	.word	0x080094ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d046      	beq.n	80094f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009468:	e043      	b.n	80094f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009472:	d140      	bne.n	80094f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009478:	e03d      	b.n	80094f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009482:	d121      	bne.n	80094c8 <DMA_CheckFifoParam+0xa8>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b03      	cmp	r3, #3
 8009488:	d837      	bhi.n	80094fa <DMA_CheckFifoParam+0xda>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <DMA_CheckFifoParam+0x70>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094a7 	.word	0x080094a7
 8009498:	080094a1 	.word	0x080094a1
 800949c:	080094b9 	.word	0x080094b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
      break;
 80094a4:	e030      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d025      	beq.n	80094fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094b6:	e022      	b.n	80094fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094c0:	d11f      	bne.n	8009502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80094c6:	e01c      	b.n	8009502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d903      	bls.n	80094d6 <DMA_CheckFifoParam+0xb6>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d003      	beq.n	80094dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80094d4:	e018      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	73fb      	strb	r3, [r7, #15]
      break;
 80094da:	e015      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00e      	beq.n	8009506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
      break;
 80094ec:	e00b      	b.n	8009506 <DMA_CheckFifoParam+0xe6>
      break;
 80094ee:	bf00      	nop
 80094f0:	e00a      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;
 80094f2:	bf00      	nop
 80094f4:	e008      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;
 80094f6:	bf00      	nop
 80094f8:	e006      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;
 80094fa:	bf00      	nop
 80094fc:	e004      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;
 80094fe:	bf00      	nop
 8009500:	e002      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;   
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <DMA_CheckFifoParam+0xe8>
      break;
 8009506:	bf00      	nop
    }
  } 
  
  return status; 
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop

08009518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009518:	b480      	push	{r7}
 800951a:	b089      	sub	sp, #36	; 0x24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009526:	2300      	movs	r3, #0
 8009528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800952a:	2300      	movs	r3, #0
 800952c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	e16b      	b.n	800980c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009534:	2201      	movs	r2, #1
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	fa02 f303 	lsl.w	r3, r2, r3
 800953c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4013      	ands	r3, r2
 8009546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	429a      	cmp	r2, r3
 800954e:	f040 815a 	bne.w	8009806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b01      	cmp	r3, #1
 800955c:	d005      	beq.n	800956a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009566:	2b02      	cmp	r3, #2
 8009568:	d130      	bne.n	80095cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	2203      	movs	r2, #3
 8009576:	fa02 f303 	lsl.w	r3, r2, r3
 800957a:	43db      	mvns	r3, r3
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	4013      	ands	r3, r2
 8009580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	fa02 f303 	lsl.w	r3, r2, r3
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	4313      	orrs	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095a0:	2201      	movs	r2, #1
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	fa02 f303 	lsl.w	r3, r2, r3
 80095a8:	43db      	mvns	r3, r3
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	4013      	ands	r3, r2
 80095ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	f003 0201 	and.w	r2, r3, #1
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f003 0303 	and.w	r3, r3, #3
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d017      	beq.n	8009608 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	2203      	movs	r2, #3
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	43db      	mvns	r3, r3
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	4013      	ands	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d123      	bne.n	800965c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	08da      	lsrs	r2, r3, #3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3208      	adds	r2, #8
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	220f      	movs	r2, #15
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	43db      	mvns	r3, r3
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	4013      	ands	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	4313      	orrs	r3, r2
 800964c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	08da      	lsrs	r2, r3, #3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3208      	adds	r2, #8
 8009656:	69b9      	ldr	r1, [r7, #24]
 8009658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	2203      	movs	r2, #3
 8009668:	fa02 f303 	lsl.w	r3, r2, r3
 800966c:	43db      	mvns	r3, r3
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	4013      	ands	r3, r2
 8009672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f003 0203 	and.w	r2, r3, #3
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	69ba      	ldr	r2, [r7, #24]
 8009686:	4313      	orrs	r3, r2
 8009688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80b4 	beq.w	8009806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	4b60      	ldr	r3, [pc, #384]	; (8009824 <HAL_GPIO_Init+0x30c>)
 80096a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a6:	4a5f      	ldr	r2, [pc, #380]	; (8009824 <HAL_GPIO_Init+0x30c>)
 80096a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096ac:	6453      	str	r3, [r2, #68]	; 0x44
 80096ae:	4b5d      	ldr	r3, [pc, #372]	; (8009824 <HAL_GPIO_Init+0x30c>)
 80096b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096ba:	4a5b      	ldr	r2, [pc, #364]	; (8009828 <HAL_GPIO_Init+0x310>)
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	089b      	lsrs	r3, r3, #2
 80096c0:	3302      	adds	r3, #2
 80096c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f003 0303 	and.w	r3, r3, #3
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	220f      	movs	r2, #15
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	43db      	mvns	r3, r3
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	4013      	ands	r3, r2
 80096dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a52      	ldr	r2, [pc, #328]	; (800982c <HAL_GPIO_Init+0x314>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d02b      	beq.n	800973e <HAL_GPIO_Init+0x226>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a51      	ldr	r2, [pc, #324]	; (8009830 <HAL_GPIO_Init+0x318>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d025      	beq.n	800973a <HAL_GPIO_Init+0x222>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a50      	ldr	r2, [pc, #320]	; (8009834 <HAL_GPIO_Init+0x31c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01f      	beq.n	8009736 <HAL_GPIO_Init+0x21e>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a4f      	ldr	r2, [pc, #316]	; (8009838 <HAL_GPIO_Init+0x320>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d019      	beq.n	8009732 <HAL_GPIO_Init+0x21a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a4e      	ldr	r2, [pc, #312]	; (800983c <HAL_GPIO_Init+0x324>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d013      	beq.n	800972e <HAL_GPIO_Init+0x216>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a4d      	ldr	r2, [pc, #308]	; (8009840 <HAL_GPIO_Init+0x328>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00d      	beq.n	800972a <HAL_GPIO_Init+0x212>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a4c      	ldr	r2, [pc, #304]	; (8009844 <HAL_GPIO_Init+0x32c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d007      	beq.n	8009726 <HAL_GPIO_Init+0x20e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a4b      	ldr	r2, [pc, #300]	; (8009848 <HAL_GPIO_Init+0x330>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d101      	bne.n	8009722 <HAL_GPIO_Init+0x20a>
 800971e:	2307      	movs	r3, #7
 8009720:	e00e      	b.n	8009740 <HAL_GPIO_Init+0x228>
 8009722:	2308      	movs	r3, #8
 8009724:	e00c      	b.n	8009740 <HAL_GPIO_Init+0x228>
 8009726:	2306      	movs	r3, #6
 8009728:	e00a      	b.n	8009740 <HAL_GPIO_Init+0x228>
 800972a:	2305      	movs	r3, #5
 800972c:	e008      	b.n	8009740 <HAL_GPIO_Init+0x228>
 800972e:	2304      	movs	r3, #4
 8009730:	e006      	b.n	8009740 <HAL_GPIO_Init+0x228>
 8009732:	2303      	movs	r3, #3
 8009734:	e004      	b.n	8009740 <HAL_GPIO_Init+0x228>
 8009736:	2302      	movs	r3, #2
 8009738:	e002      	b.n	8009740 <HAL_GPIO_Init+0x228>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <HAL_GPIO_Init+0x228>
 800973e:	2300      	movs	r3, #0
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	f002 0203 	and.w	r2, r2, #3
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	4093      	lsls	r3, r2
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	4313      	orrs	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009750:	4935      	ldr	r1, [pc, #212]	; (8009828 <HAL_GPIO_Init+0x310>)
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	089b      	lsrs	r3, r3, #2
 8009756:	3302      	adds	r3, #2
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800975e:	4b3b      	ldr	r3, [pc, #236]	; (800984c <HAL_GPIO_Init+0x334>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	43db      	mvns	r3, r3
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4013      	ands	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009782:	4a32      	ldr	r2, [pc, #200]	; (800984c <HAL_GPIO_Init+0x334>)
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009788:	4b30      	ldr	r3, [pc, #192]	; (800984c <HAL_GPIO_Init+0x334>)
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	43db      	mvns	r3, r3
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4013      	ands	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80097ac:	4a27      	ldr	r2, [pc, #156]	; (800984c <HAL_GPIO_Init+0x334>)
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097b2:	4b26      	ldr	r3, [pc, #152]	; (800984c <HAL_GPIO_Init+0x334>)
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	43db      	mvns	r3, r3
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	4013      	ands	r3, r2
 80097c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097d6:	4a1d      	ldr	r2, [pc, #116]	; (800984c <HAL_GPIO_Init+0x334>)
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097dc:	4b1b      	ldr	r3, [pc, #108]	; (800984c <HAL_GPIO_Init+0x334>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	43db      	mvns	r3, r3
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	4013      	ands	r3, r2
 80097ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009800:	4a12      	ldr	r2, [pc, #72]	; (800984c <HAL_GPIO_Init+0x334>)
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	3301      	adds	r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b0f      	cmp	r3, #15
 8009810:	f67f ae90 	bls.w	8009534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3724      	adds	r7, #36	; 0x24
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800
 8009828:	40013800 	.word	0x40013800
 800982c:	40020000 	.word	0x40020000
 8009830:	40020400 	.word	0x40020400
 8009834:	40020800 	.word	0x40020800
 8009838:	40020c00 	.word	0x40020c00
 800983c:	40021000 	.word	0x40021000
 8009840:	40021400 	.word	0x40021400
 8009844:	40021800 	.word	0x40021800
 8009848:	40021c00 	.word	0x40021c00
 800984c:	40013c00 	.word	0x40013c00

08009850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e12b      	b.n	8009aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d106      	bne.n	800987c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fa fc8e 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2224      	movs	r2, #36	; 0x24
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0201 	bic.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098b4:	f001 fbd8 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 80098b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	4a81      	ldr	r2, [pc, #516]	; (8009ac4 <HAL_I2C_Init+0x274>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d807      	bhi.n	80098d4 <HAL_I2C_Init+0x84>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4a80      	ldr	r2, [pc, #512]	; (8009ac8 <HAL_I2C_Init+0x278>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	bf94      	ite	ls
 80098cc:	2301      	movls	r3, #1
 80098ce:	2300      	movhi	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	e006      	b.n	80098e2 <HAL_I2C_Init+0x92>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4a7d      	ldr	r2, [pc, #500]	; (8009acc <HAL_I2C_Init+0x27c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	bf94      	ite	ls
 80098dc:	2301      	movls	r3, #1
 80098de:	2300      	movhi	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e0e7      	b.n	8009aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a78      	ldr	r2, [pc, #480]	; (8009ad0 <HAL_I2C_Init+0x280>)
 80098ee:	fba2 2303 	umull	r2, r3, r2, r3
 80098f2:	0c9b      	lsrs	r3, r3, #18
 80098f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	430a      	orrs	r2, r1
 8009908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a6a      	ldr	r2, [pc, #424]	; (8009ac4 <HAL_I2C_Init+0x274>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d802      	bhi.n	8009924 <HAL_I2C_Init+0xd4>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	3301      	adds	r3, #1
 8009922:	e009      	b.n	8009938 <HAL_I2C_Init+0xe8>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	4a69      	ldr	r2, [pc, #420]	; (8009ad4 <HAL_I2C_Init+0x284>)
 8009930:	fba2 2303 	umull	r2, r3, r2, r3
 8009934:	099b      	lsrs	r3, r3, #6
 8009936:	3301      	adds	r3, #1
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	430b      	orrs	r3, r1
 800993e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800994a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	495c      	ldr	r1, [pc, #368]	; (8009ac4 <HAL_I2C_Init+0x274>)
 8009954:	428b      	cmp	r3, r1
 8009956:	d819      	bhi.n	800998c <HAL_I2C_Init+0x13c>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	1e59      	subs	r1, r3, #1
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	fbb1 f3f3 	udiv	r3, r1, r3
 8009966:	1c59      	adds	r1, r3, #1
 8009968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800996c:	400b      	ands	r3, r1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_I2C_Init+0x138>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	1e59      	subs	r1, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009980:	3301      	adds	r3, #1
 8009982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009986:	e051      	b.n	8009a2c <HAL_I2C_Init+0x1dc>
 8009988:	2304      	movs	r3, #4
 800998a:	e04f      	b.n	8009a2c <HAL_I2C_Init+0x1dc>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d111      	bne.n	80099b8 <HAL_I2C_Init+0x168>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	1e58      	subs	r0, r3, #1
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6859      	ldr	r1, [r3, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	440b      	add	r3, r1
 80099a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80099a6:	3301      	adds	r3, #1
 80099a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bf0c      	ite	eq
 80099b0:	2301      	moveq	r3, #1
 80099b2:	2300      	movne	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	e012      	b.n	80099de <HAL_I2C_Init+0x18e>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	1e58      	subs	r0, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6859      	ldr	r1, [r3, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	0099      	lsls	r1, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bf0c      	ite	eq
 80099d8:	2301      	moveq	r3, #1
 80099da:	2300      	movne	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <HAL_I2C_Init+0x196>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e022      	b.n	8009a2c <HAL_I2C_Init+0x1dc>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10e      	bne.n	8009a0c <HAL_I2C_Init+0x1bc>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1e58      	subs	r0, r3, #1
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	440b      	add	r3, r1
 80099fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a00:	3301      	adds	r3, #1
 8009a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0a:	e00f      	b.n	8009a2c <HAL_I2C_Init+0x1dc>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	1e58      	subs	r0, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6859      	ldr	r1, [r3, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	0099      	lsls	r1, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a22:	3301      	adds	r3, #1
 8009a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	6809      	ldr	r1, [r1, #0]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69da      	ldr	r2, [r3, #28]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6911      	ldr	r1, [r2, #16]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	68d2      	ldr	r2, [r2, #12]
 8009a66:	4311      	orrs	r1, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	000186a0 	.word	0x000186a0
 8009ac8:	001e847f 	.word	0x001e847f
 8009acc:	003d08ff 	.word	0x003d08ff
 8009ad0:	431bde83 	.word	0x431bde83
 8009ad4:	10624dd3 	.word	0x10624dd3

08009ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	817b      	strh	r3, [r7, #10]
 8009aea:	460b      	mov	r3, r1
 8009aec:	813b      	strh	r3, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009af2:	f7fe ffcd 	bl	8008a90 <HAL_GetTick>
 8009af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	f040 80d9 	bne.w	8009cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	2319      	movs	r3, #25
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	496d      	ldr	r1, [pc, #436]	; (8009cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fc7f 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e0cc      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_I2C_Mem_Write+0x56>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e0c5      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d007      	beq.n	8009b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2221      	movs	r2, #33	; 0x21
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2240      	movs	r2, #64	; 0x40
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a3a      	ldr	r2, [r7, #32]
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4a4d      	ldr	r2, [pc, #308]	; (8009cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8009b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b96:	88f8      	ldrh	r0, [r7, #6]
 8009b98:	893a      	ldrh	r2, [r7, #8]
 8009b9a:	8979      	ldrh	r1, [r7, #10]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 fab6 	bl	800a118 <I2C_RequestMemoryWrite>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d052      	beq.n	8009c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e081      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fd00 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00d      	beq.n	8009be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d107      	bne.n	8009bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e06b      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	781a      	ldrb	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d11b      	bne.n	8009c58 <HAL_I2C_Mem_Write+0x180>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d017      	beq.n	8009c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	3b01      	subs	r3, #1
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1aa      	bne.n	8009bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fcec 	bl	800a642 <I2C_WaitOnBTFFlagUntilTimeout>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00d      	beq.n	8009c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d107      	bne.n	8009c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e016      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	00100002 	.word	0x00100002
 8009cc8:	ffff0000 	.word	0xffff0000

08009ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08c      	sub	sp, #48	; 0x30
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	817b      	strh	r3, [r7, #10]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	813b      	strh	r3, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ce6:	f7fe fed3 	bl	8008a90 <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	f040 8208 	bne.w	800a10a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	2319      	movs	r3, #25
 8009d00:	2201      	movs	r2, #1
 8009d02:	497b      	ldr	r1, [pc, #492]	; (8009ef0 <HAL_I2C_Mem_Read+0x224>)
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fb85 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009d10:	2302      	movs	r3, #2
 8009d12:	e1fb      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_I2C_Mem_Read+0x56>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e1f4      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d007      	beq.n	8009d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2222      	movs	r2, #34	; 0x22
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2240      	movs	r2, #64	; 0x40
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4a5b      	ldr	r2, [pc, #364]	; (8009ef4 <HAL_I2C_Mem_Read+0x228>)
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d8a:	88f8      	ldrh	r0, [r7, #6]
 8009d8c:	893a      	ldrh	r2, [r7, #8]
 8009d8e:	8979      	ldrh	r1, [r7, #10]
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	4603      	mov	r3, r0
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fa52 	bl	800a244 <I2C_RequestMemoryRead>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e1b0      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d113      	bne.n	8009dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009db2:	2300      	movs	r3, #0
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	623b      	str	r3, [r7, #32]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	623b      	str	r3, [r7, #32]
 8009dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	e184      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d11b      	bne.n	8009e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009df2:	2300      	movs	r3, #0
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	e164      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d11b      	bne.n	8009e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e42:	2300      	movs	r3, #0
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	61bb      	str	r3, [r7, #24]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	61bb      	str	r3, [r7, #24]
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	e144      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e70:	e138      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	f200 80f1 	bhi.w	800a05e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d123      	bne.n	8009ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 fc1b 	bl	800a6c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e139      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009eca:	e10b      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d14e      	bne.n	8009f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	2200      	movs	r2, #0
 8009edc:	4906      	ldr	r1, [pc, #24]	; (8009ef8 <HAL_I2C_Mem_Read+0x22c>)
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fa98 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e10e      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
 8009eee:	bf00      	nop
 8009ef0:	00100002 	.word	0x00100002
 8009ef4:	ffff0000 	.word	0xffff0000
 8009ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691a      	ldr	r2, [r3, #16]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691a      	ldr	r2, [r3, #16]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f70:	e0b8      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4966      	ldr	r1, [pc, #408]	; (800a114 <HAL_I2C_Mem_Read+0x448>)
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fa49 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e0bf      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691a      	ldr	r2, [r3, #16]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	494f      	ldr	r1, [pc, #316]	; (800a114 <HAL_I2C_Mem_Read+0x448>)
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fa1b 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e091      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691a      	ldr	r2, [r3, #16]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a020:	b29b      	uxth	r3, r3
 800a022:	3b01      	subs	r3, #1
 800a024:	b29a      	uxth	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	691a      	ldr	r2, [r3, #16]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	b2d2      	uxtb	r2, r2
 800a036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a046:	3b01      	subs	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a052:	b29b      	uxth	r3, r3
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a05c:	e042      	b.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fb2e 	bl	800a6c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e04c      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691a      	ldr	r2, [r3, #16]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a08e:	3b01      	subs	r3, #1
 800a090:	b29a      	uxth	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	3b01      	subs	r3, #1
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d118      	bne.n	800a0e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f47f aec2 	bne.w	8009e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	e000      	b.n	800a10c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a10a:	2302      	movs	r3, #2
  }
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3728      	adds	r7, #40	; 0x28
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	00010004 	.word	0x00010004

0800a118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	4603      	mov	r3, r0
 800a128:	817b      	strh	r3, [r7, #10]
 800a12a:	460b      	mov	r3, r1
 800a12c:	813b      	strh	r3, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	2200      	movs	r2, #0
 800a14a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 f960 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00d      	beq.n	800a176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a168:	d103      	bne.n	800a172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e05f      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a176:	897b      	ldrh	r3, [r7, #10]
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	6a3a      	ldr	r2, [r7, #32]
 800a18a:	492d      	ldr	r1, [pc, #180]	; (800a240 <I2C_RequestMemoryWrite+0x128>)
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f998 	bl	800a4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e04c      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa02 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e02b      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d105      	bne.n	800a1f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e4:	893b      	ldrh	r3, [r7, #8]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	611a      	str	r2, [r3, #16]
 800a1ee:	e021      	b.n	800a234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1f0:	893b      	ldrh	r3, [r7, #8]
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a200:	6a39      	ldr	r1, [r7, #32]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f9dc 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	2b04      	cmp	r3, #4
 800a214:	d107      	bne.n	800a226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e005      	b.n	800a236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a22a:	893b      	ldrh	r3, [r7, #8]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	00010002 	.word	0x00010002

0800a244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af02      	add	r7, sp, #8
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4603      	mov	r3, r0
 800a254:	817b      	strh	r3, [r7, #10]
 800a256:	460b      	mov	r3, r1
 800a258:	813b      	strh	r3, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a26c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a27c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	2200      	movs	r2, #0
 800a286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f8c2 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a4:	d103      	bne.n	800a2ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e0aa      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2b2:	897b      	ldrh	r3, [r7, #10]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	6a3a      	ldr	r2, [r7, #32]
 800a2c6:	4952      	ldr	r1, [pc, #328]	; (800a410 <I2C_RequestMemoryRead+0x1cc>)
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 f8fa 	bl	800a4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e097      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f964 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e076      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d105      	bne.n	800a32c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a320:	893b      	ldrh	r3, [r7, #8]
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	611a      	str	r2, [r3, #16]
 800a32a:	e021      	b.n	800a370 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a32c:	893b      	ldrh	r3, [r7, #8]
 800a32e:	0a1b      	lsrs	r3, r3, #8
 800a330:	b29b      	uxth	r3, r3
 800a332:	b2da      	uxtb	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33c:	6a39      	ldr	r1, [r7, #32]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f93e 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00d      	beq.n	800a366 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d107      	bne.n	800a362 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e050      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a366:	893b      	ldrh	r3, [r7, #8]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a372:	6a39      	ldr	r1, [r7, #32]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f923 	bl	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00d      	beq.n	800a39c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	2b04      	cmp	r3, #4
 800a386:	d107      	bne.n	800a398 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a396:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e035      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f82b 	bl	800a414 <I2C_WaitOnFlagUntilTimeout>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00d      	beq.n	800a3e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d2:	d103      	bne.n	800a3dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e013      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3e0:	897b      	ldrh	r3, [r7, #10]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f043 0301 	orr.w	r3, r3, #1
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	6a3a      	ldr	r2, [r7, #32]
 800a3f4:	4906      	ldr	r1, [pc, #24]	; (800a410 <I2C_RequestMemoryRead+0x1cc>)
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f863 	bl	800a4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e000      	b.n	800a408 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	00010002 	.word	0x00010002

0800a414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	4613      	mov	r3, r2
 800a422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a424:	e025      	b.n	800a472 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d021      	beq.n	800a472 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42e:	f7fe fb2f 	bl	8008a90 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d302      	bcc.n	800a444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d116      	bne.n	800a472 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	f043 0220 	orr.w	r2, r3, #32
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e023      	b.n	800a4ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	0c1b      	lsrs	r3, r3, #16
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d10d      	bne.n	800a498 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	43da      	mvns	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4013      	ands	r3, r2
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bf0c      	ite	eq
 800a48e:	2301      	moveq	r3, #1
 800a490:	2300      	movne	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	e00c      	b.n	800a4b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	43da      	mvns	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d0b6      	beq.n	800a426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a4d0:	e051      	b.n	800a576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e0:	d123      	bne.n	800a52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2220      	movs	r2, #32
 800a506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	f043 0204 	orr.w	r2, r3, #4
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e046      	b.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d021      	beq.n	800a576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a532:	f7fe faad 	bl	8008a90 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d116      	bne.n	800a576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	f043 0220 	orr.w	r2, r3, #32
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e020      	b.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d10c      	bne.n	800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	43da      	mvns	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	4013      	ands	r3, r2
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	e00b      	b.n	800a5b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	43da      	mvns	r2, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bf14      	ite	ne
 800a5ac:	2301      	movne	r3, #1
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d18d      	bne.n	800a4d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5cc:	e02d      	b.n	800a62a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 f8ce 	bl	800a770 <I2C_IsAcknowledgeFailed>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e02d      	b.n	800a63a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e4:	d021      	beq.n	800a62a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e6:	f7fe fa53 	bl	8008a90 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d302      	bcc.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d116      	bne.n	800a62a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f043 0220 	orr.w	r2, r3, #32
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e007      	b.n	800a63a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a634:	2b80      	cmp	r3, #128	; 0x80
 800a636:	d1ca      	bne.n	800a5ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a64e:	e02d      	b.n	800a6ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f88d 	bl	800a770 <I2C_IsAcknowledgeFailed>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e02d      	b.n	800a6bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d021      	beq.n	800a6ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a668:	f7fe fa12 	bl	8008a90 <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d302      	bcc.n	800a67e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d116      	bne.n	800a6ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	f043 0220 	orr.w	r2, r3, #32
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e007      	b.n	800a6bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d1ca      	bne.n	800a650 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a6d0:	e042      	b.n	800a758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b10      	cmp	r3, #16
 800a6de:	d119      	bne.n	800a714 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f06f 0210 	mvn.w	r2, #16
 800a6e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e029      	b.n	800a768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a714:	f7fe f9bc 	bl	8008a90 <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	429a      	cmp	r2, r3
 800a722:	d302      	bcc.n	800a72a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d116      	bne.n	800a758 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2220      	movs	r2, #32
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a744:	f043 0220 	orr.w	r2, r3, #32
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e007      	b.n	800a768 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	2b40      	cmp	r3, #64	; 0x40
 800a764:	d1b5      	bne.n	800a6d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a786:	d11b      	bne.n	800a7c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a790:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	f043 0204 	orr.w	r2, r3, #4
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e264      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d075      	beq.n	800a8da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7ee:	4ba3      	ldr	r3, [pc, #652]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 030c 	and.w	r3, r3, #12
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d00c      	beq.n	800a814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7fa:	4ba0      	ldr	r3, [pc, #640]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a802:	2b08      	cmp	r3, #8
 800a804:	d112      	bne.n	800a82c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a806:	4b9d      	ldr	r3, [pc, #628]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a80e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a812:	d10b      	bne.n	800a82c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a814:	4b99      	ldr	r3, [pc, #612]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d05b      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x108>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d157      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e23f      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a834:	d106      	bne.n	800a844 <HAL_RCC_OscConfig+0x74>
 800a836:	4b91      	ldr	r3, [pc, #580]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a90      	ldr	r2, [pc, #576]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a83c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	e01d      	b.n	800a880 <HAL_RCC_OscConfig+0xb0>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a84c:	d10c      	bne.n	800a868 <HAL_RCC_OscConfig+0x98>
 800a84e:	4b8b      	ldr	r3, [pc, #556]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a8a      	ldr	r2, [pc, #552]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	4b88      	ldr	r3, [pc, #544]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a87      	ldr	r2, [pc, #540]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	e00b      	b.n	800a880 <HAL_RCC_OscConfig+0xb0>
 800a868:	4b84      	ldr	r3, [pc, #528]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a83      	ldr	r2, [pc, #524]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a86e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	4b81      	ldr	r3, [pc, #516]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a80      	ldr	r2, [pc, #512]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a87a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a87e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d013      	beq.n	800a8b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a888:	f7fe f902 	bl	8008a90 <HAL_GetTick>
 800a88c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a88e:	e008      	b.n	800a8a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a890:	f7fe f8fe 	bl	8008a90 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	2b64      	cmp	r3, #100	; 0x64
 800a89c:	d901      	bls.n	800a8a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e204      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8a2:	4b76      	ldr	r3, [pc, #472]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0f0      	beq.n	800a890 <HAL_RCC_OscConfig+0xc0>
 800a8ae:	e014      	b.n	800a8da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b0:	f7fe f8ee 	bl	8008a90 <HAL_GetTick>
 800a8b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8b6:	e008      	b.n	800a8ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8b8:	f7fe f8ea 	bl	8008a90 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b64      	cmp	r3, #100	; 0x64
 800a8c4:	d901      	bls.n	800a8ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e1f0      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ca:	4b6c      	ldr	r3, [pc, #432]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f0      	bne.n	800a8b8 <HAL_RCC_OscConfig+0xe8>
 800a8d6:	e000      	b.n	800a8da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d063      	beq.n	800a9ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8e6:	4b65      	ldr	r3, [pc, #404]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 030c 	and.w	r3, r3, #12
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8f2:	4b62      	ldr	r3, [pc, #392]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8fa:	2b08      	cmp	r3, #8
 800a8fc:	d11c      	bne.n	800a938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8fe:	4b5f      	ldr	r3, [pc, #380]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d116      	bne.n	800a938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a90a:	4b5c      	ldr	r3, [pc, #368]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <HAL_RCC_OscConfig+0x152>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d001      	beq.n	800a922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e1c4      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a922:	4b56      	ldr	r3, [pc, #344]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	4952      	ldr	r1, [pc, #328]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a932:	4313      	orrs	r3, r2
 800a934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a936:	e03a      	b.n	800a9ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d020      	beq.n	800a982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a940:	4b4f      	ldr	r3, [pc, #316]	; (800aa80 <HAL_RCC_OscConfig+0x2b0>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a946:	f7fe f8a3 	bl	8008a90 <HAL_GetTick>
 800a94a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a94e:	f7fe f89f 	bl	8008a90 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e1a5      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a960:	4b46      	ldr	r3, [pc, #280]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a96c:	4b43      	ldr	r3, [pc, #268]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	4940      	ldr	r1, [pc, #256]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	600b      	str	r3, [r1, #0]
 800a980:	e015      	b.n	800a9ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a982:	4b3f      	ldr	r3, [pc, #252]	; (800aa80 <HAL_RCC_OscConfig+0x2b0>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a988:	f7fe f882 	bl	8008a90 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a990:	f7fe f87e 	bl	8008a90 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e184      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9a2:	4b36      	ldr	r3, [pc, #216]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1f0      	bne.n	800a990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d030      	beq.n	800aa1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d016      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9c2:	4b30      	ldr	r3, [pc, #192]	; (800aa84 <HAL_RCC_OscConfig+0x2b4>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9c8:	f7fe f862 	bl	8008a90 <HAL_GetTick>
 800a9cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9d0:	f7fe f85e 	bl	8008a90 <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e164      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9e2:	4b26      	ldr	r3, [pc, #152]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800a9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0f0      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x200>
 800a9ee:	e015      	b.n	800aa1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9f0:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <HAL_RCC_OscConfig+0x2b4>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9f6:	f7fe f84b 	bl	8008a90 <HAL_GetTick>
 800a9fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9fc:	e008      	b.n	800aa10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9fe:	f7fe f847 	bl	8008a90 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e14d      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa10:	4b1a      	ldr	r3, [pc, #104]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800aa12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1f0      	bne.n	800a9fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80a0 	beq.w	800ab6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10f      	bne.n	800aa5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60bb      	str	r3, [r7, #8]
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	4a0e      	ldr	r2, [pc, #56]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800aa44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa48:	6413      	str	r3, [r2, #64]	; 0x40
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <HAL_RCC_OscConfig+0x2ac>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa5a:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <HAL_RCC_OscConfig+0x2b8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d121      	bne.n	800aaaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa66:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <HAL_RCC_OscConfig+0x2b8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <HAL_RCC_OscConfig+0x2b8>)
 800aa6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa72:	f7fe f80d 	bl	8008a90 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa78:	e011      	b.n	800aa9e <HAL_RCC_OscConfig+0x2ce>
 800aa7a:	bf00      	nop
 800aa7c:	40023800 	.word	0x40023800
 800aa80:	42470000 	.word	0x42470000
 800aa84:	42470e80 	.word	0x42470e80
 800aa88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa8c:	f7fe f800 	bl	8008a90 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d901      	bls.n	800aa9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e106      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa9e:	4b85      	ldr	r3, [pc, #532]	; (800acb4 <HAL_RCC_OscConfig+0x4e4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0f0      	beq.n	800aa8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d106      	bne.n	800aac0 <HAL_RCC_OscConfig+0x2f0>
 800aab2:	4b81      	ldr	r3, [pc, #516]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab6:	4a80      	ldr	r2, [pc, #512]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aab8:	f043 0301 	orr.w	r3, r3, #1
 800aabc:	6713      	str	r3, [r2, #112]	; 0x70
 800aabe:	e01c      	b.n	800aafa <HAL_RCC_OscConfig+0x32a>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2b05      	cmp	r3, #5
 800aac6:	d10c      	bne.n	800aae2 <HAL_RCC_OscConfig+0x312>
 800aac8:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aaca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aacc:	4a7a      	ldr	r2, [pc, #488]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aace:	f043 0304 	orr.w	r3, r3, #4
 800aad2:	6713      	str	r3, [r2, #112]	; 0x70
 800aad4:	4b78      	ldr	r3, [pc, #480]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad8:	4a77      	ldr	r2, [pc, #476]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	6713      	str	r3, [r2, #112]	; 0x70
 800aae0:	e00b      	b.n	800aafa <HAL_RCC_OscConfig+0x32a>
 800aae2:	4b75      	ldr	r3, [pc, #468]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae6:	4a74      	ldr	r2, [pc, #464]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aae8:	f023 0301 	bic.w	r3, r3, #1
 800aaec:	6713      	str	r3, [r2, #112]	; 0x70
 800aaee:	4b72      	ldr	r3, [pc, #456]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf2:	4a71      	ldr	r2, [pc, #452]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800aaf4:	f023 0304 	bic.w	r3, r3, #4
 800aaf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d015      	beq.n	800ab2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab02:	f7fd ffc5 	bl	8008a90 <HAL_GetTick>
 800ab06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab08:	e00a      	b.n	800ab20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab0a:	f7fd ffc1 	bl	8008a90 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e0c5      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab20:	4b65      	ldr	r3, [pc, #404]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0ee      	beq.n	800ab0a <HAL_RCC_OscConfig+0x33a>
 800ab2c:	e014      	b.n	800ab58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab2e:	f7fd ffaf 	bl	8008a90 <HAL_GetTick>
 800ab32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab34:	e00a      	b.n	800ab4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab36:	f7fd ffab 	bl	8008a90 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d901      	bls.n	800ab4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e0af      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab4c:	4b5a      	ldr	r3, [pc, #360]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ab4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1ee      	bne.n	800ab36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d105      	bne.n	800ab6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab5e:	4b56      	ldr	r3, [pc, #344]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	4a55      	ldr	r2, [pc, #340]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ab64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 809b 	beq.w	800acaa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab74:	4b50      	ldr	r3, [pc, #320]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f003 030c 	and.w	r3, r3, #12
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d05c      	beq.n	800ac3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d141      	bne.n	800ac0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab88:	4b4c      	ldr	r3, [pc, #304]	; (800acbc <HAL_RCC_OscConfig+0x4ec>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8e:	f7fd ff7f 	bl	8008a90 <HAL_GetTick>
 800ab92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab96:	f7fd ff7b 	bl	8008a90 <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e081      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aba8:	4b43      	ldr	r3, [pc, #268]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1f0      	bne.n	800ab96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69da      	ldr	r2, [r3, #28]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	431a      	orrs	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	019b      	lsls	r3, r3, #6
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	3b01      	subs	r3, #1
 800abce:	041b      	lsls	r3, r3, #16
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	061b      	lsls	r3, r3, #24
 800abd8:	4937      	ldr	r1, [pc, #220]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abde:	4b37      	ldr	r3, [pc, #220]	; (800acbc <HAL_RCC_OscConfig+0x4ec>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abe4:	f7fd ff54 	bl	8008a90 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abec:	f7fd ff50 	bl	8008a90 <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e056      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abfe:	4b2e      	ldr	r3, [pc, #184]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f0      	beq.n	800abec <HAL_RCC_OscConfig+0x41c>
 800ac0a:	e04e      	b.n	800acaa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac0c:	4b2b      	ldr	r3, [pc, #172]	; (800acbc <HAL_RCC_OscConfig+0x4ec>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac12:	f7fd ff3d 	bl	8008a90 <HAL_GetTick>
 800ac16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac18:	e008      	b.n	800ac2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac1a:	f7fd ff39 	bl	8008a90 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d901      	bls.n	800ac2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e03f      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac2c:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1f0      	bne.n	800ac1a <HAL_RCC_OscConfig+0x44a>
 800ac38:	e037      	b.n	800acaa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d101      	bne.n	800ac46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e032      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac46:	4b1c      	ldr	r3, [pc, #112]	; (800acb8 <HAL_RCC_OscConfig+0x4e8>)
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d028      	beq.n	800aca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d121      	bne.n	800aca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d11a      	bne.n	800aca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ac76:	4013      	ands	r3, r2
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d111      	bne.n	800aca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	085b      	lsrs	r3, r3, #1
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d107      	bne.n	800aca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d001      	beq.n	800acaa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40007000 	.word	0x40007000
 800acb8:	40023800 	.word	0x40023800
 800acbc:	42470060 	.word	0x42470060

0800acc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0cc      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800acd4:	4b68      	ldr	r3, [pc, #416]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d90c      	bls.n	800acfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ace2:	4b65      	ldr	r3, [pc, #404]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b63      	ldr	r3, [pc, #396]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e0b8      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d020      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad14:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	4a58      	ldr	r2, [pc, #352]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0308 	and.w	r3, r3, #8
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad2c:	4b53      	ldr	r3, [pc, #332]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	4a52      	ldr	r2, [pc, #328]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad38:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	494d      	ldr	r1, [pc, #308]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d044      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d119      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e07f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d003      	beq.n	800ad7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d107      	bne.n	800ad8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad7e:	4b3f      	ldr	r3, [pc, #252]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e06f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad8e:	4b3b      	ldr	r3, [pc, #236]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e067      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad9e:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f023 0203 	bic.w	r2, r3, #3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4934      	ldr	r1, [pc, #208]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800adac:	4313      	orrs	r3, r2
 800adae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adb0:	f7fd fe6e 	bl	8008a90 <HAL_GetTick>
 800adb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adb6:	e00a      	b.n	800adce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb8:	f7fd fe6a 	bl	8008a90 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e04f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adce:	4b2b      	ldr	r3, [pc, #172]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 020c 	and.w	r2, r3, #12
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	429a      	cmp	r2, r3
 800adde:	d1eb      	bne.n	800adb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d20c      	bcs.n	800ae08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adee:	4b22      	ldr	r3, [pc, #136]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d001      	beq.n	800ae08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e032      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae14:	4b19      	ldr	r3, [pc, #100]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	4916      	ldr	r1, [pc, #88]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae32:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	490e      	ldr	r1, [pc, #56]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae46:	f000 f821 	bl	800ae8c <HAL_RCC_GetSysClockFreq>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	490a      	ldr	r1, [pc, #40]	; (800ae80 <HAL_RCC_ClockConfig+0x1c0>)
 800ae58:	5ccb      	ldrb	r3, [r1, r3]
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <HAL_RCC_ClockConfig+0x1c4>)
 800ae60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <HAL_RCC_ClockConfig+0x1c8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd fdce 	bl	8008a08 <HAL_InitTick>

  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40023c00 	.word	0x40023c00
 800ae7c:	40023800 	.word	0x40023800
 800ae80:	08011e94 	.word	0x08011e94
 800ae84:	20000004 	.word	0x20000004
 800ae88:	20000008 	.word	0x20000008

0800ae8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	607b      	str	r3, [r7, #4]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aea4:	4b67      	ldr	r3, [pc, #412]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f003 030c 	and.w	r3, r3, #12
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d00d      	beq.n	800aecc <HAL_RCC_GetSysClockFreq+0x40>
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	f200 80bd 	bhi.w	800b030 <HAL_RCC_GetSysClockFreq+0x1a4>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_RCC_GetSysClockFreq+0x34>
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	d003      	beq.n	800aec6 <HAL_RCC_GetSysClockFreq+0x3a>
 800aebe:	e0b7      	b.n	800b030 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aec0:	4b61      	ldr	r3, [pc, #388]	; (800b048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800aec2:	60bb      	str	r3, [r7, #8]
       break;
 800aec4:	e0b7      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aec6:	4b61      	ldr	r3, [pc, #388]	; (800b04c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800aec8:	60bb      	str	r3, [r7, #8]
      break;
 800aeca:	e0b4      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aecc:	4b5d      	ldr	r3, [pc, #372]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aed6:	4b5b      	ldr	r3, [pc, #364]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d04d      	beq.n	800af7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aee2:	4b58      	ldr	r3, [pc, #352]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	099b      	lsrs	r3, r3, #6
 800aee8:	461a      	mov	r2, r3
 800aeea:	f04f 0300 	mov.w	r3, #0
 800aeee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aef2:	f04f 0100 	mov.w	r1, #0
 800aef6:	ea02 0800 	and.w	r8, r2, r0
 800aefa:	ea03 0901 	and.w	r9, r3, r1
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	014b      	lsls	r3, r1, #5
 800af0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800af10:	0142      	lsls	r2, r0, #5
 800af12:	4610      	mov	r0, r2
 800af14:	4619      	mov	r1, r3
 800af16:	ebb0 0008 	subs.w	r0, r0, r8
 800af1a:	eb61 0109 	sbc.w	r1, r1, r9
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	018b      	lsls	r3, r1, #6
 800af28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800af2c:	0182      	lsls	r2, r0, #6
 800af2e:	1a12      	subs	r2, r2, r0
 800af30:	eb63 0301 	sbc.w	r3, r3, r1
 800af34:	f04f 0000 	mov.w	r0, #0
 800af38:	f04f 0100 	mov.w	r1, #0
 800af3c:	00d9      	lsls	r1, r3, #3
 800af3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af42:	00d0      	lsls	r0, r2, #3
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	eb12 0208 	adds.w	r2, r2, r8
 800af4c:	eb43 0309 	adc.w	r3, r3, r9
 800af50:	f04f 0000 	mov.w	r0, #0
 800af54:	f04f 0100 	mov.w	r1, #0
 800af58:	0259      	lsls	r1, r3, #9
 800af5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800af5e:	0250      	lsls	r0, r2, #9
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4610      	mov	r0, r2
 800af66:	4619      	mov	r1, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	f7f5 fe3a 	bl	8000be8 <__aeabi_uldivmod>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4613      	mov	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e04a      	b.n	800b014 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af7e:	4b31      	ldr	r3, [pc, #196]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	099b      	lsrs	r3, r3, #6
 800af84:	461a      	mov	r2, r3
 800af86:	f04f 0300 	mov.w	r3, #0
 800af8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800af8e:	f04f 0100 	mov.w	r1, #0
 800af92:	ea02 0400 	and.w	r4, r2, r0
 800af96:	ea03 0501 	and.w	r5, r3, r1
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f04f 0200 	mov.w	r2, #0
 800afa2:	f04f 0300 	mov.w	r3, #0
 800afa6:	014b      	lsls	r3, r1, #5
 800afa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800afac:	0142      	lsls	r2, r0, #5
 800afae:	4610      	mov	r0, r2
 800afb0:	4619      	mov	r1, r3
 800afb2:	1b00      	subs	r0, r0, r4
 800afb4:	eb61 0105 	sbc.w	r1, r1, r5
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	f04f 0300 	mov.w	r3, #0
 800afc0:	018b      	lsls	r3, r1, #6
 800afc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800afc6:	0182      	lsls	r2, r0, #6
 800afc8:	1a12      	subs	r2, r2, r0
 800afca:	eb63 0301 	sbc.w	r3, r3, r1
 800afce:	f04f 0000 	mov.w	r0, #0
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	00d9      	lsls	r1, r3, #3
 800afd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afdc:	00d0      	lsls	r0, r2, #3
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	1912      	adds	r2, r2, r4
 800afe4:	eb45 0303 	adc.w	r3, r5, r3
 800afe8:	f04f 0000 	mov.w	r0, #0
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	0299      	lsls	r1, r3, #10
 800aff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800aff6:	0290      	lsls	r0, r2, #10
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4610      	mov	r0, r2
 800affe:	4619      	mov	r1, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	461a      	mov	r2, r3
 800b004:	f04f 0300 	mov.w	r3, #0
 800b008:	f7f5 fdee 	bl	8000be8 <__aeabi_uldivmod>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4613      	mov	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b014:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	0c1b      	lsrs	r3, r3, #16
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	3301      	adds	r3, #1
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02c:	60bb      	str	r3, [r7, #8]
      break;
 800b02e:	e002      	b.n	800b036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b030:	4b05      	ldr	r3, [pc, #20]	; (800b048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b032:	60bb      	str	r3, [r7, #8]
      break;
 800b034:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b036:	68bb      	ldr	r3, [r7, #8]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b042:	bf00      	nop
 800b044:	40023800 	.word	0x40023800
 800b048:	00f42400 	.word	0x00f42400
 800b04c:	007a1200 	.word	0x007a1200

0800b050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b050:	b480      	push	{r7}
 800b052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b054:	4b03      	ldr	r3, [pc, #12]	; (800b064 <HAL_RCC_GetHCLKFreq+0x14>)
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000004 	.word	0x20000004

0800b068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b06c:	f7ff fff0 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b070:	4602      	mov	r2, r0
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	0a9b      	lsrs	r3, r3, #10
 800b078:	f003 0307 	and.w	r3, r3, #7
 800b07c:	4903      	ldr	r1, [pc, #12]	; (800b08c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b07e:	5ccb      	ldrb	r3, [r1, r3]
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}
 800b088:	40023800 	.word	0x40023800
 800b08c:	08011ea4 	.word	0x08011ea4

0800b090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b094:	f7ff ffdc 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	0b5b      	lsrs	r3, r3, #13
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	4903      	ldr	r1, [pc, #12]	; (800b0b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0a6:	5ccb      	ldrb	r3, [r1, r3]
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	08011ea4 	.word	0x08011ea4

0800b0b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e03f      	b.n	800b14a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fd fbc4 	bl	800886c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2224      	movs	r2, #36	; 0x24
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fdcd 	bl	800bc9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691a      	ldr	r2, [r3, #16]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	695a      	ldr	r2, [r3, #20]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68da      	ldr	r2, [r3, #12]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2220      	movs	r2, #32
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b08a      	sub	sp, #40	; 0x28
 800b156:	af02      	add	r7, sp, #8
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	603b      	str	r3, [r7, #0]
 800b15e:	4613      	mov	r3, r2
 800b160:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b20      	cmp	r3, #32
 800b170:	d17c      	bne.n	800b26c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <HAL_UART_Transmit+0x2c>
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e075      	b.n	800b26e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d101      	bne.n	800b190 <HAL_UART_Transmit+0x3e>
 800b18c:	2302      	movs	r3, #2
 800b18e:	e06e      	b.n	800b26e <HAL_UART_Transmit+0x11c>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2221      	movs	r2, #33	; 0x21
 800b1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1a6:	f7fd fc73 	bl	8008a90 <HAL_GetTick>
 800b1aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	88fa      	ldrh	r2, [r7, #6]
 800b1b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	88fa      	ldrh	r2, [r7, #6]
 800b1b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c0:	d108      	bne.n	800b1d4 <HAL_UART_Transmit+0x82>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	61bb      	str	r3, [r7, #24]
 800b1d2:	e003      	b.n	800b1dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b1e4:	e02a      	b.n	800b23c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 fb78 	bl	800b8e6 <UART_WaitOnFlagUntilTimeout>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e036      	b.n	800b26e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10b      	bne.n	800b21e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b214:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	3302      	adds	r3, #2
 800b21a:	61bb      	str	r3, [r7, #24]
 800b21c:	e007      	b.n	800b22e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	3301      	adds	r3, #1
 800b22c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b01      	subs	r3, #1
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b240:	b29b      	uxth	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1cf      	bne.n	800b1e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2200      	movs	r2, #0
 800b24e:	2140      	movs	r1, #64	; 0x40
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 fb48 	bl	800b8e6 <UART_WaitOnFlagUntilTimeout>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e006      	b.n	800b26e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	e000      	b.n	800b26e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b26c:	2302      	movs	r3, #2
  }
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3720      	adds	r7, #32
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	4613      	mov	r3, r2
 800b282:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	d130      	bne.n	800b2f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <HAL_UART_Transmit_IT+0x26>
 800b296:	88fb      	ldrh	r3, [r7, #6]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e029      	b.n	800b2f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Transmit_IT+0x38>
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e022      	b.n	800b2f4 <HAL_UART_Transmit_IT+0x7e>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	88fa      	ldrh	r2, [r7, #6]
 800b2c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	88fa      	ldrh	r2, [r7, #6]
 800b2c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2221      	movs	r2, #33	; 0x21
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68da      	ldr	r2, [r3, #12]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e000      	b.n	800b2f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b2f2:	2302      	movs	r3, #2
  }
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b20      	cmp	r3, #32
 800b318:	d11d      	bne.n	800b356 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <HAL_UART_Receive_IT+0x26>
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e016      	b.n	800b358 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_UART_Receive_IT+0x38>
 800b334:	2302      	movs	r3, #2
 800b336:	e00f      	b.n	800b358 <HAL_UART_Receive_IT+0x58>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	461a      	mov	r2, r3
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 fb14 	bl	800b97a <UART_Start_Receive_IT>
 800b352:	4603      	mov	r3, r0
 800b354:	e000      	b.n	800b358 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b356:	2302      	movs	r3, #2
  }
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b20      	cmp	r3, #32
 800b378:	d153      	bne.n	800b422 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <HAL_UART_Transmit_DMA+0x26>
 800b380:	88fb      	ldrh	r3, [r7, #6]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e04c      	b.n	800b424 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b390:	2b01      	cmp	r3, #1
 800b392:	d101      	bne.n	800b398 <HAL_UART_Transmit_DMA+0x38>
 800b394:	2302      	movs	r3, #2
 800b396:	e045      	b.n	800b424 <HAL_UART_Transmit_DMA+0xc4>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	88fa      	ldrh	r2, [r7, #6]
 800b3aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	88fa      	ldrh	r2, [r7, #6]
 800b3b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2221      	movs	r2, #33	; 0x21
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c4:	4a19      	ldr	r2, [pc, #100]	; (800b42c <HAL_UART_Transmit_DMA+0xcc>)
 800b3c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3cc:	4a18      	ldr	r2, [pc, #96]	; (800b430 <HAL_UART_Transmit_DMA+0xd0>)
 800b3ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	4a17      	ldr	r2, [pc, #92]	; (800b434 <HAL_UART_Transmit_DMA+0xd4>)
 800b3d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3dc:	2200      	movs	r2, #0
 800b3de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800b3e0:	f107 0308 	add.w	r3, r7, #8
 800b3e4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	6819      	ldr	r1, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	f7fd fd3a 	bl	8008e70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b404:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	695a      	ldr	r2, [r3, #20]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b41c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e000      	b.n	800b424 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b422:	2302      	movs	r3, #2
  }
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	0800b7e5 	.word	0x0800b7e5
 800b430:	0800b837 	.word	0x0800b837
 800b434:	0800b853 	.word	0x0800b853

0800b438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08a      	sub	sp, #40	; 0x28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b458:	2300      	movs	r3, #0
 800b45a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10d      	bne.n	800b48a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <HAL_UART_IRQHandler+0x52>
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	f003 0320 	and.w	r3, r3, #32
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fb72 	bl	800bb6c <UART_Receive_IT>
      return;
 800b488:	e17c      	b.n	800b784 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80b1 	beq.w	800b5f4 <HAL_UART_IRQHandler+0x1bc>
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <HAL_UART_IRQHandler+0x70>
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 80a6 	beq.w	800b5f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <HAL_UART_IRQHandler+0x90>
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d005      	beq.n	800b4c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c0:	f043 0201 	orr.w	r2, r3, #1
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <HAL_UART_IRQHandler+0xb0>
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	f003 0301 	and.w	r3, r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d005      	beq.n	800b4e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e0:	f043 0202 	orr.w	r2, r3, #2
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <HAL_UART_IRQHandler+0xd0>
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	f043 0204 	orr.w	r2, r3, #4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	f003 0308 	and.w	r3, r3, #8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00f      	beq.n	800b532 <HAL_UART_IRQHandler+0xfa>
 800b512:	6a3b      	ldr	r3, [r7, #32]
 800b514:	f003 0320 	and.w	r3, r3, #32
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d104      	bne.n	800b526 <HAL_UART_IRQHandler+0xee>
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d005      	beq.n	800b532 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	f043 0208 	orr.w	r2, r3, #8
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 811f 	beq.w	800b77a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <HAL_UART_IRQHandler+0x11e>
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	f003 0320 	and.w	r3, r3, #32
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fb0b 	bl	800bb6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b560:	2b40      	cmp	r3, #64	; 0x40
 800b562:	bf0c      	ite	eq
 800b564:	2301      	moveq	r3, #1
 800b566:	2300      	movne	r3, #0
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <HAL_UART_IRQHandler+0x146>
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d031      	beq.n	800b5e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fa4b 	bl	800ba1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58e:	2b40      	cmp	r3, #64	; 0x40
 800b590:	d123      	bne.n	800b5da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695a      	ldr	r2, [r3, #20]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d013      	beq.n	800b5d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ae:	4a77      	ldr	r2, [pc, #476]	; (800b78c <HAL_UART_IRQHandler+0x354>)
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fd fd22 	bl	8009000 <HAL_DMA_Abort_IT>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d016      	beq.n	800b5f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d0:	e00e      	b.n	800b5f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f8f0 	bl	800b7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d8:	e00a      	b.n	800b5f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f8ec 	bl	800b7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e0:	e006      	b.n	800b5f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f8e8 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b5ee:	e0c4      	b.n	800b77a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f0:	bf00      	nop
    return;
 800b5f2:	e0c2      	b.n	800b77a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	f040 80a2 	bne.w	800b742 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b600:	f003 0310 	and.w	r3, r3, #16
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 809c 	beq.w	800b742 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	f003 0310 	and.w	r3, r3, #16
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 8096 	beq.w	800b742 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	695b      	ldr	r3, [r3, #20]
 800b632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b636:	2b40      	cmp	r3, #64	; 0x40
 800b638:	d14f      	bne.n	800b6da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b644:	8a3b      	ldrh	r3, [r7, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 8099 	beq.w	800b77e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b650:	8a3a      	ldrh	r2, [r7, #16]
 800b652:	429a      	cmp	r2, r3
 800b654:	f080 8093 	bcs.w	800b77e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8a3a      	ldrh	r2, [r7, #16]
 800b65c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b668:	d02b      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b678:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	695a      	ldr	r2, [r3, #20]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0201 	bic.w	r2, r2, #1
 800b688:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695a      	ldr	r2, [r3, #20]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b698:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68da      	ldr	r2, [r3, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f022 0210 	bic.w	r2, r2, #16
 800b6b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fd fc2f 	bl	8008f20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f87a 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b6d8:	e051      	b.n	800b77e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d047      	beq.n	800b782 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b6f2:	8a7b      	ldrh	r3, [r7, #18]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d044      	beq.n	800b782 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b706:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695a      	ldr	r2, [r3, #20]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f022 0201 	bic.w	r2, r2, #1
 800b716:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2220      	movs	r2, #32
 800b71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0210 	bic.w	r2, r2, #16
 800b734:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b736:	8a7b      	ldrh	r3, [r7, #18]
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f846 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b740:	e01f      	b.n	800b782 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d008      	beq.n	800b75e <HAL_UART_IRQHandler+0x326>
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f9a0 	bl	800ba9c <UART_Transmit_IT>
    return;
 800b75c:	e012      	b.n	800b784 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00d      	beq.n	800b784 <HAL_UART_IRQHandler+0x34c>
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d008      	beq.n	800b784 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f9e2 	bl	800bb3c <UART_EndTransmit_IT>
    return;
 800b778:	e004      	b.n	800b784 <HAL_UART_IRQHandler+0x34c>
    return;
 800b77a:	bf00      	nop
 800b77c:	e002      	b.n	800b784 <HAL_UART_IRQHandler+0x34c>
      return;
 800b77e:	bf00      	nop
 800b780:	e000      	b.n	800b784 <HAL_UART_IRQHandler+0x34c>
      return;
 800b782:	bf00      	nop
  }
}
 800b784:	3728      	adds	r7, #40	; 0x28
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	0800ba75 	.word	0x0800ba75

0800b790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d113      	bne.n	800b828 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	695a      	ldr	r2, [r3, #20]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b814:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b824:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b826:	e002      	b.n	800b82e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff ffb1 	bl	800b790 <HAL_UART_TxCpltCallback>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ffad 	bl	800b7a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86e:	2b80      	cmp	r3, #128	; 0x80
 800b870:	bf0c      	ite	eq
 800b872:	2301      	moveq	r3, #1
 800b874:	2300      	movne	r3, #0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b21      	cmp	r3, #33	; 0x21
 800b884:	d108      	bne.n	800b898 <UART_DMAError+0x46>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2200      	movs	r2, #0
 800b890:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	f000 f8ab 	bl	800b9ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a2:	2b40      	cmp	r3, #64	; 0x40
 800b8a4:	bf0c      	ite	eq
 800b8a6:	2301      	moveq	r3, #1
 800b8a8:	2300      	movne	r3, #0
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b22      	cmp	r3, #34	; 0x22
 800b8b8:	d108      	bne.n	800b8cc <UART_DMAError+0x7a>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8c6:	68b8      	ldr	r0, [r7, #8]
 800b8c8:	f000 f8a7 	bl	800ba1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d0:	f043 0210 	orr.w	r2, r3, #16
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8d8:	68b8      	ldr	r0, [r7, #8]
 800b8da:	f7ff ff6d 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8de:	bf00      	nop
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	60b9      	str	r1, [r7, #8]
 800b8f0:	603b      	str	r3, [r7, #0]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8f6:	e02c      	b.n	800b952 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fe:	d028      	beq.n	800b952 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <UART_WaitOnFlagUntilTimeout+0x30>
 800b906:	f7fd f8c3 	bl	8008a90 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	429a      	cmp	r2, r3
 800b914:	d21d      	bcs.n	800b952 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68da      	ldr	r2, [r3, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b924:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	695a      	ldr	r2, [r3, #20]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f022 0201 	bic.w	r2, r2, #1
 800b934:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2220      	movs	r2, #32
 800b93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2220      	movs	r2, #32
 800b942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e00f      	b.n	800b972 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4013      	ands	r3, r2
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	429a      	cmp	r2, r3
 800b960:	bf0c      	ite	eq
 800b962:	2301      	moveq	r3, #1
 800b964:	2300      	movne	r3, #0
 800b966:	b2db      	uxtb	r3, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	79fb      	ldrb	r3, [r7, #7]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d0c3      	beq.n	800b8f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	60f8      	str	r0, [r7, #12]
 800b982:	60b9      	str	r1, [r7, #8]
 800b984:	4613      	mov	r3, r2
 800b986:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	88fa      	ldrh	r2, [r7, #6]
 800b992:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2222      	movs	r2, #34	; 0x22
 800b9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9be:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	695a      	ldr	r2, [r3, #20]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0220 	orr.w	r2, r2, #32
 800b9de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba04:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68da      	ldr	r2, [r3, #12]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	695a      	ldr	r2, [r3, #20]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 0201 	bic.w	r2, r2, #1
 800ba40:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d107      	bne.n	800ba5a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f022 0210 	bic.w	r2, r2, #16
 800ba58:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f7ff fe92 	bl	800b7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba94:	bf00      	nop
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b21      	cmp	r3, #33	; 0x21
 800baae:	d13e      	bne.n	800bb2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab8:	d114      	bne.n	800bae4 <UART_Transmit_IT+0x48>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d110      	bne.n	800bae4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bad6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a1b      	ldr	r3, [r3, #32]
 800badc:	1c9a      	adds	r2, r3, #2
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	621a      	str	r2, [r3, #32]
 800bae2:	e008      	b.n	800baf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	1c59      	adds	r1, r3, #1
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	6211      	str	r1, [r2, #32]
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	4619      	mov	r1, r3
 800bb04:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10f      	bne.n	800bb2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68da      	ldr	r2, [r3, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e000      	b.n	800bb30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb2e:	2302      	movs	r3, #2
  }
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fe17 	bl	800b790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b22      	cmp	r3, #34	; 0x22
 800bb7e:	f040 8087 	bne.w	800bc90 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb8a:	d117      	bne.n	800bbbc <UART_Receive_IT+0x50>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d113      	bne.n	800bbbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb4:	1c9a      	adds	r2, r3, #2
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	629a      	str	r2, [r3, #40]	; 0x28
 800bbba:	e026      	b.n	800bc0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbce:	d007      	beq.n	800bbe0 <UART_Receive_IT+0x74>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10a      	bne.n	800bbee <UART_Receive_IT+0x82>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e008      	b.n	800bc00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	4619      	mov	r1, r3
 800bc18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d136      	bne.n	800bc8c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f022 0220 	bic.w	r2, r2, #32
 800bc2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	695a      	ldr	r2, [r3, #20]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0201 	bic.w	r2, r2, #1
 800bc4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2220      	movs	r2, #32
 800bc52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d10e      	bne.n	800bc7c <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68da      	ldr	r2, [r3, #12]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0210 	bic.w	r2, r2, #16
 800bc6c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff fda9 	bl	800b7cc <HAL_UARTEx_RxEventCallback>
 800bc7a:	e002      	b.n	800bc82 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7fb fa85 	bl	800718c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e002      	b.n	800bc92 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e000      	b.n	800bc92 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bc90:	2302      	movs	r3, #2
  }
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	b09f      	sub	sp, #124	; 0x7c
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb2:	68d9      	ldr	r1, [r3, #12]
 800bcb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	ea40 0301 	orr.w	r3, r0, r1
 800bcbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc0:	689a      	ldr	r2, [r3, #8]
 800bcc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	431a      	orrs	r2, r3
 800bcce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bcd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bce0:	f021 010c 	bic.w	r1, r1, #12
 800bce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcea:	430b      	orrs	r3, r1
 800bcec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bcf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcfa:	6999      	ldr	r1, [r3, #24]
 800bcfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	ea40 0301 	orr.w	r3, r0, r1
 800bd04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	4bc5      	ldr	r3, [pc, #788]	; (800c020 <UART_SetConfig+0x384>)
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d004      	beq.n	800bd1a <UART_SetConfig+0x7e>
 800bd10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	4bc3      	ldr	r3, [pc, #780]	; (800c024 <UART_SetConfig+0x388>)
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d103      	bne.n	800bd22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd1a:	f7ff f9b9 	bl	800b090 <HAL_RCC_GetPCLK2Freq>
 800bd1e:	6778      	str	r0, [r7, #116]	; 0x74
 800bd20:	e002      	b.n	800bd28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd22:	f7ff f9a1 	bl	800b068 <HAL_RCC_GetPCLK1Freq>
 800bd26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd30:	f040 80b6 	bne.w	800bea0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd36:	461c      	mov	r4, r3
 800bd38:	f04f 0500 	mov.w	r5, #0
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	462b      	mov	r3, r5
 800bd40:	1891      	adds	r1, r2, r2
 800bd42:	6439      	str	r1, [r7, #64]	; 0x40
 800bd44:	415b      	adcs	r3, r3
 800bd46:	647b      	str	r3, [r7, #68]	; 0x44
 800bd48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd4c:	1912      	adds	r2, r2, r4
 800bd4e:	eb45 0303 	adc.w	r3, r5, r3
 800bd52:	f04f 0000 	mov.w	r0, #0
 800bd56:	f04f 0100 	mov.w	r1, #0
 800bd5a:	00d9      	lsls	r1, r3, #3
 800bd5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd60:	00d0      	lsls	r0, r2, #3
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	1911      	adds	r1, r2, r4
 800bd68:	6639      	str	r1, [r7, #96]	; 0x60
 800bd6a:	416b      	adcs	r3, r5
 800bd6c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	461a      	mov	r2, r3
 800bd74:	f04f 0300 	mov.w	r3, #0
 800bd78:	1891      	adds	r1, r2, r2
 800bd7a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd7c:	415b      	adcs	r3, r3
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bd88:	f7f4 ff2e 	bl	8000be8 <__aeabi_uldivmod>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4ba5      	ldr	r3, [pc, #660]	; (800c028 <UART_SetConfig+0x38c>)
 800bd92:	fba3 2302 	umull	r2, r3, r3, r2
 800bd96:	095b      	lsrs	r3, r3, #5
 800bd98:	011e      	lsls	r6, r3, #4
 800bd9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd9c:	461c      	mov	r4, r3
 800bd9e:	f04f 0500 	mov.w	r5, #0
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	1891      	adds	r1, r2, r2
 800bda8:	6339      	str	r1, [r7, #48]	; 0x30
 800bdaa:	415b      	adcs	r3, r3
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
 800bdae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bdb2:	1912      	adds	r2, r2, r4
 800bdb4:	eb45 0303 	adc.w	r3, r5, r3
 800bdb8:	f04f 0000 	mov.w	r0, #0
 800bdbc:	f04f 0100 	mov.w	r1, #0
 800bdc0:	00d9      	lsls	r1, r3, #3
 800bdc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bdc6:	00d0      	lsls	r0, r2, #3
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	1911      	adds	r1, r2, r4
 800bdce:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdd0:	416b      	adcs	r3, r5
 800bdd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f04f 0300 	mov.w	r3, #0
 800bdde:	1891      	adds	r1, r2, r2
 800bde0:	62b9      	str	r1, [r7, #40]	; 0x28
 800bde2:	415b      	adcs	r3, r3
 800bde4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bde6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bdee:	f7f4 fefb 	bl	8000be8 <__aeabi_uldivmod>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4b8c      	ldr	r3, [pc, #560]	; (800c028 <UART_SetConfig+0x38c>)
 800bdf8:	fba3 1302 	umull	r1, r3, r3, r2
 800bdfc:	095b      	lsrs	r3, r3, #5
 800bdfe:	2164      	movs	r1, #100	; 0x64
 800be00:	fb01 f303 	mul.w	r3, r1, r3
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	3332      	adds	r3, #50	; 0x32
 800be0a:	4a87      	ldr	r2, [pc, #540]	; (800c028 <UART_SetConfig+0x38c>)
 800be0c:	fba2 2303 	umull	r2, r3, r2, r3
 800be10:	095b      	lsrs	r3, r3, #5
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be18:	441e      	add	r6, r3
 800be1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be1c:	4618      	mov	r0, r3
 800be1e:	f04f 0100 	mov.w	r1, #0
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	1894      	adds	r4, r2, r2
 800be28:	623c      	str	r4, [r7, #32]
 800be2a:	415b      	adcs	r3, r3
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
 800be2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be32:	1812      	adds	r2, r2, r0
 800be34:	eb41 0303 	adc.w	r3, r1, r3
 800be38:	f04f 0400 	mov.w	r4, #0
 800be3c:	f04f 0500 	mov.w	r5, #0
 800be40:	00dd      	lsls	r5, r3, #3
 800be42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be46:	00d4      	lsls	r4, r2, #3
 800be48:	4622      	mov	r2, r4
 800be4a:	462b      	mov	r3, r5
 800be4c:	1814      	adds	r4, r2, r0
 800be4e:	653c      	str	r4, [r7, #80]	; 0x50
 800be50:	414b      	adcs	r3, r1
 800be52:	657b      	str	r3, [r7, #84]	; 0x54
 800be54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	461a      	mov	r2, r3
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	1891      	adds	r1, r2, r2
 800be60:	61b9      	str	r1, [r7, #24]
 800be62:	415b      	adcs	r3, r3
 800be64:	61fb      	str	r3, [r7, #28]
 800be66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800be6e:	f7f4 febb 	bl	8000be8 <__aeabi_uldivmod>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4b6c      	ldr	r3, [pc, #432]	; (800c028 <UART_SetConfig+0x38c>)
 800be78:	fba3 1302 	umull	r1, r3, r3, r2
 800be7c:	095b      	lsrs	r3, r3, #5
 800be7e:	2164      	movs	r1, #100	; 0x64
 800be80:	fb01 f303 	mul.w	r3, r1, r3
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	3332      	adds	r3, #50	; 0x32
 800be8a:	4a67      	ldr	r2, [pc, #412]	; (800c028 <UART_SetConfig+0x38c>)
 800be8c:	fba2 2303 	umull	r2, r3, r2, r3
 800be90:	095b      	lsrs	r3, r3, #5
 800be92:	f003 0207 	and.w	r2, r3, #7
 800be96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4432      	add	r2, r6
 800be9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be9e:	e0b9      	b.n	800c014 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bea2:	461c      	mov	r4, r3
 800bea4:	f04f 0500 	mov.w	r5, #0
 800bea8:	4622      	mov	r2, r4
 800beaa:	462b      	mov	r3, r5
 800beac:	1891      	adds	r1, r2, r2
 800beae:	6139      	str	r1, [r7, #16]
 800beb0:	415b      	adcs	r3, r3
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800beb8:	1912      	adds	r2, r2, r4
 800beba:	eb45 0303 	adc.w	r3, r5, r3
 800bebe:	f04f 0000 	mov.w	r0, #0
 800bec2:	f04f 0100 	mov.w	r1, #0
 800bec6:	00d9      	lsls	r1, r3, #3
 800bec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800becc:	00d0      	lsls	r0, r2, #3
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	eb12 0804 	adds.w	r8, r2, r4
 800bed6:	eb43 0905 	adc.w	r9, r3, r5
 800beda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	4618      	mov	r0, r3
 800bee0:	f04f 0100 	mov.w	r1, #0
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	008b      	lsls	r3, r1, #2
 800beee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bef2:	0082      	lsls	r2, r0, #2
 800bef4:	4640      	mov	r0, r8
 800bef6:	4649      	mov	r1, r9
 800bef8:	f7f4 fe76 	bl	8000be8 <__aeabi_uldivmod>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4b49      	ldr	r3, [pc, #292]	; (800c028 <UART_SetConfig+0x38c>)
 800bf02:	fba3 2302 	umull	r2, r3, r3, r2
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	011e      	lsls	r6, r3, #4
 800bf0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f04f 0100 	mov.w	r1, #0
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	1894      	adds	r4, r2, r2
 800bf18:	60bc      	str	r4, [r7, #8]
 800bf1a:	415b      	adcs	r3, r3
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf22:	1812      	adds	r2, r2, r0
 800bf24:	eb41 0303 	adc.w	r3, r1, r3
 800bf28:	f04f 0400 	mov.w	r4, #0
 800bf2c:	f04f 0500 	mov.w	r5, #0
 800bf30:	00dd      	lsls	r5, r3, #3
 800bf32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bf36:	00d4      	lsls	r4, r2, #3
 800bf38:	4622      	mov	r2, r4
 800bf3a:	462b      	mov	r3, r5
 800bf3c:	1814      	adds	r4, r2, r0
 800bf3e:	64bc      	str	r4, [r7, #72]	; 0x48
 800bf40:	414b      	adcs	r3, r1
 800bf42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f04f 0100 	mov.w	r1, #0
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	f04f 0300 	mov.w	r3, #0
 800bf56:	008b      	lsls	r3, r1, #2
 800bf58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bf5c:	0082      	lsls	r2, r0, #2
 800bf5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf62:	f7f4 fe41 	bl	8000be8 <__aeabi_uldivmod>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4b2f      	ldr	r3, [pc, #188]	; (800c028 <UART_SetConfig+0x38c>)
 800bf6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf70:	095b      	lsrs	r3, r3, #5
 800bf72:	2164      	movs	r1, #100	; 0x64
 800bf74:	fb01 f303 	mul.w	r3, r1, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	3332      	adds	r3, #50	; 0x32
 800bf7e:	4a2a      	ldr	r2, [pc, #168]	; (800c028 <UART_SetConfig+0x38c>)
 800bf80:	fba2 2303 	umull	r2, r3, r2, r3
 800bf84:	095b      	lsrs	r3, r3, #5
 800bf86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf8a:	441e      	add	r6, r3
 800bf8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f04f 0100 	mov.w	r1, #0
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	1894      	adds	r4, r2, r2
 800bf9a:	603c      	str	r4, [r7, #0]
 800bf9c:	415b      	adcs	r3, r3
 800bf9e:	607b      	str	r3, [r7, #4]
 800bfa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfa4:	1812      	adds	r2, r2, r0
 800bfa6:	eb41 0303 	adc.w	r3, r1, r3
 800bfaa:	f04f 0400 	mov.w	r4, #0
 800bfae:	f04f 0500 	mov.w	r5, #0
 800bfb2:	00dd      	lsls	r5, r3, #3
 800bfb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bfb8:	00d4      	lsls	r4, r2, #3
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	eb12 0a00 	adds.w	sl, r2, r0
 800bfc2:	eb43 0b01 	adc.w	fp, r3, r1
 800bfc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f04f 0100 	mov.w	r1, #0
 800bfd0:	f04f 0200 	mov.w	r2, #0
 800bfd4:	f04f 0300 	mov.w	r3, #0
 800bfd8:	008b      	lsls	r3, r1, #2
 800bfda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bfde:	0082      	lsls	r2, r0, #2
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	4659      	mov	r1, fp
 800bfe4:	f7f4 fe00 	bl	8000be8 <__aeabi_uldivmod>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4b0e      	ldr	r3, [pc, #56]	; (800c028 <UART_SetConfig+0x38c>)
 800bfee:	fba3 1302 	umull	r1, r3, r3, r2
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	2164      	movs	r1, #100	; 0x64
 800bff6:	fb01 f303 	mul.w	r3, r1, r3
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	3332      	adds	r3, #50	; 0x32
 800c000:	4a09      	ldr	r2, [pc, #36]	; (800c028 <UART_SetConfig+0x38c>)
 800c002:	fba2 2303 	umull	r2, r3, r2, r3
 800c006:	095b      	lsrs	r3, r3, #5
 800c008:	f003 020f 	and.w	r2, r3, #15
 800c00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4432      	add	r2, r6
 800c012:	609a      	str	r2, [r3, #8]
}
 800c014:	bf00      	nop
 800c016:	377c      	adds	r7, #124	; 0x7c
 800c018:	46bd      	mov	sp, r7
 800c01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01e:	bf00      	nop
 800c020:	40011000 	.word	0x40011000
 800c024:	40011400 	.word	0x40011400
 800c028:	51eb851f 	.word	0x51eb851f

0800c02c <LL_GPIO_SetPinMode>:
{
 800c02c:	b480      	push	{r7}
 800c02e:	b089      	sub	sp, #36	; 0x24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	fa93 f3a3 	rbit	r3, r3
 800c046:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	fab3 f383 	clz	r3, r3
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	2103      	movs	r1, #3
 800c054:	fa01 f303 	lsl.w	r3, r1, r3
 800c058:	43db      	mvns	r3, r3
 800c05a:	401a      	ands	r2, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	fa93 f3a3 	rbit	r3, r3
 800c066:	61bb      	str	r3, [r7, #24]
  return result;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	fab3 f383 	clz	r3, r3
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	fa01 f303 	lsl.w	r3, r1, r3
 800c078:	431a      	orrs	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]
}
 800c07e:	bf00      	nop
 800c080:	3724      	adds	r7, #36	; 0x24
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <LL_GPIO_SetPinOutputType>:
{
 800c08a:	b480      	push	{r7}
 800c08c:	b085      	sub	sp, #20
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	60b9      	str	r1, [r7, #8]
 800c094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	685a      	ldr	r2, [r3, #4]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	43db      	mvns	r3, r3
 800c09e:	401a      	ands	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	605a      	str	r2, [r3, #4]
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <LL_GPIO_SetPinSpeed>:
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b089      	sub	sp, #36	; 0x24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	fa93 f3a3 	rbit	r3, r3
 800c0d4:	613b      	str	r3, [r7, #16]
  return result;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	fab3 f383 	clz	r3, r3
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	2103      	movs	r1, #3
 800c0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0e6:	43db      	mvns	r3, r3
 800c0e8:	401a      	ands	r2, r3
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	fa93 f3a3 	rbit	r3, r3
 800c0f4:	61bb      	str	r3, [r7, #24]
  return result;
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	fab3 f383 	clz	r3, r3
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	005b      	lsls	r3, r3, #1
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	fa01 f303 	lsl.w	r3, r1, r3
 800c106:	431a      	orrs	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	609a      	str	r2, [r3, #8]
}
 800c10c:	bf00      	nop
 800c10e:	3724      	adds	r7, #36	; 0x24
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <LL_GPIO_SetPinPull>:
{
 800c118:	b480      	push	{r7}
 800c11a:	b089      	sub	sp, #36	; 0x24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68da      	ldr	r2, [r3, #12]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	fa93 f3a3 	rbit	r3, r3
 800c132:	613b      	str	r3, [r7, #16]
  return result;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	fab3 f383 	clz	r3, r3
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	2103      	movs	r1, #3
 800c140:	fa01 f303 	lsl.w	r3, r1, r3
 800c144:	43db      	mvns	r3, r3
 800c146:	401a      	ands	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	fa93 f3a3 	rbit	r3, r3
 800c152:	61bb      	str	r3, [r7, #24]
  return result;
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	fab3 f383 	clz	r3, r3
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	431a      	orrs	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	60da      	str	r2, [r3, #12]
}
 800c16a:	bf00      	nop
 800c16c:	3724      	adds	r7, #36	; 0x24
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <LL_GPIO_SetAFPin_0_7>:
{
 800c176:	b480      	push	{r7}
 800c178:	b089      	sub	sp, #36	; 0x24
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6a1a      	ldr	r2, [r3, #32]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	fa93 f3a3 	rbit	r3, r3
 800c190:	613b      	str	r3, [r7, #16]
  return result;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	fab3 f383 	clz	r3, r3
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	210f      	movs	r1, #15
 800c19e:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	401a      	ands	r2, r3
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	fa93 f3a3 	rbit	r3, r3
 800c1b0:	61bb      	str	r3, [r7, #24]
  return result;
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	fab3 f383 	clz	r3, r3
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	fa01 f303 	lsl.w	r3, r1, r3
 800c1c2:	431a      	orrs	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	621a      	str	r2, [r3, #32]
}
 800c1c8:	bf00      	nop
 800c1ca:	3724      	adds	r7, #36	; 0x24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <LL_GPIO_SetAFPin_8_15>:
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b089      	sub	sp, #36	; 0x24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	0a1b      	lsrs	r3, r3, #8
 800c1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	fa93 f3a3 	rbit	r3, r3
 800c1f0:	613b      	str	r3, [r7, #16]
  return result;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	fab3 f383 	clz	r3, r3
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	210f      	movs	r1, #15
 800c1fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c202:	43db      	mvns	r3, r3
 800c204:	401a      	ands	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	0a1b      	lsrs	r3, r3, #8
 800c20a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	fa93 f3a3 	rbit	r3, r3
 800c212:	61bb      	str	r3, [r7, #24]
  return result;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	fab3 f383 	clz	r3, r3
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	fa01 f303 	lsl.w	r3, r1, r3
 800c224:	431a      	orrs	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c22a:	bf00      	nop
 800c22c:	3724      	adds	r7, #36	; 0x24
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b088      	sub	sp, #32
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800c244:	2300      	movs	r3, #0
 800c246:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	fa93 f3a3 	rbit	r3, r3
 800c254:	613b      	str	r3, [r7, #16]
  return result;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	fab3 f383 	clz	r3, r3
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c260:	e050      	b.n	800c304 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	2101      	movs	r1, #1
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	fa01 f303 	lsl.w	r3, r1, r3
 800c26e:	4013      	ands	r3, r2
 800c270:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d042      	beq.n	800c2fe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d003      	beq.n	800c288 <LL_GPIO_Init+0x52>
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d10d      	bne.n	800c2a4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	461a      	mov	r2, r3
 800c28e:	69b9      	ldr	r1, [r7, #24]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff12 	bl	800c0ba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	461a      	mov	r2, r3
 800c29c:	69b9      	ldr	r1, [r7, #24]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7ff fef3 	bl	800c08a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	69b9      	ldr	r1, [r7, #24]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff ff33 	bl	800c118 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d11a      	bne.n	800c2f0 <LL_GPIO_Init+0xba>
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	fa93 f3a3 	rbit	r3, r3
 800c2c4:	60bb      	str	r3, [r7, #8]
  return result;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800c2c8:	fab3 f383 	clz	r3, r3
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b07      	cmp	r3, #7
 800c2d0:	d807      	bhi.n	800c2e2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	69b9      	ldr	r1, [r7, #24]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ff4b 	bl	800c176 <LL_GPIO_SetAFPin_0_7>
 800c2e0:	e006      	b.n	800c2f0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	69b9      	ldr	r1, [r7, #24]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff ff72 	bl	800c1d4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	69b9      	ldr	r1, [r7, #24]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fe97 	bl	800c02c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	3301      	adds	r3, #1
 800c302:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	fa22 f303 	lsr.w	r3, r2, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1a7      	bne.n	800c262 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3720      	adds	r7, #32
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <LL_RCC_GetSysClkSource+0x18>)
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 030c 	and.w	r3, r3, #12
}
 800c328:	4618      	mov	r0, r3
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	40023800 	.word	0x40023800

0800c338 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <LL_RCC_GetAHBPrescaler+0x18>)
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c344:	4618      	mov	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	40023800 	.word	0x40023800

0800c354 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c358:	4b04      	ldr	r3, [pc, #16]	; (800c36c <LL_RCC_GetAPB1Prescaler+0x18>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800c360:	4618      	mov	r0, r3
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40023800 	.word	0x40023800

0800c370 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800c370:	b480      	push	{r7}
 800c372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c374:	4b04      	ldr	r3, [pc, #16]	; (800c388 <LL_RCC_GetAPB2Prescaler+0x18>)
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40023800 	.word	0x40023800

0800c38c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c38c:	b480      	push	{r7}
 800c38e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c390:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <LL_RCC_PLL_GetMainSource+0x18>)
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800c398:	4618      	mov	r0, r3
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	40023800 	.word	0x40023800

0800c3a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c3ac:	4b04      	ldr	r3, [pc, #16]	; (800c3c0 <LL_RCC_PLL_GetN+0x18>)
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	099b      	lsrs	r3, r3, #6
 800c3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	40023800 	.word	0x40023800

0800c3c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800c3c8:	4b04      	ldr	r3, [pc, #16]	; (800c3dc <LL_RCC_PLL_GetP+0x18>)
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	40023800 	.word	0x40023800

0800c3e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c3e4:	4b04      	ldr	r3, [pc, #16]	; (800c3f8 <LL_RCC_PLL_GetDivider+0x18>)
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	40023800 	.word	0x40023800

0800c3fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c404:	f000 f820 	bl	800c448 <RCC_GetSystemClockFreq>
 800c408:	4602      	mov	r2, r0
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f840 	bl	800c498 <RCC_GetHCLKClockFreq>
 800c418:	4602      	mov	r2, r0
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f84e 	bl	800c4c4 <RCC_GetPCLK1ClockFreq>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f85a 	bl	800c4ec <RCC_GetPCLK2ClockFreq>
 800c438:	4602      	mov	r2, r0
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	60da      	str	r2, [r3, #12]
}
 800c43e:	bf00      	nop
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c452:	f7ff ff63 	bl	800c31c <LL_RCC_GetSysClkSource>
 800c456:	4603      	mov	r3, r0
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d00c      	beq.n	800c476 <RCC_GetSystemClockFreq+0x2e>
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d80f      	bhi.n	800c480 <RCC_GetSystemClockFreq+0x38>
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <RCC_GetSystemClockFreq+0x22>
 800c464:	2b04      	cmp	r3, #4
 800c466:	d003      	beq.n	800c470 <RCC_GetSystemClockFreq+0x28>
 800c468:	e00a      	b.n	800c480 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800c46a:	4b09      	ldr	r3, [pc, #36]	; (800c490 <RCC_GetSystemClockFreq+0x48>)
 800c46c:	607b      	str	r3, [r7, #4]
      break;
 800c46e:	e00a      	b.n	800c486 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c470:	4b08      	ldr	r3, [pc, #32]	; (800c494 <RCC_GetSystemClockFreq+0x4c>)
 800c472:	607b      	str	r3, [r7, #4]
      break;
 800c474:	e007      	b.n	800c486 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800c476:	2008      	movs	r0, #8
 800c478:	f000 f84c 	bl	800c514 <RCC_PLL_GetFreqDomain_SYS>
 800c47c:	6078      	str	r0, [r7, #4]
      break;
 800c47e:	e002      	b.n	800c486 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <RCC_GetSystemClockFreq+0x48>)
 800c482:	607b      	str	r3, [r7, #4]
      break;
 800c484:	bf00      	nop
  }

  return frequency;
 800c486:	687b      	ldr	r3, [r7, #4]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	00f42400 	.word	0x00f42400
 800c494:	007a1200 	.word	0x007a1200

0800c498 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c4a0:	f7ff ff4a 	bl	800c338 <LL_RCC_GetAHBPrescaler>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	091b      	lsrs	r3, r3, #4
 800c4a8:	f003 030f 	and.w	r3, r3, #15
 800c4ac:	4a04      	ldr	r2, [pc, #16]	; (800c4c0 <RCC_GetHCLKClockFreq+0x28>)
 800c4ae:	5cd3      	ldrb	r3, [r2, r3]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	40d3      	lsrs	r3, r2
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	08011e94 	.word	0x08011e94

0800c4c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c4cc:	f7ff ff42 	bl	800c354 <LL_RCC_GetAPB1Prescaler>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	0a9b      	lsrs	r3, r3, #10
 800c4d4:	4a04      	ldr	r2, [pc, #16]	; (800c4e8 <RCC_GetPCLK1ClockFreq+0x24>)
 800c4d6:	5cd3      	ldrb	r3, [r2, r3]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	40d3      	lsrs	r3, r2
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	08011ea4 	.word	0x08011ea4

0800c4ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800c4f4:	f7ff ff3c 	bl	800c370 <LL_RCC_GetAPB2Prescaler>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	0b5b      	lsrs	r3, r3, #13
 800c4fc:	4a04      	ldr	r2, [pc, #16]	; (800c510 <RCC_GetPCLK2ClockFreq+0x24>)
 800c4fe:	5cd3      	ldrb	r3, [r2, r3]
 800c500:	461a      	mov	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	40d3      	lsrs	r3, r2
}
 800c506:	4618      	mov	r0, r3
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	08011ea4 	.word	0x08011ea4

0800c514 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800c514:	b590      	push	{r4, r7, lr}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
 800c520:	2300      	movs	r3, #0
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	2300      	movs	r3, #0
 800c526:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c528:	f7ff ff30 	bl	800c38c <LL_RCC_PLL_GetMainSource>
 800c52c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c53a:	d003      	beq.n	800c544 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800c53c:	e005      	b.n	800c54a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c53e:	4b12      	ldr	r3, [pc, #72]	; (800c588 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800c540:	617b      	str	r3, [r7, #20]
      break;
 800c542:	e005      	b.n	800c550 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c544:	4b11      	ldr	r3, [pc, #68]	; (800c58c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800c546:	617b      	str	r3, [r7, #20]
      break;
 800c548:	e002      	b.n	800c550 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800c54c:	617b      	str	r3, [r7, #20]
      break;
 800c54e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b08      	cmp	r3, #8
 800c554:	d113      	bne.n	800c57e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c556:	f7ff ff43 	bl	800c3e0 <LL_RCC_PLL_GetDivider>
 800c55a:	4602      	mov	r2, r0
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	fbb3 f4f2 	udiv	r4, r3, r2
 800c562:	f7ff ff21 	bl	800c3a8 <LL_RCC_PLL_GetN>
 800c566:	4603      	mov	r3, r0
 800c568:	fb03 f404 	mul.w	r4, r3, r4
 800c56c:	f7ff ff2a 	bl	800c3c4 <LL_RCC_PLL_GetP>
 800c570:	4603      	mov	r3, r0
 800c572:	0c1b      	lsrs	r3, r3, #16
 800c574:	3301      	adds	r3, #1
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	fbb4 f3f3 	udiv	r3, r4, r3
 800c57c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800c57e:	693b      	ldr	r3, [r7, #16]
}
 800c580:	4618      	mov	r0, r3
 800c582:	371c      	adds	r7, #28
 800c584:	46bd      	mov	sp, r7
 800c586:	bd90      	pop	{r4, r7, pc}
 800c588:	00f42400 	.word	0x00f42400
 800c58c:	007a1200 	.word	0x007a1200

0800c590 <LL_SPI_IsEnabled>:
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a0:	2b40      	cmp	r3, #64	; 0x40
 800c5a2:	d101      	bne.n	800c5a8 <LL_SPI_IsEnabled+0x18>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <LL_SPI_IsEnabled+0x1a>
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <LL_SPI_SetCRCPolynomial>:
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	611a      	str	r2, [r3, #16]
}
 800c5ca:	bf00      	nop
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffd3 	bl	800c590 <LL_SPI_IsEnabled>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d139      	bne.n	800c664 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5f8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	6811      	ldr	r1, [r2, #0]
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	6852      	ldr	r2, [r2, #4]
 800c604:	4311      	orrs	r1, r2
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6892      	ldr	r2, [r2, #8]
 800c60a:	4311      	orrs	r1, r2
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	68d2      	ldr	r2, [r2, #12]
 800c610:	4311      	orrs	r1, r2
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	6912      	ldr	r2, [r2, #16]
 800c616:	4311      	orrs	r1, r2
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	6952      	ldr	r2, [r2, #20]
 800c61c:	4311      	orrs	r1, r2
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	6992      	ldr	r2, [r2, #24]
 800c622:	4311      	orrs	r1, r2
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	69d2      	ldr	r2, [r2, #28]
 800c628:	4311      	orrs	r1, r2
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	6a12      	ldr	r2, [r2, #32]
 800c62e:	430a      	orrs	r2, r1
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f023 0204 	bic.w	r2, r3, #4
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	0c1b      	lsrs	r3, r3, #16
 800c644:	431a      	orrs	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c652:	d105      	bne.n	800c660 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff ffab 	bl	800c5b6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	61da      	str	r2, [r3, #28]
  return status;
 800c670:	7bfb      	ldrb	r3, [r7, #15]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <LL_TIM_SetPrescaler>:
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c68a:	bf00      	nop
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <LL_TIM_SetAutoReload>:
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <LL_TIM_SetRepetitionCounter>:
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6c2:	bf00      	nop
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <LL_TIM_OC_SetCompareCH1>:
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <LL_TIM_OC_SetCompareCH2>:
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <LL_TIM_OC_SetCompareCH3>:
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c716:	bf00      	nop
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <LL_TIM_OC_SetCompareCH4>:
{
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c732:	bf00      	nop
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	f043 0201 	orr.w	r2, r3, #1
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	615a      	str	r2, [r3, #20]
}
 800c752:	bf00      	nop
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a3d      	ldr	r2, [pc, #244]	; (800c868 <LL_TIM_Init+0x108>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d013      	beq.n	800c7a0 <LL_TIM_Init+0x40>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c77e:	d00f      	beq.n	800c7a0 <LL_TIM_Init+0x40>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a3a      	ldr	r2, [pc, #232]	; (800c86c <LL_TIM_Init+0x10c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00b      	beq.n	800c7a0 <LL_TIM_Init+0x40>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a39      	ldr	r2, [pc, #228]	; (800c870 <LL_TIM_Init+0x110>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d007      	beq.n	800c7a0 <LL_TIM_Init+0x40>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a38      	ldr	r2, [pc, #224]	; (800c874 <LL_TIM_Init+0x114>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d003      	beq.n	800c7a0 <LL_TIM_Init+0x40>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a37      	ldr	r2, [pc, #220]	; (800c878 <LL_TIM_Init+0x118>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d106      	bne.n	800c7ae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a2d      	ldr	r2, [pc, #180]	; (800c868 <LL_TIM_Init+0x108>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d02b      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7bc:	d027      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a2a      	ldr	r2, [pc, #168]	; (800c86c <LL_TIM_Init+0x10c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d023      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a29      	ldr	r2, [pc, #164]	; (800c870 <LL_TIM_Init+0x110>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d01f      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a28      	ldr	r2, [pc, #160]	; (800c874 <LL_TIM_Init+0x114>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d01b      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a27      	ldr	r2, [pc, #156]	; (800c878 <LL_TIM_Init+0x118>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d017      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a26      	ldr	r2, [pc, #152]	; (800c87c <LL_TIM_Init+0x11c>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d013      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a25      	ldr	r2, [pc, #148]	; (800c880 <LL_TIM_Init+0x120>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a24      	ldr	r2, [pc, #144]	; (800c884 <LL_TIM_Init+0x124>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a23      	ldr	r2, [pc, #140]	; (800c888 <LL_TIM_Init+0x128>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a22      	ldr	r2, [pc, #136]	; (800c88c <LL_TIM_Init+0x12c>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <LL_TIM_Init+0xae>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a21      	ldr	r2, [pc, #132]	; (800c890 <LL_TIM_Init+0x130>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d106      	bne.n	800c81c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	4313      	orrs	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff34 	bl	800c696 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff ff20 	bl	800c67a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a0a      	ldr	r2, [pc, #40]	; (800c868 <LL_TIM_Init+0x108>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d003      	beq.n	800c84a <LL_TIM_Init+0xea>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a0c      	ldr	r2, [pc, #48]	; (800c878 <LL_TIM_Init+0x118>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d105      	bne.n	800c856 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ff2e 	bl	800c6b2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff ff71 	bl	800c73e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	40010000 	.word	0x40010000
 800c86c:	40000400 	.word	0x40000400
 800c870:	40000800 	.word	0x40000800
 800c874:	40000c00 	.word	0x40000c00
 800c878:	40010400 	.word	0x40010400
 800c87c:	40014000 	.word	0x40014000
 800c880:	40014400 	.word	0x40014400
 800c884:	40014800 	.word	0x40014800
 800c888:	40001800 	.word	0x40001800
 800c88c:	40001c00 	.word	0x40001c00
 800c890:	40002000 	.word	0x40002000

0800c894 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8aa:	d027      	beq.n	800c8fc <LL_TIM_OC_Init+0x68>
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8b2:	d82a      	bhi.n	800c90a <LL_TIM_OC_Init+0x76>
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ba:	d018      	beq.n	800c8ee <LL_TIM_OC_Init+0x5a>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c2:	d822      	bhi.n	800c90a <LL_TIM_OC_Init+0x76>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d003      	beq.n	800c8d2 <LL_TIM_OC_Init+0x3e>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b10      	cmp	r3, #16
 800c8ce:	d007      	beq.n	800c8e0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800c8d0:	e01b      	b.n	800c90a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f000 f81f 	bl	800c918 <OC1Config>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c8de:	e015      	b.n	800c90c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800c8e0:	6879      	ldr	r1, [r7, #4]
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 f884 	bl	800c9f0 <OC2Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c8ec:	e00e      	b.n	800c90c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800c8ee:	6879      	ldr	r1, [r7, #4]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f8ed 	bl	800cad0 <OC3Config>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c8fa:	e007      	b.n	800c90c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f956 	bl	800cbb0 <OC4Config>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]
      break;
 800c908:	e000      	b.n	800c90c <LL_TIM_OC_Init+0x78>
      break;
 800c90a:	bf00      	nop
  }

  return result;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	f023 0201 	bic.w	r2, r3, #1
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f023 0303 	bic.w	r3, r3, #3
 800c946:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f023 0202 	bic.w	r2, r3, #2
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	4313      	orrs	r3, r2
 800c962:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f023 0201 	bic.w	r2, r3, #1
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a1c      	ldr	r2, [pc, #112]	; (800c9e8 <OC1Config+0xd0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d003      	beq.n	800c982 <OC1Config+0x6a>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a1b      	ldr	r2, [pc, #108]	; (800c9ec <OC1Config+0xd4>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d11e      	bne.n	800c9c0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f023 0208 	bic.w	r2, r3, #8
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4313      	orrs	r3, r2
 800c990:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f023 0204 	bic.w	r2, r3, #4
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fe7b 	bl	800c6ce <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	40010000 	.word	0x40010000
 800c9ec:	40010400 	.word	0x40010400

0800c9f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	f023 0210 	bic.w	r2, r3, #16
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	021b      	lsls	r3, r3, #8
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f023 0220 	bic.w	r2, r3, #32
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f023 0210 	bic.w	r2, r3, #16
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a1d      	ldr	r2, [pc, #116]	; (800cac8 <OC2Config+0xd8>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d003      	beq.n	800ca60 <OC2Config+0x70>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a1c      	ldr	r2, [pc, #112]	; (800cacc <OC2Config+0xdc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d11f      	bne.n	800caa0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	019b      	lsls	r3, r3, #6
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	019b      	lsls	r3, r3, #6
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fe19 	bl	800c6ea <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	40010000 	.word	0x40010000
 800cacc:	40010400 	.word	0x40010400

0800cad0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	021b      	lsls	r3, r3, #8
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	021b      	lsls	r3, r3, #8
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a1d      	ldr	r2, [pc, #116]	; (800cba8 <OC3Config+0xd8>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d003      	beq.n	800cb3e <OC3Config+0x6e>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a1c      	ldr	r2, [pc, #112]	; (800cbac <OC3Config+0xdc>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d11f      	bne.n	800cb7e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	029b      	lsls	r3, r3, #10
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	029b      	lsls	r3, r3, #10
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	011b      	lsls	r3, r3, #4
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	015b      	lsls	r3, r3, #5
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff fdb8 	bl	800c706 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	40010000 	.word	0x40010000
 800cbac:	40010400 	.word	0x40010400

0800cbb0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	031b      	lsls	r3, r3, #12
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	031b      	lsls	r3, r3, #12
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a11      	ldr	r2, [pc, #68]	; (800cc58 <OC4Config+0xa8>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d003      	beq.n	800cc20 <OC4Config+0x70>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <OC4Config+0xac>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d107      	bne.n	800cc30 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	019b      	lsls	r3, r3, #6
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fd6d 	bl	800c722 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	40010000 	.word	0x40010000
 800cc5c:	40010400 	.word	0x40010400

0800cc60 <LL_USART_IsEnabled>:
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc74:	bf0c      	ite	eq
 800cc76:	2301      	moveq	r3, #1
 800cc78:	2300      	movne	r3, #0
 800cc7a:	b2db      	uxtb	r3, r3
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <LL_USART_SetStopBitsLength>:
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	611a      	str	r2, [r3, #16]
}
 800cca2:	bf00      	nop
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <LL_USART_SetHWFlowCtrl>:
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	615a      	str	r2, [r3, #20]
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <LL_USART_SetBaudRate>:
{
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	b09f      	sub	sp, #124	; 0x7c
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6778      	str	r0, [r7, #116]	; 0x74
 800ccde:	6739      	str	r1, [r7, #112]	; 0x70
 800cce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cce2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800cce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccea:	f040 80bc 	bne.w	800ce66 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800ccee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ccf0:	461c      	mov	r4, r3
 800ccf2:	f04f 0500 	mov.w	r5, #0
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	eb12 0a02 	adds.w	sl, r2, r2
 800ccfe:	eb43 0b03 	adc.w	fp, r3, r3
 800cd02:	4652      	mov	r2, sl
 800cd04:	465b      	mov	r3, fp
 800cd06:	1912      	adds	r2, r2, r4
 800cd08:	eb45 0303 	adc.w	r3, r5, r3
 800cd0c:	f04f 0000 	mov.w	r0, #0
 800cd10:	f04f 0100 	mov.w	r1, #0
 800cd14:	00d9      	lsls	r1, r3, #3
 800cd16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd1a:	00d0      	lsls	r0, r2, #3
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	1911      	adds	r1, r2, r4
 800cd22:	6639      	str	r1, [r7, #96]	; 0x60
 800cd24:	416b      	adcs	r3, r5
 800cd26:	667b      	str	r3, [r7, #100]	; 0x64
 800cd28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f04f 0300 	mov.w	r3, #0
 800cd30:	1891      	adds	r1, r2, r2
 800cd32:	6339      	str	r1, [r7, #48]	; 0x30
 800cd34:	415b      	adcs	r3, r3
 800cd36:	637b      	str	r3, [r7, #52]	; 0x34
 800cd38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cd3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cd40:	f7f3 ff52 	bl	8000be8 <__aeabi_uldivmod>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4ba9      	ldr	r3, [pc, #676]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cd4a:	fba3 2302 	umull	r2, r3, r3, r2
 800cd4e:	095b      	lsrs	r3, r3, #5
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	011b      	lsls	r3, r3, #4
 800cd54:	b29e      	uxth	r6, r3
 800cd56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd58:	461c      	mov	r4, r3
 800cd5a:	f04f 0500 	mov.w	r5, #0
 800cd5e:	4622      	mov	r2, r4
 800cd60:	462b      	mov	r3, r5
 800cd62:	1891      	adds	r1, r2, r2
 800cd64:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd66:	415b      	adcs	r3, r3
 800cd68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd6e:	1912      	adds	r2, r2, r4
 800cd70:	eb45 0303 	adc.w	r3, r5, r3
 800cd74:	f04f 0000 	mov.w	r0, #0
 800cd78:	f04f 0100 	mov.w	r1, #0
 800cd7c:	00d9      	lsls	r1, r3, #3
 800cd7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd82:	00d0      	lsls	r0, r2, #3
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	1911      	adds	r1, r2, r4
 800cd8a:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd8c:	416b      	adcs	r3, r5
 800cd8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd92:	461a      	mov	r2, r3
 800cd94:	f04f 0300 	mov.w	r3, #0
 800cd98:	1891      	adds	r1, r2, r2
 800cd9a:	6239      	str	r1, [r7, #32]
 800cd9c:	415b      	adcs	r3, r3
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
 800cda0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cda4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cda8:	f7f3 ff1e 	bl	8000be8 <__aeabi_uldivmod>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4b8f      	ldr	r3, [pc, #572]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cdb2:	fba3 1302 	umull	r1, r3, r3, r2
 800cdb6:	095b      	lsrs	r3, r3, #5
 800cdb8:	2164      	movs	r1, #100	; 0x64
 800cdba:	fb01 f303 	mul.w	r3, r1, r3
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	3332      	adds	r3, #50	; 0x32
 800cdc4:	4a8a      	ldr	r2, [pc, #552]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdca:	095b      	lsrs	r3, r3, #5
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4433      	add	r3, r6
 800cdda:	b29e      	uxth	r6, r3
 800cddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdde:	4618      	mov	r0, r3
 800cde0:	f04f 0100 	mov.w	r1, #0
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	1894      	adds	r4, r2, r2
 800cdea:	61bc      	str	r4, [r7, #24]
 800cdec:	415b      	adcs	r3, r3
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdf4:	1812      	adds	r2, r2, r0
 800cdf6:	eb41 0303 	adc.w	r3, r1, r3
 800cdfa:	f04f 0400 	mov.w	r4, #0
 800cdfe:	f04f 0500 	mov.w	r5, #0
 800ce02:	00dd      	lsls	r5, r3, #3
 800ce04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce08:	00d4      	lsls	r4, r2, #3
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	462b      	mov	r3, r5
 800ce0e:	1814      	adds	r4, r2, r0
 800ce10:	653c      	str	r4, [r7, #80]	; 0x50
 800ce12:	414b      	adcs	r3, r1
 800ce14:	657b      	str	r3, [r7, #84]	; 0x54
 800ce16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce18:	461a      	mov	r2, r3
 800ce1a:	f04f 0300 	mov.w	r3, #0
 800ce1e:	1891      	adds	r1, r2, r2
 800ce20:	6139      	str	r1, [r7, #16]
 800ce22:	415b      	adcs	r3, r3
 800ce24:	617b      	str	r3, [r7, #20]
 800ce26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ce2e:	f7f3 fedb 	bl	8000be8 <__aeabi_uldivmod>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4b6e      	ldr	r3, [pc, #440]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800ce38:	fba3 1302 	umull	r1, r3, r3, r2
 800ce3c:	095b      	lsrs	r3, r3, #5
 800ce3e:	2164      	movs	r1, #100	; 0x64
 800ce40:	fb01 f303 	mul.w	r3, r1, r3
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	3332      	adds	r3, #50	; 0x32
 800ce4a:	4a69      	ldr	r2, [pc, #420]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800ce4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce50:	095b      	lsrs	r3, r3, #5
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	f003 0307 	and.w	r3, r3, #7
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	4433      	add	r3, r6
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce62:	609a      	str	r2, [r3, #8]
}
 800ce64:	e0be      	b.n	800cfe4 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800ce66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce68:	461c      	mov	r4, r3
 800ce6a:	f04f 0500 	mov.w	r5, #0
 800ce6e:	4622      	mov	r2, r4
 800ce70:	462b      	mov	r3, r5
 800ce72:	eb12 0802 	adds.w	r8, r2, r2
 800ce76:	eb43 0903 	adc.w	r9, r3, r3
 800ce7a:	4642      	mov	r2, r8
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	1912      	adds	r2, r2, r4
 800ce80:	eb45 0303 	adc.w	r3, r5, r3
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	f04f 0100 	mov.w	r1, #0
 800ce8c:	00d9      	lsls	r1, r3, #3
 800ce8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ce92:	00d0      	lsls	r0, r2, #3
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	1911      	adds	r1, r2, r4
 800ce9a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ce9c:	416b      	adcs	r3, r5
 800ce9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cea2:	4618      	mov	r0, r3
 800cea4:	f04f 0100 	mov.w	r1, #0
 800cea8:	f04f 0200 	mov.w	r2, #0
 800ceac:	f04f 0300 	mov.w	r3, #0
 800ceb0:	008b      	lsls	r3, r1, #2
 800ceb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ceb6:	0082      	lsls	r2, r0, #2
 800ceb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cebc:	f7f3 fe94 	bl	8000be8 <__aeabi_uldivmod>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	4b4a      	ldr	r3, [pc, #296]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cec6:	fba3 2302 	umull	r2, r3, r3, r2
 800ceca:	095b      	lsrs	r3, r3, #5
 800cecc:	b29b      	uxth	r3, r3
 800cece:	011b      	lsls	r3, r3, #4
 800ced0:	b29e      	uxth	r6, r3
 800ced2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ced4:	4618      	mov	r0, r3
 800ced6:	f04f 0100 	mov.w	r1, #0
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	1894      	adds	r4, r2, r2
 800cee0:	60bc      	str	r4, [r7, #8]
 800cee2:	415b      	adcs	r3, r3
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ceea:	1812      	adds	r2, r2, r0
 800ceec:	eb41 0303 	adc.w	r3, r1, r3
 800cef0:	f04f 0400 	mov.w	r4, #0
 800cef4:	f04f 0500 	mov.w	r5, #0
 800cef8:	00dd      	lsls	r5, r3, #3
 800cefa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cefe:	00d4      	lsls	r4, r2, #3
 800cf00:	4622      	mov	r2, r4
 800cf02:	462b      	mov	r3, r5
 800cf04:	1814      	adds	r4, r2, r0
 800cf06:	643c      	str	r4, [r7, #64]	; 0x40
 800cf08:	414b      	adcs	r3, r1
 800cf0a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f04f 0100 	mov.w	r1, #0
 800cf14:	f04f 0200 	mov.w	r2, #0
 800cf18:	f04f 0300 	mov.w	r3, #0
 800cf1c:	008b      	lsls	r3, r1, #2
 800cf1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf22:	0082      	lsls	r2, r0, #2
 800cf24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cf28:	f7f3 fe5e 	bl	8000be8 <__aeabi_uldivmod>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4b2f      	ldr	r3, [pc, #188]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cf32:	fba3 1302 	umull	r1, r3, r3, r2
 800cf36:	095b      	lsrs	r3, r3, #5
 800cf38:	2164      	movs	r1, #100	; 0x64
 800cf3a:	fb01 f303 	mul.w	r3, r1, r3
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	011b      	lsls	r3, r3, #4
 800cf42:	3332      	adds	r3, #50	; 0x32
 800cf44:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cf46:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4a:	095b      	lsrs	r3, r3, #5
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	4433      	add	r3, r6
 800cf56:	b29e      	uxth	r6, r3
 800cf58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f04f 0100 	mov.w	r1, #0
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	1894      	adds	r4, r2, r2
 800cf66:	603c      	str	r4, [r7, #0]
 800cf68:	415b      	adcs	r3, r3
 800cf6a:	607b      	str	r3, [r7, #4]
 800cf6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf70:	1812      	adds	r2, r2, r0
 800cf72:	eb41 0303 	adc.w	r3, r1, r3
 800cf76:	f04f 0400 	mov.w	r4, #0
 800cf7a:	f04f 0500 	mov.w	r5, #0
 800cf7e:	00dd      	lsls	r5, r3, #3
 800cf80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cf84:	00d4      	lsls	r4, r2, #3
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	1814      	adds	r4, r2, r0
 800cf8c:	63bc      	str	r4, [r7, #56]	; 0x38
 800cf8e:	414b      	adcs	r3, r1
 800cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf94:	4618      	mov	r0, r3
 800cf96:	f04f 0100 	mov.w	r1, #0
 800cf9a:	f04f 0200 	mov.w	r2, #0
 800cf9e:	f04f 0300 	mov.w	r3, #0
 800cfa2:	008b      	lsls	r3, r1, #2
 800cfa4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cfa8:	0082      	lsls	r2, r0, #2
 800cfaa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cfae:	f7f3 fe1b 	bl	8000be8 <__aeabi_uldivmod>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4b0e      	ldr	r3, [pc, #56]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cfb8:	fba3 1302 	umull	r1, r3, r3, r2
 800cfbc:	095b      	lsrs	r3, r3, #5
 800cfbe:	2164      	movs	r1, #100	; 0x64
 800cfc0:	fb01 f303 	mul.w	r3, r1, r3
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	011b      	lsls	r3, r3, #4
 800cfc8:	3332      	adds	r3, #50	; 0x32
 800cfca:	4a09      	ldr	r2, [pc, #36]	; (800cff0 <LL_USART_SetBaudRate+0x31c>)
 800cfcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd0:	095b      	lsrs	r3, r3, #5
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	f003 030f 	and.w	r3, r3, #15
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4433      	add	r3, r6
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	461a      	mov	r2, r3
 800cfe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfe2:	609a      	str	r2, [r3, #8]
}
 800cfe4:	bf00      	nop
 800cfe6:	377c      	adds	r7, #124	; 0x7c
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfee:	bf00      	nop
 800cff0:	51eb851f 	.word	0x51eb851f

0800cff4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800d002:	2300      	movs	r3, #0
 800d004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7ff fe2a 	bl	800cc60 <LL_USART_IsEnabled>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d15e      	bne.n	800d0d0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d01a:	f023 030c 	bic.w	r3, r3, #12
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	6851      	ldr	r1, [r2, #4]
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	68d2      	ldr	r2, [r2, #12]
 800d026:	4311      	orrs	r1, r2
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	6912      	ldr	r2, [r2, #16]
 800d02c:	4311      	orrs	r1, r2
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	6992      	ldr	r2, [r2, #24]
 800d032:	430a      	orrs	r2, r1
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff fe21 	bl	800cc88 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff fe2e 	bl	800ccae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800d052:	f107 0308 	add.w	r3, r7, #8
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff f9d0 	bl	800c3fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a1f      	ldr	r2, [pc, #124]	; (800d0dc <LL_USART_Init+0xe8>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d102      	bne.n	800d06a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	e021      	b.n	800d0ae <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a1c      	ldr	r2, [pc, #112]	; (800d0e0 <LL_USART_Init+0xec>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d102      	bne.n	800d078 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	e01a      	b.n	800d0ae <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a1a      	ldr	r2, [pc, #104]	; (800d0e4 <LL_USART_Init+0xf0>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d102      	bne.n	800d086 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	e013      	b.n	800d0ae <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a17      	ldr	r2, [pc, #92]	; (800d0e8 <LL_USART_Init+0xf4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d102      	bne.n	800d094 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	e00c      	b.n	800d0ae <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a15      	ldr	r2, [pc, #84]	; (800d0ec <LL_USART_Init+0xf8>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d102      	bne.n	800d0a2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	61bb      	str	r3, [r7, #24]
 800d0a0:	e005      	b.n	800d0ae <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <LL_USART_Init+0xfc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d101      	bne.n	800d0ae <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00d      	beq.n	800d0d0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d009      	beq.n	800d0d0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	699a      	ldr	r2, [r3, #24]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	69b9      	ldr	r1, [r7, #24]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff fe02 	bl	800ccd4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800d0d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3720      	adds	r7, #32
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	40011000 	.word	0x40011000
 800d0e0:	40004400 	.word	0x40004400
 800d0e4:	40004800 	.word	0x40004800
 800d0e8:	40011400 	.word	0x40011400
 800d0ec:	40004c00 	.word	0x40004c00
 800d0f0:	40005000 	.word	0x40005000

0800d0f4 <__errno>:
 800d0f4:	4b01      	ldr	r3, [pc, #4]	; (800d0fc <__errno+0x8>)
 800d0f6:	6818      	ldr	r0, [r3, #0]
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20000010 	.word	0x20000010

0800d100 <__libc_init_array>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	4d0d      	ldr	r5, [pc, #52]	; (800d138 <__libc_init_array+0x38>)
 800d104:	4c0d      	ldr	r4, [pc, #52]	; (800d13c <__libc_init_array+0x3c>)
 800d106:	1b64      	subs	r4, r4, r5
 800d108:	10a4      	asrs	r4, r4, #2
 800d10a:	2600      	movs	r6, #0
 800d10c:	42a6      	cmp	r6, r4
 800d10e:	d109      	bne.n	800d124 <__libc_init_array+0x24>
 800d110:	4d0b      	ldr	r5, [pc, #44]	; (800d140 <__libc_init_array+0x40>)
 800d112:	4c0c      	ldr	r4, [pc, #48]	; (800d144 <__libc_init_array+0x44>)
 800d114:	f004 fcd6 	bl	8011ac4 <_init>
 800d118:	1b64      	subs	r4, r4, r5
 800d11a:	10a4      	asrs	r4, r4, #2
 800d11c:	2600      	movs	r6, #0
 800d11e:	42a6      	cmp	r6, r4
 800d120:	d105      	bne.n	800d12e <__libc_init_array+0x2e>
 800d122:	bd70      	pop	{r4, r5, r6, pc}
 800d124:	f855 3b04 	ldr.w	r3, [r5], #4
 800d128:	4798      	blx	r3
 800d12a:	3601      	adds	r6, #1
 800d12c:	e7ee      	b.n	800d10c <__libc_init_array+0xc>
 800d12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d132:	4798      	blx	r3
 800d134:	3601      	adds	r6, #1
 800d136:	e7f2      	b.n	800d11e <__libc_init_array+0x1e>
 800d138:	080124e0 	.word	0x080124e0
 800d13c:	080124e0 	.word	0x080124e0
 800d140:	080124e0 	.word	0x080124e0
 800d144:	080124e4 	.word	0x080124e4

0800d148 <memset>:
 800d148:	4402      	add	r2, r0
 800d14a:	4603      	mov	r3, r0
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d100      	bne.n	800d152 <memset+0xa>
 800d150:	4770      	bx	lr
 800d152:	f803 1b01 	strb.w	r1, [r3], #1
 800d156:	e7f9      	b.n	800d14c <memset+0x4>

0800d158 <__cvt>:
 800d158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d15c:	ec55 4b10 	vmov	r4, r5, d0
 800d160:	2d00      	cmp	r5, #0
 800d162:	460e      	mov	r6, r1
 800d164:	4619      	mov	r1, r3
 800d166:	462b      	mov	r3, r5
 800d168:	bfbb      	ittet	lt
 800d16a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d16e:	461d      	movlt	r5, r3
 800d170:	2300      	movge	r3, #0
 800d172:	232d      	movlt	r3, #45	; 0x2d
 800d174:	700b      	strb	r3, [r1, #0]
 800d176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d178:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d17c:	4691      	mov	r9, r2
 800d17e:	f023 0820 	bic.w	r8, r3, #32
 800d182:	bfbc      	itt	lt
 800d184:	4622      	movlt	r2, r4
 800d186:	4614      	movlt	r4, r2
 800d188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d18c:	d005      	beq.n	800d19a <__cvt+0x42>
 800d18e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d192:	d100      	bne.n	800d196 <__cvt+0x3e>
 800d194:	3601      	adds	r6, #1
 800d196:	2102      	movs	r1, #2
 800d198:	e000      	b.n	800d19c <__cvt+0x44>
 800d19a:	2103      	movs	r1, #3
 800d19c:	ab03      	add	r3, sp, #12
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	ab02      	add	r3, sp, #8
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	ec45 4b10 	vmov	d0, r4, r5
 800d1a8:	4653      	mov	r3, sl
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	f000 fe18 	bl	800dde0 <_dtoa_r>
 800d1b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1b4:	4607      	mov	r7, r0
 800d1b6:	d102      	bne.n	800d1be <__cvt+0x66>
 800d1b8:	f019 0f01 	tst.w	r9, #1
 800d1bc:	d022      	beq.n	800d204 <__cvt+0xac>
 800d1be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1c2:	eb07 0906 	add.w	r9, r7, r6
 800d1c6:	d110      	bne.n	800d1ea <__cvt+0x92>
 800d1c8:	783b      	ldrb	r3, [r7, #0]
 800d1ca:	2b30      	cmp	r3, #48	; 0x30
 800d1cc:	d10a      	bne.n	800d1e4 <__cvt+0x8c>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7f3 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1da:	b918      	cbnz	r0, 800d1e4 <__cvt+0x8c>
 800d1dc:	f1c6 0601 	rsb	r6, r6, #1
 800d1e0:	f8ca 6000 	str.w	r6, [sl]
 800d1e4:	f8da 3000 	ldr.w	r3, [sl]
 800d1e8:	4499      	add	r9, r3
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7f3 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1f6:	b108      	cbz	r0, 800d1fc <__cvt+0xa4>
 800d1f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1fc:	2230      	movs	r2, #48	; 0x30
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	454b      	cmp	r3, r9
 800d202:	d307      	bcc.n	800d214 <__cvt+0xbc>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d208:	1bdb      	subs	r3, r3, r7
 800d20a:	4638      	mov	r0, r7
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	b004      	add	sp, #16
 800d210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d214:	1c59      	adds	r1, r3, #1
 800d216:	9103      	str	r1, [sp, #12]
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	e7f0      	b.n	800d1fe <__cvt+0xa6>

0800d21c <__exponent>:
 800d21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d21e:	4603      	mov	r3, r0
 800d220:	2900      	cmp	r1, #0
 800d222:	bfb8      	it	lt
 800d224:	4249      	neglt	r1, r1
 800d226:	f803 2b02 	strb.w	r2, [r3], #2
 800d22a:	bfb4      	ite	lt
 800d22c:	222d      	movlt	r2, #45	; 0x2d
 800d22e:	222b      	movge	r2, #43	; 0x2b
 800d230:	2909      	cmp	r1, #9
 800d232:	7042      	strb	r2, [r0, #1]
 800d234:	dd2a      	ble.n	800d28c <__exponent+0x70>
 800d236:	f10d 0407 	add.w	r4, sp, #7
 800d23a:	46a4      	mov	ip, r4
 800d23c:	270a      	movs	r7, #10
 800d23e:	46a6      	mov	lr, r4
 800d240:	460a      	mov	r2, r1
 800d242:	fb91 f6f7 	sdiv	r6, r1, r7
 800d246:	fb07 1516 	mls	r5, r7, r6, r1
 800d24a:	3530      	adds	r5, #48	; 0x30
 800d24c:	2a63      	cmp	r2, #99	; 0x63
 800d24e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d252:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d256:	4631      	mov	r1, r6
 800d258:	dcf1      	bgt.n	800d23e <__exponent+0x22>
 800d25a:	3130      	adds	r1, #48	; 0x30
 800d25c:	f1ae 0502 	sub.w	r5, lr, #2
 800d260:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d264:	1c44      	adds	r4, r0, #1
 800d266:	4629      	mov	r1, r5
 800d268:	4561      	cmp	r1, ip
 800d26a:	d30a      	bcc.n	800d282 <__exponent+0x66>
 800d26c:	f10d 0209 	add.w	r2, sp, #9
 800d270:	eba2 020e 	sub.w	r2, r2, lr
 800d274:	4565      	cmp	r5, ip
 800d276:	bf88      	it	hi
 800d278:	2200      	movhi	r2, #0
 800d27a:	4413      	add	r3, r2
 800d27c:	1a18      	subs	r0, r3, r0
 800d27e:	b003      	add	sp, #12
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d286:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d28a:	e7ed      	b.n	800d268 <__exponent+0x4c>
 800d28c:	2330      	movs	r3, #48	; 0x30
 800d28e:	3130      	adds	r1, #48	; 0x30
 800d290:	7083      	strb	r3, [r0, #2]
 800d292:	70c1      	strb	r1, [r0, #3]
 800d294:	1d03      	adds	r3, r0, #4
 800d296:	e7f1      	b.n	800d27c <__exponent+0x60>

0800d298 <_printf_float>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	ed2d 8b02 	vpush	{d8}
 800d2a0:	b08d      	sub	sp, #52	; 0x34
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2a8:	4616      	mov	r6, r2
 800d2aa:	461f      	mov	r7, r3
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	f001 fd3b 	bl	800ed28 <_localeconv_r>
 800d2b2:	f8d0 a000 	ldr.w	sl, [r0]
 800d2b6:	4650      	mov	r0, sl
 800d2b8:	f7f2 ff8a 	bl	80001d0 <strlen>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	930a      	str	r3, [sp, #40]	; 0x28
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2cc:	3307      	adds	r3, #7
 800d2ce:	f023 0307 	bic.w	r3, r3, #7
 800d2d2:	f103 0208 	add.w	r2, r3, #8
 800d2d6:	f8c8 2000 	str.w	r2, [r8]
 800d2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2ea:	9307      	str	r3, [sp, #28]
 800d2ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2f0:	ee08 0a10 	vmov	s16, r0
 800d2f4:	4b9f      	ldr	r3, [pc, #636]	; (800d574 <_printf_float+0x2dc>)
 800d2f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fe:	f7f3 fc15 	bl	8000b2c <__aeabi_dcmpun>
 800d302:	bb88      	cbnz	r0, 800d368 <_printf_float+0xd0>
 800d304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d308:	4b9a      	ldr	r3, [pc, #616]	; (800d574 <_printf_float+0x2dc>)
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	f7f3 fbef 	bl	8000af0 <__aeabi_dcmple>
 800d312:	bb48      	cbnz	r0, 800d368 <_printf_float+0xd0>
 800d314:	2200      	movs	r2, #0
 800d316:	2300      	movs	r3, #0
 800d318:	4640      	mov	r0, r8
 800d31a:	4649      	mov	r1, r9
 800d31c:	f7f3 fbde 	bl	8000adc <__aeabi_dcmplt>
 800d320:	b110      	cbz	r0, 800d328 <_printf_float+0x90>
 800d322:	232d      	movs	r3, #45	; 0x2d
 800d324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d328:	4b93      	ldr	r3, [pc, #588]	; (800d578 <_printf_float+0x2e0>)
 800d32a:	4894      	ldr	r0, [pc, #592]	; (800d57c <_printf_float+0x2e4>)
 800d32c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d330:	bf94      	ite	ls
 800d332:	4698      	movls	r8, r3
 800d334:	4680      	movhi	r8, r0
 800d336:	2303      	movs	r3, #3
 800d338:	6123      	str	r3, [r4, #16]
 800d33a:	9b05      	ldr	r3, [sp, #20]
 800d33c:	f023 0204 	bic.w	r2, r3, #4
 800d340:	6022      	str	r2, [r4, #0]
 800d342:	f04f 0900 	mov.w	r9, #0
 800d346:	9700      	str	r7, [sp, #0]
 800d348:	4633      	mov	r3, r6
 800d34a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d34c:	4621      	mov	r1, r4
 800d34e:	4628      	mov	r0, r5
 800d350:	f000 f9d8 	bl	800d704 <_printf_common>
 800d354:	3001      	adds	r0, #1
 800d356:	f040 8090 	bne.w	800d47a <_printf_float+0x1e2>
 800d35a:	f04f 30ff 	mov.w	r0, #4294967295
 800d35e:	b00d      	add	sp, #52	; 0x34
 800d360:	ecbd 8b02 	vpop	{d8}
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	4642      	mov	r2, r8
 800d36a:	464b      	mov	r3, r9
 800d36c:	4640      	mov	r0, r8
 800d36e:	4649      	mov	r1, r9
 800d370:	f7f3 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 800d374:	b140      	cbz	r0, 800d388 <_printf_float+0xf0>
 800d376:	464b      	mov	r3, r9
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bfbc      	itt	lt
 800d37c:	232d      	movlt	r3, #45	; 0x2d
 800d37e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d382:	487f      	ldr	r0, [pc, #508]	; (800d580 <_printf_float+0x2e8>)
 800d384:	4b7f      	ldr	r3, [pc, #508]	; (800d584 <_printf_float+0x2ec>)
 800d386:	e7d1      	b.n	800d32c <_printf_float+0x94>
 800d388:	6863      	ldr	r3, [r4, #4]
 800d38a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d38e:	9206      	str	r2, [sp, #24]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	d13f      	bne.n	800d414 <_printf_float+0x17c>
 800d394:	2306      	movs	r3, #6
 800d396:	6063      	str	r3, [r4, #4]
 800d398:	9b05      	ldr	r3, [sp, #20]
 800d39a:	6861      	ldr	r1, [r4, #4]
 800d39c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	9303      	str	r3, [sp, #12]
 800d3a4:	ab0a      	add	r3, sp, #40	; 0x28
 800d3a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3aa:	ab09      	add	r3, sp, #36	; 0x24
 800d3ac:	ec49 8b10 	vmov	d0, r8, r9
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	6022      	str	r2, [r4, #0]
 800d3b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f7ff fecd 	bl	800d158 <__cvt>
 800d3be:	9b06      	ldr	r3, [sp, #24]
 800d3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3c2:	2b47      	cmp	r3, #71	; 0x47
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	d108      	bne.n	800d3da <_printf_float+0x142>
 800d3c8:	1cc8      	adds	r0, r1, #3
 800d3ca:	db02      	blt.n	800d3d2 <_printf_float+0x13a>
 800d3cc:	6863      	ldr	r3, [r4, #4]
 800d3ce:	4299      	cmp	r1, r3
 800d3d0:	dd41      	ble.n	800d456 <_printf_float+0x1be>
 800d3d2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3d6:	fa5f fb8b 	uxtb.w	fp, fp
 800d3da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3de:	d820      	bhi.n	800d422 <_printf_float+0x18a>
 800d3e0:	3901      	subs	r1, #1
 800d3e2:	465a      	mov	r2, fp
 800d3e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d3ea:	f7ff ff17 	bl	800d21c <__exponent>
 800d3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3f0:	1813      	adds	r3, r2, r0
 800d3f2:	2a01      	cmp	r2, #1
 800d3f4:	4681      	mov	r9, r0
 800d3f6:	6123      	str	r3, [r4, #16]
 800d3f8:	dc02      	bgt.n	800d400 <_printf_float+0x168>
 800d3fa:	6822      	ldr	r2, [r4, #0]
 800d3fc:	07d2      	lsls	r2, r2, #31
 800d3fe:	d501      	bpl.n	800d404 <_printf_float+0x16c>
 800d400:	3301      	adds	r3, #1
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d09c      	beq.n	800d346 <_printf_float+0xae>
 800d40c:	232d      	movs	r3, #45	; 0x2d
 800d40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d412:	e798      	b.n	800d346 <_printf_float+0xae>
 800d414:	9a06      	ldr	r2, [sp, #24]
 800d416:	2a47      	cmp	r2, #71	; 0x47
 800d418:	d1be      	bne.n	800d398 <_printf_float+0x100>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1bc      	bne.n	800d398 <_printf_float+0x100>
 800d41e:	2301      	movs	r3, #1
 800d420:	e7b9      	b.n	800d396 <_printf_float+0xfe>
 800d422:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d426:	d118      	bne.n	800d45a <_printf_float+0x1c2>
 800d428:	2900      	cmp	r1, #0
 800d42a:	6863      	ldr	r3, [r4, #4]
 800d42c:	dd0b      	ble.n	800d446 <_printf_float+0x1ae>
 800d42e:	6121      	str	r1, [r4, #16]
 800d430:	b913      	cbnz	r3, 800d438 <_printf_float+0x1a0>
 800d432:	6822      	ldr	r2, [r4, #0]
 800d434:	07d0      	lsls	r0, r2, #31
 800d436:	d502      	bpl.n	800d43e <_printf_float+0x1a6>
 800d438:	3301      	adds	r3, #1
 800d43a:	440b      	add	r3, r1
 800d43c:	6123      	str	r3, [r4, #16]
 800d43e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d440:	f04f 0900 	mov.w	r9, #0
 800d444:	e7de      	b.n	800d404 <_printf_float+0x16c>
 800d446:	b913      	cbnz	r3, 800d44e <_printf_float+0x1b6>
 800d448:	6822      	ldr	r2, [r4, #0]
 800d44a:	07d2      	lsls	r2, r2, #31
 800d44c:	d501      	bpl.n	800d452 <_printf_float+0x1ba>
 800d44e:	3302      	adds	r3, #2
 800d450:	e7f4      	b.n	800d43c <_printf_float+0x1a4>
 800d452:	2301      	movs	r3, #1
 800d454:	e7f2      	b.n	800d43c <_printf_float+0x1a4>
 800d456:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d45c:	4299      	cmp	r1, r3
 800d45e:	db05      	blt.n	800d46c <_printf_float+0x1d4>
 800d460:	6823      	ldr	r3, [r4, #0]
 800d462:	6121      	str	r1, [r4, #16]
 800d464:	07d8      	lsls	r0, r3, #31
 800d466:	d5ea      	bpl.n	800d43e <_printf_float+0x1a6>
 800d468:	1c4b      	adds	r3, r1, #1
 800d46a:	e7e7      	b.n	800d43c <_printf_float+0x1a4>
 800d46c:	2900      	cmp	r1, #0
 800d46e:	bfd4      	ite	le
 800d470:	f1c1 0202 	rsble	r2, r1, #2
 800d474:	2201      	movgt	r2, #1
 800d476:	4413      	add	r3, r2
 800d478:	e7e0      	b.n	800d43c <_printf_float+0x1a4>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	055a      	lsls	r2, r3, #21
 800d47e:	d407      	bmi.n	800d490 <_printf_float+0x1f8>
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	4642      	mov	r2, r8
 800d484:	4631      	mov	r1, r6
 800d486:	4628      	mov	r0, r5
 800d488:	47b8      	blx	r7
 800d48a:	3001      	adds	r0, #1
 800d48c:	d12c      	bne.n	800d4e8 <_printf_float+0x250>
 800d48e:	e764      	b.n	800d35a <_printf_float+0xc2>
 800d490:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d494:	f240 80e0 	bls.w	800d658 <_printf_float+0x3c0>
 800d498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d49c:	2200      	movs	r2, #0
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f7f3 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d034      	beq.n	800d512 <_printf_float+0x27a>
 800d4a8:	4a37      	ldr	r2, [pc, #220]	; (800d588 <_printf_float+0x2f0>)
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	f43f af51 	beq.w	800d35a <_printf_float+0xc2>
 800d4b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	db02      	blt.n	800d4c6 <_printf_float+0x22e>
 800d4c0:	6823      	ldr	r3, [r4, #0]
 800d4c2:	07d8      	lsls	r0, r3, #31
 800d4c4:	d510      	bpl.n	800d4e8 <_printf_float+0x250>
 800d4c6:	ee18 3a10 	vmov	r3, s16
 800d4ca:	4652      	mov	r2, sl
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	f43f af41 	beq.w	800d35a <_printf_float+0xc2>
 800d4d8:	f04f 0800 	mov.w	r8, #0
 800d4dc:	f104 091a 	add.w	r9, r4, #26
 800d4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	4543      	cmp	r3, r8
 800d4e6:	dc09      	bgt.n	800d4fc <_printf_float+0x264>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	079b      	lsls	r3, r3, #30
 800d4ec:	f100 8105 	bmi.w	800d6fa <_printf_float+0x462>
 800d4f0:	68e0      	ldr	r0, [r4, #12]
 800d4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4f4:	4298      	cmp	r0, r3
 800d4f6:	bfb8      	it	lt
 800d4f8:	4618      	movlt	r0, r3
 800d4fa:	e730      	b.n	800d35e <_printf_float+0xc6>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	464a      	mov	r2, r9
 800d500:	4631      	mov	r1, r6
 800d502:	4628      	mov	r0, r5
 800d504:	47b8      	blx	r7
 800d506:	3001      	adds	r0, #1
 800d508:	f43f af27 	beq.w	800d35a <_printf_float+0xc2>
 800d50c:	f108 0801 	add.w	r8, r8, #1
 800d510:	e7e6      	b.n	800d4e0 <_printf_float+0x248>
 800d512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d514:	2b00      	cmp	r3, #0
 800d516:	dc39      	bgt.n	800d58c <_printf_float+0x2f4>
 800d518:	4a1b      	ldr	r2, [pc, #108]	; (800d588 <_printf_float+0x2f0>)
 800d51a:	2301      	movs	r3, #1
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	47b8      	blx	r7
 800d522:	3001      	adds	r0, #1
 800d524:	f43f af19 	beq.w	800d35a <_printf_float+0xc2>
 800d528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d52c:	4313      	orrs	r3, r2
 800d52e:	d102      	bne.n	800d536 <_printf_float+0x29e>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	07d9      	lsls	r1, r3, #31
 800d534:	d5d8      	bpl.n	800d4e8 <_printf_float+0x250>
 800d536:	ee18 3a10 	vmov	r3, s16
 800d53a:	4652      	mov	r2, sl
 800d53c:	4631      	mov	r1, r6
 800d53e:	4628      	mov	r0, r5
 800d540:	47b8      	blx	r7
 800d542:	3001      	adds	r0, #1
 800d544:	f43f af09 	beq.w	800d35a <_printf_float+0xc2>
 800d548:	f04f 0900 	mov.w	r9, #0
 800d54c:	f104 0a1a 	add.w	sl, r4, #26
 800d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d552:	425b      	negs	r3, r3
 800d554:	454b      	cmp	r3, r9
 800d556:	dc01      	bgt.n	800d55c <_printf_float+0x2c4>
 800d558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d55a:	e792      	b.n	800d482 <_printf_float+0x1ea>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4652      	mov	r2, sl
 800d560:	4631      	mov	r1, r6
 800d562:	4628      	mov	r0, r5
 800d564:	47b8      	blx	r7
 800d566:	3001      	adds	r0, #1
 800d568:	f43f aef7 	beq.w	800d35a <_printf_float+0xc2>
 800d56c:	f109 0901 	add.w	r9, r9, #1
 800d570:	e7ee      	b.n	800d550 <_printf_float+0x2b8>
 800d572:	bf00      	nop
 800d574:	7fefffff 	.word	0x7fefffff
 800d578:	08011ec8 	.word	0x08011ec8
 800d57c:	08011ecc 	.word	0x08011ecc
 800d580:	08011ed4 	.word	0x08011ed4
 800d584:	08011ed0 	.word	0x08011ed0
 800d588:	08011ed8 	.word	0x08011ed8
 800d58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d58e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d590:	429a      	cmp	r2, r3
 800d592:	bfa8      	it	ge
 800d594:	461a      	movge	r2, r3
 800d596:	2a00      	cmp	r2, #0
 800d598:	4691      	mov	r9, r2
 800d59a:	dc37      	bgt.n	800d60c <_printf_float+0x374>
 800d59c:	f04f 0b00 	mov.w	fp, #0
 800d5a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5a4:	f104 021a 	add.w	r2, r4, #26
 800d5a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	eba3 0309 	sub.w	r3, r3, r9
 800d5b0:	455b      	cmp	r3, fp
 800d5b2:	dc33      	bgt.n	800d61c <_printf_float+0x384>
 800d5b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	db3b      	blt.n	800d634 <_printf_float+0x39c>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	07da      	lsls	r2, r3, #31
 800d5c0:	d438      	bmi.n	800d634 <_printf_float+0x39c>
 800d5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5c4:	9b05      	ldr	r3, [sp, #20]
 800d5c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	eba2 0901 	sub.w	r9, r2, r1
 800d5ce:	4599      	cmp	r9, r3
 800d5d0:	bfa8      	it	ge
 800d5d2:	4699      	movge	r9, r3
 800d5d4:	f1b9 0f00 	cmp.w	r9, #0
 800d5d8:	dc35      	bgt.n	800d646 <_printf_float+0x3ae>
 800d5da:	f04f 0800 	mov.w	r8, #0
 800d5de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5e2:	f104 0a1a 	add.w	sl, r4, #26
 800d5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5ea:	1a9b      	subs	r3, r3, r2
 800d5ec:	eba3 0309 	sub.w	r3, r3, r9
 800d5f0:	4543      	cmp	r3, r8
 800d5f2:	f77f af79 	ble.w	800d4e8 <_printf_float+0x250>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	47b8      	blx	r7
 800d600:	3001      	adds	r0, #1
 800d602:	f43f aeaa 	beq.w	800d35a <_printf_float+0xc2>
 800d606:	f108 0801 	add.w	r8, r8, #1
 800d60a:	e7ec      	b.n	800d5e6 <_printf_float+0x34e>
 800d60c:	4613      	mov	r3, r2
 800d60e:	4631      	mov	r1, r6
 800d610:	4642      	mov	r2, r8
 800d612:	4628      	mov	r0, r5
 800d614:	47b8      	blx	r7
 800d616:	3001      	adds	r0, #1
 800d618:	d1c0      	bne.n	800d59c <_printf_float+0x304>
 800d61a:	e69e      	b.n	800d35a <_printf_float+0xc2>
 800d61c:	2301      	movs	r3, #1
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	9205      	str	r2, [sp, #20]
 800d624:	47b8      	blx	r7
 800d626:	3001      	adds	r0, #1
 800d628:	f43f ae97 	beq.w	800d35a <_printf_float+0xc2>
 800d62c:	9a05      	ldr	r2, [sp, #20]
 800d62e:	f10b 0b01 	add.w	fp, fp, #1
 800d632:	e7b9      	b.n	800d5a8 <_printf_float+0x310>
 800d634:	ee18 3a10 	vmov	r3, s16
 800d638:	4652      	mov	r2, sl
 800d63a:	4631      	mov	r1, r6
 800d63c:	4628      	mov	r0, r5
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	d1be      	bne.n	800d5c2 <_printf_float+0x32a>
 800d644:	e689      	b.n	800d35a <_printf_float+0xc2>
 800d646:	9a05      	ldr	r2, [sp, #20]
 800d648:	464b      	mov	r3, r9
 800d64a:	4442      	add	r2, r8
 800d64c:	4631      	mov	r1, r6
 800d64e:	4628      	mov	r0, r5
 800d650:	47b8      	blx	r7
 800d652:	3001      	adds	r0, #1
 800d654:	d1c1      	bne.n	800d5da <_printf_float+0x342>
 800d656:	e680      	b.n	800d35a <_printf_float+0xc2>
 800d658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d65a:	2a01      	cmp	r2, #1
 800d65c:	dc01      	bgt.n	800d662 <_printf_float+0x3ca>
 800d65e:	07db      	lsls	r3, r3, #31
 800d660:	d538      	bpl.n	800d6d4 <_printf_float+0x43c>
 800d662:	2301      	movs	r3, #1
 800d664:	4642      	mov	r2, r8
 800d666:	4631      	mov	r1, r6
 800d668:	4628      	mov	r0, r5
 800d66a:	47b8      	blx	r7
 800d66c:	3001      	adds	r0, #1
 800d66e:	f43f ae74 	beq.w	800d35a <_printf_float+0xc2>
 800d672:	ee18 3a10 	vmov	r3, s16
 800d676:	4652      	mov	r2, sl
 800d678:	4631      	mov	r1, r6
 800d67a:	4628      	mov	r0, r5
 800d67c:	47b8      	blx	r7
 800d67e:	3001      	adds	r0, #1
 800d680:	f43f ae6b 	beq.w	800d35a <_printf_float+0xc2>
 800d684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d688:	2200      	movs	r2, #0
 800d68a:	2300      	movs	r3, #0
 800d68c:	f7f3 fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d690:	b9d8      	cbnz	r0, 800d6ca <_printf_float+0x432>
 800d692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d694:	f108 0201 	add.w	r2, r8, #1
 800d698:	3b01      	subs	r3, #1
 800d69a:	4631      	mov	r1, r6
 800d69c:	4628      	mov	r0, r5
 800d69e:	47b8      	blx	r7
 800d6a0:	3001      	adds	r0, #1
 800d6a2:	d10e      	bne.n	800d6c2 <_printf_float+0x42a>
 800d6a4:	e659      	b.n	800d35a <_printf_float+0xc2>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	4652      	mov	r2, sl
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b8      	blx	r7
 800d6b0:	3001      	adds	r0, #1
 800d6b2:	f43f ae52 	beq.w	800d35a <_printf_float+0xc2>
 800d6b6:	f108 0801 	add.w	r8, r8, #1
 800d6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	4543      	cmp	r3, r8
 800d6c0:	dcf1      	bgt.n	800d6a6 <_printf_float+0x40e>
 800d6c2:	464b      	mov	r3, r9
 800d6c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6c8:	e6dc      	b.n	800d484 <_printf_float+0x1ec>
 800d6ca:	f04f 0800 	mov.w	r8, #0
 800d6ce:	f104 0a1a 	add.w	sl, r4, #26
 800d6d2:	e7f2      	b.n	800d6ba <_printf_float+0x422>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4642      	mov	r2, r8
 800d6d8:	e7df      	b.n	800d69a <_printf_float+0x402>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	464a      	mov	r2, r9
 800d6de:	4631      	mov	r1, r6
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	47b8      	blx	r7
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	f43f ae38 	beq.w	800d35a <_printf_float+0xc2>
 800d6ea:	f108 0801 	add.w	r8, r8, #1
 800d6ee:	68e3      	ldr	r3, [r4, #12]
 800d6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6f2:	1a5b      	subs	r3, r3, r1
 800d6f4:	4543      	cmp	r3, r8
 800d6f6:	dcf0      	bgt.n	800d6da <_printf_float+0x442>
 800d6f8:	e6fa      	b.n	800d4f0 <_printf_float+0x258>
 800d6fa:	f04f 0800 	mov.w	r8, #0
 800d6fe:	f104 0919 	add.w	r9, r4, #25
 800d702:	e7f4      	b.n	800d6ee <_printf_float+0x456>

0800d704 <_printf_common>:
 800d704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d708:	4616      	mov	r6, r2
 800d70a:	4699      	mov	r9, r3
 800d70c:	688a      	ldr	r2, [r1, #8]
 800d70e:	690b      	ldr	r3, [r1, #16]
 800d710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d714:	4293      	cmp	r3, r2
 800d716:	bfb8      	it	lt
 800d718:	4613      	movlt	r3, r2
 800d71a:	6033      	str	r3, [r6, #0]
 800d71c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d720:	4607      	mov	r7, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b10a      	cbz	r2, 800d72a <_printf_common+0x26>
 800d726:	3301      	adds	r3, #1
 800d728:	6033      	str	r3, [r6, #0]
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	0699      	lsls	r1, r3, #26
 800d72e:	bf42      	ittt	mi
 800d730:	6833      	ldrmi	r3, [r6, #0]
 800d732:	3302      	addmi	r3, #2
 800d734:	6033      	strmi	r3, [r6, #0]
 800d736:	6825      	ldr	r5, [r4, #0]
 800d738:	f015 0506 	ands.w	r5, r5, #6
 800d73c:	d106      	bne.n	800d74c <_printf_common+0x48>
 800d73e:	f104 0a19 	add.w	sl, r4, #25
 800d742:	68e3      	ldr	r3, [r4, #12]
 800d744:	6832      	ldr	r2, [r6, #0]
 800d746:	1a9b      	subs	r3, r3, r2
 800d748:	42ab      	cmp	r3, r5
 800d74a:	dc26      	bgt.n	800d79a <_printf_common+0x96>
 800d74c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d750:	1e13      	subs	r3, r2, #0
 800d752:	6822      	ldr	r2, [r4, #0]
 800d754:	bf18      	it	ne
 800d756:	2301      	movne	r3, #1
 800d758:	0692      	lsls	r2, r2, #26
 800d75a:	d42b      	bmi.n	800d7b4 <_printf_common+0xb0>
 800d75c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d760:	4649      	mov	r1, r9
 800d762:	4638      	mov	r0, r7
 800d764:	47c0      	blx	r8
 800d766:	3001      	adds	r0, #1
 800d768:	d01e      	beq.n	800d7a8 <_printf_common+0xa4>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	68e5      	ldr	r5, [r4, #12]
 800d76e:	6832      	ldr	r2, [r6, #0]
 800d770:	f003 0306 	and.w	r3, r3, #6
 800d774:	2b04      	cmp	r3, #4
 800d776:	bf08      	it	eq
 800d778:	1aad      	subeq	r5, r5, r2
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	6922      	ldr	r2, [r4, #16]
 800d77e:	bf0c      	ite	eq
 800d780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d784:	2500      	movne	r5, #0
 800d786:	4293      	cmp	r3, r2
 800d788:	bfc4      	itt	gt
 800d78a:	1a9b      	subgt	r3, r3, r2
 800d78c:	18ed      	addgt	r5, r5, r3
 800d78e:	2600      	movs	r6, #0
 800d790:	341a      	adds	r4, #26
 800d792:	42b5      	cmp	r5, r6
 800d794:	d11a      	bne.n	800d7cc <_printf_common+0xc8>
 800d796:	2000      	movs	r0, #0
 800d798:	e008      	b.n	800d7ac <_printf_common+0xa8>
 800d79a:	2301      	movs	r3, #1
 800d79c:	4652      	mov	r2, sl
 800d79e:	4649      	mov	r1, r9
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	47c0      	blx	r8
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	d103      	bne.n	800d7b0 <_printf_common+0xac>
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b0:	3501      	adds	r5, #1
 800d7b2:	e7c6      	b.n	800d742 <_printf_common+0x3e>
 800d7b4:	18e1      	adds	r1, r4, r3
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	2030      	movs	r0, #48	; 0x30
 800d7ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7be:	4422      	add	r2, r4
 800d7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7c8:	3302      	adds	r3, #2
 800d7ca:	e7c7      	b.n	800d75c <_printf_common+0x58>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	47c0      	blx	r8
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	d0e6      	beq.n	800d7a8 <_printf_common+0xa4>
 800d7da:	3601      	adds	r6, #1
 800d7dc:	e7d9      	b.n	800d792 <_printf_common+0x8e>
	...

0800d7e0 <_printf_i>:
 800d7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	4691      	mov	r9, r2
 800d7e8:	7e27      	ldrb	r7, [r4, #24]
 800d7ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7ec:	2f78      	cmp	r7, #120	; 0x78
 800d7ee:	4680      	mov	r8, r0
 800d7f0:	469a      	mov	sl, r3
 800d7f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7f6:	d807      	bhi.n	800d808 <_printf_i+0x28>
 800d7f8:	2f62      	cmp	r7, #98	; 0x62
 800d7fa:	d80a      	bhi.n	800d812 <_printf_i+0x32>
 800d7fc:	2f00      	cmp	r7, #0
 800d7fe:	f000 80d8 	beq.w	800d9b2 <_printf_i+0x1d2>
 800d802:	2f58      	cmp	r7, #88	; 0x58
 800d804:	f000 80a3 	beq.w	800d94e <_printf_i+0x16e>
 800d808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d80c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d810:	e03a      	b.n	800d888 <_printf_i+0xa8>
 800d812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d816:	2b15      	cmp	r3, #21
 800d818:	d8f6      	bhi.n	800d808 <_printf_i+0x28>
 800d81a:	a001      	add	r0, pc, #4	; (adr r0, 800d820 <_printf_i+0x40>)
 800d81c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d820:	0800d879 	.word	0x0800d879
 800d824:	0800d88d 	.word	0x0800d88d
 800d828:	0800d809 	.word	0x0800d809
 800d82c:	0800d809 	.word	0x0800d809
 800d830:	0800d809 	.word	0x0800d809
 800d834:	0800d809 	.word	0x0800d809
 800d838:	0800d88d 	.word	0x0800d88d
 800d83c:	0800d809 	.word	0x0800d809
 800d840:	0800d809 	.word	0x0800d809
 800d844:	0800d809 	.word	0x0800d809
 800d848:	0800d809 	.word	0x0800d809
 800d84c:	0800d999 	.word	0x0800d999
 800d850:	0800d8bd 	.word	0x0800d8bd
 800d854:	0800d97b 	.word	0x0800d97b
 800d858:	0800d809 	.word	0x0800d809
 800d85c:	0800d809 	.word	0x0800d809
 800d860:	0800d9bb 	.word	0x0800d9bb
 800d864:	0800d809 	.word	0x0800d809
 800d868:	0800d8bd 	.word	0x0800d8bd
 800d86c:	0800d809 	.word	0x0800d809
 800d870:	0800d809 	.word	0x0800d809
 800d874:	0800d983 	.word	0x0800d983
 800d878:	680b      	ldr	r3, [r1, #0]
 800d87a:	1d1a      	adds	r2, r3, #4
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	600a      	str	r2, [r1, #0]
 800d880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d888:	2301      	movs	r3, #1
 800d88a:	e0a3      	b.n	800d9d4 <_printf_i+0x1f4>
 800d88c:	6825      	ldr	r5, [r4, #0]
 800d88e:	6808      	ldr	r0, [r1, #0]
 800d890:	062e      	lsls	r6, r5, #24
 800d892:	f100 0304 	add.w	r3, r0, #4
 800d896:	d50a      	bpl.n	800d8ae <_printf_i+0xce>
 800d898:	6805      	ldr	r5, [r0, #0]
 800d89a:	600b      	str	r3, [r1, #0]
 800d89c:	2d00      	cmp	r5, #0
 800d89e:	da03      	bge.n	800d8a8 <_printf_i+0xc8>
 800d8a0:	232d      	movs	r3, #45	; 0x2d
 800d8a2:	426d      	negs	r5, r5
 800d8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8a8:	485e      	ldr	r0, [pc, #376]	; (800da24 <_printf_i+0x244>)
 800d8aa:	230a      	movs	r3, #10
 800d8ac:	e019      	b.n	800d8e2 <_printf_i+0x102>
 800d8ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d8b2:	6805      	ldr	r5, [r0, #0]
 800d8b4:	600b      	str	r3, [r1, #0]
 800d8b6:	bf18      	it	ne
 800d8b8:	b22d      	sxthne	r5, r5
 800d8ba:	e7ef      	b.n	800d89c <_printf_i+0xbc>
 800d8bc:	680b      	ldr	r3, [r1, #0]
 800d8be:	6825      	ldr	r5, [r4, #0]
 800d8c0:	1d18      	adds	r0, r3, #4
 800d8c2:	6008      	str	r0, [r1, #0]
 800d8c4:	0628      	lsls	r0, r5, #24
 800d8c6:	d501      	bpl.n	800d8cc <_printf_i+0xec>
 800d8c8:	681d      	ldr	r5, [r3, #0]
 800d8ca:	e002      	b.n	800d8d2 <_printf_i+0xf2>
 800d8cc:	0669      	lsls	r1, r5, #25
 800d8ce:	d5fb      	bpl.n	800d8c8 <_printf_i+0xe8>
 800d8d0:	881d      	ldrh	r5, [r3, #0]
 800d8d2:	4854      	ldr	r0, [pc, #336]	; (800da24 <_printf_i+0x244>)
 800d8d4:	2f6f      	cmp	r7, #111	; 0x6f
 800d8d6:	bf0c      	ite	eq
 800d8d8:	2308      	moveq	r3, #8
 800d8da:	230a      	movne	r3, #10
 800d8dc:	2100      	movs	r1, #0
 800d8de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8e2:	6866      	ldr	r6, [r4, #4]
 800d8e4:	60a6      	str	r6, [r4, #8]
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	bfa2      	ittt	ge
 800d8ea:	6821      	ldrge	r1, [r4, #0]
 800d8ec:	f021 0104 	bicge.w	r1, r1, #4
 800d8f0:	6021      	strge	r1, [r4, #0]
 800d8f2:	b90d      	cbnz	r5, 800d8f8 <_printf_i+0x118>
 800d8f4:	2e00      	cmp	r6, #0
 800d8f6:	d04d      	beq.n	800d994 <_printf_i+0x1b4>
 800d8f8:	4616      	mov	r6, r2
 800d8fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8fe:	fb03 5711 	mls	r7, r3, r1, r5
 800d902:	5dc7      	ldrb	r7, [r0, r7]
 800d904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d908:	462f      	mov	r7, r5
 800d90a:	42bb      	cmp	r3, r7
 800d90c:	460d      	mov	r5, r1
 800d90e:	d9f4      	bls.n	800d8fa <_printf_i+0x11a>
 800d910:	2b08      	cmp	r3, #8
 800d912:	d10b      	bne.n	800d92c <_printf_i+0x14c>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	07df      	lsls	r7, r3, #31
 800d918:	d508      	bpl.n	800d92c <_printf_i+0x14c>
 800d91a:	6923      	ldr	r3, [r4, #16]
 800d91c:	6861      	ldr	r1, [r4, #4]
 800d91e:	4299      	cmp	r1, r3
 800d920:	bfde      	ittt	le
 800d922:	2330      	movle	r3, #48	; 0x30
 800d924:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d92c:	1b92      	subs	r2, r2, r6
 800d92e:	6122      	str	r2, [r4, #16]
 800d930:	f8cd a000 	str.w	sl, [sp]
 800d934:	464b      	mov	r3, r9
 800d936:	aa03      	add	r2, sp, #12
 800d938:	4621      	mov	r1, r4
 800d93a:	4640      	mov	r0, r8
 800d93c:	f7ff fee2 	bl	800d704 <_printf_common>
 800d940:	3001      	adds	r0, #1
 800d942:	d14c      	bne.n	800d9de <_printf_i+0x1fe>
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	b004      	add	sp, #16
 800d94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94e:	4835      	ldr	r0, [pc, #212]	; (800da24 <_printf_i+0x244>)
 800d950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	680e      	ldr	r6, [r1, #0]
 800d958:	061f      	lsls	r7, r3, #24
 800d95a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d95e:	600e      	str	r6, [r1, #0]
 800d960:	d514      	bpl.n	800d98c <_printf_i+0x1ac>
 800d962:	07d9      	lsls	r1, r3, #31
 800d964:	bf44      	itt	mi
 800d966:	f043 0320 	orrmi.w	r3, r3, #32
 800d96a:	6023      	strmi	r3, [r4, #0]
 800d96c:	b91d      	cbnz	r5, 800d976 <_printf_i+0x196>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	f023 0320 	bic.w	r3, r3, #32
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	2310      	movs	r3, #16
 800d978:	e7b0      	b.n	800d8dc <_printf_i+0xfc>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	f043 0320 	orr.w	r3, r3, #32
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	2378      	movs	r3, #120	; 0x78
 800d984:	4828      	ldr	r0, [pc, #160]	; (800da28 <_printf_i+0x248>)
 800d986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d98a:	e7e3      	b.n	800d954 <_printf_i+0x174>
 800d98c:	065e      	lsls	r6, r3, #25
 800d98e:	bf48      	it	mi
 800d990:	b2ad      	uxthmi	r5, r5
 800d992:	e7e6      	b.n	800d962 <_printf_i+0x182>
 800d994:	4616      	mov	r6, r2
 800d996:	e7bb      	b.n	800d910 <_printf_i+0x130>
 800d998:	680b      	ldr	r3, [r1, #0]
 800d99a:	6826      	ldr	r6, [r4, #0]
 800d99c:	6960      	ldr	r0, [r4, #20]
 800d99e:	1d1d      	adds	r5, r3, #4
 800d9a0:	600d      	str	r5, [r1, #0]
 800d9a2:	0635      	lsls	r5, r6, #24
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	d501      	bpl.n	800d9ac <_printf_i+0x1cc>
 800d9a8:	6018      	str	r0, [r3, #0]
 800d9aa:	e002      	b.n	800d9b2 <_printf_i+0x1d2>
 800d9ac:	0671      	lsls	r1, r6, #25
 800d9ae:	d5fb      	bpl.n	800d9a8 <_printf_i+0x1c8>
 800d9b0:	8018      	strh	r0, [r3, #0]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	6123      	str	r3, [r4, #16]
 800d9b6:	4616      	mov	r6, r2
 800d9b8:	e7ba      	b.n	800d930 <_printf_i+0x150>
 800d9ba:	680b      	ldr	r3, [r1, #0]
 800d9bc:	1d1a      	adds	r2, r3, #4
 800d9be:	600a      	str	r2, [r1, #0]
 800d9c0:	681e      	ldr	r6, [r3, #0]
 800d9c2:	6862      	ldr	r2, [r4, #4]
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f7f2 fc0a 	bl	80001e0 <memchr>
 800d9cc:	b108      	cbz	r0, 800d9d2 <_printf_i+0x1f2>
 800d9ce:	1b80      	subs	r0, r0, r6
 800d9d0:	6060      	str	r0, [r4, #4]
 800d9d2:	6863      	ldr	r3, [r4, #4]
 800d9d4:	6123      	str	r3, [r4, #16]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9dc:	e7a8      	b.n	800d930 <_printf_i+0x150>
 800d9de:	6923      	ldr	r3, [r4, #16]
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	47d0      	blx	sl
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d0ab      	beq.n	800d944 <_printf_i+0x164>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	079b      	lsls	r3, r3, #30
 800d9f0:	d413      	bmi.n	800da1a <_printf_i+0x23a>
 800d9f2:	68e0      	ldr	r0, [r4, #12]
 800d9f4:	9b03      	ldr	r3, [sp, #12]
 800d9f6:	4298      	cmp	r0, r3
 800d9f8:	bfb8      	it	lt
 800d9fa:	4618      	movlt	r0, r3
 800d9fc:	e7a4      	b.n	800d948 <_printf_i+0x168>
 800d9fe:	2301      	movs	r3, #1
 800da00:	4632      	mov	r2, r6
 800da02:	4649      	mov	r1, r9
 800da04:	4640      	mov	r0, r8
 800da06:	47d0      	blx	sl
 800da08:	3001      	adds	r0, #1
 800da0a:	d09b      	beq.n	800d944 <_printf_i+0x164>
 800da0c:	3501      	adds	r5, #1
 800da0e:	68e3      	ldr	r3, [r4, #12]
 800da10:	9903      	ldr	r1, [sp, #12]
 800da12:	1a5b      	subs	r3, r3, r1
 800da14:	42ab      	cmp	r3, r5
 800da16:	dcf2      	bgt.n	800d9fe <_printf_i+0x21e>
 800da18:	e7eb      	b.n	800d9f2 <_printf_i+0x212>
 800da1a:	2500      	movs	r5, #0
 800da1c:	f104 0619 	add.w	r6, r4, #25
 800da20:	e7f5      	b.n	800da0e <_printf_i+0x22e>
 800da22:	bf00      	nop
 800da24:	08011eda 	.word	0x08011eda
 800da28:	08011eeb 	.word	0x08011eeb

0800da2c <iprintf>:
 800da2c:	b40f      	push	{r0, r1, r2, r3}
 800da2e:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <iprintf+0x2c>)
 800da30:	b513      	push	{r0, r1, r4, lr}
 800da32:	681c      	ldr	r4, [r3, #0]
 800da34:	b124      	cbz	r4, 800da40 <iprintf+0x14>
 800da36:	69a3      	ldr	r3, [r4, #24]
 800da38:	b913      	cbnz	r3, 800da40 <iprintf+0x14>
 800da3a:	4620      	mov	r0, r4
 800da3c:	f001 f8d6 	bl	800ebec <__sinit>
 800da40:	ab05      	add	r3, sp, #20
 800da42:	9a04      	ldr	r2, [sp, #16]
 800da44:	68a1      	ldr	r1, [r4, #8]
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	4620      	mov	r0, r4
 800da4a:	f001 fe51 	bl	800f6f0 <_vfiprintf_r>
 800da4e:	b002      	add	sp, #8
 800da50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da54:	b004      	add	sp, #16
 800da56:	4770      	bx	lr
 800da58:	20000010 	.word	0x20000010

0800da5c <_puts_r>:
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	460e      	mov	r6, r1
 800da60:	4605      	mov	r5, r0
 800da62:	b118      	cbz	r0, 800da6c <_puts_r+0x10>
 800da64:	6983      	ldr	r3, [r0, #24]
 800da66:	b90b      	cbnz	r3, 800da6c <_puts_r+0x10>
 800da68:	f001 f8c0 	bl	800ebec <__sinit>
 800da6c:	69ab      	ldr	r3, [r5, #24]
 800da6e:	68ac      	ldr	r4, [r5, #8]
 800da70:	b913      	cbnz	r3, 800da78 <_puts_r+0x1c>
 800da72:	4628      	mov	r0, r5
 800da74:	f001 f8ba 	bl	800ebec <__sinit>
 800da78:	4b2c      	ldr	r3, [pc, #176]	; (800db2c <_puts_r+0xd0>)
 800da7a:	429c      	cmp	r4, r3
 800da7c:	d120      	bne.n	800dac0 <_puts_r+0x64>
 800da7e:	686c      	ldr	r4, [r5, #4]
 800da80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da82:	07db      	lsls	r3, r3, #31
 800da84:	d405      	bmi.n	800da92 <_puts_r+0x36>
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	0598      	lsls	r0, r3, #22
 800da8a:	d402      	bmi.n	800da92 <_puts_r+0x36>
 800da8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da8e:	f001 f950 	bl	800ed32 <__retarget_lock_acquire_recursive>
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	0719      	lsls	r1, r3, #28
 800da96:	d51d      	bpl.n	800dad4 <_puts_r+0x78>
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	b1db      	cbz	r3, 800dad4 <_puts_r+0x78>
 800da9c:	3e01      	subs	r6, #1
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800daa4:	3b01      	subs	r3, #1
 800daa6:	60a3      	str	r3, [r4, #8]
 800daa8:	bb39      	cbnz	r1, 800dafa <_puts_r+0x9e>
 800daaa:	2b00      	cmp	r3, #0
 800daac:	da38      	bge.n	800db20 <_puts_r+0xc4>
 800daae:	4622      	mov	r2, r4
 800dab0:	210a      	movs	r1, #10
 800dab2:	4628      	mov	r0, r5
 800dab4:	f000 f848 	bl	800db48 <__swbuf_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	d011      	beq.n	800dae0 <_puts_r+0x84>
 800dabc:	250a      	movs	r5, #10
 800dabe:	e011      	b.n	800dae4 <_puts_r+0x88>
 800dac0:	4b1b      	ldr	r3, [pc, #108]	; (800db30 <_puts_r+0xd4>)
 800dac2:	429c      	cmp	r4, r3
 800dac4:	d101      	bne.n	800daca <_puts_r+0x6e>
 800dac6:	68ac      	ldr	r4, [r5, #8]
 800dac8:	e7da      	b.n	800da80 <_puts_r+0x24>
 800daca:	4b1a      	ldr	r3, [pc, #104]	; (800db34 <_puts_r+0xd8>)
 800dacc:	429c      	cmp	r4, r3
 800dace:	bf08      	it	eq
 800dad0:	68ec      	ldreq	r4, [r5, #12]
 800dad2:	e7d5      	b.n	800da80 <_puts_r+0x24>
 800dad4:	4621      	mov	r1, r4
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 f888 	bl	800dbec <__swsetup_r>
 800dadc:	2800      	cmp	r0, #0
 800dade:	d0dd      	beq.n	800da9c <_puts_r+0x40>
 800dae0:	f04f 35ff 	mov.w	r5, #4294967295
 800dae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dae6:	07da      	lsls	r2, r3, #31
 800dae8:	d405      	bmi.n	800daf6 <_puts_r+0x9a>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	059b      	lsls	r3, r3, #22
 800daee:	d402      	bmi.n	800daf6 <_puts_r+0x9a>
 800daf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daf2:	f001 f91f 	bl	800ed34 <__retarget_lock_release_recursive>
 800daf6:	4628      	mov	r0, r5
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	da04      	bge.n	800db08 <_puts_r+0xac>
 800dafe:	69a2      	ldr	r2, [r4, #24]
 800db00:	429a      	cmp	r2, r3
 800db02:	dc06      	bgt.n	800db12 <_puts_r+0xb6>
 800db04:	290a      	cmp	r1, #10
 800db06:	d004      	beq.n	800db12 <_puts_r+0xb6>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	6022      	str	r2, [r4, #0]
 800db0e:	7019      	strb	r1, [r3, #0]
 800db10:	e7c5      	b.n	800da9e <_puts_r+0x42>
 800db12:	4622      	mov	r2, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f000 f817 	bl	800db48 <__swbuf_r>
 800db1a:	3001      	adds	r0, #1
 800db1c:	d1bf      	bne.n	800da9e <_puts_r+0x42>
 800db1e:	e7df      	b.n	800dae0 <_puts_r+0x84>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	250a      	movs	r5, #10
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	6022      	str	r2, [r4, #0]
 800db28:	701d      	strb	r5, [r3, #0]
 800db2a:	e7db      	b.n	800dae4 <_puts_r+0x88>
 800db2c:	08011fb0 	.word	0x08011fb0
 800db30:	08011fd0 	.word	0x08011fd0
 800db34:	08011f90 	.word	0x08011f90

0800db38 <puts>:
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <puts+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f7ff bf8d 	b.w	800da5c <_puts_r>
 800db42:	bf00      	nop
 800db44:	20000010 	.word	0x20000010

0800db48 <__swbuf_r>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	460e      	mov	r6, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	4605      	mov	r5, r0
 800db50:	b118      	cbz	r0, 800db5a <__swbuf_r+0x12>
 800db52:	6983      	ldr	r3, [r0, #24]
 800db54:	b90b      	cbnz	r3, 800db5a <__swbuf_r+0x12>
 800db56:	f001 f849 	bl	800ebec <__sinit>
 800db5a:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <__swbuf_r+0x98>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	d12b      	bne.n	800dbb8 <__swbuf_r+0x70>
 800db60:	686c      	ldr	r4, [r5, #4]
 800db62:	69a3      	ldr	r3, [r4, #24]
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	071a      	lsls	r2, r3, #28
 800db6a:	d52f      	bpl.n	800dbcc <__swbuf_r+0x84>
 800db6c:	6923      	ldr	r3, [r4, #16]
 800db6e:	b36b      	cbz	r3, 800dbcc <__swbuf_r+0x84>
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	6820      	ldr	r0, [r4, #0]
 800db74:	1ac0      	subs	r0, r0, r3
 800db76:	6963      	ldr	r3, [r4, #20]
 800db78:	b2f6      	uxtb	r6, r6
 800db7a:	4283      	cmp	r3, r0
 800db7c:	4637      	mov	r7, r6
 800db7e:	dc04      	bgt.n	800db8a <__swbuf_r+0x42>
 800db80:	4621      	mov	r1, r4
 800db82:	4628      	mov	r0, r5
 800db84:	f000 ff9e 	bl	800eac4 <_fflush_r>
 800db88:	bb30      	cbnz	r0, 800dbd8 <__swbuf_r+0x90>
 800db8a:	68a3      	ldr	r3, [r4, #8]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	60a3      	str	r3, [r4, #8]
 800db90:	6823      	ldr	r3, [r4, #0]
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	6022      	str	r2, [r4, #0]
 800db96:	701e      	strb	r6, [r3, #0]
 800db98:	6963      	ldr	r3, [r4, #20]
 800db9a:	3001      	adds	r0, #1
 800db9c:	4283      	cmp	r3, r0
 800db9e:	d004      	beq.n	800dbaa <__swbuf_r+0x62>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	07db      	lsls	r3, r3, #31
 800dba4:	d506      	bpl.n	800dbb4 <__swbuf_r+0x6c>
 800dba6:	2e0a      	cmp	r6, #10
 800dba8:	d104      	bne.n	800dbb4 <__swbuf_r+0x6c>
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4628      	mov	r0, r5
 800dbae:	f000 ff89 	bl	800eac4 <_fflush_r>
 800dbb2:	b988      	cbnz	r0, 800dbd8 <__swbuf_r+0x90>
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <__swbuf_r+0x9c>)
 800dbba:	429c      	cmp	r4, r3
 800dbbc:	d101      	bne.n	800dbc2 <__swbuf_r+0x7a>
 800dbbe:	68ac      	ldr	r4, [r5, #8]
 800dbc0:	e7cf      	b.n	800db62 <__swbuf_r+0x1a>
 800dbc2:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <__swbuf_r+0xa0>)
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	bf08      	it	eq
 800dbc8:	68ec      	ldreq	r4, [r5, #12]
 800dbca:	e7ca      	b.n	800db62 <__swbuf_r+0x1a>
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f000 f80c 	bl	800dbec <__swsetup_r>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d0cb      	beq.n	800db70 <__swbuf_r+0x28>
 800dbd8:	f04f 37ff 	mov.w	r7, #4294967295
 800dbdc:	e7ea      	b.n	800dbb4 <__swbuf_r+0x6c>
 800dbde:	bf00      	nop
 800dbe0:	08011fb0 	.word	0x08011fb0
 800dbe4:	08011fd0 	.word	0x08011fd0
 800dbe8:	08011f90 	.word	0x08011f90

0800dbec <__swsetup_r>:
 800dbec:	4b32      	ldr	r3, [pc, #200]	; (800dcb8 <__swsetup_r+0xcc>)
 800dbee:	b570      	push	{r4, r5, r6, lr}
 800dbf0:	681d      	ldr	r5, [r3, #0]
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	b125      	cbz	r5, 800dc02 <__swsetup_r+0x16>
 800dbf8:	69ab      	ldr	r3, [r5, #24]
 800dbfa:	b913      	cbnz	r3, 800dc02 <__swsetup_r+0x16>
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	f000 fff5 	bl	800ebec <__sinit>
 800dc02:	4b2e      	ldr	r3, [pc, #184]	; (800dcbc <__swsetup_r+0xd0>)
 800dc04:	429c      	cmp	r4, r3
 800dc06:	d10f      	bne.n	800dc28 <__swsetup_r+0x3c>
 800dc08:	686c      	ldr	r4, [r5, #4]
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc10:	0719      	lsls	r1, r3, #28
 800dc12:	d42c      	bmi.n	800dc6e <__swsetup_r+0x82>
 800dc14:	06dd      	lsls	r5, r3, #27
 800dc16:	d411      	bmi.n	800dc3c <__swsetup_r+0x50>
 800dc18:	2309      	movs	r3, #9
 800dc1a:	6033      	str	r3, [r6, #0]
 800dc1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295
 800dc26:	e03e      	b.n	800dca6 <__swsetup_r+0xba>
 800dc28:	4b25      	ldr	r3, [pc, #148]	; (800dcc0 <__swsetup_r+0xd4>)
 800dc2a:	429c      	cmp	r4, r3
 800dc2c:	d101      	bne.n	800dc32 <__swsetup_r+0x46>
 800dc2e:	68ac      	ldr	r4, [r5, #8]
 800dc30:	e7eb      	b.n	800dc0a <__swsetup_r+0x1e>
 800dc32:	4b24      	ldr	r3, [pc, #144]	; (800dcc4 <__swsetup_r+0xd8>)
 800dc34:	429c      	cmp	r4, r3
 800dc36:	bf08      	it	eq
 800dc38:	68ec      	ldreq	r4, [r5, #12]
 800dc3a:	e7e6      	b.n	800dc0a <__swsetup_r+0x1e>
 800dc3c:	0758      	lsls	r0, r3, #29
 800dc3e:	d512      	bpl.n	800dc66 <__swsetup_r+0x7a>
 800dc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc42:	b141      	cbz	r1, 800dc56 <__swsetup_r+0x6a>
 800dc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc48:	4299      	cmp	r1, r3
 800dc4a:	d002      	beq.n	800dc52 <__swsetup_r+0x66>
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f001 fc7b 	bl	800f548 <_free_r>
 800dc52:	2300      	movs	r3, #0
 800dc54:	6363      	str	r3, [r4, #52]	; 0x34
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	6063      	str	r3, [r4, #4]
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	f043 0308 	orr.w	r3, r3, #8
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	b94b      	cbnz	r3, 800dc86 <__swsetup_r+0x9a>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc7c:	d003      	beq.n	800dc86 <__swsetup_r+0x9a>
 800dc7e:	4621      	mov	r1, r4
 800dc80:	4630      	mov	r0, r6
 800dc82:	f001 f87d 	bl	800ed80 <__smakebuf_r>
 800dc86:	89a0      	ldrh	r0, [r4, #12]
 800dc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc8c:	f010 0301 	ands.w	r3, r0, #1
 800dc90:	d00a      	beq.n	800dca8 <__swsetup_r+0xbc>
 800dc92:	2300      	movs	r3, #0
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	6963      	ldr	r3, [r4, #20]
 800dc98:	425b      	negs	r3, r3
 800dc9a:	61a3      	str	r3, [r4, #24]
 800dc9c:	6923      	ldr	r3, [r4, #16]
 800dc9e:	b943      	cbnz	r3, 800dcb2 <__swsetup_r+0xc6>
 800dca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dca4:	d1ba      	bne.n	800dc1c <__swsetup_r+0x30>
 800dca6:	bd70      	pop	{r4, r5, r6, pc}
 800dca8:	0781      	lsls	r1, r0, #30
 800dcaa:	bf58      	it	pl
 800dcac:	6963      	ldrpl	r3, [r4, #20]
 800dcae:	60a3      	str	r3, [r4, #8]
 800dcb0:	e7f4      	b.n	800dc9c <__swsetup_r+0xb0>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	e7f7      	b.n	800dca6 <__swsetup_r+0xba>
 800dcb6:	bf00      	nop
 800dcb8:	20000010 	.word	0x20000010
 800dcbc:	08011fb0 	.word	0x08011fb0
 800dcc0:	08011fd0 	.word	0x08011fd0
 800dcc4:	08011f90 	.word	0x08011f90

0800dcc8 <quorem>:
 800dcc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	6903      	ldr	r3, [r0, #16]
 800dcce:	690c      	ldr	r4, [r1, #16]
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	f2c0 8081 	blt.w	800ddda <quorem+0x112>
 800dcd8:	3c01      	subs	r4, #1
 800dcda:	f101 0814 	add.w	r8, r1, #20
 800dcde:	f100 0514 	add.w	r5, r0, #20
 800dce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dcf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dcfc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd00:	d331      	bcc.n	800dd66 <quorem+0x9e>
 800dd02:	f04f 0e00 	mov.w	lr, #0
 800dd06:	4640      	mov	r0, r8
 800dd08:	46ac      	mov	ip, r5
 800dd0a:	46f2      	mov	sl, lr
 800dd0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd10:	b293      	uxth	r3, r2
 800dd12:	fb06 e303 	mla	r3, r6, r3, lr
 800dd16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	ebaa 0303 	sub.w	r3, sl, r3
 800dd20:	0c12      	lsrs	r2, r2, #16
 800dd22:	f8dc a000 	ldr.w	sl, [ip]
 800dd26:	fb06 e202 	mla	r2, r6, r2, lr
 800dd2a:	fa13 f38a 	uxtah	r3, r3, sl
 800dd2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd32:	fa1f fa82 	uxth.w	sl, r2
 800dd36:	f8dc 2000 	ldr.w	r2, [ip]
 800dd3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dd3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd48:	4581      	cmp	r9, r0
 800dd4a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd52:	d2db      	bcs.n	800dd0c <quorem+0x44>
 800dd54:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd58:	b92b      	cbnz	r3, 800dd66 <quorem+0x9e>
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	3b04      	subs	r3, #4
 800dd5e:	429d      	cmp	r5, r3
 800dd60:	461a      	mov	r2, r3
 800dd62:	d32e      	bcc.n	800ddc2 <quorem+0xfa>
 800dd64:	613c      	str	r4, [r7, #16]
 800dd66:	4638      	mov	r0, r7
 800dd68:	f001 fade 	bl	800f328 <__mcmp>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	db24      	blt.n	800ddba <quorem+0xf2>
 800dd70:	3601      	adds	r6, #1
 800dd72:	4628      	mov	r0, r5
 800dd74:	f04f 0c00 	mov.w	ip, #0
 800dd78:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd7c:	f8d0 e000 	ldr.w	lr, [r0]
 800dd80:	b293      	uxth	r3, r2
 800dd82:	ebac 0303 	sub.w	r3, ip, r3
 800dd86:	0c12      	lsrs	r2, r2, #16
 800dd88:	fa13 f38e 	uxtah	r3, r3, lr
 800dd8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd9a:	45c1      	cmp	r9, r8
 800dd9c:	f840 3b04 	str.w	r3, [r0], #4
 800dda0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dda4:	d2e8      	bcs.n	800dd78 <quorem+0xb0>
 800dda6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddae:	b922      	cbnz	r2, 800ddba <quorem+0xf2>
 800ddb0:	3b04      	subs	r3, #4
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	d30a      	bcc.n	800ddce <quorem+0x106>
 800ddb8:	613c      	str	r4, [r7, #16]
 800ddba:	4630      	mov	r0, r6
 800ddbc:	b003      	add	sp, #12
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	6812      	ldr	r2, [r2, #0]
 800ddc4:	3b04      	subs	r3, #4
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	d1cc      	bne.n	800dd64 <quorem+0x9c>
 800ddca:	3c01      	subs	r4, #1
 800ddcc:	e7c7      	b.n	800dd5e <quorem+0x96>
 800ddce:	6812      	ldr	r2, [r2, #0]
 800ddd0:	3b04      	subs	r3, #4
 800ddd2:	2a00      	cmp	r2, #0
 800ddd4:	d1f0      	bne.n	800ddb8 <quorem+0xf0>
 800ddd6:	3c01      	subs	r4, #1
 800ddd8:	e7eb      	b.n	800ddb2 <quorem+0xea>
 800ddda:	2000      	movs	r0, #0
 800dddc:	e7ee      	b.n	800ddbc <quorem+0xf4>
	...

0800dde0 <_dtoa_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	ed2d 8b02 	vpush	{d8}
 800dde8:	ec57 6b10 	vmov	r6, r7, d0
 800ddec:	b095      	sub	sp, #84	; 0x54
 800ddee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddf4:	9105      	str	r1, [sp, #20]
 800ddf6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	9209      	str	r2, [sp, #36]	; 0x24
 800ddfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800de00:	b975      	cbnz	r5, 800de20 <_dtoa_r+0x40>
 800de02:	2010      	movs	r0, #16
 800de04:	f000 fffc 	bl	800ee00 <malloc>
 800de08:	4602      	mov	r2, r0
 800de0a:	6260      	str	r0, [r4, #36]	; 0x24
 800de0c:	b920      	cbnz	r0, 800de18 <_dtoa_r+0x38>
 800de0e:	4bb2      	ldr	r3, [pc, #712]	; (800e0d8 <_dtoa_r+0x2f8>)
 800de10:	21ea      	movs	r1, #234	; 0xea
 800de12:	48b2      	ldr	r0, [pc, #712]	; (800e0dc <_dtoa_r+0x2fc>)
 800de14:	f001 fe02 	bl	800fa1c <__assert_func>
 800de18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de1c:	6005      	str	r5, [r0, #0]
 800de1e:	60c5      	str	r5, [r0, #12]
 800de20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de22:	6819      	ldr	r1, [r3, #0]
 800de24:	b151      	cbz	r1, 800de3c <_dtoa_r+0x5c>
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	604a      	str	r2, [r1, #4]
 800de2a:	2301      	movs	r3, #1
 800de2c:	4093      	lsls	r3, r2
 800de2e:	608b      	str	r3, [r1, #8]
 800de30:	4620      	mov	r0, r4
 800de32:	f001 f83b 	bl	800eeac <_Bfree>
 800de36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	1e3b      	subs	r3, r7, #0
 800de3e:	bfb9      	ittee	lt
 800de40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de44:	9303      	strlt	r3, [sp, #12]
 800de46:	2300      	movge	r3, #0
 800de48:	f8c8 3000 	strge.w	r3, [r8]
 800de4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800de50:	4ba3      	ldr	r3, [pc, #652]	; (800e0e0 <_dtoa_r+0x300>)
 800de52:	bfbc      	itt	lt
 800de54:	2201      	movlt	r2, #1
 800de56:	f8c8 2000 	strlt.w	r2, [r8]
 800de5a:	ea33 0309 	bics.w	r3, r3, r9
 800de5e:	d11b      	bne.n	800de98 <_dtoa_r+0xb8>
 800de60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de62:	f242 730f 	movw	r3, #9999	; 0x270f
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de6c:	4333      	orrs	r3, r6
 800de6e:	f000 857a 	beq.w	800e966 <_dtoa_r+0xb86>
 800de72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de74:	b963      	cbnz	r3, 800de90 <_dtoa_r+0xb0>
 800de76:	4b9b      	ldr	r3, [pc, #620]	; (800e0e4 <_dtoa_r+0x304>)
 800de78:	e024      	b.n	800dec4 <_dtoa_r+0xe4>
 800de7a:	4b9b      	ldr	r3, [pc, #620]	; (800e0e8 <_dtoa_r+0x308>)
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	3308      	adds	r3, #8
 800de80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	9800      	ldr	r0, [sp, #0]
 800de86:	b015      	add	sp, #84	; 0x54
 800de88:	ecbd 8b02 	vpop	{d8}
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	4b94      	ldr	r3, [pc, #592]	; (800e0e4 <_dtoa_r+0x304>)
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	3303      	adds	r3, #3
 800de96:	e7f3      	b.n	800de80 <_dtoa_r+0xa0>
 800de98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de9c:	2200      	movs	r2, #0
 800de9e:	ec51 0b17 	vmov	r0, r1, d7
 800dea2:	2300      	movs	r3, #0
 800dea4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dea8:	f7f2 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800deac:	4680      	mov	r8, r0
 800deae:	b158      	cbz	r0, 800dec8 <_dtoa_r+0xe8>
 800deb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800deb2:	2301      	movs	r3, #1
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 8551 	beq.w	800e960 <_dtoa_r+0xb80>
 800debe:	488b      	ldr	r0, [pc, #556]	; (800e0ec <_dtoa_r+0x30c>)
 800dec0:	6018      	str	r0, [r3, #0]
 800dec2:	1e43      	subs	r3, r0, #1
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	e7dd      	b.n	800de84 <_dtoa_r+0xa4>
 800dec8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800decc:	aa12      	add	r2, sp, #72	; 0x48
 800dece:	a913      	add	r1, sp, #76	; 0x4c
 800ded0:	4620      	mov	r0, r4
 800ded2:	f001 facd 	bl	800f470 <__d2b>
 800ded6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800deda:	4683      	mov	fp, r0
 800dedc:	2d00      	cmp	r5, #0
 800dede:	d07c      	beq.n	800dfda <_dtoa_r+0x1fa>
 800dee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dee2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800deee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800def2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800def6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800defa:	4b7d      	ldr	r3, [pc, #500]	; (800e0f0 <_dtoa_r+0x310>)
 800defc:	2200      	movs	r2, #0
 800defe:	4630      	mov	r0, r6
 800df00:	4639      	mov	r1, r7
 800df02:	f7f2 f9c1 	bl	8000288 <__aeabi_dsub>
 800df06:	a36e      	add	r3, pc, #440	; (adr r3, 800e0c0 <_dtoa_r+0x2e0>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 fb74 	bl	80005f8 <__aeabi_dmul>
 800df10:	a36d      	add	r3, pc, #436	; (adr r3, 800e0c8 <_dtoa_r+0x2e8>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f7f2 f9b9 	bl	800028c <__adddf3>
 800df1a:	4606      	mov	r6, r0
 800df1c:	4628      	mov	r0, r5
 800df1e:	460f      	mov	r7, r1
 800df20:	f7f2 fb00 	bl	8000524 <__aeabi_i2d>
 800df24:	a36a      	add	r3, pc, #424	; (adr r3, 800e0d0 <_dtoa_r+0x2f0>)
 800df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2a:	f7f2 fb65 	bl	80005f8 <__aeabi_dmul>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4630      	mov	r0, r6
 800df34:	4639      	mov	r1, r7
 800df36:	f7f2 f9a9 	bl	800028c <__adddf3>
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	f7f2 fe0b 	bl	8000b58 <__aeabi_d2iz>
 800df42:	2200      	movs	r2, #0
 800df44:	4682      	mov	sl, r0
 800df46:	2300      	movs	r3, #0
 800df48:	4630      	mov	r0, r6
 800df4a:	4639      	mov	r1, r7
 800df4c:	f7f2 fdc6 	bl	8000adc <__aeabi_dcmplt>
 800df50:	b148      	cbz	r0, 800df66 <_dtoa_r+0x186>
 800df52:	4650      	mov	r0, sl
 800df54:	f7f2 fae6 	bl	8000524 <__aeabi_i2d>
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	f7f2 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800df60:	b908      	cbnz	r0, 800df66 <_dtoa_r+0x186>
 800df62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df66:	f1ba 0f16 	cmp.w	sl, #22
 800df6a:	d854      	bhi.n	800e016 <_dtoa_r+0x236>
 800df6c:	4b61      	ldr	r3, [pc, #388]	; (800e0f4 <_dtoa_r+0x314>)
 800df6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df7a:	f7f2 fdaf 	bl	8000adc <__aeabi_dcmplt>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d04b      	beq.n	800e01a <_dtoa_r+0x23a>
 800df82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df86:	2300      	movs	r3, #0
 800df88:	930e      	str	r3, [sp, #56]	; 0x38
 800df8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df8c:	1b5d      	subs	r5, r3, r5
 800df8e:	1e6b      	subs	r3, r5, #1
 800df90:	9304      	str	r3, [sp, #16]
 800df92:	bf43      	ittte	mi
 800df94:	2300      	movmi	r3, #0
 800df96:	f1c5 0801 	rsbmi	r8, r5, #1
 800df9a:	9304      	strmi	r3, [sp, #16]
 800df9c:	f04f 0800 	movpl.w	r8, #0
 800dfa0:	f1ba 0f00 	cmp.w	sl, #0
 800dfa4:	db3b      	blt.n	800e01e <_dtoa_r+0x23e>
 800dfa6:	9b04      	ldr	r3, [sp, #16]
 800dfa8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dfac:	4453      	add	r3, sl
 800dfae:	9304      	str	r3, [sp, #16]
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9306      	str	r3, [sp, #24]
 800dfb4:	9b05      	ldr	r3, [sp, #20]
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d869      	bhi.n	800e08e <_dtoa_r+0x2ae>
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	bfc4      	itt	gt
 800dfbe:	3b04      	subgt	r3, #4
 800dfc0:	9305      	strgt	r3, [sp, #20]
 800dfc2:	9b05      	ldr	r3, [sp, #20]
 800dfc4:	f1a3 0302 	sub.w	r3, r3, #2
 800dfc8:	bfcc      	ite	gt
 800dfca:	2500      	movgt	r5, #0
 800dfcc:	2501      	movle	r5, #1
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d869      	bhi.n	800e0a6 <_dtoa_r+0x2c6>
 800dfd2:	e8df f003 	tbb	[pc, r3]
 800dfd6:	4e2c      	.short	0x4e2c
 800dfd8:	5a4c      	.short	0x5a4c
 800dfda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dfde:	441d      	add	r5, r3
 800dfe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfe4:	2b20      	cmp	r3, #32
 800dfe6:	bfc1      	itttt	gt
 800dfe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dff0:	fa09 f303 	lslgt.w	r3, r9, r3
 800dff4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dff8:	bfda      	itte	le
 800dffa:	f1c3 0320 	rsble	r3, r3, #32
 800dffe:	fa06 f003 	lslle.w	r0, r6, r3
 800e002:	4318      	orrgt	r0, r3
 800e004:	f7f2 fa7e 	bl	8000504 <__aeabi_ui2d>
 800e008:	2301      	movs	r3, #1
 800e00a:	4606      	mov	r6, r0
 800e00c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e010:	3d01      	subs	r5, #1
 800e012:	9310      	str	r3, [sp, #64]	; 0x40
 800e014:	e771      	b.n	800defa <_dtoa_r+0x11a>
 800e016:	2301      	movs	r3, #1
 800e018:	e7b6      	b.n	800df88 <_dtoa_r+0x1a8>
 800e01a:	900e      	str	r0, [sp, #56]	; 0x38
 800e01c:	e7b5      	b.n	800df8a <_dtoa_r+0x1aa>
 800e01e:	f1ca 0300 	rsb	r3, sl, #0
 800e022:	9306      	str	r3, [sp, #24]
 800e024:	2300      	movs	r3, #0
 800e026:	eba8 080a 	sub.w	r8, r8, sl
 800e02a:	930d      	str	r3, [sp, #52]	; 0x34
 800e02c:	e7c2      	b.n	800dfb4 <_dtoa_r+0x1d4>
 800e02e:	2300      	movs	r3, #0
 800e030:	9308      	str	r3, [sp, #32]
 800e032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e034:	2b00      	cmp	r3, #0
 800e036:	dc39      	bgt.n	800e0ac <_dtoa_r+0x2cc>
 800e038:	f04f 0901 	mov.w	r9, #1
 800e03c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e040:	464b      	mov	r3, r9
 800e042:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e046:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e048:	2200      	movs	r2, #0
 800e04a:	6042      	str	r2, [r0, #4]
 800e04c:	2204      	movs	r2, #4
 800e04e:	f102 0614 	add.w	r6, r2, #20
 800e052:	429e      	cmp	r6, r3
 800e054:	6841      	ldr	r1, [r0, #4]
 800e056:	d92f      	bls.n	800e0b8 <_dtoa_r+0x2d8>
 800e058:	4620      	mov	r0, r4
 800e05a:	f000 fee7 	bl	800ee2c <_Balloc>
 800e05e:	9000      	str	r0, [sp, #0]
 800e060:	2800      	cmp	r0, #0
 800e062:	d14b      	bne.n	800e0fc <_dtoa_r+0x31c>
 800e064:	4b24      	ldr	r3, [pc, #144]	; (800e0f8 <_dtoa_r+0x318>)
 800e066:	4602      	mov	r2, r0
 800e068:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e06c:	e6d1      	b.n	800de12 <_dtoa_r+0x32>
 800e06e:	2301      	movs	r3, #1
 800e070:	e7de      	b.n	800e030 <_dtoa_r+0x250>
 800e072:	2300      	movs	r3, #0
 800e074:	9308      	str	r3, [sp, #32]
 800e076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e078:	eb0a 0903 	add.w	r9, sl, r3
 800e07c:	f109 0301 	add.w	r3, r9, #1
 800e080:	2b01      	cmp	r3, #1
 800e082:	9301      	str	r3, [sp, #4]
 800e084:	bfb8      	it	lt
 800e086:	2301      	movlt	r3, #1
 800e088:	e7dd      	b.n	800e046 <_dtoa_r+0x266>
 800e08a:	2301      	movs	r3, #1
 800e08c:	e7f2      	b.n	800e074 <_dtoa_r+0x294>
 800e08e:	2501      	movs	r5, #1
 800e090:	2300      	movs	r3, #0
 800e092:	9305      	str	r3, [sp, #20]
 800e094:	9508      	str	r5, [sp, #32]
 800e096:	f04f 39ff 	mov.w	r9, #4294967295
 800e09a:	2200      	movs	r2, #0
 800e09c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0a0:	2312      	movs	r3, #18
 800e0a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e0a4:	e7cf      	b.n	800e046 <_dtoa_r+0x266>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	9308      	str	r3, [sp, #32]
 800e0aa:	e7f4      	b.n	800e096 <_dtoa_r+0x2b6>
 800e0ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e0b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0b4:	464b      	mov	r3, r9
 800e0b6:	e7c6      	b.n	800e046 <_dtoa_r+0x266>
 800e0b8:	3101      	adds	r1, #1
 800e0ba:	6041      	str	r1, [r0, #4]
 800e0bc:	0052      	lsls	r2, r2, #1
 800e0be:	e7c6      	b.n	800e04e <_dtoa_r+0x26e>
 800e0c0:	636f4361 	.word	0x636f4361
 800e0c4:	3fd287a7 	.word	0x3fd287a7
 800e0c8:	8b60c8b3 	.word	0x8b60c8b3
 800e0cc:	3fc68a28 	.word	0x3fc68a28
 800e0d0:	509f79fb 	.word	0x509f79fb
 800e0d4:	3fd34413 	.word	0x3fd34413
 800e0d8:	08011f09 	.word	0x08011f09
 800e0dc:	08011f20 	.word	0x08011f20
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	08011f05 	.word	0x08011f05
 800e0e8:	08011efc 	.word	0x08011efc
 800e0ec:	08011ed9 	.word	0x08011ed9
 800e0f0:	3ff80000 	.word	0x3ff80000
 800e0f4:	08012078 	.word	0x08012078
 800e0f8:	08011f7f 	.word	0x08011f7f
 800e0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0fe:	9a00      	ldr	r2, [sp, #0]
 800e100:	601a      	str	r2, [r3, #0]
 800e102:	9b01      	ldr	r3, [sp, #4]
 800e104:	2b0e      	cmp	r3, #14
 800e106:	f200 80ad 	bhi.w	800e264 <_dtoa_r+0x484>
 800e10a:	2d00      	cmp	r5, #0
 800e10c:	f000 80aa 	beq.w	800e264 <_dtoa_r+0x484>
 800e110:	f1ba 0f00 	cmp.w	sl, #0
 800e114:	dd36      	ble.n	800e184 <_dtoa_r+0x3a4>
 800e116:	4ac3      	ldr	r2, [pc, #780]	; (800e424 <_dtoa_r+0x644>)
 800e118:	f00a 030f 	and.w	r3, sl, #15
 800e11c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e120:	ed93 7b00 	vldr	d7, [r3]
 800e124:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e128:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e12c:	eeb0 8a47 	vmov.f32	s16, s14
 800e130:	eef0 8a67 	vmov.f32	s17, s15
 800e134:	d016      	beq.n	800e164 <_dtoa_r+0x384>
 800e136:	4bbc      	ldr	r3, [pc, #752]	; (800e428 <_dtoa_r+0x648>)
 800e138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e13c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e140:	f7f2 fb84 	bl	800084c <__aeabi_ddiv>
 800e144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e148:	f007 070f 	and.w	r7, r7, #15
 800e14c:	2503      	movs	r5, #3
 800e14e:	4eb6      	ldr	r6, [pc, #728]	; (800e428 <_dtoa_r+0x648>)
 800e150:	b957      	cbnz	r7, 800e168 <_dtoa_r+0x388>
 800e152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e156:	ec53 2b18 	vmov	r2, r3, d8
 800e15a:	f7f2 fb77 	bl	800084c <__aeabi_ddiv>
 800e15e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e162:	e029      	b.n	800e1b8 <_dtoa_r+0x3d8>
 800e164:	2502      	movs	r5, #2
 800e166:	e7f2      	b.n	800e14e <_dtoa_r+0x36e>
 800e168:	07f9      	lsls	r1, r7, #31
 800e16a:	d508      	bpl.n	800e17e <_dtoa_r+0x39e>
 800e16c:	ec51 0b18 	vmov	r0, r1, d8
 800e170:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e174:	f7f2 fa40 	bl	80005f8 <__aeabi_dmul>
 800e178:	ec41 0b18 	vmov	d8, r0, r1
 800e17c:	3501      	adds	r5, #1
 800e17e:	107f      	asrs	r7, r7, #1
 800e180:	3608      	adds	r6, #8
 800e182:	e7e5      	b.n	800e150 <_dtoa_r+0x370>
 800e184:	f000 80a6 	beq.w	800e2d4 <_dtoa_r+0x4f4>
 800e188:	f1ca 0600 	rsb	r6, sl, #0
 800e18c:	4ba5      	ldr	r3, [pc, #660]	; (800e424 <_dtoa_r+0x644>)
 800e18e:	4fa6      	ldr	r7, [pc, #664]	; (800e428 <_dtoa_r+0x648>)
 800e190:	f006 020f 	and.w	r2, r6, #15
 800e194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1a0:	f7f2 fa2a 	bl	80005f8 <__aeabi_dmul>
 800e1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a8:	1136      	asrs	r6, r6, #4
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2502      	movs	r5, #2
 800e1ae:	2e00      	cmp	r6, #0
 800e1b0:	f040 8085 	bne.w	800e2be <_dtoa_r+0x4de>
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1d2      	bne.n	800e15e <_dtoa_r+0x37e>
 800e1b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 808c 	beq.w	800e2d8 <_dtoa_r+0x4f8>
 800e1c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1c4:	4b99      	ldr	r3, [pc, #612]	; (800e42c <_dtoa_r+0x64c>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	f7f2 fc86 	bl	8000adc <__aeabi_dcmplt>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f000 8081 	beq.w	800e2d8 <_dtoa_r+0x4f8>
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d07d      	beq.n	800e2d8 <_dtoa_r+0x4f8>
 800e1dc:	f1b9 0f00 	cmp.w	r9, #0
 800e1e0:	dd3c      	ble.n	800e25c <_dtoa_r+0x47c>
 800e1e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e1e6:	9307      	str	r3, [sp, #28]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4b91      	ldr	r3, [pc, #580]	; (800e430 <_dtoa_r+0x650>)
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	f7f2 fa02 	bl	80005f8 <__aeabi_dmul>
 800e1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f8:	3501      	adds	r5, #1
 800e1fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e1fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e202:	4628      	mov	r0, r5
 800e204:	f7f2 f98e 	bl	8000524 <__aeabi_i2d>
 800e208:	4632      	mov	r2, r6
 800e20a:	463b      	mov	r3, r7
 800e20c:	f7f2 f9f4 	bl	80005f8 <__aeabi_dmul>
 800e210:	4b88      	ldr	r3, [pc, #544]	; (800e434 <_dtoa_r+0x654>)
 800e212:	2200      	movs	r2, #0
 800e214:	f7f2 f83a 	bl	800028c <__adddf3>
 800e218:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e220:	9303      	str	r3, [sp, #12]
 800e222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e224:	2b00      	cmp	r3, #0
 800e226:	d15c      	bne.n	800e2e2 <_dtoa_r+0x502>
 800e228:	4b83      	ldr	r3, [pc, #524]	; (800e438 <_dtoa_r+0x658>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	4630      	mov	r0, r6
 800e22e:	4639      	mov	r1, r7
 800e230:	f7f2 f82a 	bl	8000288 <__aeabi_dsub>
 800e234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e238:	4606      	mov	r6, r0
 800e23a:	460f      	mov	r7, r1
 800e23c:	f7f2 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800e240:	2800      	cmp	r0, #0
 800e242:	f040 8296 	bne.w	800e772 <_dtoa_r+0x992>
 800e246:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e24a:	4630      	mov	r0, r6
 800e24c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e250:	4639      	mov	r1, r7
 800e252:	f7f2 fc43 	bl	8000adc <__aeabi_dcmplt>
 800e256:	2800      	cmp	r0, #0
 800e258:	f040 8288 	bne.w	800e76c <_dtoa_r+0x98c>
 800e25c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e266:	2b00      	cmp	r3, #0
 800e268:	f2c0 8158 	blt.w	800e51c <_dtoa_r+0x73c>
 800e26c:	f1ba 0f0e 	cmp.w	sl, #14
 800e270:	f300 8154 	bgt.w	800e51c <_dtoa_r+0x73c>
 800e274:	4b6b      	ldr	r3, [pc, #428]	; (800e424 <_dtoa_r+0x644>)
 800e276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e27a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e280:	2b00      	cmp	r3, #0
 800e282:	f280 80e3 	bge.w	800e44c <_dtoa_r+0x66c>
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f300 80df 	bgt.w	800e44c <_dtoa_r+0x66c>
 800e28e:	f040 826d 	bne.w	800e76c <_dtoa_r+0x98c>
 800e292:	4b69      	ldr	r3, [pc, #420]	; (800e438 <_dtoa_r+0x658>)
 800e294:	2200      	movs	r2, #0
 800e296:	4640      	mov	r0, r8
 800e298:	4649      	mov	r1, r9
 800e29a:	f7f2 f9ad 	bl	80005f8 <__aeabi_dmul>
 800e29e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2a2:	f7f2 fc2f 	bl	8000b04 <__aeabi_dcmpge>
 800e2a6:	9e01      	ldr	r6, [sp, #4]
 800e2a8:	4637      	mov	r7, r6
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	f040 8243 	bne.w	800e736 <_dtoa_r+0x956>
 800e2b0:	9d00      	ldr	r5, [sp, #0]
 800e2b2:	2331      	movs	r3, #49	; 0x31
 800e2b4:	f805 3b01 	strb.w	r3, [r5], #1
 800e2b8:	f10a 0a01 	add.w	sl, sl, #1
 800e2bc:	e23f      	b.n	800e73e <_dtoa_r+0x95e>
 800e2be:	07f2      	lsls	r2, r6, #31
 800e2c0:	d505      	bpl.n	800e2ce <_dtoa_r+0x4ee>
 800e2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	3501      	adds	r5, #1
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	1076      	asrs	r6, r6, #1
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	e76c      	b.n	800e1ae <_dtoa_r+0x3ce>
 800e2d4:	2502      	movs	r5, #2
 800e2d6:	e76f      	b.n	800e1b8 <_dtoa_r+0x3d8>
 800e2d8:	9b01      	ldr	r3, [sp, #4]
 800e2da:	f8cd a01c 	str.w	sl, [sp, #28]
 800e2de:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e0:	e78d      	b.n	800e1fe <_dtoa_r+0x41e>
 800e2e2:	9900      	ldr	r1, [sp, #0]
 800e2e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e2e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2e8:	4b4e      	ldr	r3, [pc, #312]	; (800e424 <_dtoa_r+0x644>)
 800e2ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2ee:	4401      	add	r1, r0
 800e2f0:	9102      	str	r1, [sp, #8]
 800e2f2:	9908      	ldr	r1, [sp, #32]
 800e2f4:	eeb0 8a47 	vmov.f32	s16, s14
 800e2f8:	eef0 8a67 	vmov.f32	s17, s15
 800e2fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e304:	2900      	cmp	r1, #0
 800e306:	d045      	beq.n	800e394 <_dtoa_r+0x5b4>
 800e308:	494c      	ldr	r1, [pc, #304]	; (800e43c <_dtoa_r+0x65c>)
 800e30a:	2000      	movs	r0, #0
 800e30c:	f7f2 fa9e 	bl	800084c <__aeabi_ddiv>
 800e310:	ec53 2b18 	vmov	r2, r3, d8
 800e314:	f7f1 ffb8 	bl	8000288 <__aeabi_dsub>
 800e318:	9d00      	ldr	r5, [sp, #0]
 800e31a:	ec41 0b18 	vmov	d8, r0, r1
 800e31e:	4639      	mov	r1, r7
 800e320:	4630      	mov	r0, r6
 800e322:	f7f2 fc19 	bl	8000b58 <__aeabi_d2iz>
 800e326:	900c      	str	r0, [sp, #48]	; 0x30
 800e328:	f7f2 f8fc 	bl	8000524 <__aeabi_i2d>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4630      	mov	r0, r6
 800e332:	4639      	mov	r1, r7
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e33a:	3330      	adds	r3, #48	; 0x30
 800e33c:	f805 3b01 	strb.w	r3, [r5], #1
 800e340:	ec53 2b18 	vmov	r2, r3, d8
 800e344:	4606      	mov	r6, r0
 800e346:	460f      	mov	r7, r1
 800e348:	f7f2 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d165      	bne.n	800e41c <_dtoa_r+0x63c>
 800e350:	4632      	mov	r2, r6
 800e352:	463b      	mov	r3, r7
 800e354:	4935      	ldr	r1, [pc, #212]	; (800e42c <_dtoa_r+0x64c>)
 800e356:	2000      	movs	r0, #0
 800e358:	f7f1 ff96 	bl	8000288 <__aeabi_dsub>
 800e35c:	ec53 2b18 	vmov	r2, r3, d8
 800e360:	f7f2 fbbc 	bl	8000adc <__aeabi_dcmplt>
 800e364:	2800      	cmp	r0, #0
 800e366:	f040 80b9 	bne.w	800e4dc <_dtoa_r+0x6fc>
 800e36a:	9b02      	ldr	r3, [sp, #8]
 800e36c:	429d      	cmp	r5, r3
 800e36e:	f43f af75 	beq.w	800e25c <_dtoa_r+0x47c>
 800e372:	4b2f      	ldr	r3, [pc, #188]	; (800e430 <_dtoa_r+0x650>)
 800e374:	ec51 0b18 	vmov	r0, r1, d8
 800e378:	2200      	movs	r2, #0
 800e37a:	f7f2 f93d 	bl	80005f8 <__aeabi_dmul>
 800e37e:	4b2c      	ldr	r3, [pc, #176]	; (800e430 <_dtoa_r+0x650>)
 800e380:	ec41 0b18 	vmov	d8, r0, r1
 800e384:	2200      	movs	r2, #0
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	f7f2 f935 	bl	80005f8 <__aeabi_dmul>
 800e38e:	4606      	mov	r6, r0
 800e390:	460f      	mov	r7, r1
 800e392:	e7c4      	b.n	800e31e <_dtoa_r+0x53e>
 800e394:	ec51 0b17 	vmov	r0, r1, d7
 800e398:	f7f2 f92e 	bl	80005f8 <__aeabi_dmul>
 800e39c:	9b02      	ldr	r3, [sp, #8]
 800e39e:	9d00      	ldr	r5, [sp, #0]
 800e3a0:	930c      	str	r3, [sp, #48]	; 0x30
 800e3a2:	ec41 0b18 	vmov	d8, r0, r1
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7f2 fbd5 	bl	8000b58 <__aeabi_d2iz>
 800e3ae:	9011      	str	r0, [sp, #68]	; 0x44
 800e3b0:	f7f2 f8b8 	bl	8000524 <__aeabi_i2d>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f1 ff64 	bl	8000288 <__aeabi_dsub>
 800e3c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3c2:	3330      	adds	r3, #48	; 0x30
 800e3c4:	f805 3b01 	strb.w	r3, [r5], #1
 800e3c8:	9b02      	ldr	r3, [sp, #8]
 800e3ca:	429d      	cmp	r5, r3
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	460f      	mov	r7, r1
 800e3d0:	f04f 0200 	mov.w	r2, #0
 800e3d4:	d134      	bne.n	800e440 <_dtoa_r+0x660>
 800e3d6:	4b19      	ldr	r3, [pc, #100]	; (800e43c <_dtoa_r+0x65c>)
 800e3d8:	ec51 0b18 	vmov	r0, r1, d8
 800e3dc:	f7f1 ff56 	bl	800028c <__adddf3>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f7f2 fb96 	bl	8000b18 <__aeabi_dcmpgt>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d175      	bne.n	800e4dc <_dtoa_r+0x6fc>
 800e3f0:	ec53 2b18 	vmov	r2, r3, d8
 800e3f4:	4911      	ldr	r1, [pc, #68]	; (800e43c <_dtoa_r+0x65c>)
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	f7f1 ff46 	bl	8000288 <__aeabi_dsub>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	f7f2 fb6a 	bl	8000adc <__aeabi_dcmplt>
 800e408:	2800      	cmp	r0, #0
 800e40a:	f43f af27 	beq.w	800e25c <_dtoa_r+0x47c>
 800e40e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e410:	1e6b      	subs	r3, r5, #1
 800e412:	930c      	str	r3, [sp, #48]	; 0x30
 800e414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e418:	2b30      	cmp	r3, #48	; 0x30
 800e41a:	d0f8      	beq.n	800e40e <_dtoa_r+0x62e>
 800e41c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e420:	e04a      	b.n	800e4b8 <_dtoa_r+0x6d8>
 800e422:	bf00      	nop
 800e424:	08012078 	.word	0x08012078
 800e428:	08012050 	.word	0x08012050
 800e42c:	3ff00000 	.word	0x3ff00000
 800e430:	40240000 	.word	0x40240000
 800e434:	401c0000 	.word	0x401c0000
 800e438:	40140000 	.word	0x40140000
 800e43c:	3fe00000 	.word	0x3fe00000
 800e440:	4baf      	ldr	r3, [pc, #700]	; (800e700 <_dtoa_r+0x920>)
 800e442:	f7f2 f8d9 	bl	80005f8 <__aeabi_dmul>
 800e446:	4606      	mov	r6, r0
 800e448:	460f      	mov	r7, r1
 800e44a:	e7ac      	b.n	800e3a6 <_dtoa_r+0x5c6>
 800e44c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e450:	9d00      	ldr	r5, [sp, #0]
 800e452:	4642      	mov	r2, r8
 800e454:	464b      	mov	r3, r9
 800e456:	4630      	mov	r0, r6
 800e458:	4639      	mov	r1, r7
 800e45a:	f7f2 f9f7 	bl	800084c <__aeabi_ddiv>
 800e45e:	f7f2 fb7b 	bl	8000b58 <__aeabi_d2iz>
 800e462:	9002      	str	r0, [sp, #8]
 800e464:	f7f2 f85e 	bl	8000524 <__aeabi_i2d>
 800e468:	4642      	mov	r2, r8
 800e46a:	464b      	mov	r3, r9
 800e46c:	f7f2 f8c4 	bl	80005f8 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4630      	mov	r0, r6
 800e476:	4639      	mov	r1, r7
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	9e02      	ldr	r6, [sp, #8]
 800e47e:	9f01      	ldr	r7, [sp, #4]
 800e480:	3630      	adds	r6, #48	; 0x30
 800e482:	f805 6b01 	strb.w	r6, [r5], #1
 800e486:	9e00      	ldr	r6, [sp, #0]
 800e488:	1bae      	subs	r6, r5, r6
 800e48a:	42b7      	cmp	r7, r6
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	d137      	bne.n	800e502 <_dtoa_r+0x722>
 800e492:	f7f1 fefb 	bl	800028c <__adddf3>
 800e496:	4642      	mov	r2, r8
 800e498:	464b      	mov	r3, r9
 800e49a:	4606      	mov	r6, r0
 800e49c:	460f      	mov	r7, r1
 800e49e:	f7f2 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 800e4a2:	b9c8      	cbnz	r0, 800e4d8 <_dtoa_r+0x6f8>
 800e4a4:	4642      	mov	r2, r8
 800e4a6:	464b      	mov	r3, r9
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4b0:	b110      	cbz	r0, 800e4b8 <_dtoa_r+0x6d8>
 800e4b2:	9b02      	ldr	r3, [sp, #8]
 800e4b4:	07d9      	lsls	r1, r3, #31
 800e4b6:	d40f      	bmi.n	800e4d8 <_dtoa_r+0x6f8>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	4659      	mov	r1, fp
 800e4bc:	f000 fcf6 	bl	800eeac <_Bfree>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	702b      	strb	r3, [r5, #0]
 800e4c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4c6:	f10a 0001 	add.w	r0, sl, #1
 800e4ca:	6018      	str	r0, [r3, #0]
 800e4cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f43f acd8 	beq.w	800de84 <_dtoa_r+0xa4>
 800e4d4:	601d      	str	r5, [r3, #0]
 800e4d6:	e4d5      	b.n	800de84 <_dtoa_r+0xa4>
 800e4d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800e4dc:	462b      	mov	r3, r5
 800e4de:	461d      	mov	r5, r3
 800e4e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4e4:	2a39      	cmp	r2, #57	; 0x39
 800e4e6:	d108      	bne.n	800e4fa <_dtoa_r+0x71a>
 800e4e8:	9a00      	ldr	r2, [sp, #0]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d1f7      	bne.n	800e4de <_dtoa_r+0x6fe>
 800e4ee:	9a07      	ldr	r2, [sp, #28]
 800e4f0:	9900      	ldr	r1, [sp, #0]
 800e4f2:	3201      	adds	r2, #1
 800e4f4:	9207      	str	r2, [sp, #28]
 800e4f6:	2230      	movs	r2, #48	; 0x30
 800e4f8:	700a      	strb	r2, [r1, #0]
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	3201      	adds	r2, #1
 800e4fe:	701a      	strb	r2, [r3, #0]
 800e500:	e78c      	b.n	800e41c <_dtoa_r+0x63c>
 800e502:	4b7f      	ldr	r3, [pc, #508]	; (800e700 <_dtoa_r+0x920>)
 800e504:	2200      	movs	r2, #0
 800e506:	f7f2 f877 	bl	80005f8 <__aeabi_dmul>
 800e50a:	2200      	movs	r2, #0
 800e50c:	2300      	movs	r3, #0
 800e50e:	4606      	mov	r6, r0
 800e510:	460f      	mov	r7, r1
 800e512:	f7f2 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e516:	2800      	cmp	r0, #0
 800e518:	d09b      	beq.n	800e452 <_dtoa_r+0x672>
 800e51a:	e7cd      	b.n	800e4b8 <_dtoa_r+0x6d8>
 800e51c:	9a08      	ldr	r2, [sp, #32]
 800e51e:	2a00      	cmp	r2, #0
 800e520:	f000 80c4 	beq.w	800e6ac <_dtoa_r+0x8cc>
 800e524:	9a05      	ldr	r2, [sp, #20]
 800e526:	2a01      	cmp	r2, #1
 800e528:	f300 80a8 	bgt.w	800e67c <_dtoa_r+0x89c>
 800e52c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e52e:	2a00      	cmp	r2, #0
 800e530:	f000 80a0 	beq.w	800e674 <_dtoa_r+0x894>
 800e534:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e538:	9e06      	ldr	r6, [sp, #24]
 800e53a:	4645      	mov	r5, r8
 800e53c:	9a04      	ldr	r2, [sp, #16]
 800e53e:	2101      	movs	r1, #1
 800e540:	441a      	add	r2, r3
 800e542:	4620      	mov	r0, r4
 800e544:	4498      	add	r8, r3
 800e546:	9204      	str	r2, [sp, #16]
 800e548:	f000 fd6c 	bl	800f024 <__i2b>
 800e54c:	4607      	mov	r7, r0
 800e54e:	2d00      	cmp	r5, #0
 800e550:	dd0b      	ble.n	800e56a <_dtoa_r+0x78a>
 800e552:	9b04      	ldr	r3, [sp, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	dd08      	ble.n	800e56a <_dtoa_r+0x78a>
 800e558:	42ab      	cmp	r3, r5
 800e55a:	9a04      	ldr	r2, [sp, #16]
 800e55c:	bfa8      	it	ge
 800e55e:	462b      	movge	r3, r5
 800e560:	eba8 0803 	sub.w	r8, r8, r3
 800e564:	1aed      	subs	r5, r5, r3
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	9b06      	ldr	r3, [sp, #24]
 800e56c:	b1fb      	cbz	r3, 800e5ae <_dtoa_r+0x7ce>
 800e56e:	9b08      	ldr	r3, [sp, #32]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 809f 	beq.w	800e6b4 <_dtoa_r+0x8d4>
 800e576:	2e00      	cmp	r6, #0
 800e578:	dd11      	ble.n	800e59e <_dtoa_r+0x7be>
 800e57a:	4639      	mov	r1, r7
 800e57c:	4632      	mov	r2, r6
 800e57e:	4620      	mov	r0, r4
 800e580:	f000 fe0c 	bl	800f19c <__pow5mult>
 800e584:	465a      	mov	r2, fp
 800e586:	4601      	mov	r1, r0
 800e588:	4607      	mov	r7, r0
 800e58a:	4620      	mov	r0, r4
 800e58c:	f000 fd60 	bl	800f050 <__multiply>
 800e590:	4659      	mov	r1, fp
 800e592:	9007      	str	r0, [sp, #28]
 800e594:	4620      	mov	r0, r4
 800e596:	f000 fc89 	bl	800eeac <_Bfree>
 800e59a:	9b07      	ldr	r3, [sp, #28]
 800e59c:	469b      	mov	fp, r3
 800e59e:	9b06      	ldr	r3, [sp, #24]
 800e5a0:	1b9a      	subs	r2, r3, r6
 800e5a2:	d004      	beq.n	800e5ae <_dtoa_r+0x7ce>
 800e5a4:	4659      	mov	r1, fp
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f000 fdf8 	bl	800f19c <__pow5mult>
 800e5ac:	4683      	mov	fp, r0
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 fd37 	bl	800f024 <__i2b>
 800e5b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	dd7c      	ble.n	800e6b8 <_dtoa_r+0x8d8>
 800e5be:	461a      	mov	r2, r3
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 fdea 	bl	800f19c <__pow5mult>
 800e5c8:	9b05      	ldr	r3, [sp, #20]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	dd76      	ble.n	800e6be <_dtoa_r+0x8de>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	9306      	str	r3, [sp, #24]
 800e5d4:	6933      	ldr	r3, [r6, #16]
 800e5d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e5da:	6918      	ldr	r0, [r3, #16]
 800e5dc:	f000 fcd2 	bl	800ef84 <__hi0bits>
 800e5e0:	f1c0 0020 	rsb	r0, r0, #32
 800e5e4:	9b04      	ldr	r3, [sp, #16]
 800e5e6:	4418      	add	r0, r3
 800e5e8:	f010 001f 	ands.w	r0, r0, #31
 800e5ec:	f000 8086 	beq.w	800e6fc <_dtoa_r+0x91c>
 800e5f0:	f1c0 0320 	rsb	r3, r0, #32
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	dd7f      	ble.n	800e6f8 <_dtoa_r+0x918>
 800e5f8:	f1c0 001c 	rsb	r0, r0, #28
 800e5fc:	9b04      	ldr	r3, [sp, #16]
 800e5fe:	4403      	add	r3, r0
 800e600:	4480      	add	r8, r0
 800e602:	4405      	add	r5, r0
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	f1b8 0f00 	cmp.w	r8, #0
 800e60a:	dd05      	ble.n	800e618 <_dtoa_r+0x838>
 800e60c:	4659      	mov	r1, fp
 800e60e:	4642      	mov	r2, r8
 800e610:	4620      	mov	r0, r4
 800e612:	f000 fe1d 	bl	800f250 <__lshift>
 800e616:	4683      	mov	fp, r0
 800e618:	9b04      	ldr	r3, [sp, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dd05      	ble.n	800e62a <_dtoa_r+0x84a>
 800e61e:	4631      	mov	r1, r6
 800e620:	461a      	mov	r2, r3
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fe14 	bl	800f250 <__lshift>
 800e628:	4606      	mov	r6, r0
 800e62a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d069      	beq.n	800e704 <_dtoa_r+0x924>
 800e630:	4631      	mov	r1, r6
 800e632:	4658      	mov	r0, fp
 800e634:	f000 fe78 	bl	800f328 <__mcmp>
 800e638:	2800      	cmp	r0, #0
 800e63a:	da63      	bge.n	800e704 <_dtoa_r+0x924>
 800e63c:	2300      	movs	r3, #0
 800e63e:	4659      	mov	r1, fp
 800e640:	220a      	movs	r2, #10
 800e642:	4620      	mov	r0, r4
 800e644:	f000 fc54 	bl	800eef0 <__multadd>
 800e648:	9b08      	ldr	r3, [sp, #32]
 800e64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e64e:	4683      	mov	fp, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 818f 	beq.w	800e974 <_dtoa_r+0xb94>
 800e656:	4639      	mov	r1, r7
 800e658:	2300      	movs	r3, #0
 800e65a:	220a      	movs	r2, #10
 800e65c:	4620      	mov	r0, r4
 800e65e:	f000 fc47 	bl	800eef0 <__multadd>
 800e662:	f1b9 0f00 	cmp.w	r9, #0
 800e666:	4607      	mov	r7, r0
 800e668:	f300 808e 	bgt.w	800e788 <_dtoa_r+0x9a8>
 800e66c:	9b05      	ldr	r3, [sp, #20]
 800e66e:	2b02      	cmp	r3, #2
 800e670:	dc50      	bgt.n	800e714 <_dtoa_r+0x934>
 800e672:	e089      	b.n	800e788 <_dtoa_r+0x9a8>
 800e674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e67a:	e75d      	b.n	800e538 <_dtoa_r+0x758>
 800e67c:	9b01      	ldr	r3, [sp, #4]
 800e67e:	1e5e      	subs	r6, r3, #1
 800e680:	9b06      	ldr	r3, [sp, #24]
 800e682:	42b3      	cmp	r3, r6
 800e684:	bfbf      	itttt	lt
 800e686:	9b06      	ldrlt	r3, [sp, #24]
 800e688:	9606      	strlt	r6, [sp, #24]
 800e68a:	1af2      	sublt	r2, r6, r3
 800e68c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e68e:	bfb6      	itet	lt
 800e690:	189b      	addlt	r3, r3, r2
 800e692:	1b9e      	subge	r6, r3, r6
 800e694:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	bfb8      	it	lt
 800e69a:	2600      	movlt	r6, #0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	bfb5      	itete	lt
 800e6a0:	eba8 0503 	sublt.w	r5, r8, r3
 800e6a4:	9b01      	ldrge	r3, [sp, #4]
 800e6a6:	2300      	movlt	r3, #0
 800e6a8:	4645      	movge	r5, r8
 800e6aa:	e747      	b.n	800e53c <_dtoa_r+0x75c>
 800e6ac:	9e06      	ldr	r6, [sp, #24]
 800e6ae:	9f08      	ldr	r7, [sp, #32]
 800e6b0:	4645      	mov	r5, r8
 800e6b2:	e74c      	b.n	800e54e <_dtoa_r+0x76e>
 800e6b4:	9a06      	ldr	r2, [sp, #24]
 800e6b6:	e775      	b.n	800e5a4 <_dtoa_r+0x7c4>
 800e6b8:	9b05      	ldr	r3, [sp, #20]
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	dc18      	bgt.n	800e6f0 <_dtoa_r+0x910>
 800e6be:	9b02      	ldr	r3, [sp, #8]
 800e6c0:	b9b3      	cbnz	r3, 800e6f0 <_dtoa_r+0x910>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6c8:	b9a3      	cbnz	r3, 800e6f4 <_dtoa_r+0x914>
 800e6ca:	9b03      	ldr	r3, [sp, #12]
 800e6cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6d0:	0d1b      	lsrs	r3, r3, #20
 800e6d2:	051b      	lsls	r3, r3, #20
 800e6d4:	b12b      	cbz	r3, 800e6e2 <_dtoa_r+0x902>
 800e6d6:	9b04      	ldr	r3, [sp, #16]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	9304      	str	r3, [sp, #16]
 800e6dc:	f108 0801 	add.w	r8, r8, #1
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	9306      	str	r3, [sp, #24]
 800e6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f47f af74 	bne.w	800e5d4 <_dtoa_r+0x7f4>
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	e779      	b.n	800e5e4 <_dtoa_r+0x804>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	e7f6      	b.n	800e6e2 <_dtoa_r+0x902>
 800e6f4:	9b02      	ldr	r3, [sp, #8]
 800e6f6:	e7f4      	b.n	800e6e2 <_dtoa_r+0x902>
 800e6f8:	d085      	beq.n	800e606 <_dtoa_r+0x826>
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	301c      	adds	r0, #28
 800e6fe:	e77d      	b.n	800e5fc <_dtoa_r+0x81c>
 800e700:	40240000 	.word	0x40240000
 800e704:	9b01      	ldr	r3, [sp, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	dc38      	bgt.n	800e77c <_dtoa_r+0x99c>
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	dd35      	ble.n	800e77c <_dtoa_r+0x99c>
 800e710:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e714:	f1b9 0f00 	cmp.w	r9, #0
 800e718:	d10d      	bne.n	800e736 <_dtoa_r+0x956>
 800e71a:	4631      	mov	r1, r6
 800e71c:	464b      	mov	r3, r9
 800e71e:	2205      	movs	r2, #5
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fbe5 	bl	800eef0 <__multadd>
 800e726:	4601      	mov	r1, r0
 800e728:	4606      	mov	r6, r0
 800e72a:	4658      	mov	r0, fp
 800e72c:	f000 fdfc 	bl	800f328 <__mcmp>
 800e730:	2800      	cmp	r0, #0
 800e732:	f73f adbd 	bgt.w	800e2b0 <_dtoa_r+0x4d0>
 800e736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e738:	9d00      	ldr	r5, [sp, #0]
 800e73a:	ea6f 0a03 	mvn.w	sl, r3
 800e73e:	f04f 0800 	mov.w	r8, #0
 800e742:	4631      	mov	r1, r6
 800e744:	4620      	mov	r0, r4
 800e746:	f000 fbb1 	bl	800eeac <_Bfree>
 800e74a:	2f00      	cmp	r7, #0
 800e74c:	f43f aeb4 	beq.w	800e4b8 <_dtoa_r+0x6d8>
 800e750:	f1b8 0f00 	cmp.w	r8, #0
 800e754:	d005      	beq.n	800e762 <_dtoa_r+0x982>
 800e756:	45b8      	cmp	r8, r7
 800e758:	d003      	beq.n	800e762 <_dtoa_r+0x982>
 800e75a:	4641      	mov	r1, r8
 800e75c:	4620      	mov	r0, r4
 800e75e:	f000 fba5 	bl	800eeac <_Bfree>
 800e762:	4639      	mov	r1, r7
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fba1 	bl	800eeac <_Bfree>
 800e76a:	e6a5      	b.n	800e4b8 <_dtoa_r+0x6d8>
 800e76c:	2600      	movs	r6, #0
 800e76e:	4637      	mov	r7, r6
 800e770:	e7e1      	b.n	800e736 <_dtoa_r+0x956>
 800e772:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e778:	4637      	mov	r7, r6
 800e77a:	e599      	b.n	800e2b0 <_dtoa_r+0x4d0>
 800e77c:	9b08      	ldr	r3, [sp, #32]
 800e77e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	f000 80fd 	beq.w	800e982 <_dtoa_r+0xba2>
 800e788:	2d00      	cmp	r5, #0
 800e78a:	dd05      	ble.n	800e798 <_dtoa_r+0x9b8>
 800e78c:	4639      	mov	r1, r7
 800e78e:	462a      	mov	r2, r5
 800e790:	4620      	mov	r0, r4
 800e792:	f000 fd5d 	bl	800f250 <__lshift>
 800e796:	4607      	mov	r7, r0
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d05c      	beq.n	800e858 <_dtoa_r+0xa78>
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f000 fb43 	bl	800ee2c <_Balloc>
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	b928      	cbnz	r0, 800e7b6 <_dtoa_r+0x9d6>
 800e7aa:	4b80      	ldr	r3, [pc, #512]	; (800e9ac <_dtoa_r+0xbcc>)
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e7b2:	f7ff bb2e 	b.w	800de12 <_dtoa_r+0x32>
 800e7b6:	693a      	ldr	r2, [r7, #16]
 800e7b8:	3202      	adds	r2, #2
 800e7ba:	0092      	lsls	r2, r2, #2
 800e7bc:	f107 010c 	add.w	r1, r7, #12
 800e7c0:	300c      	adds	r0, #12
 800e7c2:	f000 fb25 	bl	800ee10 <memcpy>
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f000 fd40 	bl	800f250 <__lshift>
 800e7d0:	9b00      	ldr	r3, [sp, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	9b00      	ldr	r3, [sp, #0]
 800e7d8:	444b      	add	r3, r9
 800e7da:	9307      	str	r3, [sp, #28]
 800e7dc:	9b02      	ldr	r3, [sp, #8]
 800e7de:	f003 0301 	and.w	r3, r3, #1
 800e7e2:	46b8      	mov	r8, r7
 800e7e4:	9306      	str	r3, [sp, #24]
 800e7e6:	4607      	mov	r7, r0
 800e7e8:	9b01      	ldr	r3, [sp, #4]
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	4658      	mov	r0, fp
 800e7f0:	9302      	str	r3, [sp, #8]
 800e7f2:	f7ff fa69 	bl	800dcc8 <quorem>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	3330      	adds	r3, #48	; 0x30
 800e7fa:	9004      	str	r0, [sp, #16]
 800e7fc:	4641      	mov	r1, r8
 800e7fe:	4658      	mov	r0, fp
 800e800:	9308      	str	r3, [sp, #32]
 800e802:	f000 fd91 	bl	800f328 <__mcmp>
 800e806:	463a      	mov	r2, r7
 800e808:	4681      	mov	r9, r0
 800e80a:	4631      	mov	r1, r6
 800e80c:	4620      	mov	r0, r4
 800e80e:	f000 fda7 	bl	800f360 <__mdiff>
 800e812:	68c2      	ldr	r2, [r0, #12]
 800e814:	9b08      	ldr	r3, [sp, #32]
 800e816:	4605      	mov	r5, r0
 800e818:	bb02      	cbnz	r2, 800e85c <_dtoa_r+0xa7c>
 800e81a:	4601      	mov	r1, r0
 800e81c:	4658      	mov	r0, fp
 800e81e:	f000 fd83 	bl	800f328 <__mcmp>
 800e822:	9b08      	ldr	r3, [sp, #32]
 800e824:	4602      	mov	r2, r0
 800e826:	4629      	mov	r1, r5
 800e828:	4620      	mov	r0, r4
 800e82a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e82e:	f000 fb3d 	bl	800eeac <_Bfree>
 800e832:	9b05      	ldr	r3, [sp, #20]
 800e834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e836:	9d01      	ldr	r5, [sp, #4]
 800e838:	ea43 0102 	orr.w	r1, r3, r2
 800e83c:	9b06      	ldr	r3, [sp, #24]
 800e83e:	430b      	orrs	r3, r1
 800e840:	9b08      	ldr	r3, [sp, #32]
 800e842:	d10d      	bne.n	800e860 <_dtoa_r+0xa80>
 800e844:	2b39      	cmp	r3, #57	; 0x39
 800e846:	d029      	beq.n	800e89c <_dtoa_r+0xabc>
 800e848:	f1b9 0f00 	cmp.w	r9, #0
 800e84c:	dd01      	ble.n	800e852 <_dtoa_r+0xa72>
 800e84e:	9b04      	ldr	r3, [sp, #16]
 800e850:	3331      	adds	r3, #49	; 0x31
 800e852:	9a02      	ldr	r2, [sp, #8]
 800e854:	7013      	strb	r3, [r2, #0]
 800e856:	e774      	b.n	800e742 <_dtoa_r+0x962>
 800e858:	4638      	mov	r0, r7
 800e85a:	e7b9      	b.n	800e7d0 <_dtoa_r+0x9f0>
 800e85c:	2201      	movs	r2, #1
 800e85e:	e7e2      	b.n	800e826 <_dtoa_r+0xa46>
 800e860:	f1b9 0f00 	cmp.w	r9, #0
 800e864:	db06      	blt.n	800e874 <_dtoa_r+0xa94>
 800e866:	9905      	ldr	r1, [sp, #20]
 800e868:	ea41 0909 	orr.w	r9, r1, r9
 800e86c:	9906      	ldr	r1, [sp, #24]
 800e86e:	ea59 0101 	orrs.w	r1, r9, r1
 800e872:	d120      	bne.n	800e8b6 <_dtoa_r+0xad6>
 800e874:	2a00      	cmp	r2, #0
 800e876:	ddec      	ble.n	800e852 <_dtoa_r+0xa72>
 800e878:	4659      	mov	r1, fp
 800e87a:	2201      	movs	r2, #1
 800e87c:	4620      	mov	r0, r4
 800e87e:	9301      	str	r3, [sp, #4]
 800e880:	f000 fce6 	bl	800f250 <__lshift>
 800e884:	4631      	mov	r1, r6
 800e886:	4683      	mov	fp, r0
 800e888:	f000 fd4e 	bl	800f328 <__mcmp>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	dc02      	bgt.n	800e898 <_dtoa_r+0xab8>
 800e892:	d1de      	bne.n	800e852 <_dtoa_r+0xa72>
 800e894:	07da      	lsls	r2, r3, #31
 800e896:	d5dc      	bpl.n	800e852 <_dtoa_r+0xa72>
 800e898:	2b39      	cmp	r3, #57	; 0x39
 800e89a:	d1d8      	bne.n	800e84e <_dtoa_r+0xa6e>
 800e89c:	9a02      	ldr	r2, [sp, #8]
 800e89e:	2339      	movs	r3, #57	; 0x39
 800e8a0:	7013      	strb	r3, [r2, #0]
 800e8a2:	462b      	mov	r3, r5
 800e8a4:	461d      	mov	r5, r3
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8ac:	2a39      	cmp	r2, #57	; 0x39
 800e8ae:	d050      	beq.n	800e952 <_dtoa_r+0xb72>
 800e8b0:	3201      	adds	r2, #1
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	e745      	b.n	800e742 <_dtoa_r+0x962>
 800e8b6:	2a00      	cmp	r2, #0
 800e8b8:	dd03      	ble.n	800e8c2 <_dtoa_r+0xae2>
 800e8ba:	2b39      	cmp	r3, #57	; 0x39
 800e8bc:	d0ee      	beq.n	800e89c <_dtoa_r+0xabc>
 800e8be:	3301      	adds	r3, #1
 800e8c0:	e7c7      	b.n	800e852 <_dtoa_r+0xa72>
 800e8c2:	9a01      	ldr	r2, [sp, #4]
 800e8c4:	9907      	ldr	r1, [sp, #28]
 800e8c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e8ca:	428a      	cmp	r2, r1
 800e8cc:	d02a      	beq.n	800e924 <_dtoa_r+0xb44>
 800e8ce:	4659      	mov	r1, fp
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	220a      	movs	r2, #10
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f000 fb0b 	bl	800eef0 <__multadd>
 800e8da:	45b8      	cmp	r8, r7
 800e8dc:	4683      	mov	fp, r0
 800e8de:	f04f 0300 	mov.w	r3, #0
 800e8e2:	f04f 020a 	mov.w	r2, #10
 800e8e6:	4641      	mov	r1, r8
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	d107      	bne.n	800e8fc <_dtoa_r+0xb1c>
 800e8ec:	f000 fb00 	bl	800eef0 <__multadd>
 800e8f0:	4680      	mov	r8, r0
 800e8f2:	4607      	mov	r7, r0
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	e775      	b.n	800e7e8 <_dtoa_r+0xa08>
 800e8fc:	f000 faf8 	bl	800eef0 <__multadd>
 800e900:	4639      	mov	r1, r7
 800e902:	4680      	mov	r8, r0
 800e904:	2300      	movs	r3, #0
 800e906:	220a      	movs	r2, #10
 800e908:	4620      	mov	r0, r4
 800e90a:	f000 faf1 	bl	800eef0 <__multadd>
 800e90e:	4607      	mov	r7, r0
 800e910:	e7f0      	b.n	800e8f4 <_dtoa_r+0xb14>
 800e912:	f1b9 0f00 	cmp.w	r9, #0
 800e916:	9a00      	ldr	r2, [sp, #0]
 800e918:	bfcc      	ite	gt
 800e91a:	464d      	movgt	r5, r9
 800e91c:	2501      	movle	r5, #1
 800e91e:	4415      	add	r5, r2
 800e920:	f04f 0800 	mov.w	r8, #0
 800e924:	4659      	mov	r1, fp
 800e926:	2201      	movs	r2, #1
 800e928:	4620      	mov	r0, r4
 800e92a:	9301      	str	r3, [sp, #4]
 800e92c:	f000 fc90 	bl	800f250 <__lshift>
 800e930:	4631      	mov	r1, r6
 800e932:	4683      	mov	fp, r0
 800e934:	f000 fcf8 	bl	800f328 <__mcmp>
 800e938:	2800      	cmp	r0, #0
 800e93a:	dcb2      	bgt.n	800e8a2 <_dtoa_r+0xac2>
 800e93c:	d102      	bne.n	800e944 <_dtoa_r+0xb64>
 800e93e:	9b01      	ldr	r3, [sp, #4]
 800e940:	07db      	lsls	r3, r3, #31
 800e942:	d4ae      	bmi.n	800e8a2 <_dtoa_r+0xac2>
 800e944:	462b      	mov	r3, r5
 800e946:	461d      	mov	r5, r3
 800e948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e94c:	2a30      	cmp	r2, #48	; 0x30
 800e94e:	d0fa      	beq.n	800e946 <_dtoa_r+0xb66>
 800e950:	e6f7      	b.n	800e742 <_dtoa_r+0x962>
 800e952:	9a00      	ldr	r2, [sp, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d1a5      	bne.n	800e8a4 <_dtoa_r+0xac4>
 800e958:	f10a 0a01 	add.w	sl, sl, #1
 800e95c:	2331      	movs	r3, #49	; 0x31
 800e95e:	e779      	b.n	800e854 <_dtoa_r+0xa74>
 800e960:	4b13      	ldr	r3, [pc, #76]	; (800e9b0 <_dtoa_r+0xbd0>)
 800e962:	f7ff baaf 	b.w	800dec4 <_dtoa_r+0xe4>
 800e966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f47f aa86 	bne.w	800de7a <_dtoa_r+0x9a>
 800e96e:	4b11      	ldr	r3, [pc, #68]	; (800e9b4 <_dtoa_r+0xbd4>)
 800e970:	f7ff baa8 	b.w	800dec4 <_dtoa_r+0xe4>
 800e974:	f1b9 0f00 	cmp.w	r9, #0
 800e978:	dc03      	bgt.n	800e982 <_dtoa_r+0xba2>
 800e97a:	9b05      	ldr	r3, [sp, #20]
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	f73f aec9 	bgt.w	800e714 <_dtoa_r+0x934>
 800e982:	9d00      	ldr	r5, [sp, #0]
 800e984:	4631      	mov	r1, r6
 800e986:	4658      	mov	r0, fp
 800e988:	f7ff f99e 	bl	800dcc8 <quorem>
 800e98c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e990:	f805 3b01 	strb.w	r3, [r5], #1
 800e994:	9a00      	ldr	r2, [sp, #0]
 800e996:	1aaa      	subs	r2, r5, r2
 800e998:	4591      	cmp	r9, r2
 800e99a:	ddba      	ble.n	800e912 <_dtoa_r+0xb32>
 800e99c:	4659      	mov	r1, fp
 800e99e:	2300      	movs	r3, #0
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 faa4 	bl	800eef0 <__multadd>
 800e9a8:	4683      	mov	fp, r0
 800e9aa:	e7eb      	b.n	800e984 <_dtoa_r+0xba4>
 800e9ac:	08011f7f 	.word	0x08011f7f
 800e9b0:	08011ed8 	.word	0x08011ed8
 800e9b4:	08011efc 	.word	0x08011efc

0800e9b8 <__sflush_r>:
 800e9b8:	898a      	ldrh	r2, [r1, #12]
 800e9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9be:	4605      	mov	r5, r0
 800e9c0:	0710      	lsls	r0, r2, #28
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	d458      	bmi.n	800ea78 <__sflush_r+0xc0>
 800e9c6:	684b      	ldr	r3, [r1, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dc05      	bgt.n	800e9d8 <__sflush_r+0x20>
 800e9cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dc02      	bgt.n	800e9d8 <__sflush_r+0x20>
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9da:	2e00      	cmp	r6, #0
 800e9dc:	d0f9      	beq.n	800e9d2 <__sflush_r+0x1a>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9e4:	682f      	ldr	r7, [r5, #0]
 800e9e6:	602b      	str	r3, [r5, #0]
 800e9e8:	d032      	beq.n	800ea50 <__sflush_r+0x98>
 800e9ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	075a      	lsls	r2, r3, #29
 800e9f0:	d505      	bpl.n	800e9fe <__sflush_r+0x46>
 800e9f2:	6863      	ldr	r3, [r4, #4]
 800e9f4:	1ac0      	subs	r0, r0, r3
 800e9f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9f8:	b10b      	cbz	r3, 800e9fe <__sflush_r+0x46>
 800e9fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9fc:	1ac0      	subs	r0, r0, r3
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4602      	mov	r2, r0
 800ea02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea04:	6a21      	ldr	r1, [r4, #32]
 800ea06:	4628      	mov	r0, r5
 800ea08:	47b0      	blx	r6
 800ea0a:	1c43      	adds	r3, r0, #1
 800ea0c:	89a3      	ldrh	r3, [r4, #12]
 800ea0e:	d106      	bne.n	800ea1e <__sflush_r+0x66>
 800ea10:	6829      	ldr	r1, [r5, #0]
 800ea12:	291d      	cmp	r1, #29
 800ea14:	d82c      	bhi.n	800ea70 <__sflush_r+0xb8>
 800ea16:	4a2a      	ldr	r2, [pc, #168]	; (800eac0 <__sflush_r+0x108>)
 800ea18:	40ca      	lsrs	r2, r1
 800ea1a:	07d6      	lsls	r6, r2, #31
 800ea1c:	d528      	bpl.n	800ea70 <__sflush_r+0xb8>
 800ea1e:	2200      	movs	r2, #0
 800ea20:	6062      	str	r2, [r4, #4]
 800ea22:	04d9      	lsls	r1, r3, #19
 800ea24:	6922      	ldr	r2, [r4, #16]
 800ea26:	6022      	str	r2, [r4, #0]
 800ea28:	d504      	bpl.n	800ea34 <__sflush_r+0x7c>
 800ea2a:	1c42      	adds	r2, r0, #1
 800ea2c:	d101      	bne.n	800ea32 <__sflush_r+0x7a>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	b903      	cbnz	r3, 800ea34 <__sflush_r+0x7c>
 800ea32:	6560      	str	r0, [r4, #84]	; 0x54
 800ea34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea36:	602f      	str	r7, [r5, #0]
 800ea38:	2900      	cmp	r1, #0
 800ea3a:	d0ca      	beq.n	800e9d2 <__sflush_r+0x1a>
 800ea3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea40:	4299      	cmp	r1, r3
 800ea42:	d002      	beq.n	800ea4a <__sflush_r+0x92>
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 fd7f 	bl	800f548 <_free_r>
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ea4e:	e7c1      	b.n	800e9d4 <__sflush_r+0x1c>
 800ea50:	6a21      	ldr	r1, [r4, #32]
 800ea52:	2301      	movs	r3, #1
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b0      	blx	r6
 800ea58:	1c41      	adds	r1, r0, #1
 800ea5a:	d1c7      	bne.n	800e9ec <__sflush_r+0x34>
 800ea5c:	682b      	ldr	r3, [r5, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0c4      	beq.n	800e9ec <__sflush_r+0x34>
 800ea62:	2b1d      	cmp	r3, #29
 800ea64:	d001      	beq.n	800ea6a <__sflush_r+0xb2>
 800ea66:	2b16      	cmp	r3, #22
 800ea68:	d101      	bne.n	800ea6e <__sflush_r+0xb6>
 800ea6a:	602f      	str	r7, [r5, #0]
 800ea6c:	e7b1      	b.n	800e9d2 <__sflush_r+0x1a>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	e7ad      	b.n	800e9d4 <__sflush_r+0x1c>
 800ea78:	690f      	ldr	r7, [r1, #16]
 800ea7a:	2f00      	cmp	r7, #0
 800ea7c:	d0a9      	beq.n	800e9d2 <__sflush_r+0x1a>
 800ea7e:	0793      	lsls	r3, r2, #30
 800ea80:	680e      	ldr	r6, [r1, #0]
 800ea82:	bf08      	it	eq
 800ea84:	694b      	ldreq	r3, [r1, #20]
 800ea86:	600f      	str	r7, [r1, #0]
 800ea88:	bf18      	it	ne
 800ea8a:	2300      	movne	r3, #0
 800ea8c:	eba6 0807 	sub.w	r8, r6, r7
 800ea90:	608b      	str	r3, [r1, #8]
 800ea92:	f1b8 0f00 	cmp.w	r8, #0
 800ea96:	dd9c      	ble.n	800e9d2 <__sflush_r+0x1a>
 800ea98:	6a21      	ldr	r1, [r4, #32]
 800ea9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea9c:	4643      	mov	r3, r8
 800ea9e:	463a      	mov	r2, r7
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	47b0      	blx	r6
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	dc06      	bgt.n	800eab6 <__sflush_r+0xfe>
 800eaa8:	89a3      	ldrh	r3, [r4, #12]
 800eaaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaae:	81a3      	strh	r3, [r4, #12]
 800eab0:	f04f 30ff 	mov.w	r0, #4294967295
 800eab4:	e78e      	b.n	800e9d4 <__sflush_r+0x1c>
 800eab6:	4407      	add	r7, r0
 800eab8:	eba8 0800 	sub.w	r8, r8, r0
 800eabc:	e7e9      	b.n	800ea92 <__sflush_r+0xda>
 800eabe:	bf00      	nop
 800eac0:	20400001 	.word	0x20400001

0800eac4 <_fflush_r>:
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	690b      	ldr	r3, [r1, #16]
 800eac8:	4605      	mov	r5, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	b913      	cbnz	r3, 800ead4 <_fflush_r+0x10>
 800eace:	2500      	movs	r5, #0
 800ead0:	4628      	mov	r0, r5
 800ead2:	bd38      	pop	{r3, r4, r5, pc}
 800ead4:	b118      	cbz	r0, 800eade <_fflush_r+0x1a>
 800ead6:	6983      	ldr	r3, [r0, #24]
 800ead8:	b90b      	cbnz	r3, 800eade <_fflush_r+0x1a>
 800eada:	f000 f887 	bl	800ebec <__sinit>
 800eade:	4b14      	ldr	r3, [pc, #80]	; (800eb30 <_fflush_r+0x6c>)
 800eae0:	429c      	cmp	r4, r3
 800eae2:	d11b      	bne.n	800eb1c <_fflush_r+0x58>
 800eae4:	686c      	ldr	r4, [r5, #4]
 800eae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d0ef      	beq.n	800eace <_fflush_r+0xa>
 800eaee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eaf0:	07d0      	lsls	r0, r2, #31
 800eaf2:	d404      	bmi.n	800eafe <_fflush_r+0x3a>
 800eaf4:	0599      	lsls	r1, r3, #22
 800eaf6:	d402      	bmi.n	800eafe <_fflush_r+0x3a>
 800eaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eafa:	f000 f91a 	bl	800ed32 <__retarget_lock_acquire_recursive>
 800eafe:	4628      	mov	r0, r5
 800eb00:	4621      	mov	r1, r4
 800eb02:	f7ff ff59 	bl	800e9b8 <__sflush_r>
 800eb06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb08:	07da      	lsls	r2, r3, #31
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	d4e0      	bmi.n	800ead0 <_fflush_r+0xc>
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	059b      	lsls	r3, r3, #22
 800eb12:	d4dd      	bmi.n	800ead0 <_fflush_r+0xc>
 800eb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb16:	f000 f90d 	bl	800ed34 <__retarget_lock_release_recursive>
 800eb1a:	e7d9      	b.n	800ead0 <_fflush_r+0xc>
 800eb1c:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <_fflush_r+0x70>)
 800eb1e:	429c      	cmp	r4, r3
 800eb20:	d101      	bne.n	800eb26 <_fflush_r+0x62>
 800eb22:	68ac      	ldr	r4, [r5, #8]
 800eb24:	e7df      	b.n	800eae6 <_fflush_r+0x22>
 800eb26:	4b04      	ldr	r3, [pc, #16]	; (800eb38 <_fflush_r+0x74>)
 800eb28:	429c      	cmp	r4, r3
 800eb2a:	bf08      	it	eq
 800eb2c:	68ec      	ldreq	r4, [r5, #12]
 800eb2e:	e7da      	b.n	800eae6 <_fflush_r+0x22>
 800eb30:	08011fb0 	.word	0x08011fb0
 800eb34:	08011fd0 	.word	0x08011fd0
 800eb38:	08011f90 	.word	0x08011f90

0800eb3c <std>:
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	b510      	push	{r4, lr}
 800eb40:	4604      	mov	r4, r0
 800eb42:	e9c0 3300 	strd	r3, r3, [r0]
 800eb46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb4a:	6083      	str	r3, [r0, #8]
 800eb4c:	8181      	strh	r1, [r0, #12]
 800eb4e:	6643      	str	r3, [r0, #100]	; 0x64
 800eb50:	81c2      	strh	r2, [r0, #14]
 800eb52:	6183      	str	r3, [r0, #24]
 800eb54:	4619      	mov	r1, r3
 800eb56:	2208      	movs	r2, #8
 800eb58:	305c      	adds	r0, #92	; 0x5c
 800eb5a:	f7fe faf5 	bl	800d148 <memset>
 800eb5e:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <std+0x38>)
 800eb60:	6263      	str	r3, [r4, #36]	; 0x24
 800eb62:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <std+0x3c>)
 800eb64:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb66:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <std+0x40>)
 800eb68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb6a:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <std+0x44>)
 800eb6c:	6224      	str	r4, [r4, #32]
 800eb6e:	6323      	str	r3, [r4, #48]	; 0x30
 800eb70:	bd10      	pop	{r4, pc}
 800eb72:	bf00      	nop
 800eb74:	0800f971 	.word	0x0800f971
 800eb78:	0800f993 	.word	0x0800f993
 800eb7c:	0800f9cb 	.word	0x0800f9cb
 800eb80:	0800f9ef 	.word	0x0800f9ef

0800eb84 <_cleanup_r>:
 800eb84:	4901      	ldr	r1, [pc, #4]	; (800eb8c <_cleanup_r+0x8>)
 800eb86:	f000 b8af 	b.w	800ece8 <_fwalk_reent>
 800eb8a:	bf00      	nop
 800eb8c:	0800eac5 	.word	0x0800eac5

0800eb90 <__sfmoreglue>:
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	1e4a      	subs	r2, r1, #1
 800eb94:	2568      	movs	r5, #104	; 0x68
 800eb96:	4355      	muls	r5, r2
 800eb98:	460e      	mov	r6, r1
 800eb9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb9e:	f000 fd23 	bl	800f5e8 <_malloc_r>
 800eba2:	4604      	mov	r4, r0
 800eba4:	b140      	cbz	r0, 800ebb8 <__sfmoreglue+0x28>
 800eba6:	2100      	movs	r1, #0
 800eba8:	e9c0 1600 	strd	r1, r6, [r0]
 800ebac:	300c      	adds	r0, #12
 800ebae:	60a0      	str	r0, [r4, #8]
 800ebb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ebb4:	f7fe fac8 	bl	800d148 <memset>
 800ebb8:	4620      	mov	r0, r4
 800ebba:	bd70      	pop	{r4, r5, r6, pc}

0800ebbc <__sfp_lock_acquire>:
 800ebbc:	4801      	ldr	r0, [pc, #4]	; (800ebc4 <__sfp_lock_acquire+0x8>)
 800ebbe:	f000 b8b8 	b.w	800ed32 <__retarget_lock_acquire_recursive>
 800ebc2:	bf00      	nop
 800ebc4:	200008c8 	.word	0x200008c8

0800ebc8 <__sfp_lock_release>:
 800ebc8:	4801      	ldr	r0, [pc, #4]	; (800ebd0 <__sfp_lock_release+0x8>)
 800ebca:	f000 b8b3 	b.w	800ed34 <__retarget_lock_release_recursive>
 800ebce:	bf00      	nop
 800ebd0:	200008c8 	.word	0x200008c8

0800ebd4 <__sinit_lock_acquire>:
 800ebd4:	4801      	ldr	r0, [pc, #4]	; (800ebdc <__sinit_lock_acquire+0x8>)
 800ebd6:	f000 b8ac 	b.w	800ed32 <__retarget_lock_acquire_recursive>
 800ebda:	bf00      	nop
 800ebdc:	200008c3 	.word	0x200008c3

0800ebe0 <__sinit_lock_release>:
 800ebe0:	4801      	ldr	r0, [pc, #4]	; (800ebe8 <__sinit_lock_release+0x8>)
 800ebe2:	f000 b8a7 	b.w	800ed34 <__retarget_lock_release_recursive>
 800ebe6:	bf00      	nop
 800ebe8:	200008c3 	.word	0x200008c3

0800ebec <__sinit>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	4604      	mov	r4, r0
 800ebf0:	f7ff fff0 	bl	800ebd4 <__sinit_lock_acquire>
 800ebf4:	69a3      	ldr	r3, [r4, #24]
 800ebf6:	b11b      	cbz	r3, 800ec00 <__sinit+0x14>
 800ebf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebfc:	f7ff bff0 	b.w	800ebe0 <__sinit_lock_release>
 800ec00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec04:	6523      	str	r3, [r4, #80]	; 0x50
 800ec06:	4b13      	ldr	r3, [pc, #76]	; (800ec54 <__sinit+0x68>)
 800ec08:	4a13      	ldr	r2, [pc, #76]	; (800ec58 <__sinit+0x6c>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec0e:	42a3      	cmp	r3, r4
 800ec10:	bf04      	itt	eq
 800ec12:	2301      	moveq	r3, #1
 800ec14:	61a3      	streq	r3, [r4, #24]
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 f820 	bl	800ec5c <__sfp>
 800ec1c:	6060      	str	r0, [r4, #4]
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 f81c 	bl	800ec5c <__sfp>
 800ec24:	60a0      	str	r0, [r4, #8]
 800ec26:	4620      	mov	r0, r4
 800ec28:	f000 f818 	bl	800ec5c <__sfp>
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	60e0      	str	r0, [r4, #12]
 800ec30:	2104      	movs	r1, #4
 800ec32:	6860      	ldr	r0, [r4, #4]
 800ec34:	f7ff ff82 	bl	800eb3c <std>
 800ec38:	68a0      	ldr	r0, [r4, #8]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	2109      	movs	r1, #9
 800ec3e:	f7ff ff7d 	bl	800eb3c <std>
 800ec42:	68e0      	ldr	r0, [r4, #12]
 800ec44:	2202      	movs	r2, #2
 800ec46:	2112      	movs	r1, #18
 800ec48:	f7ff ff78 	bl	800eb3c <std>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	61a3      	str	r3, [r4, #24]
 800ec50:	e7d2      	b.n	800ebf8 <__sinit+0xc>
 800ec52:	bf00      	nop
 800ec54:	08011ec4 	.word	0x08011ec4
 800ec58:	0800eb85 	.word	0x0800eb85

0800ec5c <__sfp>:
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5e:	4607      	mov	r7, r0
 800ec60:	f7ff ffac 	bl	800ebbc <__sfp_lock_acquire>
 800ec64:	4b1e      	ldr	r3, [pc, #120]	; (800ece0 <__sfp+0x84>)
 800ec66:	681e      	ldr	r6, [r3, #0]
 800ec68:	69b3      	ldr	r3, [r6, #24]
 800ec6a:	b913      	cbnz	r3, 800ec72 <__sfp+0x16>
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7ff ffbd 	bl	800ebec <__sinit>
 800ec72:	3648      	adds	r6, #72	; 0x48
 800ec74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	d503      	bpl.n	800ec84 <__sfp+0x28>
 800ec7c:	6833      	ldr	r3, [r6, #0]
 800ec7e:	b30b      	cbz	r3, 800ecc4 <__sfp+0x68>
 800ec80:	6836      	ldr	r6, [r6, #0]
 800ec82:	e7f7      	b.n	800ec74 <__sfp+0x18>
 800ec84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec88:	b9d5      	cbnz	r5, 800ecc0 <__sfp+0x64>
 800ec8a:	4b16      	ldr	r3, [pc, #88]	; (800ece4 <__sfp+0x88>)
 800ec8c:	60e3      	str	r3, [r4, #12]
 800ec8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec92:	6665      	str	r5, [r4, #100]	; 0x64
 800ec94:	f000 f84c 	bl	800ed30 <__retarget_lock_init_recursive>
 800ec98:	f7ff ff96 	bl	800ebc8 <__sfp_lock_release>
 800ec9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eca4:	6025      	str	r5, [r4, #0]
 800eca6:	61a5      	str	r5, [r4, #24]
 800eca8:	2208      	movs	r2, #8
 800ecaa:	4629      	mov	r1, r5
 800ecac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ecb0:	f7fe fa4a 	bl	800d148 <memset>
 800ecb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ecb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecc0:	3468      	adds	r4, #104	; 0x68
 800ecc2:	e7d9      	b.n	800ec78 <__sfp+0x1c>
 800ecc4:	2104      	movs	r1, #4
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	f7ff ff62 	bl	800eb90 <__sfmoreglue>
 800eccc:	4604      	mov	r4, r0
 800ecce:	6030      	str	r0, [r6, #0]
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1d5      	bne.n	800ec80 <__sfp+0x24>
 800ecd4:	f7ff ff78 	bl	800ebc8 <__sfp_lock_release>
 800ecd8:	230c      	movs	r3, #12
 800ecda:	603b      	str	r3, [r7, #0]
 800ecdc:	e7ee      	b.n	800ecbc <__sfp+0x60>
 800ecde:	bf00      	nop
 800ece0:	08011ec4 	.word	0x08011ec4
 800ece4:	ffff0001 	.word	0xffff0001

0800ece8 <_fwalk_reent>:
 800ece8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecec:	4606      	mov	r6, r0
 800ecee:	4688      	mov	r8, r1
 800ecf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecf4:	2700      	movs	r7, #0
 800ecf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecfa:	f1b9 0901 	subs.w	r9, r9, #1
 800ecfe:	d505      	bpl.n	800ed0c <_fwalk_reent+0x24>
 800ed00:	6824      	ldr	r4, [r4, #0]
 800ed02:	2c00      	cmp	r4, #0
 800ed04:	d1f7      	bne.n	800ecf6 <_fwalk_reent+0xe>
 800ed06:	4638      	mov	r0, r7
 800ed08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed0c:	89ab      	ldrh	r3, [r5, #12]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d907      	bls.n	800ed22 <_fwalk_reent+0x3a>
 800ed12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed16:	3301      	adds	r3, #1
 800ed18:	d003      	beq.n	800ed22 <_fwalk_reent+0x3a>
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	47c0      	blx	r8
 800ed20:	4307      	orrs	r7, r0
 800ed22:	3568      	adds	r5, #104	; 0x68
 800ed24:	e7e9      	b.n	800ecfa <_fwalk_reent+0x12>
	...

0800ed28 <_localeconv_r>:
 800ed28:	4800      	ldr	r0, [pc, #0]	; (800ed2c <_localeconv_r+0x4>)
 800ed2a:	4770      	bx	lr
 800ed2c:	20000164 	.word	0x20000164

0800ed30 <__retarget_lock_init_recursive>:
 800ed30:	4770      	bx	lr

0800ed32 <__retarget_lock_acquire_recursive>:
 800ed32:	4770      	bx	lr

0800ed34 <__retarget_lock_release_recursive>:
 800ed34:	4770      	bx	lr

0800ed36 <__swhatbuf_r>:
 800ed36:	b570      	push	{r4, r5, r6, lr}
 800ed38:	460e      	mov	r6, r1
 800ed3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed3e:	2900      	cmp	r1, #0
 800ed40:	b096      	sub	sp, #88	; 0x58
 800ed42:	4614      	mov	r4, r2
 800ed44:	461d      	mov	r5, r3
 800ed46:	da07      	bge.n	800ed58 <__swhatbuf_r+0x22>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	89b3      	ldrh	r3, [r6, #12]
 800ed4e:	061a      	lsls	r2, r3, #24
 800ed50:	d410      	bmi.n	800ed74 <__swhatbuf_r+0x3e>
 800ed52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed56:	e00e      	b.n	800ed76 <__swhatbuf_r+0x40>
 800ed58:	466a      	mov	r2, sp
 800ed5a:	f000 fe9f 	bl	800fa9c <_fstat_r>
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	dbf2      	blt.n	800ed48 <__swhatbuf_r+0x12>
 800ed62:	9a01      	ldr	r2, [sp, #4]
 800ed64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed6c:	425a      	negs	r2, r3
 800ed6e:	415a      	adcs	r2, r3
 800ed70:	602a      	str	r2, [r5, #0]
 800ed72:	e7ee      	b.n	800ed52 <__swhatbuf_r+0x1c>
 800ed74:	2340      	movs	r3, #64	; 0x40
 800ed76:	2000      	movs	r0, #0
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	b016      	add	sp, #88	; 0x58
 800ed7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed80 <__smakebuf_r>:
 800ed80:	898b      	ldrh	r3, [r1, #12]
 800ed82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed84:	079d      	lsls	r5, r3, #30
 800ed86:	4606      	mov	r6, r0
 800ed88:	460c      	mov	r4, r1
 800ed8a:	d507      	bpl.n	800ed9c <__smakebuf_r+0x1c>
 800ed8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	6123      	str	r3, [r4, #16]
 800ed94:	2301      	movs	r3, #1
 800ed96:	6163      	str	r3, [r4, #20]
 800ed98:	b002      	add	sp, #8
 800ed9a:	bd70      	pop	{r4, r5, r6, pc}
 800ed9c:	ab01      	add	r3, sp, #4
 800ed9e:	466a      	mov	r2, sp
 800eda0:	f7ff ffc9 	bl	800ed36 <__swhatbuf_r>
 800eda4:	9900      	ldr	r1, [sp, #0]
 800eda6:	4605      	mov	r5, r0
 800eda8:	4630      	mov	r0, r6
 800edaa:	f000 fc1d 	bl	800f5e8 <_malloc_r>
 800edae:	b948      	cbnz	r0, 800edc4 <__smakebuf_r+0x44>
 800edb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edb4:	059a      	lsls	r2, r3, #22
 800edb6:	d4ef      	bmi.n	800ed98 <__smakebuf_r+0x18>
 800edb8:	f023 0303 	bic.w	r3, r3, #3
 800edbc:	f043 0302 	orr.w	r3, r3, #2
 800edc0:	81a3      	strh	r3, [r4, #12]
 800edc2:	e7e3      	b.n	800ed8c <__smakebuf_r+0xc>
 800edc4:	4b0d      	ldr	r3, [pc, #52]	; (800edfc <__smakebuf_r+0x7c>)
 800edc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	6020      	str	r0, [r4, #0]
 800edcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd0:	81a3      	strh	r3, [r4, #12]
 800edd2:	9b00      	ldr	r3, [sp, #0]
 800edd4:	6163      	str	r3, [r4, #20]
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	6120      	str	r0, [r4, #16]
 800edda:	b15b      	cbz	r3, 800edf4 <__smakebuf_r+0x74>
 800eddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ede0:	4630      	mov	r0, r6
 800ede2:	f000 fe6d 	bl	800fac0 <_isatty_r>
 800ede6:	b128      	cbz	r0, 800edf4 <__smakebuf_r+0x74>
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	f023 0303 	bic.w	r3, r3, #3
 800edee:	f043 0301 	orr.w	r3, r3, #1
 800edf2:	81a3      	strh	r3, [r4, #12]
 800edf4:	89a0      	ldrh	r0, [r4, #12]
 800edf6:	4305      	orrs	r5, r0
 800edf8:	81a5      	strh	r5, [r4, #12]
 800edfa:	e7cd      	b.n	800ed98 <__smakebuf_r+0x18>
 800edfc:	0800eb85 	.word	0x0800eb85

0800ee00 <malloc>:
 800ee00:	4b02      	ldr	r3, [pc, #8]	; (800ee0c <malloc+0xc>)
 800ee02:	4601      	mov	r1, r0
 800ee04:	6818      	ldr	r0, [r3, #0]
 800ee06:	f000 bbef 	b.w	800f5e8 <_malloc_r>
 800ee0a:	bf00      	nop
 800ee0c:	20000010 	.word	0x20000010

0800ee10 <memcpy>:
 800ee10:	440a      	add	r2, r1
 800ee12:	4291      	cmp	r1, r2
 800ee14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee18:	d100      	bne.n	800ee1c <memcpy+0xc>
 800ee1a:	4770      	bx	lr
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee26:	4291      	cmp	r1, r2
 800ee28:	d1f9      	bne.n	800ee1e <memcpy+0xe>
 800ee2a:	bd10      	pop	{r4, pc}

0800ee2c <_Balloc>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	b976      	cbnz	r6, 800ee54 <_Balloc+0x28>
 800ee36:	2010      	movs	r0, #16
 800ee38:	f7ff ffe2 	bl	800ee00 <malloc>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ee40:	b920      	cbnz	r0, 800ee4c <_Balloc+0x20>
 800ee42:	4b18      	ldr	r3, [pc, #96]	; (800eea4 <_Balloc+0x78>)
 800ee44:	4818      	ldr	r0, [pc, #96]	; (800eea8 <_Balloc+0x7c>)
 800ee46:	2166      	movs	r1, #102	; 0x66
 800ee48:	f000 fde8 	bl	800fa1c <__assert_func>
 800ee4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee50:	6006      	str	r6, [r0, #0]
 800ee52:	60c6      	str	r6, [r0, #12]
 800ee54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee56:	68f3      	ldr	r3, [r6, #12]
 800ee58:	b183      	cbz	r3, 800ee7c <_Balloc+0x50>
 800ee5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee62:	b9b8      	cbnz	r0, 800ee94 <_Balloc+0x68>
 800ee64:	2101      	movs	r1, #1
 800ee66:	fa01 f605 	lsl.w	r6, r1, r5
 800ee6a:	1d72      	adds	r2, r6, #5
 800ee6c:	0092      	lsls	r2, r2, #2
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 fb5a 	bl	800f528 <_calloc_r>
 800ee74:	b160      	cbz	r0, 800ee90 <_Balloc+0x64>
 800ee76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee7a:	e00e      	b.n	800ee9a <_Balloc+0x6e>
 800ee7c:	2221      	movs	r2, #33	; 0x21
 800ee7e:	2104      	movs	r1, #4
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 fb51 	bl	800f528 <_calloc_r>
 800ee86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee88:	60f0      	str	r0, [r6, #12]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1e4      	bne.n	800ee5a <_Balloc+0x2e>
 800ee90:	2000      	movs	r0, #0
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	6802      	ldr	r2, [r0, #0]
 800ee96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eea0:	e7f7      	b.n	800ee92 <_Balloc+0x66>
 800eea2:	bf00      	nop
 800eea4:	08011f09 	.word	0x08011f09
 800eea8:	08011ff0 	.word	0x08011ff0

0800eeac <_Bfree>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	b976      	cbnz	r6, 800eed4 <_Bfree+0x28>
 800eeb6:	2010      	movs	r0, #16
 800eeb8:	f7ff ffa2 	bl	800ee00 <malloc>
 800eebc:	4602      	mov	r2, r0
 800eebe:	6268      	str	r0, [r5, #36]	; 0x24
 800eec0:	b920      	cbnz	r0, 800eecc <_Bfree+0x20>
 800eec2:	4b09      	ldr	r3, [pc, #36]	; (800eee8 <_Bfree+0x3c>)
 800eec4:	4809      	ldr	r0, [pc, #36]	; (800eeec <_Bfree+0x40>)
 800eec6:	218a      	movs	r1, #138	; 0x8a
 800eec8:	f000 fda8 	bl	800fa1c <__assert_func>
 800eecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eed0:	6006      	str	r6, [r0, #0]
 800eed2:	60c6      	str	r6, [r0, #12]
 800eed4:	b13c      	cbz	r4, 800eee6 <_Bfree+0x3a>
 800eed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eed8:	6862      	ldr	r2, [r4, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eee0:	6021      	str	r1, [r4, #0]
 800eee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	08011f09 	.word	0x08011f09
 800eeec:	08011ff0 	.word	0x08011ff0

0800eef0 <__multadd>:
 800eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	690e      	ldr	r6, [r1, #16]
 800eef6:	4607      	mov	r7, r0
 800eef8:	4698      	mov	r8, r3
 800eefa:	460c      	mov	r4, r1
 800eefc:	f101 0014 	add.w	r0, r1, #20
 800ef00:	2300      	movs	r3, #0
 800ef02:	6805      	ldr	r5, [r0, #0]
 800ef04:	b2a9      	uxth	r1, r5
 800ef06:	fb02 8101 	mla	r1, r2, r1, r8
 800ef0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ef0e:	0c2d      	lsrs	r5, r5, #16
 800ef10:	fb02 c505 	mla	r5, r2, r5, ip
 800ef14:	b289      	uxth	r1, r1
 800ef16:	3301      	adds	r3, #1
 800ef18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ef1c:	429e      	cmp	r6, r3
 800ef1e:	f840 1b04 	str.w	r1, [r0], #4
 800ef22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ef26:	dcec      	bgt.n	800ef02 <__multadd+0x12>
 800ef28:	f1b8 0f00 	cmp.w	r8, #0
 800ef2c:	d022      	beq.n	800ef74 <__multadd+0x84>
 800ef2e:	68a3      	ldr	r3, [r4, #8]
 800ef30:	42b3      	cmp	r3, r6
 800ef32:	dc19      	bgt.n	800ef68 <__multadd+0x78>
 800ef34:	6861      	ldr	r1, [r4, #4]
 800ef36:	4638      	mov	r0, r7
 800ef38:	3101      	adds	r1, #1
 800ef3a:	f7ff ff77 	bl	800ee2c <_Balloc>
 800ef3e:	4605      	mov	r5, r0
 800ef40:	b928      	cbnz	r0, 800ef4e <__multadd+0x5e>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b0d      	ldr	r3, [pc, #52]	; (800ef7c <__multadd+0x8c>)
 800ef46:	480e      	ldr	r0, [pc, #56]	; (800ef80 <__multadd+0x90>)
 800ef48:	21b5      	movs	r1, #181	; 0xb5
 800ef4a:	f000 fd67 	bl	800fa1c <__assert_func>
 800ef4e:	6922      	ldr	r2, [r4, #16]
 800ef50:	3202      	adds	r2, #2
 800ef52:	f104 010c 	add.w	r1, r4, #12
 800ef56:	0092      	lsls	r2, r2, #2
 800ef58:	300c      	adds	r0, #12
 800ef5a:	f7ff ff59 	bl	800ee10 <memcpy>
 800ef5e:	4621      	mov	r1, r4
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff ffa3 	bl	800eeac <_Bfree>
 800ef66:	462c      	mov	r4, r5
 800ef68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ef6c:	3601      	adds	r6, #1
 800ef6e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ef72:	6126      	str	r6, [r4, #16]
 800ef74:	4620      	mov	r0, r4
 800ef76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08011f7f 	.word	0x08011f7f
 800ef80:	08011ff0 	.word	0x08011ff0

0800ef84 <__hi0bits>:
 800ef84:	0c03      	lsrs	r3, r0, #16
 800ef86:	041b      	lsls	r3, r3, #16
 800ef88:	b9d3      	cbnz	r3, 800efc0 <__hi0bits+0x3c>
 800ef8a:	0400      	lsls	r0, r0, #16
 800ef8c:	2310      	movs	r3, #16
 800ef8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef92:	bf04      	itt	eq
 800ef94:	0200      	lsleq	r0, r0, #8
 800ef96:	3308      	addeq	r3, #8
 800ef98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef9c:	bf04      	itt	eq
 800ef9e:	0100      	lsleq	r0, r0, #4
 800efa0:	3304      	addeq	r3, #4
 800efa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800efa6:	bf04      	itt	eq
 800efa8:	0080      	lsleq	r0, r0, #2
 800efaa:	3302      	addeq	r3, #2
 800efac:	2800      	cmp	r0, #0
 800efae:	db05      	blt.n	800efbc <__hi0bits+0x38>
 800efb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800efb4:	f103 0301 	add.w	r3, r3, #1
 800efb8:	bf08      	it	eq
 800efba:	2320      	moveq	r3, #32
 800efbc:	4618      	mov	r0, r3
 800efbe:	4770      	bx	lr
 800efc0:	2300      	movs	r3, #0
 800efc2:	e7e4      	b.n	800ef8e <__hi0bits+0xa>

0800efc4 <__lo0bits>:
 800efc4:	6803      	ldr	r3, [r0, #0]
 800efc6:	f013 0207 	ands.w	r2, r3, #7
 800efca:	4601      	mov	r1, r0
 800efcc:	d00b      	beq.n	800efe6 <__lo0bits+0x22>
 800efce:	07da      	lsls	r2, r3, #31
 800efd0:	d424      	bmi.n	800f01c <__lo0bits+0x58>
 800efd2:	0798      	lsls	r0, r3, #30
 800efd4:	bf49      	itett	mi
 800efd6:	085b      	lsrmi	r3, r3, #1
 800efd8:	089b      	lsrpl	r3, r3, #2
 800efda:	2001      	movmi	r0, #1
 800efdc:	600b      	strmi	r3, [r1, #0]
 800efde:	bf5c      	itt	pl
 800efe0:	600b      	strpl	r3, [r1, #0]
 800efe2:	2002      	movpl	r0, #2
 800efe4:	4770      	bx	lr
 800efe6:	b298      	uxth	r0, r3
 800efe8:	b9b0      	cbnz	r0, 800f018 <__lo0bits+0x54>
 800efea:	0c1b      	lsrs	r3, r3, #16
 800efec:	2010      	movs	r0, #16
 800efee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eff2:	bf04      	itt	eq
 800eff4:	0a1b      	lsreq	r3, r3, #8
 800eff6:	3008      	addeq	r0, #8
 800eff8:	071a      	lsls	r2, r3, #28
 800effa:	bf04      	itt	eq
 800effc:	091b      	lsreq	r3, r3, #4
 800effe:	3004      	addeq	r0, #4
 800f000:	079a      	lsls	r2, r3, #30
 800f002:	bf04      	itt	eq
 800f004:	089b      	lsreq	r3, r3, #2
 800f006:	3002      	addeq	r0, #2
 800f008:	07da      	lsls	r2, r3, #31
 800f00a:	d403      	bmi.n	800f014 <__lo0bits+0x50>
 800f00c:	085b      	lsrs	r3, r3, #1
 800f00e:	f100 0001 	add.w	r0, r0, #1
 800f012:	d005      	beq.n	800f020 <__lo0bits+0x5c>
 800f014:	600b      	str	r3, [r1, #0]
 800f016:	4770      	bx	lr
 800f018:	4610      	mov	r0, r2
 800f01a:	e7e8      	b.n	800efee <__lo0bits+0x2a>
 800f01c:	2000      	movs	r0, #0
 800f01e:	4770      	bx	lr
 800f020:	2020      	movs	r0, #32
 800f022:	4770      	bx	lr

0800f024 <__i2b>:
 800f024:	b510      	push	{r4, lr}
 800f026:	460c      	mov	r4, r1
 800f028:	2101      	movs	r1, #1
 800f02a:	f7ff feff 	bl	800ee2c <_Balloc>
 800f02e:	4602      	mov	r2, r0
 800f030:	b928      	cbnz	r0, 800f03e <__i2b+0x1a>
 800f032:	4b05      	ldr	r3, [pc, #20]	; (800f048 <__i2b+0x24>)
 800f034:	4805      	ldr	r0, [pc, #20]	; (800f04c <__i2b+0x28>)
 800f036:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f03a:	f000 fcef 	bl	800fa1c <__assert_func>
 800f03e:	2301      	movs	r3, #1
 800f040:	6144      	str	r4, [r0, #20]
 800f042:	6103      	str	r3, [r0, #16]
 800f044:	bd10      	pop	{r4, pc}
 800f046:	bf00      	nop
 800f048:	08011f7f 	.word	0x08011f7f
 800f04c:	08011ff0 	.word	0x08011ff0

0800f050 <__multiply>:
 800f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f054:	4614      	mov	r4, r2
 800f056:	690a      	ldr	r2, [r1, #16]
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	bfb8      	it	lt
 800f05e:	460b      	movlt	r3, r1
 800f060:	460d      	mov	r5, r1
 800f062:	bfbc      	itt	lt
 800f064:	4625      	movlt	r5, r4
 800f066:	461c      	movlt	r4, r3
 800f068:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f06c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f070:	68ab      	ldr	r3, [r5, #8]
 800f072:	6869      	ldr	r1, [r5, #4]
 800f074:	eb0a 0709 	add.w	r7, sl, r9
 800f078:	42bb      	cmp	r3, r7
 800f07a:	b085      	sub	sp, #20
 800f07c:	bfb8      	it	lt
 800f07e:	3101      	addlt	r1, #1
 800f080:	f7ff fed4 	bl	800ee2c <_Balloc>
 800f084:	b930      	cbnz	r0, 800f094 <__multiply+0x44>
 800f086:	4602      	mov	r2, r0
 800f088:	4b42      	ldr	r3, [pc, #264]	; (800f194 <__multiply+0x144>)
 800f08a:	4843      	ldr	r0, [pc, #268]	; (800f198 <__multiply+0x148>)
 800f08c:	f240 115d 	movw	r1, #349	; 0x15d
 800f090:	f000 fcc4 	bl	800fa1c <__assert_func>
 800f094:	f100 0614 	add.w	r6, r0, #20
 800f098:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f09c:	4633      	mov	r3, r6
 800f09e:	2200      	movs	r2, #0
 800f0a0:	4543      	cmp	r3, r8
 800f0a2:	d31e      	bcc.n	800f0e2 <__multiply+0x92>
 800f0a4:	f105 0c14 	add.w	ip, r5, #20
 800f0a8:	f104 0314 	add.w	r3, r4, #20
 800f0ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f0b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f0b4:	9202      	str	r2, [sp, #8]
 800f0b6:	ebac 0205 	sub.w	r2, ip, r5
 800f0ba:	3a15      	subs	r2, #21
 800f0bc:	f022 0203 	bic.w	r2, r2, #3
 800f0c0:	3204      	adds	r2, #4
 800f0c2:	f105 0115 	add.w	r1, r5, #21
 800f0c6:	458c      	cmp	ip, r1
 800f0c8:	bf38      	it	cc
 800f0ca:	2204      	movcc	r2, #4
 800f0cc:	9201      	str	r2, [sp, #4]
 800f0ce:	9a02      	ldr	r2, [sp, #8]
 800f0d0:	9303      	str	r3, [sp, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d808      	bhi.n	800f0e8 <__multiply+0x98>
 800f0d6:	2f00      	cmp	r7, #0
 800f0d8:	dc55      	bgt.n	800f186 <__multiply+0x136>
 800f0da:	6107      	str	r7, [r0, #16]
 800f0dc:	b005      	add	sp, #20
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	f843 2b04 	str.w	r2, [r3], #4
 800f0e6:	e7db      	b.n	800f0a0 <__multiply+0x50>
 800f0e8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f0ec:	f1ba 0f00 	cmp.w	sl, #0
 800f0f0:	d020      	beq.n	800f134 <__multiply+0xe4>
 800f0f2:	f105 0e14 	add.w	lr, r5, #20
 800f0f6:	46b1      	mov	r9, r6
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f0fe:	f8d9 b000 	ldr.w	fp, [r9]
 800f102:	b2a1      	uxth	r1, r4
 800f104:	fa1f fb8b 	uxth.w	fp, fp
 800f108:	fb0a b101 	mla	r1, sl, r1, fp
 800f10c:	4411      	add	r1, r2
 800f10e:	f8d9 2000 	ldr.w	r2, [r9]
 800f112:	0c24      	lsrs	r4, r4, #16
 800f114:	0c12      	lsrs	r2, r2, #16
 800f116:	fb0a 2404 	mla	r4, sl, r4, r2
 800f11a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f11e:	b289      	uxth	r1, r1
 800f120:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f124:	45f4      	cmp	ip, lr
 800f126:	f849 1b04 	str.w	r1, [r9], #4
 800f12a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f12e:	d8e4      	bhi.n	800f0fa <__multiply+0xaa>
 800f130:	9901      	ldr	r1, [sp, #4]
 800f132:	5072      	str	r2, [r6, r1]
 800f134:	9a03      	ldr	r2, [sp, #12]
 800f136:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f13a:	3304      	adds	r3, #4
 800f13c:	f1b9 0f00 	cmp.w	r9, #0
 800f140:	d01f      	beq.n	800f182 <__multiply+0x132>
 800f142:	6834      	ldr	r4, [r6, #0]
 800f144:	f105 0114 	add.w	r1, r5, #20
 800f148:	46b6      	mov	lr, r6
 800f14a:	f04f 0a00 	mov.w	sl, #0
 800f14e:	880a      	ldrh	r2, [r1, #0]
 800f150:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f154:	fb09 b202 	mla	r2, r9, r2, fp
 800f158:	4492      	add	sl, r2
 800f15a:	b2a4      	uxth	r4, r4
 800f15c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f160:	f84e 4b04 	str.w	r4, [lr], #4
 800f164:	f851 4b04 	ldr.w	r4, [r1], #4
 800f168:	f8be 2000 	ldrh.w	r2, [lr]
 800f16c:	0c24      	lsrs	r4, r4, #16
 800f16e:	fb09 2404 	mla	r4, r9, r4, r2
 800f172:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f176:	458c      	cmp	ip, r1
 800f178:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f17c:	d8e7      	bhi.n	800f14e <__multiply+0xfe>
 800f17e:	9a01      	ldr	r2, [sp, #4]
 800f180:	50b4      	str	r4, [r6, r2]
 800f182:	3604      	adds	r6, #4
 800f184:	e7a3      	b.n	800f0ce <__multiply+0x7e>
 800f186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1a5      	bne.n	800f0da <__multiply+0x8a>
 800f18e:	3f01      	subs	r7, #1
 800f190:	e7a1      	b.n	800f0d6 <__multiply+0x86>
 800f192:	bf00      	nop
 800f194:	08011f7f 	.word	0x08011f7f
 800f198:	08011ff0 	.word	0x08011ff0

0800f19c <__pow5mult>:
 800f19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	4615      	mov	r5, r2
 800f1a2:	f012 0203 	ands.w	r2, r2, #3
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	460f      	mov	r7, r1
 800f1aa:	d007      	beq.n	800f1bc <__pow5mult+0x20>
 800f1ac:	4c25      	ldr	r4, [pc, #148]	; (800f244 <__pow5mult+0xa8>)
 800f1ae:	3a01      	subs	r2, #1
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1b6:	f7ff fe9b 	bl	800eef0 <__multadd>
 800f1ba:	4607      	mov	r7, r0
 800f1bc:	10ad      	asrs	r5, r5, #2
 800f1be:	d03d      	beq.n	800f23c <__pow5mult+0xa0>
 800f1c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1c2:	b97c      	cbnz	r4, 800f1e4 <__pow5mult+0x48>
 800f1c4:	2010      	movs	r0, #16
 800f1c6:	f7ff fe1b 	bl	800ee00 <malloc>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	6270      	str	r0, [r6, #36]	; 0x24
 800f1ce:	b928      	cbnz	r0, 800f1dc <__pow5mult+0x40>
 800f1d0:	4b1d      	ldr	r3, [pc, #116]	; (800f248 <__pow5mult+0xac>)
 800f1d2:	481e      	ldr	r0, [pc, #120]	; (800f24c <__pow5mult+0xb0>)
 800f1d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f1d8:	f000 fc20 	bl	800fa1c <__assert_func>
 800f1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1e0:	6004      	str	r4, [r0, #0]
 800f1e2:	60c4      	str	r4, [r0, #12]
 800f1e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1ec:	b94c      	cbnz	r4, 800f202 <__pow5mult+0x66>
 800f1ee:	f240 2171 	movw	r1, #625	; 0x271
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7ff ff16 	bl	800f024 <__i2b>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1fe:	4604      	mov	r4, r0
 800f200:	6003      	str	r3, [r0, #0]
 800f202:	f04f 0900 	mov.w	r9, #0
 800f206:	07eb      	lsls	r3, r5, #31
 800f208:	d50a      	bpl.n	800f220 <__pow5mult+0x84>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4622      	mov	r2, r4
 800f20e:	4630      	mov	r0, r6
 800f210:	f7ff ff1e 	bl	800f050 <__multiply>
 800f214:	4639      	mov	r1, r7
 800f216:	4680      	mov	r8, r0
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff fe47 	bl	800eeac <_Bfree>
 800f21e:	4647      	mov	r7, r8
 800f220:	106d      	asrs	r5, r5, #1
 800f222:	d00b      	beq.n	800f23c <__pow5mult+0xa0>
 800f224:	6820      	ldr	r0, [r4, #0]
 800f226:	b938      	cbnz	r0, 800f238 <__pow5mult+0x9c>
 800f228:	4622      	mov	r2, r4
 800f22a:	4621      	mov	r1, r4
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7ff ff0f 	bl	800f050 <__multiply>
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	f8c0 9000 	str.w	r9, [r0]
 800f238:	4604      	mov	r4, r0
 800f23a:	e7e4      	b.n	800f206 <__pow5mult+0x6a>
 800f23c:	4638      	mov	r0, r7
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	bf00      	nop
 800f244:	08012140 	.word	0x08012140
 800f248:	08011f09 	.word	0x08011f09
 800f24c:	08011ff0 	.word	0x08011ff0

0800f250 <__lshift>:
 800f250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f254:	460c      	mov	r4, r1
 800f256:	6849      	ldr	r1, [r1, #4]
 800f258:	6923      	ldr	r3, [r4, #16]
 800f25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	4607      	mov	r7, r0
 800f262:	4691      	mov	r9, r2
 800f264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f268:	f108 0601 	add.w	r6, r8, #1
 800f26c:	42b3      	cmp	r3, r6
 800f26e:	db0b      	blt.n	800f288 <__lshift+0x38>
 800f270:	4638      	mov	r0, r7
 800f272:	f7ff fddb 	bl	800ee2c <_Balloc>
 800f276:	4605      	mov	r5, r0
 800f278:	b948      	cbnz	r0, 800f28e <__lshift+0x3e>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4b28      	ldr	r3, [pc, #160]	; (800f320 <__lshift+0xd0>)
 800f27e:	4829      	ldr	r0, [pc, #164]	; (800f324 <__lshift+0xd4>)
 800f280:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f284:	f000 fbca 	bl	800fa1c <__assert_func>
 800f288:	3101      	adds	r1, #1
 800f28a:	005b      	lsls	r3, r3, #1
 800f28c:	e7ee      	b.n	800f26c <__lshift+0x1c>
 800f28e:	2300      	movs	r3, #0
 800f290:	f100 0114 	add.w	r1, r0, #20
 800f294:	f100 0210 	add.w	r2, r0, #16
 800f298:	4618      	mov	r0, r3
 800f29a:	4553      	cmp	r3, sl
 800f29c:	db33      	blt.n	800f306 <__lshift+0xb6>
 800f29e:	6920      	ldr	r0, [r4, #16]
 800f2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2a4:	f104 0314 	add.w	r3, r4, #20
 800f2a8:	f019 091f 	ands.w	r9, r9, #31
 800f2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2b4:	d02b      	beq.n	800f30e <__lshift+0xbe>
 800f2b6:	f1c9 0e20 	rsb	lr, r9, #32
 800f2ba:	468a      	mov	sl, r1
 800f2bc:	2200      	movs	r2, #0
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	fa00 f009 	lsl.w	r0, r0, r9
 800f2c4:	4302      	orrs	r2, r0
 800f2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800f2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ce:	459c      	cmp	ip, r3
 800f2d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f2d4:	d8f3      	bhi.n	800f2be <__lshift+0x6e>
 800f2d6:	ebac 0304 	sub.w	r3, ip, r4
 800f2da:	3b15      	subs	r3, #21
 800f2dc:	f023 0303 	bic.w	r3, r3, #3
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	f104 0015 	add.w	r0, r4, #21
 800f2e6:	4584      	cmp	ip, r0
 800f2e8:	bf38      	it	cc
 800f2ea:	2304      	movcc	r3, #4
 800f2ec:	50ca      	str	r2, [r1, r3]
 800f2ee:	b10a      	cbz	r2, 800f2f4 <__lshift+0xa4>
 800f2f0:	f108 0602 	add.w	r6, r8, #2
 800f2f4:	3e01      	subs	r6, #1
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	612e      	str	r6, [r5, #16]
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f7ff fdd6 	bl	800eeac <_Bfree>
 800f300:	4628      	mov	r0, r5
 800f302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f306:	f842 0f04 	str.w	r0, [r2, #4]!
 800f30a:	3301      	adds	r3, #1
 800f30c:	e7c5      	b.n	800f29a <__lshift+0x4a>
 800f30e:	3904      	subs	r1, #4
 800f310:	f853 2b04 	ldr.w	r2, [r3], #4
 800f314:	f841 2f04 	str.w	r2, [r1, #4]!
 800f318:	459c      	cmp	ip, r3
 800f31a:	d8f9      	bhi.n	800f310 <__lshift+0xc0>
 800f31c:	e7ea      	b.n	800f2f4 <__lshift+0xa4>
 800f31e:	bf00      	nop
 800f320:	08011f7f 	.word	0x08011f7f
 800f324:	08011ff0 	.word	0x08011ff0

0800f328 <__mcmp>:
 800f328:	b530      	push	{r4, r5, lr}
 800f32a:	6902      	ldr	r2, [r0, #16]
 800f32c:	690c      	ldr	r4, [r1, #16]
 800f32e:	1b12      	subs	r2, r2, r4
 800f330:	d10e      	bne.n	800f350 <__mcmp+0x28>
 800f332:	f100 0314 	add.w	r3, r0, #20
 800f336:	3114      	adds	r1, #20
 800f338:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f33c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f340:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f344:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f348:	42a5      	cmp	r5, r4
 800f34a:	d003      	beq.n	800f354 <__mcmp+0x2c>
 800f34c:	d305      	bcc.n	800f35a <__mcmp+0x32>
 800f34e:	2201      	movs	r2, #1
 800f350:	4610      	mov	r0, r2
 800f352:	bd30      	pop	{r4, r5, pc}
 800f354:	4283      	cmp	r3, r0
 800f356:	d3f3      	bcc.n	800f340 <__mcmp+0x18>
 800f358:	e7fa      	b.n	800f350 <__mcmp+0x28>
 800f35a:	f04f 32ff 	mov.w	r2, #4294967295
 800f35e:	e7f7      	b.n	800f350 <__mcmp+0x28>

0800f360 <__mdiff>:
 800f360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f364:	460c      	mov	r4, r1
 800f366:	4606      	mov	r6, r0
 800f368:	4611      	mov	r1, r2
 800f36a:	4620      	mov	r0, r4
 800f36c:	4617      	mov	r7, r2
 800f36e:	f7ff ffdb 	bl	800f328 <__mcmp>
 800f372:	1e05      	subs	r5, r0, #0
 800f374:	d110      	bne.n	800f398 <__mdiff+0x38>
 800f376:	4629      	mov	r1, r5
 800f378:	4630      	mov	r0, r6
 800f37a:	f7ff fd57 	bl	800ee2c <_Balloc>
 800f37e:	b930      	cbnz	r0, 800f38e <__mdiff+0x2e>
 800f380:	4b39      	ldr	r3, [pc, #228]	; (800f468 <__mdiff+0x108>)
 800f382:	4602      	mov	r2, r0
 800f384:	f240 2132 	movw	r1, #562	; 0x232
 800f388:	4838      	ldr	r0, [pc, #224]	; (800f46c <__mdiff+0x10c>)
 800f38a:	f000 fb47 	bl	800fa1c <__assert_func>
 800f38e:	2301      	movs	r3, #1
 800f390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f398:	bfa4      	itt	ge
 800f39a:	463b      	movge	r3, r7
 800f39c:	4627      	movge	r7, r4
 800f39e:	4630      	mov	r0, r6
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	bfa6      	itte	ge
 800f3a4:	461c      	movge	r4, r3
 800f3a6:	2500      	movge	r5, #0
 800f3a8:	2501      	movlt	r5, #1
 800f3aa:	f7ff fd3f 	bl	800ee2c <_Balloc>
 800f3ae:	b920      	cbnz	r0, 800f3ba <__mdiff+0x5a>
 800f3b0:	4b2d      	ldr	r3, [pc, #180]	; (800f468 <__mdiff+0x108>)
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f3b8:	e7e6      	b.n	800f388 <__mdiff+0x28>
 800f3ba:	693e      	ldr	r6, [r7, #16]
 800f3bc:	60c5      	str	r5, [r0, #12]
 800f3be:	6925      	ldr	r5, [r4, #16]
 800f3c0:	f107 0114 	add.w	r1, r7, #20
 800f3c4:	f104 0914 	add.w	r9, r4, #20
 800f3c8:	f100 0e14 	add.w	lr, r0, #20
 800f3cc:	f107 0210 	add.w	r2, r7, #16
 800f3d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f3d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f3d8:	46f2      	mov	sl, lr
 800f3da:	2700      	movs	r7, #0
 800f3dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f3e4:	fa1f f883 	uxth.w	r8, r3
 800f3e8:	fa17 f78b 	uxtah	r7, r7, fp
 800f3ec:	0c1b      	lsrs	r3, r3, #16
 800f3ee:	eba7 0808 	sub.w	r8, r7, r8
 800f3f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f3fa:	fa1f f888 	uxth.w	r8, r8
 800f3fe:	141f      	asrs	r7, r3, #16
 800f400:	454d      	cmp	r5, r9
 800f402:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f406:	f84a 3b04 	str.w	r3, [sl], #4
 800f40a:	d8e7      	bhi.n	800f3dc <__mdiff+0x7c>
 800f40c:	1b2b      	subs	r3, r5, r4
 800f40e:	3b15      	subs	r3, #21
 800f410:	f023 0303 	bic.w	r3, r3, #3
 800f414:	3304      	adds	r3, #4
 800f416:	3415      	adds	r4, #21
 800f418:	42a5      	cmp	r5, r4
 800f41a:	bf38      	it	cc
 800f41c:	2304      	movcc	r3, #4
 800f41e:	4419      	add	r1, r3
 800f420:	4473      	add	r3, lr
 800f422:	469e      	mov	lr, r3
 800f424:	460d      	mov	r5, r1
 800f426:	4565      	cmp	r5, ip
 800f428:	d30e      	bcc.n	800f448 <__mdiff+0xe8>
 800f42a:	f10c 0203 	add.w	r2, ip, #3
 800f42e:	1a52      	subs	r2, r2, r1
 800f430:	f022 0203 	bic.w	r2, r2, #3
 800f434:	3903      	subs	r1, #3
 800f436:	458c      	cmp	ip, r1
 800f438:	bf38      	it	cc
 800f43a:	2200      	movcc	r2, #0
 800f43c:	441a      	add	r2, r3
 800f43e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f442:	b17b      	cbz	r3, 800f464 <__mdiff+0x104>
 800f444:	6106      	str	r6, [r0, #16]
 800f446:	e7a5      	b.n	800f394 <__mdiff+0x34>
 800f448:	f855 8b04 	ldr.w	r8, [r5], #4
 800f44c:	fa17 f488 	uxtah	r4, r7, r8
 800f450:	1422      	asrs	r2, r4, #16
 800f452:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f456:	b2a4      	uxth	r4, r4
 800f458:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f45c:	f84e 4b04 	str.w	r4, [lr], #4
 800f460:	1417      	asrs	r7, r2, #16
 800f462:	e7e0      	b.n	800f426 <__mdiff+0xc6>
 800f464:	3e01      	subs	r6, #1
 800f466:	e7ea      	b.n	800f43e <__mdiff+0xde>
 800f468:	08011f7f 	.word	0x08011f7f
 800f46c:	08011ff0 	.word	0x08011ff0

0800f470 <__d2b>:
 800f470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f474:	4689      	mov	r9, r1
 800f476:	2101      	movs	r1, #1
 800f478:	ec57 6b10 	vmov	r6, r7, d0
 800f47c:	4690      	mov	r8, r2
 800f47e:	f7ff fcd5 	bl	800ee2c <_Balloc>
 800f482:	4604      	mov	r4, r0
 800f484:	b930      	cbnz	r0, 800f494 <__d2b+0x24>
 800f486:	4602      	mov	r2, r0
 800f488:	4b25      	ldr	r3, [pc, #148]	; (800f520 <__d2b+0xb0>)
 800f48a:	4826      	ldr	r0, [pc, #152]	; (800f524 <__d2b+0xb4>)
 800f48c:	f240 310a 	movw	r1, #778	; 0x30a
 800f490:	f000 fac4 	bl	800fa1c <__assert_func>
 800f494:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f49c:	bb35      	cbnz	r5, 800f4ec <__d2b+0x7c>
 800f49e:	2e00      	cmp	r6, #0
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	d028      	beq.n	800f4f6 <__d2b+0x86>
 800f4a4:	4668      	mov	r0, sp
 800f4a6:	9600      	str	r6, [sp, #0]
 800f4a8:	f7ff fd8c 	bl	800efc4 <__lo0bits>
 800f4ac:	9900      	ldr	r1, [sp, #0]
 800f4ae:	b300      	cbz	r0, 800f4f2 <__d2b+0x82>
 800f4b0:	9a01      	ldr	r2, [sp, #4]
 800f4b2:	f1c0 0320 	rsb	r3, r0, #32
 800f4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ba:	430b      	orrs	r3, r1
 800f4bc:	40c2      	lsrs	r2, r0
 800f4be:	6163      	str	r3, [r4, #20]
 800f4c0:	9201      	str	r2, [sp, #4]
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	61a3      	str	r3, [r4, #24]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	bf14      	ite	ne
 800f4ca:	2202      	movne	r2, #2
 800f4cc:	2201      	moveq	r2, #1
 800f4ce:	6122      	str	r2, [r4, #16]
 800f4d0:	b1d5      	cbz	r5, 800f508 <__d2b+0x98>
 800f4d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f4d6:	4405      	add	r5, r0
 800f4d8:	f8c9 5000 	str.w	r5, [r9]
 800f4dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f4e0:	f8c8 0000 	str.w	r0, [r8]
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	b003      	add	sp, #12
 800f4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4f0:	e7d5      	b.n	800f49e <__d2b+0x2e>
 800f4f2:	6161      	str	r1, [r4, #20]
 800f4f4:	e7e5      	b.n	800f4c2 <__d2b+0x52>
 800f4f6:	a801      	add	r0, sp, #4
 800f4f8:	f7ff fd64 	bl	800efc4 <__lo0bits>
 800f4fc:	9b01      	ldr	r3, [sp, #4]
 800f4fe:	6163      	str	r3, [r4, #20]
 800f500:	2201      	movs	r2, #1
 800f502:	6122      	str	r2, [r4, #16]
 800f504:	3020      	adds	r0, #32
 800f506:	e7e3      	b.n	800f4d0 <__d2b+0x60>
 800f508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f50c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f510:	f8c9 0000 	str.w	r0, [r9]
 800f514:	6918      	ldr	r0, [r3, #16]
 800f516:	f7ff fd35 	bl	800ef84 <__hi0bits>
 800f51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f51e:	e7df      	b.n	800f4e0 <__d2b+0x70>
 800f520:	08011f7f 	.word	0x08011f7f
 800f524:	08011ff0 	.word	0x08011ff0

0800f528 <_calloc_r>:
 800f528:	b513      	push	{r0, r1, r4, lr}
 800f52a:	434a      	muls	r2, r1
 800f52c:	4611      	mov	r1, r2
 800f52e:	9201      	str	r2, [sp, #4]
 800f530:	f000 f85a 	bl	800f5e8 <_malloc_r>
 800f534:	4604      	mov	r4, r0
 800f536:	b118      	cbz	r0, 800f540 <_calloc_r+0x18>
 800f538:	9a01      	ldr	r2, [sp, #4]
 800f53a:	2100      	movs	r1, #0
 800f53c:	f7fd fe04 	bl	800d148 <memset>
 800f540:	4620      	mov	r0, r4
 800f542:	b002      	add	sp, #8
 800f544:	bd10      	pop	{r4, pc}
	...

0800f548 <_free_r>:
 800f548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f54a:	2900      	cmp	r1, #0
 800f54c:	d048      	beq.n	800f5e0 <_free_r+0x98>
 800f54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f552:	9001      	str	r0, [sp, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	f1a1 0404 	sub.w	r4, r1, #4
 800f55a:	bfb8      	it	lt
 800f55c:	18e4      	addlt	r4, r4, r3
 800f55e:	f000 fae3 	bl	800fb28 <__malloc_lock>
 800f562:	4a20      	ldr	r2, [pc, #128]	; (800f5e4 <_free_r+0x9c>)
 800f564:	9801      	ldr	r0, [sp, #4]
 800f566:	6813      	ldr	r3, [r2, #0]
 800f568:	4615      	mov	r5, r2
 800f56a:	b933      	cbnz	r3, 800f57a <_free_r+0x32>
 800f56c:	6063      	str	r3, [r4, #4]
 800f56e:	6014      	str	r4, [r2, #0]
 800f570:	b003      	add	sp, #12
 800f572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f576:	f000 badd 	b.w	800fb34 <__malloc_unlock>
 800f57a:	42a3      	cmp	r3, r4
 800f57c:	d90b      	bls.n	800f596 <_free_r+0x4e>
 800f57e:	6821      	ldr	r1, [r4, #0]
 800f580:	1862      	adds	r2, r4, r1
 800f582:	4293      	cmp	r3, r2
 800f584:	bf04      	itt	eq
 800f586:	681a      	ldreq	r2, [r3, #0]
 800f588:	685b      	ldreq	r3, [r3, #4]
 800f58a:	6063      	str	r3, [r4, #4]
 800f58c:	bf04      	itt	eq
 800f58e:	1852      	addeq	r2, r2, r1
 800f590:	6022      	streq	r2, [r4, #0]
 800f592:	602c      	str	r4, [r5, #0]
 800f594:	e7ec      	b.n	800f570 <_free_r+0x28>
 800f596:	461a      	mov	r2, r3
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	b10b      	cbz	r3, 800f5a0 <_free_r+0x58>
 800f59c:	42a3      	cmp	r3, r4
 800f59e:	d9fa      	bls.n	800f596 <_free_r+0x4e>
 800f5a0:	6811      	ldr	r1, [r2, #0]
 800f5a2:	1855      	adds	r5, r2, r1
 800f5a4:	42a5      	cmp	r5, r4
 800f5a6:	d10b      	bne.n	800f5c0 <_free_r+0x78>
 800f5a8:	6824      	ldr	r4, [r4, #0]
 800f5aa:	4421      	add	r1, r4
 800f5ac:	1854      	adds	r4, r2, r1
 800f5ae:	42a3      	cmp	r3, r4
 800f5b0:	6011      	str	r1, [r2, #0]
 800f5b2:	d1dd      	bne.n	800f570 <_free_r+0x28>
 800f5b4:	681c      	ldr	r4, [r3, #0]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	6053      	str	r3, [r2, #4]
 800f5ba:	4421      	add	r1, r4
 800f5bc:	6011      	str	r1, [r2, #0]
 800f5be:	e7d7      	b.n	800f570 <_free_r+0x28>
 800f5c0:	d902      	bls.n	800f5c8 <_free_r+0x80>
 800f5c2:	230c      	movs	r3, #12
 800f5c4:	6003      	str	r3, [r0, #0]
 800f5c6:	e7d3      	b.n	800f570 <_free_r+0x28>
 800f5c8:	6825      	ldr	r5, [r4, #0]
 800f5ca:	1961      	adds	r1, r4, r5
 800f5cc:	428b      	cmp	r3, r1
 800f5ce:	bf04      	itt	eq
 800f5d0:	6819      	ldreq	r1, [r3, #0]
 800f5d2:	685b      	ldreq	r3, [r3, #4]
 800f5d4:	6063      	str	r3, [r4, #4]
 800f5d6:	bf04      	itt	eq
 800f5d8:	1949      	addeq	r1, r1, r5
 800f5da:	6021      	streq	r1, [r4, #0]
 800f5dc:	6054      	str	r4, [r2, #4]
 800f5de:	e7c7      	b.n	800f570 <_free_r+0x28>
 800f5e0:	b003      	add	sp, #12
 800f5e2:	bd30      	pop	{r4, r5, pc}
 800f5e4:	20000294 	.word	0x20000294

0800f5e8 <_malloc_r>:
 800f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ea:	1ccd      	adds	r5, r1, #3
 800f5ec:	f025 0503 	bic.w	r5, r5, #3
 800f5f0:	3508      	adds	r5, #8
 800f5f2:	2d0c      	cmp	r5, #12
 800f5f4:	bf38      	it	cc
 800f5f6:	250c      	movcc	r5, #12
 800f5f8:	2d00      	cmp	r5, #0
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	db01      	blt.n	800f602 <_malloc_r+0x1a>
 800f5fe:	42a9      	cmp	r1, r5
 800f600:	d903      	bls.n	800f60a <_malloc_r+0x22>
 800f602:	230c      	movs	r3, #12
 800f604:	6033      	str	r3, [r6, #0]
 800f606:	2000      	movs	r0, #0
 800f608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f60a:	f000 fa8d 	bl	800fb28 <__malloc_lock>
 800f60e:	4921      	ldr	r1, [pc, #132]	; (800f694 <_malloc_r+0xac>)
 800f610:	680a      	ldr	r2, [r1, #0]
 800f612:	4614      	mov	r4, r2
 800f614:	b99c      	cbnz	r4, 800f63e <_malloc_r+0x56>
 800f616:	4f20      	ldr	r7, [pc, #128]	; (800f698 <_malloc_r+0xb0>)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	b923      	cbnz	r3, 800f626 <_malloc_r+0x3e>
 800f61c:	4621      	mov	r1, r4
 800f61e:	4630      	mov	r0, r6
 800f620:	f000 f996 	bl	800f950 <_sbrk_r>
 800f624:	6038      	str	r0, [r7, #0]
 800f626:	4629      	mov	r1, r5
 800f628:	4630      	mov	r0, r6
 800f62a:	f000 f991 	bl	800f950 <_sbrk_r>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	d123      	bne.n	800f67a <_malloc_r+0x92>
 800f632:	230c      	movs	r3, #12
 800f634:	6033      	str	r3, [r6, #0]
 800f636:	4630      	mov	r0, r6
 800f638:	f000 fa7c 	bl	800fb34 <__malloc_unlock>
 800f63c:	e7e3      	b.n	800f606 <_malloc_r+0x1e>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	1b5b      	subs	r3, r3, r5
 800f642:	d417      	bmi.n	800f674 <_malloc_r+0x8c>
 800f644:	2b0b      	cmp	r3, #11
 800f646:	d903      	bls.n	800f650 <_malloc_r+0x68>
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	441c      	add	r4, r3
 800f64c:	6025      	str	r5, [r4, #0]
 800f64e:	e004      	b.n	800f65a <_malloc_r+0x72>
 800f650:	6863      	ldr	r3, [r4, #4]
 800f652:	42a2      	cmp	r2, r4
 800f654:	bf0c      	ite	eq
 800f656:	600b      	streq	r3, [r1, #0]
 800f658:	6053      	strne	r3, [r2, #4]
 800f65a:	4630      	mov	r0, r6
 800f65c:	f000 fa6a 	bl	800fb34 <__malloc_unlock>
 800f660:	f104 000b 	add.w	r0, r4, #11
 800f664:	1d23      	adds	r3, r4, #4
 800f666:	f020 0007 	bic.w	r0, r0, #7
 800f66a:	1ac2      	subs	r2, r0, r3
 800f66c:	d0cc      	beq.n	800f608 <_malloc_r+0x20>
 800f66e:	1a1b      	subs	r3, r3, r0
 800f670:	50a3      	str	r3, [r4, r2]
 800f672:	e7c9      	b.n	800f608 <_malloc_r+0x20>
 800f674:	4622      	mov	r2, r4
 800f676:	6864      	ldr	r4, [r4, #4]
 800f678:	e7cc      	b.n	800f614 <_malloc_r+0x2c>
 800f67a:	1cc4      	adds	r4, r0, #3
 800f67c:	f024 0403 	bic.w	r4, r4, #3
 800f680:	42a0      	cmp	r0, r4
 800f682:	d0e3      	beq.n	800f64c <_malloc_r+0x64>
 800f684:	1a21      	subs	r1, r4, r0
 800f686:	4630      	mov	r0, r6
 800f688:	f000 f962 	bl	800f950 <_sbrk_r>
 800f68c:	3001      	adds	r0, #1
 800f68e:	d1dd      	bne.n	800f64c <_malloc_r+0x64>
 800f690:	e7cf      	b.n	800f632 <_malloc_r+0x4a>
 800f692:	bf00      	nop
 800f694:	20000294 	.word	0x20000294
 800f698:	20000298 	.word	0x20000298

0800f69c <__sfputc_r>:
 800f69c:	6893      	ldr	r3, [r2, #8]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	b410      	push	{r4}
 800f6a4:	6093      	str	r3, [r2, #8]
 800f6a6:	da08      	bge.n	800f6ba <__sfputc_r+0x1e>
 800f6a8:	6994      	ldr	r4, [r2, #24]
 800f6aa:	42a3      	cmp	r3, r4
 800f6ac:	db01      	blt.n	800f6b2 <__sfputc_r+0x16>
 800f6ae:	290a      	cmp	r1, #10
 800f6b0:	d103      	bne.n	800f6ba <__sfputc_r+0x1e>
 800f6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b6:	f7fe ba47 	b.w	800db48 <__swbuf_r>
 800f6ba:	6813      	ldr	r3, [r2, #0]
 800f6bc:	1c58      	adds	r0, r3, #1
 800f6be:	6010      	str	r0, [r2, #0]
 800f6c0:	7019      	strb	r1, [r3, #0]
 800f6c2:	4608      	mov	r0, r1
 800f6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <__sfputs_r>:
 800f6ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	4614      	mov	r4, r2
 800f6d2:	18d5      	adds	r5, r2, r3
 800f6d4:	42ac      	cmp	r4, r5
 800f6d6:	d101      	bne.n	800f6dc <__sfputs_r+0x12>
 800f6d8:	2000      	movs	r0, #0
 800f6da:	e007      	b.n	800f6ec <__sfputs_r+0x22>
 800f6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e0:	463a      	mov	r2, r7
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7ff ffda 	bl	800f69c <__sfputc_r>
 800f6e8:	1c43      	adds	r3, r0, #1
 800f6ea:	d1f3      	bne.n	800f6d4 <__sfputs_r+0xa>
 800f6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6f0 <_vfiprintf_r>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	b09d      	sub	sp, #116	; 0x74
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	4698      	mov	r8, r3
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	b118      	cbz	r0, 800f708 <_vfiprintf_r+0x18>
 800f700:	6983      	ldr	r3, [r0, #24]
 800f702:	b90b      	cbnz	r3, 800f708 <_vfiprintf_r+0x18>
 800f704:	f7ff fa72 	bl	800ebec <__sinit>
 800f708:	4b89      	ldr	r3, [pc, #548]	; (800f930 <_vfiprintf_r+0x240>)
 800f70a:	429d      	cmp	r5, r3
 800f70c:	d11b      	bne.n	800f746 <_vfiprintf_r+0x56>
 800f70e:	6875      	ldr	r5, [r6, #4]
 800f710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f712:	07d9      	lsls	r1, r3, #31
 800f714:	d405      	bmi.n	800f722 <_vfiprintf_r+0x32>
 800f716:	89ab      	ldrh	r3, [r5, #12]
 800f718:	059a      	lsls	r2, r3, #22
 800f71a:	d402      	bmi.n	800f722 <_vfiprintf_r+0x32>
 800f71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f71e:	f7ff fb08 	bl	800ed32 <__retarget_lock_acquire_recursive>
 800f722:	89ab      	ldrh	r3, [r5, #12]
 800f724:	071b      	lsls	r3, r3, #28
 800f726:	d501      	bpl.n	800f72c <_vfiprintf_r+0x3c>
 800f728:	692b      	ldr	r3, [r5, #16]
 800f72a:	b9eb      	cbnz	r3, 800f768 <_vfiprintf_r+0x78>
 800f72c:	4629      	mov	r1, r5
 800f72e:	4630      	mov	r0, r6
 800f730:	f7fe fa5c 	bl	800dbec <__swsetup_r>
 800f734:	b1c0      	cbz	r0, 800f768 <_vfiprintf_r+0x78>
 800f736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f738:	07dc      	lsls	r4, r3, #31
 800f73a:	d50e      	bpl.n	800f75a <_vfiprintf_r+0x6a>
 800f73c:	f04f 30ff 	mov.w	r0, #4294967295
 800f740:	b01d      	add	sp, #116	; 0x74
 800f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f746:	4b7b      	ldr	r3, [pc, #492]	; (800f934 <_vfiprintf_r+0x244>)
 800f748:	429d      	cmp	r5, r3
 800f74a:	d101      	bne.n	800f750 <_vfiprintf_r+0x60>
 800f74c:	68b5      	ldr	r5, [r6, #8]
 800f74e:	e7df      	b.n	800f710 <_vfiprintf_r+0x20>
 800f750:	4b79      	ldr	r3, [pc, #484]	; (800f938 <_vfiprintf_r+0x248>)
 800f752:	429d      	cmp	r5, r3
 800f754:	bf08      	it	eq
 800f756:	68f5      	ldreq	r5, [r6, #12]
 800f758:	e7da      	b.n	800f710 <_vfiprintf_r+0x20>
 800f75a:	89ab      	ldrh	r3, [r5, #12]
 800f75c:	0598      	lsls	r0, r3, #22
 800f75e:	d4ed      	bmi.n	800f73c <_vfiprintf_r+0x4c>
 800f760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f762:	f7ff fae7 	bl	800ed34 <__retarget_lock_release_recursive>
 800f766:	e7e9      	b.n	800f73c <_vfiprintf_r+0x4c>
 800f768:	2300      	movs	r3, #0
 800f76a:	9309      	str	r3, [sp, #36]	; 0x24
 800f76c:	2320      	movs	r3, #32
 800f76e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f772:	f8cd 800c 	str.w	r8, [sp, #12]
 800f776:	2330      	movs	r3, #48	; 0x30
 800f778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f93c <_vfiprintf_r+0x24c>
 800f77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f780:	f04f 0901 	mov.w	r9, #1
 800f784:	4623      	mov	r3, r4
 800f786:	469a      	mov	sl, r3
 800f788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f78c:	b10a      	cbz	r2, 800f792 <_vfiprintf_r+0xa2>
 800f78e:	2a25      	cmp	r2, #37	; 0x25
 800f790:	d1f9      	bne.n	800f786 <_vfiprintf_r+0x96>
 800f792:	ebba 0b04 	subs.w	fp, sl, r4
 800f796:	d00b      	beq.n	800f7b0 <_vfiprintf_r+0xc0>
 800f798:	465b      	mov	r3, fp
 800f79a:	4622      	mov	r2, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f7ff ff93 	bl	800f6ca <__sfputs_r>
 800f7a4:	3001      	adds	r0, #1
 800f7a6:	f000 80aa 	beq.w	800f8fe <_vfiprintf_r+0x20e>
 800f7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7ac:	445a      	add	r2, fp
 800f7ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f000 80a2 	beq.w	800f8fe <_vfiprintf_r+0x20e>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7c4:	f10a 0a01 	add.w	sl, sl, #1
 800f7c8:	9304      	str	r3, [sp, #16]
 800f7ca:	9307      	str	r3, [sp, #28]
 800f7cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7d0:	931a      	str	r3, [sp, #104]	; 0x68
 800f7d2:	4654      	mov	r4, sl
 800f7d4:	2205      	movs	r2, #5
 800f7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7da:	4858      	ldr	r0, [pc, #352]	; (800f93c <_vfiprintf_r+0x24c>)
 800f7dc:	f7f0 fd00 	bl	80001e0 <memchr>
 800f7e0:	9a04      	ldr	r2, [sp, #16]
 800f7e2:	b9d8      	cbnz	r0, 800f81c <_vfiprintf_r+0x12c>
 800f7e4:	06d1      	lsls	r1, r2, #27
 800f7e6:	bf44      	itt	mi
 800f7e8:	2320      	movmi	r3, #32
 800f7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ee:	0713      	lsls	r3, r2, #28
 800f7f0:	bf44      	itt	mi
 800f7f2:	232b      	movmi	r3, #43	; 0x2b
 800f7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7fc:	2b2a      	cmp	r3, #42	; 0x2a
 800f7fe:	d015      	beq.n	800f82c <_vfiprintf_r+0x13c>
 800f800:	9a07      	ldr	r2, [sp, #28]
 800f802:	4654      	mov	r4, sl
 800f804:	2000      	movs	r0, #0
 800f806:	f04f 0c0a 	mov.w	ip, #10
 800f80a:	4621      	mov	r1, r4
 800f80c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f810:	3b30      	subs	r3, #48	; 0x30
 800f812:	2b09      	cmp	r3, #9
 800f814:	d94e      	bls.n	800f8b4 <_vfiprintf_r+0x1c4>
 800f816:	b1b0      	cbz	r0, 800f846 <_vfiprintf_r+0x156>
 800f818:	9207      	str	r2, [sp, #28]
 800f81a:	e014      	b.n	800f846 <_vfiprintf_r+0x156>
 800f81c:	eba0 0308 	sub.w	r3, r0, r8
 800f820:	fa09 f303 	lsl.w	r3, r9, r3
 800f824:	4313      	orrs	r3, r2
 800f826:	9304      	str	r3, [sp, #16]
 800f828:	46a2      	mov	sl, r4
 800f82a:	e7d2      	b.n	800f7d2 <_vfiprintf_r+0xe2>
 800f82c:	9b03      	ldr	r3, [sp, #12]
 800f82e:	1d19      	adds	r1, r3, #4
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	9103      	str	r1, [sp, #12]
 800f834:	2b00      	cmp	r3, #0
 800f836:	bfbb      	ittet	lt
 800f838:	425b      	neglt	r3, r3
 800f83a:	f042 0202 	orrlt.w	r2, r2, #2
 800f83e:	9307      	strge	r3, [sp, #28]
 800f840:	9307      	strlt	r3, [sp, #28]
 800f842:	bfb8      	it	lt
 800f844:	9204      	strlt	r2, [sp, #16]
 800f846:	7823      	ldrb	r3, [r4, #0]
 800f848:	2b2e      	cmp	r3, #46	; 0x2e
 800f84a:	d10c      	bne.n	800f866 <_vfiprintf_r+0x176>
 800f84c:	7863      	ldrb	r3, [r4, #1]
 800f84e:	2b2a      	cmp	r3, #42	; 0x2a
 800f850:	d135      	bne.n	800f8be <_vfiprintf_r+0x1ce>
 800f852:	9b03      	ldr	r3, [sp, #12]
 800f854:	1d1a      	adds	r2, r3, #4
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	9203      	str	r2, [sp, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	bfb8      	it	lt
 800f85e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f862:	3402      	adds	r4, #2
 800f864:	9305      	str	r3, [sp, #20]
 800f866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f94c <_vfiprintf_r+0x25c>
 800f86a:	7821      	ldrb	r1, [r4, #0]
 800f86c:	2203      	movs	r2, #3
 800f86e:	4650      	mov	r0, sl
 800f870:	f7f0 fcb6 	bl	80001e0 <memchr>
 800f874:	b140      	cbz	r0, 800f888 <_vfiprintf_r+0x198>
 800f876:	2340      	movs	r3, #64	; 0x40
 800f878:	eba0 000a 	sub.w	r0, r0, sl
 800f87c:	fa03 f000 	lsl.w	r0, r3, r0
 800f880:	9b04      	ldr	r3, [sp, #16]
 800f882:	4303      	orrs	r3, r0
 800f884:	3401      	adds	r4, #1
 800f886:	9304      	str	r3, [sp, #16]
 800f888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f88c:	482c      	ldr	r0, [pc, #176]	; (800f940 <_vfiprintf_r+0x250>)
 800f88e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f892:	2206      	movs	r2, #6
 800f894:	f7f0 fca4 	bl	80001e0 <memchr>
 800f898:	2800      	cmp	r0, #0
 800f89a:	d03f      	beq.n	800f91c <_vfiprintf_r+0x22c>
 800f89c:	4b29      	ldr	r3, [pc, #164]	; (800f944 <_vfiprintf_r+0x254>)
 800f89e:	bb1b      	cbnz	r3, 800f8e8 <_vfiprintf_r+0x1f8>
 800f8a0:	9b03      	ldr	r3, [sp, #12]
 800f8a2:	3307      	adds	r3, #7
 800f8a4:	f023 0307 	bic.w	r3, r3, #7
 800f8a8:	3308      	adds	r3, #8
 800f8aa:	9303      	str	r3, [sp, #12]
 800f8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ae:	443b      	add	r3, r7
 800f8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b2:	e767      	b.n	800f784 <_vfiprintf_r+0x94>
 800f8b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	2001      	movs	r0, #1
 800f8bc:	e7a5      	b.n	800f80a <_vfiprintf_r+0x11a>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	3401      	adds	r4, #1
 800f8c2:	9305      	str	r3, [sp, #20]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	f04f 0c0a 	mov.w	ip, #10
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8d0:	3a30      	subs	r2, #48	; 0x30
 800f8d2:	2a09      	cmp	r2, #9
 800f8d4:	d903      	bls.n	800f8de <_vfiprintf_r+0x1ee>
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d0c5      	beq.n	800f866 <_vfiprintf_r+0x176>
 800f8da:	9105      	str	r1, [sp, #20]
 800f8dc:	e7c3      	b.n	800f866 <_vfiprintf_r+0x176>
 800f8de:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	e7f0      	b.n	800f8ca <_vfiprintf_r+0x1da>
 800f8e8:	ab03      	add	r3, sp, #12
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	462a      	mov	r2, r5
 800f8ee:	4b16      	ldr	r3, [pc, #88]	; (800f948 <_vfiprintf_r+0x258>)
 800f8f0:	a904      	add	r1, sp, #16
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f7fd fcd0 	bl	800d298 <_printf_float>
 800f8f8:	4607      	mov	r7, r0
 800f8fa:	1c78      	adds	r0, r7, #1
 800f8fc:	d1d6      	bne.n	800f8ac <_vfiprintf_r+0x1bc>
 800f8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f900:	07d9      	lsls	r1, r3, #31
 800f902:	d405      	bmi.n	800f910 <_vfiprintf_r+0x220>
 800f904:	89ab      	ldrh	r3, [r5, #12]
 800f906:	059a      	lsls	r2, r3, #22
 800f908:	d402      	bmi.n	800f910 <_vfiprintf_r+0x220>
 800f90a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f90c:	f7ff fa12 	bl	800ed34 <__retarget_lock_release_recursive>
 800f910:	89ab      	ldrh	r3, [r5, #12]
 800f912:	065b      	lsls	r3, r3, #25
 800f914:	f53f af12 	bmi.w	800f73c <_vfiprintf_r+0x4c>
 800f918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f91a:	e711      	b.n	800f740 <_vfiprintf_r+0x50>
 800f91c:	ab03      	add	r3, sp, #12
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	462a      	mov	r2, r5
 800f922:	4b09      	ldr	r3, [pc, #36]	; (800f948 <_vfiprintf_r+0x258>)
 800f924:	a904      	add	r1, sp, #16
 800f926:	4630      	mov	r0, r6
 800f928:	f7fd ff5a 	bl	800d7e0 <_printf_i>
 800f92c:	e7e4      	b.n	800f8f8 <_vfiprintf_r+0x208>
 800f92e:	bf00      	nop
 800f930:	08011fb0 	.word	0x08011fb0
 800f934:	08011fd0 	.word	0x08011fd0
 800f938:	08011f90 	.word	0x08011f90
 800f93c:	0801214c 	.word	0x0801214c
 800f940:	08012156 	.word	0x08012156
 800f944:	0800d299 	.word	0x0800d299
 800f948:	0800f6cb 	.word	0x0800f6cb
 800f94c:	08012152 	.word	0x08012152

0800f950 <_sbrk_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d06      	ldr	r5, [pc, #24]	; (800f96c <_sbrk_r+0x1c>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	602b      	str	r3, [r5, #0]
 800f95c:	f7f8 f9c2 	bl	8007ce4 <_sbrk>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_sbrk_r+0x1a>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	b103      	cbz	r3, 800f96a <_sbrk_r+0x1a>
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	200008cc 	.word	0x200008cc

0800f970 <__sread>:
 800f970:	b510      	push	{r4, lr}
 800f972:	460c      	mov	r4, r1
 800f974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f978:	f000 f8e2 	bl	800fb40 <_read_r>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	bfab      	itete	ge
 800f980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f982:	89a3      	ldrhlt	r3, [r4, #12]
 800f984:	181b      	addge	r3, r3, r0
 800f986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f98a:	bfac      	ite	ge
 800f98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f98e:	81a3      	strhlt	r3, [r4, #12]
 800f990:	bd10      	pop	{r4, pc}

0800f992 <__swrite>:
 800f992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f996:	461f      	mov	r7, r3
 800f998:	898b      	ldrh	r3, [r1, #12]
 800f99a:	05db      	lsls	r3, r3, #23
 800f99c:	4605      	mov	r5, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	4616      	mov	r6, r2
 800f9a2:	d505      	bpl.n	800f9b0 <__swrite+0x1e>
 800f9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f000 f898 	bl	800fae0 <_lseek_r>
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9ba:	81a3      	strh	r3, [r4, #12]
 800f9bc:	4632      	mov	r2, r6
 800f9be:	463b      	mov	r3, r7
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c6:	f000 b817 	b.w	800f9f8 <_write_r>

0800f9ca <__sseek>:
 800f9ca:	b510      	push	{r4, lr}
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d2:	f000 f885 	bl	800fae0 <_lseek_r>
 800f9d6:	1c43      	adds	r3, r0, #1
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	bf15      	itete	ne
 800f9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9e6:	81a3      	strheq	r3, [r4, #12]
 800f9e8:	bf18      	it	ne
 800f9ea:	81a3      	strhne	r3, [r4, #12]
 800f9ec:	bd10      	pop	{r4, pc}

0800f9ee <__sclose>:
 800f9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f2:	f000 b831 	b.w	800fa58 <_close_r>
	...

0800f9f8 <_write_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4d07      	ldr	r5, [pc, #28]	; (800fa18 <_write_r+0x20>)
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	4608      	mov	r0, r1
 800fa00:	4611      	mov	r1, r2
 800fa02:	2200      	movs	r2, #0
 800fa04:	602a      	str	r2, [r5, #0]
 800fa06:	461a      	mov	r2, r3
 800fa08:	f7f4 fcba 	bl	8004380 <_write>
 800fa0c:	1c43      	adds	r3, r0, #1
 800fa0e:	d102      	bne.n	800fa16 <_write_r+0x1e>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b103      	cbz	r3, 800fa16 <_write_r+0x1e>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
 800fa18:	200008cc 	.word	0x200008cc

0800fa1c <__assert_func>:
 800fa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa1e:	4614      	mov	r4, r2
 800fa20:	461a      	mov	r2, r3
 800fa22:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <__assert_func+0x2c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4605      	mov	r5, r0
 800fa28:	68d8      	ldr	r0, [r3, #12]
 800fa2a:	b14c      	cbz	r4, 800fa40 <__assert_func+0x24>
 800fa2c:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <__assert_func+0x30>)
 800fa2e:	9100      	str	r1, [sp, #0]
 800fa30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa34:	4906      	ldr	r1, [pc, #24]	; (800fa50 <__assert_func+0x34>)
 800fa36:	462b      	mov	r3, r5
 800fa38:	f000 f81e 	bl	800fa78 <fiprintf>
 800fa3c:	f000 f89f 	bl	800fb7e <abort>
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <__assert_func+0x38>)
 800fa42:	461c      	mov	r4, r3
 800fa44:	e7f3      	b.n	800fa2e <__assert_func+0x12>
 800fa46:	bf00      	nop
 800fa48:	20000010 	.word	0x20000010
 800fa4c:	0801215d 	.word	0x0801215d
 800fa50:	0801216a 	.word	0x0801216a
 800fa54:	08012198 	.word	0x08012198

0800fa58 <_close_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4d06      	ldr	r5, [pc, #24]	; (800fa74 <_close_r+0x1c>)
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	602b      	str	r3, [r5, #0]
 800fa64:	f7f8 f909 	bl	8007c7a <_close>
 800fa68:	1c43      	adds	r3, r0, #1
 800fa6a:	d102      	bne.n	800fa72 <_close_r+0x1a>
 800fa6c:	682b      	ldr	r3, [r5, #0]
 800fa6e:	b103      	cbz	r3, 800fa72 <_close_r+0x1a>
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	bd38      	pop	{r3, r4, r5, pc}
 800fa74:	200008cc 	.word	0x200008cc

0800fa78 <fiprintf>:
 800fa78:	b40e      	push	{r1, r2, r3}
 800fa7a:	b503      	push	{r0, r1, lr}
 800fa7c:	4601      	mov	r1, r0
 800fa7e:	ab03      	add	r3, sp, #12
 800fa80:	4805      	ldr	r0, [pc, #20]	; (800fa98 <fiprintf+0x20>)
 800fa82:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa86:	6800      	ldr	r0, [r0, #0]
 800fa88:	9301      	str	r3, [sp, #4]
 800fa8a:	f7ff fe31 	bl	800f6f0 <_vfiprintf_r>
 800fa8e:	b002      	add	sp, #8
 800fa90:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa94:	b003      	add	sp, #12
 800fa96:	4770      	bx	lr
 800fa98:	20000010 	.word	0x20000010

0800fa9c <_fstat_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	; (800fabc <_fstat_r+0x20>)
 800faa0:	2300      	movs	r3, #0
 800faa2:	4604      	mov	r4, r0
 800faa4:	4608      	mov	r0, r1
 800faa6:	4611      	mov	r1, r2
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	f7f8 f8f2 	bl	8007c92 <_fstat>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d102      	bne.n	800fab8 <_fstat_r+0x1c>
 800fab2:	682b      	ldr	r3, [r5, #0]
 800fab4:	b103      	cbz	r3, 800fab8 <_fstat_r+0x1c>
 800fab6:	6023      	str	r3, [r4, #0]
 800fab8:	bd38      	pop	{r3, r4, r5, pc}
 800faba:	bf00      	nop
 800fabc:	200008cc 	.word	0x200008cc

0800fac0 <_isatty_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d06      	ldr	r5, [pc, #24]	; (800fadc <_isatty_r+0x1c>)
 800fac4:	2300      	movs	r3, #0
 800fac6:	4604      	mov	r4, r0
 800fac8:	4608      	mov	r0, r1
 800faca:	602b      	str	r3, [r5, #0]
 800facc:	f7f8 f8f1 	bl	8007cb2 <_isatty>
 800fad0:	1c43      	adds	r3, r0, #1
 800fad2:	d102      	bne.n	800fada <_isatty_r+0x1a>
 800fad4:	682b      	ldr	r3, [r5, #0]
 800fad6:	b103      	cbz	r3, 800fada <_isatty_r+0x1a>
 800fad8:	6023      	str	r3, [r4, #0]
 800fada:	bd38      	pop	{r3, r4, r5, pc}
 800fadc:	200008cc 	.word	0x200008cc

0800fae0 <_lseek_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_lseek_r+0x20>)
 800fae4:	4604      	mov	r4, r0
 800fae6:	4608      	mov	r0, r1
 800fae8:	4611      	mov	r1, r2
 800faea:	2200      	movs	r2, #0
 800faec:	602a      	str	r2, [r5, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	f7f8 f8ea 	bl	8007cc8 <_lseek>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_lseek_r+0x1e>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_lseek_r+0x1e>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	200008cc 	.word	0x200008cc

0800fb04 <__ascii_mbtowc>:
 800fb04:	b082      	sub	sp, #8
 800fb06:	b901      	cbnz	r1, 800fb0a <__ascii_mbtowc+0x6>
 800fb08:	a901      	add	r1, sp, #4
 800fb0a:	b142      	cbz	r2, 800fb1e <__ascii_mbtowc+0x1a>
 800fb0c:	b14b      	cbz	r3, 800fb22 <__ascii_mbtowc+0x1e>
 800fb0e:	7813      	ldrb	r3, [r2, #0]
 800fb10:	600b      	str	r3, [r1, #0]
 800fb12:	7812      	ldrb	r2, [r2, #0]
 800fb14:	1e10      	subs	r0, r2, #0
 800fb16:	bf18      	it	ne
 800fb18:	2001      	movne	r0, #1
 800fb1a:	b002      	add	sp, #8
 800fb1c:	4770      	bx	lr
 800fb1e:	4610      	mov	r0, r2
 800fb20:	e7fb      	b.n	800fb1a <__ascii_mbtowc+0x16>
 800fb22:	f06f 0001 	mvn.w	r0, #1
 800fb26:	e7f8      	b.n	800fb1a <__ascii_mbtowc+0x16>

0800fb28 <__malloc_lock>:
 800fb28:	4801      	ldr	r0, [pc, #4]	; (800fb30 <__malloc_lock+0x8>)
 800fb2a:	f7ff b902 	b.w	800ed32 <__retarget_lock_acquire_recursive>
 800fb2e:	bf00      	nop
 800fb30:	200008c4 	.word	0x200008c4

0800fb34 <__malloc_unlock>:
 800fb34:	4801      	ldr	r0, [pc, #4]	; (800fb3c <__malloc_unlock+0x8>)
 800fb36:	f7ff b8fd 	b.w	800ed34 <__retarget_lock_release_recursive>
 800fb3a:	bf00      	nop
 800fb3c:	200008c4 	.word	0x200008c4

0800fb40 <_read_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d07      	ldr	r5, [pc, #28]	; (800fb60 <_read_r+0x20>)
 800fb44:	4604      	mov	r4, r0
 800fb46:	4608      	mov	r0, r1
 800fb48:	4611      	mov	r1, r2
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	602a      	str	r2, [r5, #0]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f7f8 f876 	bl	8007c40 <_read>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_read_r+0x1e>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_read_r+0x1e>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	200008cc 	.word	0x200008cc

0800fb64 <__ascii_wctomb>:
 800fb64:	b149      	cbz	r1, 800fb7a <__ascii_wctomb+0x16>
 800fb66:	2aff      	cmp	r2, #255	; 0xff
 800fb68:	bf85      	ittet	hi
 800fb6a:	238a      	movhi	r3, #138	; 0x8a
 800fb6c:	6003      	strhi	r3, [r0, #0]
 800fb6e:	700a      	strbls	r2, [r1, #0]
 800fb70:	f04f 30ff 	movhi.w	r0, #4294967295
 800fb74:	bf98      	it	ls
 800fb76:	2001      	movls	r0, #1
 800fb78:	4770      	bx	lr
 800fb7a:	4608      	mov	r0, r1
 800fb7c:	4770      	bx	lr

0800fb7e <abort>:
 800fb7e:	b508      	push	{r3, lr}
 800fb80:	2006      	movs	r0, #6
 800fb82:	f000 f82b 	bl	800fbdc <raise>
 800fb86:	2001      	movs	r0, #1
 800fb88:	f7f8 f850 	bl	8007c2c <_exit>

0800fb8c <_raise_r>:
 800fb8c:	291f      	cmp	r1, #31
 800fb8e:	b538      	push	{r3, r4, r5, lr}
 800fb90:	4604      	mov	r4, r0
 800fb92:	460d      	mov	r5, r1
 800fb94:	d904      	bls.n	800fba0 <_raise_r+0x14>
 800fb96:	2316      	movs	r3, #22
 800fb98:	6003      	str	r3, [r0, #0]
 800fb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9e:	bd38      	pop	{r3, r4, r5, pc}
 800fba0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fba2:	b112      	cbz	r2, 800fbaa <_raise_r+0x1e>
 800fba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fba8:	b94b      	cbnz	r3, 800fbbe <_raise_r+0x32>
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f000 f830 	bl	800fc10 <_getpid_r>
 800fbb0:	462a      	mov	r2, r5
 800fbb2:	4601      	mov	r1, r0
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbba:	f000 b817 	b.w	800fbec <_kill_r>
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d00a      	beq.n	800fbd8 <_raise_r+0x4c>
 800fbc2:	1c59      	adds	r1, r3, #1
 800fbc4:	d103      	bne.n	800fbce <_raise_r+0x42>
 800fbc6:	2316      	movs	r3, #22
 800fbc8:	6003      	str	r3, [r0, #0]
 800fbca:	2001      	movs	r0, #1
 800fbcc:	e7e7      	b.n	800fb9e <_raise_r+0x12>
 800fbce:	2400      	movs	r4, #0
 800fbd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	4798      	blx	r3
 800fbd8:	2000      	movs	r0, #0
 800fbda:	e7e0      	b.n	800fb9e <_raise_r+0x12>

0800fbdc <raise>:
 800fbdc:	4b02      	ldr	r3, [pc, #8]	; (800fbe8 <raise+0xc>)
 800fbde:	4601      	mov	r1, r0
 800fbe0:	6818      	ldr	r0, [r3, #0]
 800fbe2:	f7ff bfd3 	b.w	800fb8c <_raise_r>
 800fbe6:	bf00      	nop
 800fbe8:	20000010 	.word	0x20000010

0800fbec <_kill_r>:
 800fbec:	b538      	push	{r3, r4, r5, lr}
 800fbee:	4d07      	ldr	r5, [pc, #28]	; (800fc0c <_kill_r+0x20>)
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	4608      	mov	r0, r1
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	f7f8 f807 	bl	8007c0c <_kill>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	d102      	bne.n	800fc08 <_kill_r+0x1c>
 800fc02:	682b      	ldr	r3, [r5, #0]
 800fc04:	b103      	cbz	r3, 800fc08 <_kill_r+0x1c>
 800fc06:	6023      	str	r3, [r4, #0]
 800fc08:	bd38      	pop	{r3, r4, r5, pc}
 800fc0a:	bf00      	nop
 800fc0c:	200008cc 	.word	0x200008cc

0800fc10 <_getpid_r>:
 800fc10:	f7f7 bff4 	b.w	8007bfc <_getpid>
 800fc14:	0000      	movs	r0, r0
	...

0800fc18 <cos>:
 800fc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc1a:	ec53 2b10 	vmov	r2, r3, d0
 800fc1e:	4824      	ldr	r0, [pc, #144]	; (800fcb0 <cos+0x98>)
 800fc20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc24:	4281      	cmp	r1, r0
 800fc26:	dc06      	bgt.n	800fc36 <cos+0x1e>
 800fc28:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800fca8 <cos+0x90>
 800fc2c:	f000 ffb8 	bl	8010ba0 <__kernel_cos>
 800fc30:	ec51 0b10 	vmov	r0, r1, d0
 800fc34:	e007      	b.n	800fc46 <cos+0x2e>
 800fc36:	481f      	ldr	r0, [pc, #124]	; (800fcb4 <cos+0x9c>)
 800fc38:	4281      	cmp	r1, r0
 800fc3a:	dd09      	ble.n	800fc50 <cos+0x38>
 800fc3c:	ee10 0a10 	vmov	r0, s0
 800fc40:	4619      	mov	r1, r3
 800fc42:	f7f0 fb21 	bl	8000288 <__aeabi_dsub>
 800fc46:	ec41 0b10 	vmov	d0, r0, r1
 800fc4a:	b005      	add	sp, #20
 800fc4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc50:	4668      	mov	r0, sp
 800fc52:	f000 f951 	bl	800fef8 <__ieee754_rem_pio2>
 800fc56:	f000 0003 	and.w	r0, r0, #3
 800fc5a:	2801      	cmp	r0, #1
 800fc5c:	d007      	beq.n	800fc6e <cos+0x56>
 800fc5e:	2802      	cmp	r0, #2
 800fc60:	d012      	beq.n	800fc88 <cos+0x70>
 800fc62:	b9c0      	cbnz	r0, 800fc96 <cos+0x7e>
 800fc64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc68:	ed9d 0b00 	vldr	d0, [sp]
 800fc6c:	e7de      	b.n	800fc2c <cos+0x14>
 800fc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc72:	ed9d 0b00 	vldr	d0, [sp]
 800fc76:	f001 fb9b 	bl	80113b0 <__kernel_sin>
 800fc7a:	ec53 2b10 	vmov	r2, r3, d0
 800fc7e:	ee10 0a10 	vmov	r0, s0
 800fc82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fc86:	e7de      	b.n	800fc46 <cos+0x2e>
 800fc88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc8c:	ed9d 0b00 	vldr	d0, [sp]
 800fc90:	f000 ff86 	bl	8010ba0 <__kernel_cos>
 800fc94:	e7f1      	b.n	800fc7a <cos+0x62>
 800fc96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc9a:	ed9d 0b00 	vldr	d0, [sp]
 800fc9e:	2001      	movs	r0, #1
 800fca0:	f001 fb86 	bl	80113b0 <__kernel_sin>
 800fca4:	e7c4      	b.n	800fc30 <cos+0x18>
 800fca6:	bf00      	nop
	...
 800fcb0:	3fe921fb 	.word	0x3fe921fb
 800fcb4:	7fefffff 	.word	0x7fefffff

0800fcb8 <sin>:
 800fcb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcba:	ec53 2b10 	vmov	r2, r3, d0
 800fcbe:	4826      	ldr	r0, [pc, #152]	; (800fd58 <sin+0xa0>)
 800fcc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fcc4:	4281      	cmp	r1, r0
 800fcc6:	dc07      	bgt.n	800fcd8 <sin+0x20>
 800fcc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fd50 <sin+0x98>
 800fccc:	2000      	movs	r0, #0
 800fcce:	f001 fb6f 	bl	80113b0 <__kernel_sin>
 800fcd2:	ec51 0b10 	vmov	r0, r1, d0
 800fcd6:	e007      	b.n	800fce8 <sin+0x30>
 800fcd8:	4820      	ldr	r0, [pc, #128]	; (800fd5c <sin+0xa4>)
 800fcda:	4281      	cmp	r1, r0
 800fcdc:	dd09      	ble.n	800fcf2 <sin+0x3a>
 800fcde:	ee10 0a10 	vmov	r0, s0
 800fce2:	4619      	mov	r1, r3
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	ec41 0b10 	vmov	d0, r0, r1
 800fcec:	b005      	add	sp, #20
 800fcee:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcf2:	4668      	mov	r0, sp
 800fcf4:	f000 f900 	bl	800fef8 <__ieee754_rem_pio2>
 800fcf8:	f000 0003 	and.w	r0, r0, #3
 800fcfc:	2801      	cmp	r0, #1
 800fcfe:	d008      	beq.n	800fd12 <sin+0x5a>
 800fd00:	2802      	cmp	r0, #2
 800fd02:	d00d      	beq.n	800fd20 <sin+0x68>
 800fd04:	b9d0      	cbnz	r0, 800fd3c <sin+0x84>
 800fd06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd0a:	ed9d 0b00 	vldr	d0, [sp]
 800fd0e:	2001      	movs	r0, #1
 800fd10:	e7dd      	b.n	800fcce <sin+0x16>
 800fd12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd16:	ed9d 0b00 	vldr	d0, [sp]
 800fd1a:	f000 ff41 	bl	8010ba0 <__kernel_cos>
 800fd1e:	e7d8      	b.n	800fcd2 <sin+0x1a>
 800fd20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd24:	ed9d 0b00 	vldr	d0, [sp]
 800fd28:	2001      	movs	r0, #1
 800fd2a:	f001 fb41 	bl	80113b0 <__kernel_sin>
 800fd2e:	ec53 2b10 	vmov	r2, r3, d0
 800fd32:	ee10 0a10 	vmov	r0, s0
 800fd36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fd3a:	e7d5      	b.n	800fce8 <sin+0x30>
 800fd3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd40:	ed9d 0b00 	vldr	d0, [sp]
 800fd44:	f000 ff2c 	bl	8010ba0 <__kernel_cos>
 800fd48:	e7f1      	b.n	800fd2e <sin+0x76>
 800fd4a:	bf00      	nop
 800fd4c:	f3af 8000 	nop.w
	...
 800fd58:	3fe921fb 	.word	0x3fe921fb
 800fd5c:	7fefffff 	.word	0x7fefffff

0800fd60 <asinf>:
 800fd60:	b508      	push	{r3, lr}
 800fd62:	ed2d 8b02 	vpush	{d8}
 800fd66:	eeb0 8a40 	vmov.f32	s16, s0
 800fd6a:	f000 facf 	bl	801030c <__ieee754_asinf>
 800fd6e:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <asinf+0x5c>)
 800fd70:	f993 3000 	ldrsb.w	r3, [r3]
 800fd74:	3301      	adds	r3, #1
 800fd76:	eef0 8a40 	vmov.f32	s17, s0
 800fd7a:	d01a      	beq.n	800fdb2 <asinf+0x52>
 800fd7c:	eeb4 8a48 	vcmp.f32	s16, s16
 800fd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd84:	d615      	bvs.n	800fdb2 <asinf+0x52>
 800fd86:	eeb0 0a48 	vmov.f32	s0, s16
 800fd8a:	f001 fdb3 	bl	80118f4 <fabsf>
 800fd8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	dd0a      	ble.n	800fdb2 <asinf+0x52>
 800fd9c:	f7fd f9aa 	bl	800d0f4 <__errno>
 800fda0:	ecbd 8b02 	vpop	{d8}
 800fda4:	2321      	movs	r3, #33	; 0x21
 800fda6:	6003      	str	r3, [r0, #0]
 800fda8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fdac:	4804      	ldr	r0, [pc, #16]	; (800fdc0 <asinf+0x60>)
 800fdae:	f001 bdb5 	b.w	801191c <nanf>
 800fdb2:	eeb0 0a68 	vmov.f32	s0, s17
 800fdb6:	ecbd 8b02 	vpop	{d8}
 800fdba:	bd08      	pop	{r3, pc}
 800fdbc:	200001e0 	.word	0x200001e0
 800fdc0:	08012198 	.word	0x08012198

0800fdc4 <atan2f>:
 800fdc4:	f000 bb88 	b.w	80104d8 <__ieee754_atan2f>

0800fdc8 <powf>:
 800fdc8:	b508      	push	{r3, lr}
 800fdca:	ed2d 8b04 	vpush	{d8-d9}
 800fdce:	eeb0 9a40 	vmov.f32	s18, s0
 800fdd2:	eef0 8a60 	vmov.f32	s17, s1
 800fdd6:	f000 fc1f 	bl	8010618 <__ieee754_powf>
 800fdda:	4b43      	ldr	r3, [pc, #268]	; (800fee8 <powf+0x120>)
 800fddc:	f993 3000 	ldrsb.w	r3, [r3]
 800fde0:	3301      	adds	r3, #1
 800fde2:	eeb0 8a40 	vmov.f32	s16, s0
 800fde6:	d012      	beq.n	800fe0e <powf+0x46>
 800fde8:	eef4 8a68 	vcmp.f32	s17, s17
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	d60d      	bvs.n	800fe0e <powf+0x46>
 800fdf2:	eeb4 9a49 	vcmp.f32	s18, s18
 800fdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfa:	d70d      	bvc.n	800fe18 <powf+0x50>
 800fdfc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fe08:	bf08      	it	eq
 800fe0a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800fe0e:	eeb0 0a48 	vmov.f32	s0, s16
 800fe12:	ecbd 8b04 	vpop	{d8-d9}
 800fe16:	bd08      	pop	{r3, pc}
 800fe18:	eddf 9a34 	vldr	s19, [pc, #208]	; 800feec <powf+0x124>
 800fe1c:	eeb4 9a69 	vcmp.f32	s18, s19
 800fe20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe24:	d116      	bne.n	800fe54 <powf+0x8c>
 800fe26:	eef4 8a69 	vcmp.f32	s17, s19
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	d057      	beq.n	800fee0 <powf+0x118>
 800fe30:	eeb0 0a68 	vmov.f32	s0, s17
 800fe34:	f001 fd65 	bl	8011902 <finitef>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d0e8      	beq.n	800fe0e <powf+0x46>
 800fe3c:	eef4 8ae9 	vcmpe.f32	s17, s19
 800fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe44:	d5e3      	bpl.n	800fe0e <powf+0x46>
 800fe46:	f7fd f955 	bl	800d0f4 <__errno>
 800fe4a:	2321      	movs	r3, #33	; 0x21
 800fe4c:	6003      	str	r3, [r0, #0]
 800fe4e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800fef0 <powf+0x128>
 800fe52:	e7dc      	b.n	800fe0e <powf+0x46>
 800fe54:	f001 fd55 	bl	8011902 <finitef>
 800fe58:	bb50      	cbnz	r0, 800feb0 <powf+0xe8>
 800fe5a:	eeb0 0a49 	vmov.f32	s0, s18
 800fe5e:	f001 fd50 	bl	8011902 <finitef>
 800fe62:	b328      	cbz	r0, 800feb0 <powf+0xe8>
 800fe64:	eeb0 0a68 	vmov.f32	s0, s17
 800fe68:	f001 fd4b 	bl	8011902 <finitef>
 800fe6c:	b300      	cbz	r0, 800feb0 <powf+0xe8>
 800fe6e:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe76:	d706      	bvc.n	800fe86 <powf+0xbe>
 800fe78:	f7fd f93c 	bl	800d0f4 <__errno>
 800fe7c:	2321      	movs	r3, #33	; 0x21
 800fe7e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800fe82:	6003      	str	r3, [r0, #0]
 800fe84:	e7c3      	b.n	800fe0e <powf+0x46>
 800fe86:	f7fd f935 	bl	800d0f4 <__errno>
 800fe8a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800fe8e:	2322      	movs	r3, #34	; 0x22
 800fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	d508      	bpl.n	800feaa <powf+0xe2>
 800fe98:	eeb0 0a68 	vmov.f32	s0, s17
 800fe9c:	f001 fd44 	bl	8011928 <rintf>
 800fea0:	eeb4 0a68 	vcmp.f32	s0, s17
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	d1d1      	bne.n	800fe4e <powf+0x86>
 800feaa:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800fef4 <powf+0x12c>
 800feae:	e7ae      	b.n	800fe0e <powf+0x46>
 800feb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	d1a9      	bne.n	800fe0e <powf+0x46>
 800feba:	eeb0 0a49 	vmov.f32	s0, s18
 800febe:	f001 fd20 	bl	8011902 <finitef>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d0a3      	beq.n	800fe0e <powf+0x46>
 800fec6:	eeb0 0a68 	vmov.f32	s0, s17
 800feca:	f001 fd1a 	bl	8011902 <finitef>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d09d      	beq.n	800fe0e <powf+0x46>
 800fed2:	f7fd f90f 	bl	800d0f4 <__errno>
 800fed6:	2322      	movs	r3, #34	; 0x22
 800fed8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800feec <powf+0x124>
 800fedc:	6003      	str	r3, [r0, #0]
 800fede:	e796      	b.n	800fe0e <powf+0x46>
 800fee0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fee4:	e793      	b.n	800fe0e <powf+0x46>
 800fee6:	bf00      	nop
 800fee8:	200001e0 	.word	0x200001e0
 800feec:	00000000 	.word	0x00000000
 800fef0:	ff800000 	.word	0xff800000
 800fef4:	7f800000 	.word	0x7f800000

0800fef8 <__ieee754_rem_pio2>:
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	ed2d 8b02 	vpush	{d8}
 800ff00:	ec55 4b10 	vmov	r4, r5, d0
 800ff04:	4bca      	ldr	r3, [pc, #808]	; (8010230 <__ieee754_rem_pio2+0x338>)
 800ff06:	b08b      	sub	sp, #44	; 0x2c
 800ff08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ff0c:	4598      	cmp	r8, r3
 800ff0e:	4682      	mov	sl, r0
 800ff10:	9502      	str	r5, [sp, #8]
 800ff12:	dc08      	bgt.n	800ff26 <__ieee754_rem_pio2+0x2e>
 800ff14:	2200      	movs	r2, #0
 800ff16:	2300      	movs	r3, #0
 800ff18:	ed80 0b00 	vstr	d0, [r0]
 800ff1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ff20:	f04f 0b00 	mov.w	fp, #0
 800ff24:	e028      	b.n	800ff78 <__ieee754_rem_pio2+0x80>
 800ff26:	4bc3      	ldr	r3, [pc, #780]	; (8010234 <__ieee754_rem_pio2+0x33c>)
 800ff28:	4598      	cmp	r8, r3
 800ff2a:	dc78      	bgt.n	801001e <__ieee754_rem_pio2+0x126>
 800ff2c:	9b02      	ldr	r3, [sp, #8]
 800ff2e:	4ec2      	ldr	r6, [pc, #776]	; (8010238 <__ieee754_rem_pio2+0x340>)
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	ee10 0a10 	vmov	r0, s0
 800ff36:	a3b0      	add	r3, pc, #704	; (adr r3, 80101f8 <__ieee754_rem_pio2+0x300>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	dd39      	ble.n	800ffb4 <__ieee754_rem_pio2+0xbc>
 800ff40:	f7f0 f9a2 	bl	8000288 <__aeabi_dsub>
 800ff44:	45b0      	cmp	r8, r6
 800ff46:	4604      	mov	r4, r0
 800ff48:	460d      	mov	r5, r1
 800ff4a:	d01b      	beq.n	800ff84 <__ieee754_rem_pio2+0x8c>
 800ff4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010200 <__ieee754_rem_pio2+0x308>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	f7f0 f999 	bl	8000288 <__aeabi_dsub>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ff5e:	4620      	mov	r0, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7f0 f991 	bl	8000288 <__aeabi_dsub>
 800ff66:	a3a6      	add	r3, pc, #664	; (adr r3, 8010200 <__ieee754_rem_pio2+0x308>)
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	f7f0 f98c 	bl	8000288 <__aeabi_dsub>
 800ff70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff74:	f04f 0b01 	mov.w	fp, #1
 800ff78:	4658      	mov	r0, fp
 800ff7a:	b00b      	add	sp, #44	; 0x2c
 800ff7c:	ecbd 8b02 	vpop	{d8}
 800ff80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff84:	a3a0      	add	r3, pc, #640	; (adr r3, 8010208 <__ieee754_rem_pio2+0x310>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	f7f0 f97d 	bl	8000288 <__aeabi_dsub>
 800ff8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8010210 <__ieee754_rem_pio2+0x318>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	4604      	mov	r4, r0
 800ff96:	460d      	mov	r5, r1
 800ff98:	f7f0 f976 	bl	8000288 <__aeabi_dsub>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	e9ca 2300 	strd	r2, r3, [sl]
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	f7f0 f96e 	bl	8000288 <__aeabi_dsub>
 800ffac:	a398      	add	r3, pc, #608	; (adr r3, 8010210 <__ieee754_rem_pio2+0x318>)
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	e7db      	b.n	800ff6c <__ieee754_rem_pio2+0x74>
 800ffb4:	f7f0 f96a 	bl	800028c <__adddf3>
 800ffb8:	45b0      	cmp	r8, r6
 800ffba:	4604      	mov	r4, r0
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	d016      	beq.n	800ffee <__ieee754_rem_pio2+0xf6>
 800ffc0:	a38f      	add	r3, pc, #572	; (adr r3, 8010200 <__ieee754_rem_pio2+0x308>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 f961 	bl	800028c <__adddf3>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	460b      	mov	r3, r1
 800ffce:	e9ca 2300 	strd	r2, r3, [sl]
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	f7f0 f957 	bl	8000288 <__aeabi_dsub>
 800ffda:	a389      	add	r3, pc, #548	; (adr r3, 8010200 <__ieee754_rem_pio2+0x308>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	f7f0 f954 	bl	800028c <__adddf3>
 800ffe4:	f04f 3bff 	mov.w	fp, #4294967295
 800ffe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ffec:	e7c4      	b.n	800ff78 <__ieee754_rem_pio2+0x80>
 800ffee:	a386      	add	r3, pc, #536	; (adr r3, 8010208 <__ieee754_rem_pio2+0x310>)
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	f7f0 f94a 	bl	800028c <__adddf3>
 800fff8:	a385      	add	r3, pc, #532	; (adr r3, 8010210 <__ieee754_rem_pio2+0x318>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	4604      	mov	r4, r0
 8010000:	460d      	mov	r5, r1
 8010002:	f7f0 f943 	bl	800028c <__adddf3>
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	e9ca 2300 	strd	r2, r3, [sl]
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 f939 	bl	8000288 <__aeabi_dsub>
 8010016:	a37e      	add	r3, pc, #504	; (adr r3, 8010210 <__ieee754_rem_pio2+0x318>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	e7e0      	b.n	800ffe0 <__ieee754_rem_pio2+0xe8>
 801001e:	4b87      	ldr	r3, [pc, #540]	; (801023c <__ieee754_rem_pio2+0x344>)
 8010020:	4598      	cmp	r8, r3
 8010022:	f300 80d9 	bgt.w	80101d8 <__ieee754_rem_pio2+0x2e0>
 8010026:	f001 fa81 	bl	801152c <fabs>
 801002a:	ec55 4b10 	vmov	r4, r5, d0
 801002e:	ee10 0a10 	vmov	r0, s0
 8010032:	a379      	add	r3, pc, #484	; (adr r3, 8010218 <__ieee754_rem_pio2+0x320>)
 8010034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010038:	4629      	mov	r1, r5
 801003a:	f7f0 fadd 	bl	80005f8 <__aeabi_dmul>
 801003e:	4b80      	ldr	r3, [pc, #512]	; (8010240 <__ieee754_rem_pio2+0x348>)
 8010040:	2200      	movs	r2, #0
 8010042:	f7f0 f923 	bl	800028c <__adddf3>
 8010046:	f7f0 fd87 	bl	8000b58 <__aeabi_d2iz>
 801004a:	4683      	mov	fp, r0
 801004c:	f7f0 fa6a 	bl	8000524 <__aeabi_i2d>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	ec43 2b18 	vmov	d8, r2, r3
 8010058:	a367      	add	r3, pc, #412	; (adr r3, 80101f8 <__ieee754_rem_pio2+0x300>)
 801005a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	4602      	mov	r2, r0
 8010064:	460b      	mov	r3, r1
 8010066:	4620      	mov	r0, r4
 8010068:	4629      	mov	r1, r5
 801006a:	f7f0 f90d 	bl	8000288 <__aeabi_dsub>
 801006e:	a364      	add	r3, pc, #400	; (adr r3, 8010200 <__ieee754_rem_pio2+0x308>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	4606      	mov	r6, r0
 8010076:	460f      	mov	r7, r1
 8010078:	ec51 0b18 	vmov	r0, r1, d8
 801007c:	f7f0 fabc 	bl	80005f8 <__aeabi_dmul>
 8010080:	f1bb 0f1f 	cmp.w	fp, #31
 8010084:	4604      	mov	r4, r0
 8010086:	460d      	mov	r5, r1
 8010088:	dc0d      	bgt.n	80100a6 <__ieee754_rem_pio2+0x1ae>
 801008a:	4b6e      	ldr	r3, [pc, #440]	; (8010244 <__ieee754_rem_pio2+0x34c>)
 801008c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010094:	4543      	cmp	r3, r8
 8010096:	d006      	beq.n	80100a6 <__ieee754_rem_pio2+0x1ae>
 8010098:	4622      	mov	r2, r4
 801009a:	462b      	mov	r3, r5
 801009c:	4630      	mov	r0, r6
 801009e:	4639      	mov	r1, r7
 80100a0:	f7f0 f8f2 	bl	8000288 <__aeabi_dsub>
 80100a4:	e00f      	b.n	80100c6 <__ieee754_rem_pio2+0x1ce>
 80100a6:	462b      	mov	r3, r5
 80100a8:	4622      	mov	r2, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	4639      	mov	r1, r7
 80100ae:	f7f0 f8eb 	bl	8000288 <__aeabi_dsub>
 80100b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80100b6:	9303      	str	r3, [sp, #12]
 80100b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80100bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80100c0:	f1b8 0f10 	cmp.w	r8, #16
 80100c4:	dc02      	bgt.n	80100cc <__ieee754_rem_pio2+0x1d4>
 80100c6:	e9ca 0100 	strd	r0, r1, [sl]
 80100ca:	e039      	b.n	8010140 <__ieee754_rem_pio2+0x248>
 80100cc:	a34e      	add	r3, pc, #312	; (adr r3, 8010208 <__ieee754_rem_pio2+0x310>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	ec51 0b18 	vmov	r0, r1, d8
 80100d6:	f7f0 fa8f 	bl	80005f8 <__aeabi_dmul>
 80100da:	4604      	mov	r4, r0
 80100dc:	460d      	mov	r5, r1
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4630      	mov	r0, r6
 80100e4:	4639      	mov	r1, r7
 80100e6:	f7f0 f8cf 	bl	8000288 <__aeabi_dsub>
 80100ea:	4602      	mov	r2, r0
 80100ec:	460b      	mov	r3, r1
 80100ee:	4680      	mov	r8, r0
 80100f0:	4689      	mov	r9, r1
 80100f2:	4630      	mov	r0, r6
 80100f4:	4639      	mov	r1, r7
 80100f6:	f7f0 f8c7 	bl	8000288 <__aeabi_dsub>
 80100fa:	4622      	mov	r2, r4
 80100fc:	462b      	mov	r3, r5
 80100fe:	f7f0 f8c3 	bl	8000288 <__aeabi_dsub>
 8010102:	a343      	add	r3, pc, #268	; (adr r3, 8010210 <__ieee754_rem_pio2+0x318>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	ec51 0b18 	vmov	r0, r1, d8
 8010110:	f7f0 fa72 	bl	80005f8 <__aeabi_dmul>
 8010114:	4622      	mov	r2, r4
 8010116:	462b      	mov	r3, r5
 8010118:	f7f0 f8b6 	bl	8000288 <__aeabi_dsub>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4604      	mov	r4, r0
 8010122:	460d      	mov	r5, r1
 8010124:	4640      	mov	r0, r8
 8010126:	4649      	mov	r1, r9
 8010128:	f7f0 f8ae 	bl	8000288 <__aeabi_dsub>
 801012c:	9a03      	ldr	r2, [sp, #12]
 801012e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	2b31      	cmp	r3, #49	; 0x31
 8010136:	dc24      	bgt.n	8010182 <__ieee754_rem_pio2+0x28a>
 8010138:	e9ca 0100 	strd	r0, r1, [sl]
 801013c:	4646      	mov	r6, r8
 801013e:	464f      	mov	r7, r9
 8010140:	e9da 8900 	ldrd	r8, r9, [sl]
 8010144:	4630      	mov	r0, r6
 8010146:	4642      	mov	r2, r8
 8010148:	464b      	mov	r3, r9
 801014a:	4639      	mov	r1, r7
 801014c:	f7f0 f89c 	bl	8000288 <__aeabi_dsub>
 8010150:	462b      	mov	r3, r5
 8010152:	4622      	mov	r2, r4
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	9b02      	ldr	r3, [sp, #8]
 801015a:	2b00      	cmp	r3, #0
 801015c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010160:	f6bf af0a 	bge.w	800ff78 <__ieee754_rem_pio2+0x80>
 8010164:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010168:	f8ca 3004 	str.w	r3, [sl, #4]
 801016c:	f8ca 8000 	str.w	r8, [sl]
 8010170:	f8ca 0008 	str.w	r0, [sl, #8]
 8010174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010178:	f8ca 300c 	str.w	r3, [sl, #12]
 801017c:	f1cb 0b00 	rsb	fp, fp, #0
 8010180:	e6fa      	b.n	800ff78 <__ieee754_rem_pio2+0x80>
 8010182:	a327      	add	r3, pc, #156	; (adr r3, 8010220 <__ieee754_rem_pio2+0x328>)
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	ec51 0b18 	vmov	r0, r1, d8
 801018c:	f7f0 fa34 	bl	80005f8 <__aeabi_dmul>
 8010190:	4604      	mov	r4, r0
 8010192:	460d      	mov	r5, r1
 8010194:	4602      	mov	r2, r0
 8010196:	460b      	mov	r3, r1
 8010198:	4640      	mov	r0, r8
 801019a:	4649      	mov	r1, r9
 801019c:	f7f0 f874 	bl	8000288 <__aeabi_dsub>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4606      	mov	r6, r0
 80101a6:	460f      	mov	r7, r1
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	f7f0 f86c 	bl	8000288 <__aeabi_dsub>
 80101b0:	4622      	mov	r2, r4
 80101b2:	462b      	mov	r3, r5
 80101b4:	f7f0 f868 	bl	8000288 <__aeabi_dsub>
 80101b8:	a31b      	add	r3, pc, #108	; (adr r3, 8010228 <__ieee754_rem_pio2+0x330>)
 80101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101be:	4604      	mov	r4, r0
 80101c0:	460d      	mov	r5, r1
 80101c2:	ec51 0b18 	vmov	r0, r1, d8
 80101c6:	f7f0 fa17 	bl	80005f8 <__aeabi_dmul>
 80101ca:	4622      	mov	r2, r4
 80101cc:	462b      	mov	r3, r5
 80101ce:	f7f0 f85b 	bl	8000288 <__aeabi_dsub>
 80101d2:	4604      	mov	r4, r0
 80101d4:	460d      	mov	r5, r1
 80101d6:	e75f      	b.n	8010098 <__ieee754_rem_pio2+0x1a0>
 80101d8:	4b1b      	ldr	r3, [pc, #108]	; (8010248 <__ieee754_rem_pio2+0x350>)
 80101da:	4598      	cmp	r8, r3
 80101dc:	dd36      	ble.n	801024c <__ieee754_rem_pio2+0x354>
 80101de:	ee10 2a10 	vmov	r2, s0
 80101e2:	462b      	mov	r3, r5
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 f84e 	bl	8000288 <__aeabi_dsub>
 80101ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101f0:	e9ca 0100 	strd	r0, r1, [sl]
 80101f4:	e694      	b.n	800ff20 <__ieee754_rem_pio2+0x28>
 80101f6:	bf00      	nop
 80101f8:	54400000 	.word	0x54400000
 80101fc:	3ff921fb 	.word	0x3ff921fb
 8010200:	1a626331 	.word	0x1a626331
 8010204:	3dd0b461 	.word	0x3dd0b461
 8010208:	1a600000 	.word	0x1a600000
 801020c:	3dd0b461 	.word	0x3dd0b461
 8010210:	2e037073 	.word	0x2e037073
 8010214:	3ba3198a 	.word	0x3ba3198a
 8010218:	6dc9c883 	.word	0x6dc9c883
 801021c:	3fe45f30 	.word	0x3fe45f30
 8010220:	2e000000 	.word	0x2e000000
 8010224:	3ba3198a 	.word	0x3ba3198a
 8010228:	252049c1 	.word	0x252049c1
 801022c:	397b839a 	.word	0x397b839a
 8010230:	3fe921fb 	.word	0x3fe921fb
 8010234:	4002d97b 	.word	0x4002d97b
 8010238:	3ff921fb 	.word	0x3ff921fb
 801023c:	413921fb 	.word	0x413921fb
 8010240:	3fe00000 	.word	0x3fe00000
 8010244:	080122a4 	.word	0x080122a4
 8010248:	7fefffff 	.word	0x7fefffff
 801024c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010250:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010254:	ee10 0a10 	vmov	r0, s0
 8010258:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801025c:	ee10 6a10 	vmov	r6, s0
 8010260:	460f      	mov	r7, r1
 8010262:	f7f0 fc79 	bl	8000b58 <__aeabi_d2iz>
 8010266:	f7f0 f95d 	bl	8000524 <__aeabi_i2d>
 801026a:	4602      	mov	r2, r0
 801026c:	460b      	mov	r3, r1
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010276:	f7f0 f807 	bl	8000288 <__aeabi_dsub>
 801027a:	4b22      	ldr	r3, [pc, #136]	; (8010304 <__ieee754_rem_pio2+0x40c>)
 801027c:	2200      	movs	r2, #0
 801027e:	f7f0 f9bb 	bl	80005f8 <__aeabi_dmul>
 8010282:	460f      	mov	r7, r1
 8010284:	4606      	mov	r6, r0
 8010286:	f7f0 fc67 	bl	8000b58 <__aeabi_d2iz>
 801028a:	f7f0 f94b 	bl	8000524 <__aeabi_i2d>
 801028e:	4602      	mov	r2, r0
 8010290:	460b      	mov	r3, r1
 8010292:	4630      	mov	r0, r6
 8010294:	4639      	mov	r1, r7
 8010296:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801029a:	f7ef fff5 	bl	8000288 <__aeabi_dsub>
 801029e:	4b19      	ldr	r3, [pc, #100]	; (8010304 <__ieee754_rem_pio2+0x40c>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	f7f0 f9a9 	bl	80005f8 <__aeabi_dmul>
 80102a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102aa:	ad04      	add	r5, sp, #16
 80102ac:	f04f 0803 	mov.w	r8, #3
 80102b0:	46a9      	mov	r9, r5
 80102b2:	2600      	movs	r6, #0
 80102b4:	2700      	movs	r7, #0
 80102b6:	4632      	mov	r2, r6
 80102b8:	463b      	mov	r3, r7
 80102ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80102be:	46c3      	mov	fp, r8
 80102c0:	3d08      	subs	r5, #8
 80102c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80102c6:	f7f0 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	d1f3      	bne.n	80102b6 <__ieee754_rem_pio2+0x3be>
 80102ce:	4b0e      	ldr	r3, [pc, #56]	; (8010308 <__ieee754_rem_pio2+0x410>)
 80102d0:	9301      	str	r3, [sp, #4]
 80102d2:	2302      	movs	r3, #2
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	4622      	mov	r2, r4
 80102d8:	465b      	mov	r3, fp
 80102da:	4651      	mov	r1, sl
 80102dc:	4648      	mov	r0, r9
 80102de:	f000 fd27 	bl	8010d30 <__kernel_rem_pio2>
 80102e2:	9b02      	ldr	r3, [sp, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	4683      	mov	fp, r0
 80102e8:	f6bf ae46 	bge.w	800ff78 <__ieee754_rem_pio2+0x80>
 80102ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80102f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80102f4:	f8ca 3004 	str.w	r3, [sl, #4]
 80102f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80102fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010300:	e73a      	b.n	8010178 <__ieee754_rem_pio2+0x280>
 8010302:	bf00      	nop
 8010304:	41700000 	.word	0x41700000
 8010308:	08012324 	.word	0x08012324

0801030c <__ieee754_asinf>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	ee10 5a10 	vmov	r5, s0
 8010312:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010316:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801031a:	ed2d 8b04 	vpush	{d8-d9}
 801031e:	d10c      	bne.n	801033a <__ieee754_asinf+0x2e>
 8010320:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8010498 <__ieee754_asinf+0x18c>
 8010324:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801049c <__ieee754_asinf+0x190>
 8010328:	ee60 7a27 	vmul.f32	s15, s0, s15
 801032c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010330:	eeb0 0a67 	vmov.f32	s0, s15
 8010334:	ecbd 8b04 	vpop	{d8-d9}
 8010338:	bd38      	pop	{r3, r4, r5, pc}
 801033a:	dd04      	ble.n	8010346 <__ieee754_asinf+0x3a>
 801033c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010340:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010344:	e7f6      	b.n	8010334 <__ieee754_asinf+0x28>
 8010346:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801034a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801034e:	da0b      	bge.n	8010368 <__ieee754_asinf+0x5c>
 8010350:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010354:	da52      	bge.n	80103fc <__ieee754_asinf+0xf0>
 8010356:	eddf 7a52 	vldr	s15, [pc, #328]	; 80104a0 <__ieee754_asinf+0x194>
 801035a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801035e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010366:	dce5      	bgt.n	8010334 <__ieee754_asinf+0x28>
 8010368:	f001 fac4 	bl	80118f4 <fabsf>
 801036c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8010370:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010374:	ee20 8a08 	vmul.f32	s16, s0, s16
 8010378:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80104a4 <__ieee754_asinf+0x198>
 801037c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80104a8 <__ieee754_asinf+0x19c>
 8010380:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80104ac <__ieee754_asinf+0x1a0>
 8010384:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010388:	eddf 7a49 	vldr	s15, [pc, #292]	; 80104b0 <__ieee754_asinf+0x1a4>
 801038c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010390:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80104b4 <__ieee754_asinf+0x1a8>
 8010394:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010398:	eddf 7a47 	vldr	s15, [pc, #284]	; 80104b8 <__ieee754_asinf+0x1ac>
 801039c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80103a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80104bc <__ieee754_asinf+0x1b0>
 80103a4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80103a8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80104c0 <__ieee754_asinf+0x1b4>
 80103ac:	eee8 7a07 	vfma.f32	s15, s16, s14
 80103b0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80104c4 <__ieee754_asinf+0x1b8>
 80103b4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80103b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80104c8 <__ieee754_asinf+0x1bc>
 80103bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80103c0:	eeb0 0a48 	vmov.f32	s0, s16
 80103c4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80103c8:	f000 fbe6 	bl	8010b98 <__ieee754_sqrtf>
 80103cc:	4b3f      	ldr	r3, [pc, #252]	; (80104cc <__ieee754_asinf+0x1c0>)
 80103ce:	ee29 9a08 	vmul.f32	s18, s18, s16
 80103d2:	429c      	cmp	r4, r3
 80103d4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80103d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80103dc:	dd3d      	ble.n	801045a <__ieee754_asinf+0x14e>
 80103de:	eea0 0a06 	vfma.f32	s0, s0, s12
 80103e2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80104d0 <__ieee754_asinf+0x1c4>
 80103e6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80103ea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801049c <__ieee754_asinf+0x190>
 80103ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80103f2:	2d00      	cmp	r5, #0
 80103f4:	bfd8      	it	le
 80103f6:	eeb1 0a40 	vnegle.f32	s0, s0
 80103fa:	e79b      	b.n	8010334 <__ieee754_asinf+0x28>
 80103fc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010400:	eddf 6a28 	vldr	s13, [pc, #160]	; 80104a4 <__ieee754_asinf+0x198>
 8010404:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80104a8 <__ieee754_asinf+0x19c>
 8010408:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80104bc <__ieee754_asinf+0x1b0>
 801040c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010410:	eddf 6a27 	vldr	s13, [pc, #156]	; 80104b0 <__ieee754_asinf+0x1a4>
 8010414:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010418:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80104b4 <__ieee754_asinf+0x1a8>
 801041c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010420:	eddf 6a25 	vldr	s13, [pc, #148]	; 80104b8 <__ieee754_asinf+0x1ac>
 8010424:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010428:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80104ac <__ieee754_asinf+0x1a0>
 801042c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010430:	eddf 6a23 	vldr	s13, [pc, #140]	; 80104c0 <__ieee754_asinf+0x1b4>
 8010434:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010438:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80104c4 <__ieee754_asinf+0x1b8>
 801043c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010440:	eddf 6a21 	vldr	s13, [pc, #132]	; 80104c8 <__ieee754_asinf+0x1bc>
 8010444:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010448:	ee27 7a27 	vmul.f32	s14, s14, s15
 801044c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010450:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010454:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010458:	e76c      	b.n	8010334 <__ieee754_asinf+0x28>
 801045a:	ee10 3a10 	vmov	r3, s0
 801045e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010462:	f023 030f 	bic.w	r3, r3, #15
 8010466:	ee07 3a10 	vmov	s14, r3
 801046a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801046e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010472:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010476:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801047a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010498 <__ieee754_asinf+0x18c>
 801047e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8010482:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8010486:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80104d4 <__ieee754_asinf+0x1c8>
 801048a:	eeb0 6a40 	vmov.f32	s12, s0
 801048e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010492:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010496:	e7aa      	b.n	80103ee <__ieee754_asinf+0xe2>
 8010498:	b33bbd2e 	.word	0xb33bbd2e
 801049c:	3fc90fdb 	.word	0x3fc90fdb
 80104a0:	7149f2ca 	.word	0x7149f2ca
 80104a4:	3811ef08 	.word	0x3811ef08
 80104a8:	3a4f7f04 	.word	0x3a4f7f04
 80104ac:	3e2aaaab 	.word	0x3e2aaaab
 80104b0:	bd241146 	.word	0xbd241146
 80104b4:	3e4e0aa8 	.word	0x3e4e0aa8
 80104b8:	bea6b090 	.word	0xbea6b090
 80104bc:	3d9dc62e 	.word	0x3d9dc62e
 80104c0:	bf303361 	.word	0xbf303361
 80104c4:	4001572d 	.word	0x4001572d
 80104c8:	c019d139 	.word	0xc019d139
 80104cc:	3f799999 	.word	0x3f799999
 80104d0:	333bbd2e 	.word	0x333bbd2e
 80104d4:	3f490fdb 	.word	0x3f490fdb

080104d8 <__ieee754_atan2f>:
 80104d8:	ee10 2a90 	vmov	r2, s1
 80104dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80104e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80104e4:	b510      	push	{r4, lr}
 80104e6:	eef0 7a40 	vmov.f32	s15, s0
 80104ea:	dc06      	bgt.n	80104fa <__ieee754_atan2f+0x22>
 80104ec:	ee10 0a10 	vmov	r0, s0
 80104f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80104f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104f8:	dd04      	ble.n	8010504 <__ieee754_atan2f+0x2c>
 80104fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80104fe:	eeb0 0a67 	vmov.f32	s0, s15
 8010502:	bd10      	pop	{r4, pc}
 8010504:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010508:	d103      	bne.n	8010512 <__ieee754_atan2f+0x3a>
 801050a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801050e:	f001 b91d 	b.w	801174c <atanf>
 8010512:	1794      	asrs	r4, r2, #30
 8010514:	f004 0402 	and.w	r4, r4, #2
 8010518:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801051c:	b943      	cbnz	r3, 8010530 <__ieee754_atan2f+0x58>
 801051e:	2c02      	cmp	r4, #2
 8010520:	d05e      	beq.n	80105e0 <__ieee754_atan2f+0x108>
 8010522:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80105f4 <__ieee754_atan2f+0x11c>
 8010526:	2c03      	cmp	r4, #3
 8010528:	bf08      	it	eq
 801052a:	eef0 7a47 	vmoveq.f32	s15, s14
 801052e:	e7e6      	b.n	80104fe <__ieee754_atan2f+0x26>
 8010530:	b941      	cbnz	r1, 8010544 <__ieee754_atan2f+0x6c>
 8010532:	eddf 7a31 	vldr	s15, [pc, #196]	; 80105f8 <__ieee754_atan2f+0x120>
 8010536:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80105fc <__ieee754_atan2f+0x124>
 801053a:	2800      	cmp	r0, #0
 801053c:	bfb8      	it	lt
 801053e:	eef0 7a40 	vmovlt.f32	s15, s0
 8010542:	e7dc      	b.n	80104fe <__ieee754_atan2f+0x26>
 8010544:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010548:	d110      	bne.n	801056c <__ieee754_atan2f+0x94>
 801054a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801054e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010552:	d107      	bne.n	8010564 <__ieee754_atan2f+0x8c>
 8010554:	2c02      	cmp	r4, #2
 8010556:	d846      	bhi.n	80105e6 <__ieee754_atan2f+0x10e>
 8010558:	4b29      	ldr	r3, [pc, #164]	; (8010600 <__ieee754_atan2f+0x128>)
 801055a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801055e:	edd4 7a00 	vldr	s15, [r4]
 8010562:	e7cc      	b.n	80104fe <__ieee754_atan2f+0x26>
 8010564:	2c02      	cmp	r4, #2
 8010566:	d841      	bhi.n	80105ec <__ieee754_atan2f+0x114>
 8010568:	4b26      	ldr	r3, [pc, #152]	; (8010604 <__ieee754_atan2f+0x12c>)
 801056a:	e7f6      	b.n	801055a <__ieee754_atan2f+0x82>
 801056c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010570:	d0df      	beq.n	8010532 <__ieee754_atan2f+0x5a>
 8010572:	1a5b      	subs	r3, r3, r1
 8010574:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010578:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801057c:	da1a      	bge.n	80105b4 <__ieee754_atan2f+0xdc>
 801057e:	2a00      	cmp	r2, #0
 8010580:	da01      	bge.n	8010586 <__ieee754_atan2f+0xae>
 8010582:	313c      	adds	r1, #60	; 0x3c
 8010584:	db19      	blt.n	80105ba <__ieee754_atan2f+0xe2>
 8010586:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801058a:	f001 f9b3 	bl	80118f4 <fabsf>
 801058e:	f001 f8dd 	bl	801174c <atanf>
 8010592:	eef0 7a40 	vmov.f32	s15, s0
 8010596:	2c01      	cmp	r4, #1
 8010598:	d012      	beq.n	80105c0 <__ieee754_atan2f+0xe8>
 801059a:	2c02      	cmp	r4, #2
 801059c:	d017      	beq.n	80105ce <__ieee754_atan2f+0xf6>
 801059e:	2c00      	cmp	r4, #0
 80105a0:	d0ad      	beq.n	80104fe <__ieee754_atan2f+0x26>
 80105a2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010608 <__ieee754_atan2f+0x130>
 80105a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80105aa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801060c <__ieee754_atan2f+0x134>
 80105ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80105b2:	e7a4      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80105f8 <__ieee754_atan2f+0x120>
 80105b8:	e7ed      	b.n	8010596 <__ieee754_atan2f+0xbe>
 80105ba:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010610 <__ieee754_atan2f+0x138>
 80105be:	e7ea      	b.n	8010596 <__ieee754_atan2f+0xbe>
 80105c0:	ee17 3a90 	vmov	r3, s15
 80105c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80105c8:	ee07 3a90 	vmov	s15, r3
 80105cc:	e797      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010608 <__ieee754_atan2f+0x130>
 80105d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80105d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801060c <__ieee754_atan2f+0x134>
 80105da:	ee70 7a67 	vsub.f32	s15, s0, s15
 80105de:	e78e      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105e0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801060c <__ieee754_atan2f+0x134>
 80105e4:	e78b      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010614 <__ieee754_atan2f+0x13c>
 80105ea:	e788      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010610 <__ieee754_atan2f+0x138>
 80105f0:	e785      	b.n	80104fe <__ieee754_atan2f+0x26>
 80105f2:	bf00      	nop
 80105f4:	c0490fdb 	.word	0xc0490fdb
 80105f8:	3fc90fdb 	.word	0x3fc90fdb
 80105fc:	bfc90fdb 	.word	0xbfc90fdb
 8010600:	0801242c 	.word	0x0801242c
 8010604:	08012438 	.word	0x08012438
 8010608:	33bbbd2e 	.word	0x33bbbd2e
 801060c:	40490fdb 	.word	0x40490fdb
 8010610:	00000000 	.word	0x00000000
 8010614:	3f490fdb 	.word	0x3f490fdb

08010618 <__ieee754_powf>:
 8010618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061c:	ee10 5a90 	vmov	r5, s1
 8010620:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8010624:	ed2d 8b02 	vpush	{d8}
 8010628:	eeb0 8a40 	vmov.f32	s16, s0
 801062c:	eef0 8a60 	vmov.f32	s17, s1
 8010630:	f000 8291 	beq.w	8010b56 <__ieee754_powf+0x53e>
 8010634:	ee10 8a10 	vmov	r8, s0
 8010638:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801063c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010640:	dc06      	bgt.n	8010650 <__ieee754_powf+0x38>
 8010642:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010646:	dd0a      	ble.n	801065e <__ieee754_powf+0x46>
 8010648:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801064c:	f000 8283 	beq.w	8010b56 <__ieee754_powf+0x53e>
 8010650:	ecbd 8b02 	vpop	{d8}
 8010654:	48d8      	ldr	r0, [pc, #864]	; (80109b8 <__ieee754_powf+0x3a0>)
 8010656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801065a:	f001 b95f 	b.w	801191c <nanf>
 801065e:	f1b8 0f00 	cmp.w	r8, #0
 8010662:	da1f      	bge.n	80106a4 <__ieee754_powf+0x8c>
 8010664:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8010668:	da2e      	bge.n	80106c8 <__ieee754_powf+0xb0>
 801066a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801066e:	f2c0 827b 	blt.w	8010b68 <__ieee754_powf+0x550>
 8010672:	15fb      	asrs	r3, r7, #23
 8010674:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010678:	fa47 f603 	asr.w	r6, r7, r3
 801067c:	fa06 f303 	lsl.w	r3, r6, r3
 8010680:	42bb      	cmp	r3, r7
 8010682:	f040 8271 	bne.w	8010b68 <__ieee754_powf+0x550>
 8010686:	f006 0601 	and.w	r6, r6, #1
 801068a:	f1c6 0602 	rsb	r6, r6, #2
 801068e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010692:	d120      	bne.n	80106d6 <__ieee754_powf+0xbe>
 8010694:	2d00      	cmp	r5, #0
 8010696:	f280 8264 	bge.w	8010b62 <__ieee754_powf+0x54a>
 801069a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801069e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80106a2:	e00d      	b.n	80106c0 <__ieee754_powf+0xa8>
 80106a4:	2600      	movs	r6, #0
 80106a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80106aa:	d1f0      	bne.n	801068e <__ieee754_powf+0x76>
 80106ac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80106b0:	f000 8251 	beq.w	8010b56 <__ieee754_powf+0x53e>
 80106b4:	dd0a      	ble.n	80106cc <__ieee754_powf+0xb4>
 80106b6:	2d00      	cmp	r5, #0
 80106b8:	f280 8250 	bge.w	8010b5c <__ieee754_powf+0x544>
 80106bc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80109bc <__ieee754_powf+0x3a4>
 80106c0:	ecbd 8b02 	vpop	{d8}
 80106c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c8:	2602      	movs	r6, #2
 80106ca:	e7ec      	b.n	80106a6 <__ieee754_powf+0x8e>
 80106cc:	2d00      	cmp	r5, #0
 80106ce:	daf5      	bge.n	80106bc <__ieee754_powf+0xa4>
 80106d0:	eeb1 0a68 	vneg.f32	s0, s17
 80106d4:	e7f4      	b.n	80106c0 <__ieee754_powf+0xa8>
 80106d6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80106da:	d102      	bne.n	80106e2 <__ieee754_powf+0xca>
 80106dc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80106e0:	e7ee      	b.n	80106c0 <__ieee754_powf+0xa8>
 80106e2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80106e6:	eeb0 0a48 	vmov.f32	s0, s16
 80106ea:	d108      	bne.n	80106fe <__ieee754_powf+0xe6>
 80106ec:	f1b8 0f00 	cmp.w	r8, #0
 80106f0:	db05      	blt.n	80106fe <__ieee754_powf+0xe6>
 80106f2:	ecbd 8b02 	vpop	{d8}
 80106f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106fa:	f000 ba4d 	b.w	8010b98 <__ieee754_sqrtf>
 80106fe:	f001 f8f9 	bl	80118f4 <fabsf>
 8010702:	b124      	cbz	r4, 801070e <__ieee754_powf+0xf6>
 8010704:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8010708:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801070c:	d117      	bne.n	801073e <__ieee754_powf+0x126>
 801070e:	2d00      	cmp	r5, #0
 8010710:	bfbc      	itt	lt
 8010712:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010716:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801071a:	f1b8 0f00 	cmp.w	r8, #0
 801071e:	dacf      	bge.n	80106c0 <__ieee754_powf+0xa8>
 8010720:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8010724:	ea54 0306 	orrs.w	r3, r4, r6
 8010728:	d104      	bne.n	8010734 <__ieee754_powf+0x11c>
 801072a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801072e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010732:	e7c5      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010734:	2e01      	cmp	r6, #1
 8010736:	d1c3      	bne.n	80106c0 <__ieee754_powf+0xa8>
 8010738:	eeb1 0a40 	vneg.f32	s0, s0
 801073c:	e7c0      	b.n	80106c0 <__ieee754_powf+0xa8>
 801073e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8010742:	3801      	subs	r0, #1
 8010744:	ea56 0300 	orrs.w	r3, r6, r0
 8010748:	d104      	bne.n	8010754 <__ieee754_powf+0x13c>
 801074a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801074e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010752:	e7b5      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010754:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8010758:	dd6b      	ble.n	8010832 <__ieee754_powf+0x21a>
 801075a:	4b99      	ldr	r3, [pc, #612]	; (80109c0 <__ieee754_powf+0x3a8>)
 801075c:	429c      	cmp	r4, r3
 801075e:	dc06      	bgt.n	801076e <__ieee754_powf+0x156>
 8010760:	2d00      	cmp	r5, #0
 8010762:	daab      	bge.n	80106bc <__ieee754_powf+0xa4>
 8010764:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80109c4 <__ieee754_powf+0x3ac>
 8010768:	ee20 0a00 	vmul.f32	s0, s0, s0
 801076c:	e7a8      	b.n	80106c0 <__ieee754_powf+0xa8>
 801076e:	4b96      	ldr	r3, [pc, #600]	; (80109c8 <__ieee754_powf+0x3b0>)
 8010770:	429c      	cmp	r4, r3
 8010772:	dd02      	ble.n	801077a <__ieee754_powf+0x162>
 8010774:	2d00      	cmp	r5, #0
 8010776:	dcf5      	bgt.n	8010764 <__ieee754_powf+0x14c>
 8010778:	e7a0      	b.n	80106bc <__ieee754_powf+0xa4>
 801077a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801077e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010782:	eddf 6a92 	vldr	s13, [pc, #584]	; 80109cc <__ieee754_powf+0x3b4>
 8010786:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801078a:	eee0 6a67 	vfms.f32	s13, s0, s15
 801078e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010792:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010796:	ee20 7a00 	vmul.f32	s14, s0, s0
 801079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801079e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80109d0 <__ieee754_powf+0x3b8>
 80107a2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80107a6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80109d4 <__ieee754_powf+0x3bc>
 80107aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80107ae:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80109d8 <__ieee754_powf+0x3c0>
 80107b2:	eef0 6a67 	vmov.f32	s13, s15
 80107b6:	eee0 6a07 	vfma.f32	s13, s0, s14
 80107ba:	ee16 3a90 	vmov	r3, s13
 80107be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107c2:	f023 030f 	bic.w	r3, r3, #15
 80107c6:	ee00 3a90 	vmov	s1, r3
 80107ca:	eee0 0a47 	vfms.f32	s1, s0, s14
 80107ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80107d2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80107d6:	f025 050f 	bic.w	r5, r5, #15
 80107da:	ee07 5a10 	vmov	s14, r5
 80107de:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80107e2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80107e6:	ee07 3a90 	vmov	s15, r3
 80107ea:	eee7 0a27 	vfma.f32	s1, s14, s15
 80107ee:	3e01      	subs	r6, #1
 80107f0:	ea56 0200 	orrs.w	r2, r6, r0
 80107f4:	ee07 5a10 	vmov	s14, r5
 80107f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80107fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010800:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010804:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010808:	ee17 4a10 	vmov	r4, s14
 801080c:	bf08      	it	eq
 801080e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8010812:	2c00      	cmp	r4, #0
 8010814:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010818:	f340 8184 	ble.w	8010b24 <__ieee754_powf+0x50c>
 801081c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8010820:	f340 80fc 	ble.w	8010a1c <__ieee754_powf+0x404>
 8010824:	eddf 7a67 	vldr	s15, [pc, #412]	; 80109c4 <__ieee754_powf+0x3ac>
 8010828:	ee28 0a27 	vmul.f32	s0, s16, s15
 801082c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010830:	e746      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010832:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8010836:	bf01      	itttt	eq
 8010838:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80109dc <__ieee754_powf+0x3c4>
 801083c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010840:	f06f 0217 	mvneq.w	r2, #23
 8010844:	ee17 4a90 	vmoveq	r4, s15
 8010848:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801084c:	bf18      	it	ne
 801084e:	2200      	movne	r2, #0
 8010850:	3b7f      	subs	r3, #127	; 0x7f
 8010852:	4413      	add	r3, r2
 8010854:	4a62      	ldr	r2, [pc, #392]	; (80109e0 <__ieee754_powf+0x3c8>)
 8010856:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801085a:	4294      	cmp	r4, r2
 801085c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8010860:	dd06      	ble.n	8010870 <__ieee754_powf+0x258>
 8010862:	4a60      	ldr	r2, [pc, #384]	; (80109e4 <__ieee754_powf+0x3cc>)
 8010864:	4294      	cmp	r4, r2
 8010866:	f340 80a4 	ble.w	80109b2 <__ieee754_powf+0x39a>
 801086a:	3301      	adds	r3, #1
 801086c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010870:	2400      	movs	r4, #0
 8010872:	4a5d      	ldr	r2, [pc, #372]	; (80109e8 <__ieee754_powf+0x3d0>)
 8010874:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010878:	ee07 1a90 	vmov	s15, r1
 801087c:	ed92 7a00 	vldr	s14, [r2]
 8010880:	4a5a      	ldr	r2, [pc, #360]	; (80109ec <__ieee754_powf+0x3d4>)
 8010882:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010886:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801088a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801088e:	1049      	asrs	r1, r1, #1
 8010890:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010894:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8010898:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801089c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80108a0:	ee06 1a10 	vmov	s12, r1
 80108a4:	ee65 4a26 	vmul.f32	s9, s10, s13
 80108a8:	ee36 7a47 	vsub.f32	s14, s12, s14
 80108ac:	ee14 7a90 	vmov	r7, s9
 80108b0:	4017      	ands	r7, r2
 80108b2:	ee05 7a90 	vmov	s11, r7
 80108b6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80108ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108be:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80109f0 <__ieee754_powf+0x3d8>
 80108c2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80108c6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80108ca:	ee25 6a26 	vmul.f32	s12, s10, s13
 80108ce:	eddf 6a49 	vldr	s13, [pc, #292]	; 80109f4 <__ieee754_powf+0x3dc>
 80108d2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80108d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80109f8 <__ieee754_powf+0x3e0>
 80108da:	eee7 6a27 	vfma.f32	s13, s14, s15
 80108de:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80109cc <__ieee754_powf+0x3b4>
 80108e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108e6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80109fc <__ieee754_powf+0x3e4>
 80108ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 80108ee:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8010a00 <__ieee754_powf+0x3e8>
 80108f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108f6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80108fa:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80108fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010902:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010906:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801090a:	eef0 7a45 	vmov.f32	s15, s10
 801090e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010916:	ee17 1a90 	vmov	r1, s15
 801091a:	4011      	ands	r1, r2
 801091c:	ee07 1a90 	vmov	s15, r1
 8010920:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8010924:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8010928:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801092c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010930:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010934:	eeb0 6a47 	vmov.f32	s12, s14
 8010938:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801093c:	ee16 1a10 	vmov	r1, s12
 8010940:	4011      	ands	r1, r2
 8010942:	ee06 1a90 	vmov	s13, r1
 8010946:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801094a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8010a04 <__ieee754_powf+0x3ec>
 801094e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010a08 <__ieee754_powf+0x3f0>
 8010952:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010956:	ee06 1a10 	vmov	s12, r1
 801095a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801095e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010a0c <__ieee754_powf+0x3f4>
 8010962:	492b      	ldr	r1, [pc, #172]	; (8010a10 <__ieee754_powf+0x3f8>)
 8010964:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801096c:	edd1 7a00 	vldr	s15, [r1]
 8010970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010974:	ee07 3a90 	vmov	s15, r3
 8010978:	4b26      	ldr	r3, [pc, #152]	; (8010a14 <__ieee754_powf+0x3fc>)
 801097a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801097e:	eef0 7a47 	vmov.f32	s15, s14
 8010982:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010986:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801098a:	edd4 0a00 	vldr	s1, [r4]
 801098e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010996:	ee17 3a90 	vmov	r3, s15
 801099a:	4013      	ands	r3, r2
 801099c:	ee07 3a90 	vmov	s15, r3
 80109a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80109a4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80109a8:	eee6 6a65 	vfms.f32	s13, s12, s11
 80109ac:	ee77 7a66 	vsub.f32	s15, s14, s13
 80109b0:	e70f      	b.n	80107d2 <__ieee754_powf+0x1ba>
 80109b2:	2401      	movs	r4, #1
 80109b4:	e75d      	b.n	8010872 <__ieee754_powf+0x25a>
 80109b6:	bf00      	nop
 80109b8:	08012198 	.word	0x08012198
 80109bc:	00000000 	.word	0x00000000
 80109c0:	3f7ffff7 	.word	0x3f7ffff7
 80109c4:	7149f2ca 	.word	0x7149f2ca
 80109c8:	3f800007 	.word	0x3f800007
 80109cc:	3eaaaaab 	.word	0x3eaaaaab
 80109d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80109d4:	36eca570 	.word	0x36eca570
 80109d8:	3fb8aa00 	.word	0x3fb8aa00
 80109dc:	4b800000 	.word	0x4b800000
 80109e0:	001cc471 	.word	0x001cc471
 80109e4:	005db3d6 	.word	0x005db3d6
 80109e8:	08012444 	.word	0x08012444
 80109ec:	fffff000 	.word	0xfffff000
 80109f0:	3e6c3255 	.word	0x3e6c3255
 80109f4:	3e53f142 	.word	0x3e53f142
 80109f8:	3e8ba305 	.word	0x3e8ba305
 80109fc:	3edb6db7 	.word	0x3edb6db7
 8010a00:	3f19999a 	.word	0x3f19999a
 8010a04:	3f76384f 	.word	0x3f76384f
 8010a08:	3f763800 	.word	0x3f763800
 8010a0c:	369dc3a0 	.word	0x369dc3a0
 8010a10:	08012454 	.word	0x08012454
 8010a14:	0801244c 	.word	0x0801244c
 8010a18:	3338aa3c 	.word	0x3338aa3c
 8010a1c:	f040 8092 	bne.w	8010b44 <__ieee754_powf+0x52c>
 8010a20:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010a18 <__ieee754_powf+0x400>
 8010a24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a28:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010a2c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a34:	f73f aef6 	bgt.w	8010824 <__ieee754_powf+0x20c>
 8010a38:	15db      	asrs	r3, r3, #23
 8010a3a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010a3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010a42:	4103      	asrs	r3, r0
 8010a44:	4423      	add	r3, r4
 8010a46:	4949      	ldr	r1, [pc, #292]	; (8010b6c <__ieee754_powf+0x554>)
 8010a48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010a4c:	3a7f      	subs	r2, #127	; 0x7f
 8010a4e:	4111      	asrs	r1, r2
 8010a50:	ea23 0101 	bic.w	r1, r3, r1
 8010a54:	ee07 1a10 	vmov	s14, r1
 8010a58:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010a60:	f1c2 0217 	rsb	r2, r2, #23
 8010a64:	4110      	asrs	r0, r2
 8010a66:	2c00      	cmp	r4, #0
 8010a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a6c:	bfb8      	it	lt
 8010a6e:	4240      	neglt	r0, r0
 8010a70:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010a74:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8010b70 <__ieee754_powf+0x558>
 8010a78:	ee17 3a10 	vmov	r3, s14
 8010a7c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010a80:	f023 030f 	bic.w	r3, r3, #15
 8010a84:	ee07 3a10 	vmov	s14, r3
 8010a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a8c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010a90:	eddf 7a38 	vldr	s15, [pc, #224]	; 8010b74 <__ieee754_powf+0x55c>
 8010a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a98:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8010a9c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8010b78 <__ieee754_powf+0x560>
 8010aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8010aa4:	eea7 0a26 	vfma.f32	s0, s14, s13
 8010aa8:	eeb0 6a40 	vmov.f32	s12, s0
 8010aac:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010ab0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010ab4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010ab8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010b7c <__ieee754_powf+0x564>
 8010abc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8010b80 <__ieee754_powf+0x568>
 8010ac0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8010ac4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8010b84 <__ieee754_powf+0x56c>
 8010ac8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010acc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8010b88 <__ieee754_powf+0x570>
 8010ad0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010ad4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8010b8c <__ieee754_powf+0x574>
 8010ad8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010adc:	eeb0 6a40 	vmov.f32	s12, s0
 8010ae0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010ae4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010ae8:	eeb0 7a46 	vmov.f32	s14, s12
 8010aec:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010af0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8010af4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8010af8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b0c:	ee10 3a10 	vmov	r3, s0
 8010b10:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010b14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010b18:	da1a      	bge.n	8010b50 <__ieee754_powf+0x538>
 8010b1a:	f000 ff61 	bl	80119e0 <scalbnf>
 8010b1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010b22:	e5cd      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010b24:	4a1a      	ldr	r2, [pc, #104]	; (8010b90 <__ieee754_powf+0x578>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	dd02      	ble.n	8010b30 <__ieee754_powf+0x518>
 8010b2a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8010b94 <__ieee754_powf+0x57c>
 8010b2e:	e67b      	b.n	8010828 <__ieee754_powf+0x210>
 8010b30:	d108      	bne.n	8010b44 <__ieee754_powf+0x52c>
 8010b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b36:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	f6ff af7b 	blt.w	8010a38 <__ieee754_powf+0x420>
 8010b42:	e7f2      	b.n	8010b2a <__ieee754_powf+0x512>
 8010b44:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010b48:	f73f af76 	bgt.w	8010a38 <__ieee754_powf+0x420>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	e78f      	b.n	8010a70 <__ieee754_powf+0x458>
 8010b50:	ee00 3a10 	vmov	s0, r3
 8010b54:	e7e3      	b.n	8010b1e <__ieee754_powf+0x506>
 8010b56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010b5a:	e5b1      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010b5c:	eeb0 0a68 	vmov.f32	s0, s17
 8010b60:	e5ae      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010b62:	eeb0 0a48 	vmov.f32	s0, s16
 8010b66:	e5ab      	b.n	80106c0 <__ieee754_powf+0xa8>
 8010b68:	2600      	movs	r6, #0
 8010b6a:	e590      	b.n	801068e <__ieee754_powf+0x76>
 8010b6c:	007fffff 	.word	0x007fffff
 8010b70:	3f317218 	.word	0x3f317218
 8010b74:	35bfbe8c 	.word	0x35bfbe8c
 8010b78:	3f317200 	.word	0x3f317200
 8010b7c:	3331bb4c 	.word	0x3331bb4c
 8010b80:	b5ddea0e 	.word	0xb5ddea0e
 8010b84:	388ab355 	.word	0x388ab355
 8010b88:	bb360b61 	.word	0xbb360b61
 8010b8c:	3e2aaaab 	.word	0x3e2aaaab
 8010b90:	43160000 	.word	0x43160000
 8010b94:	0da24260 	.word	0x0da24260

08010b98 <__ieee754_sqrtf>:
 8010b98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b9c:	4770      	bx	lr
	...

08010ba0 <__kernel_cos>:
 8010ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba4:	ec57 6b10 	vmov	r6, r7, d0
 8010ba8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010bac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010bb0:	ed8d 1b00 	vstr	d1, [sp]
 8010bb4:	da07      	bge.n	8010bc6 <__kernel_cos+0x26>
 8010bb6:	ee10 0a10 	vmov	r0, s0
 8010bba:	4639      	mov	r1, r7
 8010bbc:	f7ef ffcc 	bl	8000b58 <__aeabi_d2iz>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	f000 8088 	beq.w	8010cd6 <__kernel_cos+0x136>
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	463b      	mov	r3, r7
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	f7ef fd13 	bl	80005f8 <__aeabi_dmul>
 8010bd2:	4b51      	ldr	r3, [pc, #324]	; (8010d18 <__kernel_cos+0x178>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	460d      	mov	r5, r1
 8010bda:	f7ef fd0d 	bl	80005f8 <__aeabi_dmul>
 8010bde:	a340      	add	r3, pc, #256	; (adr r3, 8010ce0 <__kernel_cos+0x140>)
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	4682      	mov	sl, r0
 8010be6:	468b      	mov	fp, r1
 8010be8:	4620      	mov	r0, r4
 8010bea:	4629      	mov	r1, r5
 8010bec:	f7ef fd04 	bl	80005f8 <__aeabi_dmul>
 8010bf0:	a33d      	add	r3, pc, #244	; (adr r3, 8010ce8 <__kernel_cos+0x148>)
 8010bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf6:	f7ef fb49 	bl	800028c <__adddf3>
 8010bfa:	4622      	mov	r2, r4
 8010bfc:	462b      	mov	r3, r5
 8010bfe:	f7ef fcfb 	bl	80005f8 <__aeabi_dmul>
 8010c02:	a33b      	add	r3, pc, #236	; (adr r3, 8010cf0 <__kernel_cos+0x150>)
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	f7ef fb3e 	bl	8000288 <__aeabi_dsub>
 8010c0c:	4622      	mov	r2, r4
 8010c0e:	462b      	mov	r3, r5
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	a338      	add	r3, pc, #224	; (adr r3, 8010cf8 <__kernel_cos+0x158>)
 8010c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1a:	f7ef fb37 	bl	800028c <__adddf3>
 8010c1e:	4622      	mov	r2, r4
 8010c20:	462b      	mov	r3, r5
 8010c22:	f7ef fce9 	bl	80005f8 <__aeabi_dmul>
 8010c26:	a336      	add	r3, pc, #216	; (adr r3, 8010d00 <__kernel_cos+0x160>)
 8010c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2c:	f7ef fb2c 	bl	8000288 <__aeabi_dsub>
 8010c30:	4622      	mov	r2, r4
 8010c32:	462b      	mov	r3, r5
 8010c34:	f7ef fce0 	bl	80005f8 <__aeabi_dmul>
 8010c38:	a333      	add	r3, pc, #204	; (adr r3, 8010d08 <__kernel_cos+0x168>)
 8010c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3e:	f7ef fb25 	bl	800028c <__adddf3>
 8010c42:	4622      	mov	r2, r4
 8010c44:	462b      	mov	r3, r5
 8010c46:	f7ef fcd7 	bl	80005f8 <__aeabi_dmul>
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	462b      	mov	r3, r5
 8010c4e:	f7ef fcd3 	bl	80005f8 <__aeabi_dmul>
 8010c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	f7ef fccb 	bl	80005f8 <__aeabi_dmul>
 8010c62:	460b      	mov	r3, r1
 8010c64:	4602      	mov	r2, r0
 8010c66:	4629      	mov	r1, r5
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f7ef fb0d 	bl	8000288 <__aeabi_dsub>
 8010c6e:	4b2b      	ldr	r3, [pc, #172]	; (8010d1c <__kernel_cos+0x17c>)
 8010c70:	4598      	cmp	r8, r3
 8010c72:	4606      	mov	r6, r0
 8010c74:	460f      	mov	r7, r1
 8010c76:	dc10      	bgt.n	8010c9a <__kernel_cos+0xfa>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	4650      	mov	r0, sl
 8010c7e:	4659      	mov	r1, fp
 8010c80:	f7ef fb02 	bl	8000288 <__aeabi_dsub>
 8010c84:	460b      	mov	r3, r1
 8010c86:	4926      	ldr	r1, [pc, #152]	; (8010d20 <__kernel_cos+0x180>)
 8010c88:	4602      	mov	r2, r0
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	f7ef fafc 	bl	8000288 <__aeabi_dsub>
 8010c90:	ec41 0b10 	vmov	d0, r0, r1
 8010c94:	b003      	add	sp, #12
 8010c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9a:	4b22      	ldr	r3, [pc, #136]	; (8010d24 <__kernel_cos+0x184>)
 8010c9c:	4920      	ldr	r1, [pc, #128]	; (8010d20 <__kernel_cos+0x180>)
 8010c9e:	4598      	cmp	r8, r3
 8010ca0:	bfcc      	ite	gt
 8010ca2:	4d21      	ldrgt	r5, [pc, #132]	; (8010d28 <__kernel_cos+0x188>)
 8010ca4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010ca8:	2400      	movs	r4, #0
 8010caa:	4622      	mov	r2, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	2000      	movs	r0, #0
 8010cb0:	f7ef faea 	bl	8000288 <__aeabi_dsub>
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	4680      	mov	r8, r0
 8010cb8:	4689      	mov	r9, r1
 8010cba:	462b      	mov	r3, r5
 8010cbc:	4650      	mov	r0, sl
 8010cbe:	4659      	mov	r1, fp
 8010cc0:	f7ef fae2 	bl	8000288 <__aeabi_dsub>
 8010cc4:	4632      	mov	r2, r6
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	f7ef fade 	bl	8000288 <__aeabi_dsub>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	460b      	mov	r3, r1
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	e7da      	b.n	8010c8c <__kernel_cos+0xec>
 8010cd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010d10 <__kernel_cos+0x170>
 8010cda:	e7db      	b.n	8010c94 <__kernel_cos+0xf4>
 8010cdc:	f3af 8000 	nop.w
 8010ce0:	be8838d4 	.word	0xbe8838d4
 8010ce4:	bda8fae9 	.word	0xbda8fae9
 8010ce8:	bdb4b1c4 	.word	0xbdb4b1c4
 8010cec:	3e21ee9e 	.word	0x3e21ee9e
 8010cf0:	809c52ad 	.word	0x809c52ad
 8010cf4:	3e927e4f 	.word	0x3e927e4f
 8010cf8:	19cb1590 	.word	0x19cb1590
 8010cfc:	3efa01a0 	.word	0x3efa01a0
 8010d00:	16c15177 	.word	0x16c15177
 8010d04:	3f56c16c 	.word	0x3f56c16c
 8010d08:	5555554c 	.word	0x5555554c
 8010d0c:	3fa55555 	.word	0x3fa55555
 8010d10:	00000000 	.word	0x00000000
 8010d14:	3ff00000 	.word	0x3ff00000
 8010d18:	3fe00000 	.word	0x3fe00000
 8010d1c:	3fd33332 	.word	0x3fd33332
 8010d20:	3ff00000 	.word	0x3ff00000
 8010d24:	3fe90000 	.word	0x3fe90000
 8010d28:	3fd20000 	.word	0x3fd20000
 8010d2c:	00000000 	.word	0x00000000

08010d30 <__kernel_rem_pio2>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ed2d 8b02 	vpush	{d8}
 8010d38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010d3c:	f112 0f14 	cmn.w	r2, #20
 8010d40:	9308      	str	r3, [sp, #32]
 8010d42:	9101      	str	r1, [sp, #4]
 8010d44:	4bc6      	ldr	r3, [pc, #792]	; (8011060 <__kernel_rem_pio2+0x330>)
 8010d46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010d48:	9009      	str	r0, [sp, #36]	; 0x24
 8010d4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d4e:	9304      	str	r3, [sp, #16]
 8010d50:	9b08      	ldr	r3, [sp, #32]
 8010d52:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d56:	bfa8      	it	ge
 8010d58:	1ed4      	subge	r4, r2, #3
 8010d5a:	9306      	str	r3, [sp, #24]
 8010d5c:	bfb2      	itee	lt
 8010d5e:	2400      	movlt	r4, #0
 8010d60:	2318      	movge	r3, #24
 8010d62:	fb94 f4f3 	sdivge	r4, r4, r3
 8010d66:	f06f 0317 	mvn.w	r3, #23
 8010d6a:	fb04 3303 	mla	r3, r4, r3, r3
 8010d6e:	eb03 0a02 	add.w	sl, r3, r2
 8010d72:	9b04      	ldr	r3, [sp, #16]
 8010d74:	9a06      	ldr	r2, [sp, #24]
 8010d76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011050 <__kernel_rem_pio2+0x320>
 8010d7a:	eb03 0802 	add.w	r8, r3, r2
 8010d7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010d80:	1aa7      	subs	r7, r4, r2
 8010d82:	ae20      	add	r6, sp, #128	; 0x80
 8010d84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010d88:	2500      	movs	r5, #0
 8010d8a:	4545      	cmp	r5, r8
 8010d8c:	dd18      	ble.n	8010dc0 <__kernel_rem_pio2+0x90>
 8010d8e:	9b08      	ldr	r3, [sp, #32]
 8010d90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010d94:	aa20      	add	r2, sp, #128	; 0x80
 8010d96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8011050 <__kernel_rem_pio2+0x320>
 8010d9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010d9e:	f1c3 0301 	rsb	r3, r3, #1
 8010da2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010da6:	9307      	str	r3, [sp, #28]
 8010da8:	9b07      	ldr	r3, [sp, #28]
 8010daa:	9a04      	ldr	r2, [sp, #16]
 8010dac:	4443      	add	r3, r8
 8010dae:	429a      	cmp	r2, r3
 8010db0:	db2f      	blt.n	8010e12 <__kernel_rem_pio2+0xe2>
 8010db2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010db6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010dba:	462f      	mov	r7, r5
 8010dbc:	2600      	movs	r6, #0
 8010dbe:	e01b      	b.n	8010df8 <__kernel_rem_pio2+0xc8>
 8010dc0:	42ef      	cmn	r7, r5
 8010dc2:	d407      	bmi.n	8010dd4 <__kernel_rem_pio2+0xa4>
 8010dc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010dc8:	f7ef fbac 	bl	8000524 <__aeabi_i2d>
 8010dcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010dd0:	3501      	adds	r5, #1
 8010dd2:	e7da      	b.n	8010d8a <__kernel_rem_pio2+0x5a>
 8010dd4:	ec51 0b18 	vmov	r0, r1, d8
 8010dd8:	e7f8      	b.n	8010dcc <__kernel_rem_pio2+0x9c>
 8010dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010de2:	f7ef fc09 	bl	80005f8 <__aeabi_dmul>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dee:	f7ef fa4d 	bl	800028c <__adddf3>
 8010df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010df6:	3601      	adds	r6, #1
 8010df8:	9b06      	ldr	r3, [sp, #24]
 8010dfa:	429e      	cmp	r6, r3
 8010dfc:	f1a7 0708 	sub.w	r7, r7, #8
 8010e00:	ddeb      	ble.n	8010dda <__kernel_rem_pio2+0xaa>
 8010e02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e06:	3508      	adds	r5, #8
 8010e08:	ecab 7b02 	vstmia	fp!, {d7}
 8010e0c:	f108 0801 	add.w	r8, r8, #1
 8010e10:	e7ca      	b.n	8010da8 <__kernel_rem_pio2+0x78>
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	aa0c      	add	r2, sp, #48	; 0x30
 8010e16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010e1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010e22:	9c04      	ldr	r4, [sp, #16]
 8010e24:	930a      	str	r3, [sp, #40]	; 0x28
 8010e26:	ab98      	add	r3, sp, #608	; 0x260
 8010e28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010e30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010e34:	f8cd b008 	str.w	fp, [sp, #8]
 8010e38:	4625      	mov	r5, r4
 8010e3a:	2d00      	cmp	r5, #0
 8010e3c:	dc78      	bgt.n	8010f30 <__kernel_rem_pio2+0x200>
 8010e3e:	ec47 6b10 	vmov	d0, r6, r7
 8010e42:	4650      	mov	r0, sl
 8010e44:	f000 fbfc 	bl	8011640 <scalbn>
 8010e48:	ec57 6b10 	vmov	r6, r7, d0
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010e52:	ee10 0a10 	vmov	r0, s0
 8010e56:	4639      	mov	r1, r7
 8010e58:	f7ef fbce 	bl	80005f8 <__aeabi_dmul>
 8010e5c:	ec41 0b10 	vmov	d0, r0, r1
 8010e60:	f000 fb6e 	bl	8011540 <floor>
 8010e64:	4b7f      	ldr	r3, [pc, #508]	; (8011064 <__kernel_rem_pio2+0x334>)
 8010e66:	ec51 0b10 	vmov	r0, r1, d0
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f7ef fbc4 	bl	80005f8 <__aeabi_dmul>
 8010e70:	4602      	mov	r2, r0
 8010e72:	460b      	mov	r3, r1
 8010e74:	4630      	mov	r0, r6
 8010e76:	4639      	mov	r1, r7
 8010e78:	f7ef fa06 	bl	8000288 <__aeabi_dsub>
 8010e7c:	460f      	mov	r7, r1
 8010e7e:	4606      	mov	r6, r0
 8010e80:	f7ef fe6a 	bl	8000b58 <__aeabi_d2iz>
 8010e84:	9007      	str	r0, [sp, #28]
 8010e86:	f7ef fb4d 	bl	8000524 <__aeabi_i2d>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	4630      	mov	r0, r6
 8010e90:	4639      	mov	r1, r7
 8010e92:	f7ef f9f9 	bl	8000288 <__aeabi_dsub>
 8010e96:	f1ba 0f00 	cmp.w	sl, #0
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	dd70      	ble.n	8010f82 <__kernel_rem_pio2+0x252>
 8010ea0:	1e62      	subs	r2, r4, #1
 8010ea2:	ab0c      	add	r3, sp, #48	; 0x30
 8010ea4:	9d07      	ldr	r5, [sp, #28]
 8010ea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010eaa:	f1ca 0118 	rsb	r1, sl, #24
 8010eae:	fa40 f301 	asr.w	r3, r0, r1
 8010eb2:	441d      	add	r5, r3
 8010eb4:	408b      	lsls	r3, r1
 8010eb6:	1ac0      	subs	r0, r0, r3
 8010eb8:	ab0c      	add	r3, sp, #48	; 0x30
 8010eba:	9507      	str	r5, [sp, #28]
 8010ebc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010ec0:	f1ca 0317 	rsb	r3, sl, #23
 8010ec4:	fa40 f303 	asr.w	r3, r0, r3
 8010ec8:	9302      	str	r3, [sp, #8]
 8010eca:	9b02      	ldr	r3, [sp, #8]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dd66      	ble.n	8010f9e <__kernel_rem_pio2+0x26e>
 8010ed0:	9b07      	ldr	r3, [sp, #28]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	9307      	str	r3, [sp, #28]
 8010ed8:	4615      	mov	r5, r2
 8010eda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010ede:	4294      	cmp	r4, r2
 8010ee0:	f300 8099 	bgt.w	8011016 <__kernel_rem_pio2+0x2e6>
 8010ee4:	f1ba 0f00 	cmp.w	sl, #0
 8010ee8:	dd07      	ble.n	8010efa <__kernel_rem_pio2+0x1ca>
 8010eea:	f1ba 0f01 	cmp.w	sl, #1
 8010eee:	f000 80a5 	beq.w	801103c <__kernel_rem_pio2+0x30c>
 8010ef2:	f1ba 0f02 	cmp.w	sl, #2
 8010ef6:	f000 80c1 	beq.w	801107c <__kernel_rem_pio2+0x34c>
 8010efa:	9b02      	ldr	r3, [sp, #8]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d14e      	bne.n	8010f9e <__kernel_rem_pio2+0x26e>
 8010f00:	4632      	mov	r2, r6
 8010f02:	463b      	mov	r3, r7
 8010f04:	4958      	ldr	r1, [pc, #352]	; (8011068 <__kernel_rem_pio2+0x338>)
 8010f06:	2000      	movs	r0, #0
 8010f08:	f7ef f9be 	bl	8000288 <__aeabi_dsub>
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	460f      	mov	r7, r1
 8010f10:	2d00      	cmp	r5, #0
 8010f12:	d044      	beq.n	8010f9e <__kernel_rem_pio2+0x26e>
 8010f14:	4650      	mov	r0, sl
 8010f16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011058 <__kernel_rem_pio2+0x328>
 8010f1a:	f000 fb91 	bl	8011640 <scalbn>
 8010f1e:	4630      	mov	r0, r6
 8010f20:	4639      	mov	r1, r7
 8010f22:	ec53 2b10 	vmov	r2, r3, d0
 8010f26:	f7ef f9af 	bl	8000288 <__aeabi_dsub>
 8010f2a:	4606      	mov	r6, r0
 8010f2c:	460f      	mov	r7, r1
 8010f2e:	e036      	b.n	8010f9e <__kernel_rem_pio2+0x26e>
 8010f30:	4b4e      	ldr	r3, [pc, #312]	; (801106c <__kernel_rem_pio2+0x33c>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	f7ef fb5e 	bl	80005f8 <__aeabi_dmul>
 8010f3c:	f7ef fe0c 	bl	8000b58 <__aeabi_d2iz>
 8010f40:	f7ef faf0 	bl	8000524 <__aeabi_i2d>
 8010f44:	4b4a      	ldr	r3, [pc, #296]	; (8011070 <__kernel_rem_pio2+0x340>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	4680      	mov	r8, r0
 8010f4a:	4689      	mov	r9, r1
 8010f4c:	f7ef fb54 	bl	80005f8 <__aeabi_dmul>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4630      	mov	r0, r6
 8010f56:	4639      	mov	r1, r7
 8010f58:	f7ef f996 	bl	8000288 <__aeabi_dsub>
 8010f5c:	f7ef fdfc 	bl	8000b58 <__aeabi_d2iz>
 8010f60:	9b02      	ldr	r3, [sp, #8]
 8010f62:	f843 0b04 	str.w	r0, [r3], #4
 8010f66:	3d01      	subs	r5, #1
 8010f68:	9302      	str	r3, [sp, #8]
 8010f6a:	ab70      	add	r3, sp, #448	; 0x1c0
 8010f6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef f988 	bl	800028c <__adddf3>
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	460f      	mov	r7, r1
 8010f80:	e75b      	b.n	8010e3a <__kernel_rem_pio2+0x10a>
 8010f82:	d105      	bne.n	8010f90 <__kernel_rem_pio2+0x260>
 8010f84:	1e63      	subs	r3, r4, #1
 8010f86:	aa0c      	add	r2, sp, #48	; 0x30
 8010f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010f8c:	15c3      	asrs	r3, r0, #23
 8010f8e:	e79b      	b.n	8010ec8 <__kernel_rem_pio2+0x198>
 8010f90:	4b38      	ldr	r3, [pc, #224]	; (8011074 <__kernel_rem_pio2+0x344>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	f7ef fdb6 	bl	8000b04 <__aeabi_dcmpge>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d139      	bne.n	8011010 <__kernel_rem_pio2+0x2e0>
 8010f9c:	9002      	str	r0, [sp, #8]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	f000 80b4 	beq.w	8011118 <__kernel_rem_pio2+0x3e8>
 8010fb0:	f104 3bff 	add.w	fp, r4, #4294967295
 8010fb4:	465b      	mov	r3, fp
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	9904      	ldr	r1, [sp, #16]
 8010fba:	428b      	cmp	r3, r1
 8010fbc:	da65      	bge.n	801108a <__kernel_rem_pio2+0x35a>
 8010fbe:	2a00      	cmp	r2, #0
 8010fc0:	d07b      	beq.n	80110ba <__kernel_rem_pio2+0x38a>
 8010fc2:	ab0c      	add	r3, sp, #48	; 0x30
 8010fc4:	f1aa 0a18 	sub.w	sl, sl, #24
 8010fc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f000 80a0 	beq.w	8011112 <__kernel_rem_pio2+0x3e2>
 8010fd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011058 <__kernel_rem_pio2+0x328>
 8010fd6:	4650      	mov	r0, sl
 8010fd8:	f000 fb32 	bl	8011640 <scalbn>
 8010fdc:	4f23      	ldr	r7, [pc, #140]	; (801106c <__kernel_rem_pio2+0x33c>)
 8010fde:	ec55 4b10 	vmov	r4, r5, d0
 8010fe2:	46d8      	mov	r8, fp
 8010fe4:	2600      	movs	r6, #0
 8010fe6:	f1b8 0f00 	cmp.w	r8, #0
 8010fea:	f280 80cf 	bge.w	801118c <__kernel_rem_pio2+0x45c>
 8010fee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8011050 <__kernel_rem_pio2+0x320>
 8010ff2:	465f      	mov	r7, fp
 8010ff4:	f04f 0800 	mov.w	r8, #0
 8010ff8:	2f00      	cmp	r7, #0
 8010ffa:	f2c0 80fd 	blt.w	80111f8 <__kernel_rem_pio2+0x4c8>
 8010ffe:	ab70      	add	r3, sp, #448	; 0x1c0
 8011000:	f8df a074 	ldr.w	sl, [pc, #116]	; 8011078 <__kernel_rem_pio2+0x348>
 8011004:	ec55 4b18 	vmov	r4, r5, d8
 8011008:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801100c:	2600      	movs	r6, #0
 801100e:	e0e5      	b.n	80111dc <__kernel_rem_pio2+0x4ac>
 8011010:	2302      	movs	r3, #2
 8011012:	9302      	str	r3, [sp, #8]
 8011014:	e75c      	b.n	8010ed0 <__kernel_rem_pio2+0x1a0>
 8011016:	f8db 3000 	ldr.w	r3, [fp]
 801101a:	b955      	cbnz	r5, 8011032 <__kernel_rem_pio2+0x302>
 801101c:	b123      	cbz	r3, 8011028 <__kernel_rem_pio2+0x2f8>
 801101e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011022:	f8cb 3000 	str.w	r3, [fp]
 8011026:	2301      	movs	r3, #1
 8011028:	3201      	adds	r2, #1
 801102a:	f10b 0b04 	add.w	fp, fp, #4
 801102e:	461d      	mov	r5, r3
 8011030:	e755      	b.n	8010ede <__kernel_rem_pio2+0x1ae>
 8011032:	1acb      	subs	r3, r1, r3
 8011034:	f8cb 3000 	str.w	r3, [fp]
 8011038:	462b      	mov	r3, r5
 801103a:	e7f5      	b.n	8011028 <__kernel_rem_pio2+0x2f8>
 801103c:	1e62      	subs	r2, r4, #1
 801103e:	ab0c      	add	r3, sp, #48	; 0x30
 8011040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011044:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011048:	a90c      	add	r1, sp, #48	; 0x30
 801104a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801104e:	e754      	b.n	8010efa <__kernel_rem_pio2+0x1ca>
	...
 801105c:	3ff00000 	.word	0x3ff00000
 8011060:	080124a0 	.word	0x080124a0
 8011064:	40200000 	.word	0x40200000
 8011068:	3ff00000 	.word	0x3ff00000
 801106c:	3e700000 	.word	0x3e700000
 8011070:	41700000 	.word	0x41700000
 8011074:	3fe00000 	.word	0x3fe00000
 8011078:	08012460 	.word	0x08012460
 801107c:	1e62      	subs	r2, r4, #1
 801107e:	ab0c      	add	r3, sp, #48	; 0x30
 8011080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011084:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011088:	e7de      	b.n	8011048 <__kernel_rem_pio2+0x318>
 801108a:	a90c      	add	r1, sp, #48	; 0x30
 801108c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011090:	3b01      	subs	r3, #1
 8011092:	430a      	orrs	r2, r1
 8011094:	e790      	b.n	8010fb8 <__kernel_rem_pio2+0x288>
 8011096:	3301      	adds	r3, #1
 8011098:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801109c:	2900      	cmp	r1, #0
 801109e:	d0fa      	beq.n	8011096 <__kernel_rem_pio2+0x366>
 80110a0:	9a08      	ldr	r2, [sp, #32]
 80110a2:	18e3      	adds	r3, r4, r3
 80110a4:	18a6      	adds	r6, r4, r2
 80110a6:	aa20      	add	r2, sp, #128	; 0x80
 80110a8:	1c65      	adds	r5, r4, #1
 80110aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80110ae:	9302      	str	r3, [sp, #8]
 80110b0:	9b02      	ldr	r3, [sp, #8]
 80110b2:	42ab      	cmp	r3, r5
 80110b4:	da04      	bge.n	80110c0 <__kernel_rem_pio2+0x390>
 80110b6:	461c      	mov	r4, r3
 80110b8:	e6b5      	b.n	8010e26 <__kernel_rem_pio2+0xf6>
 80110ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110bc:	2301      	movs	r3, #1
 80110be:	e7eb      	b.n	8011098 <__kernel_rem_pio2+0x368>
 80110c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110c6:	f7ef fa2d 	bl	8000524 <__aeabi_i2d>
 80110ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80110ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110d0:	46b3      	mov	fp, r6
 80110d2:	461c      	mov	r4, r3
 80110d4:	2700      	movs	r7, #0
 80110d6:	f04f 0800 	mov.w	r8, #0
 80110da:	f04f 0900 	mov.w	r9, #0
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	429f      	cmp	r7, r3
 80110e2:	dd06      	ble.n	80110f2 <__kernel_rem_pio2+0x3c2>
 80110e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80110e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80110ea:	e9c3 8900 	strd	r8, r9, [r3]
 80110ee:	3501      	adds	r5, #1
 80110f0:	e7de      	b.n	80110b0 <__kernel_rem_pio2+0x380>
 80110f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80110f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80110fa:	f7ef fa7d 	bl	80005f8 <__aeabi_dmul>
 80110fe:	4602      	mov	r2, r0
 8011100:	460b      	mov	r3, r1
 8011102:	4640      	mov	r0, r8
 8011104:	4649      	mov	r1, r9
 8011106:	f7ef f8c1 	bl	800028c <__adddf3>
 801110a:	3701      	adds	r7, #1
 801110c:	4680      	mov	r8, r0
 801110e:	4689      	mov	r9, r1
 8011110:	e7e5      	b.n	80110de <__kernel_rem_pio2+0x3ae>
 8011112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011116:	e754      	b.n	8010fc2 <__kernel_rem_pio2+0x292>
 8011118:	ec47 6b10 	vmov	d0, r6, r7
 801111c:	f1ca 0000 	rsb	r0, sl, #0
 8011120:	f000 fa8e 	bl	8011640 <scalbn>
 8011124:	ec57 6b10 	vmov	r6, r7, d0
 8011128:	4b9f      	ldr	r3, [pc, #636]	; (80113a8 <__kernel_rem_pio2+0x678>)
 801112a:	ee10 0a10 	vmov	r0, s0
 801112e:	2200      	movs	r2, #0
 8011130:	4639      	mov	r1, r7
 8011132:	f7ef fce7 	bl	8000b04 <__aeabi_dcmpge>
 8011136:	b300      	cbz	r0, 801117a <__kernel_rem_pio2+0x44a>
 8011138:	4b9c      	ldr	r3, [pc, #624]	; (80113ac <__kernel_rem_pio2+0x67c>)
 801113a:	2200      	movs	r2, #0
 801113c:	4630      	mov	r0, r6
 801113e:	4639      	mov	r1, r7
 8011140:	f7ef fa5a 	bl	80005f8 <__aeabi_dmul>
 8011144:	f7ef fd08 	bl	8000b58 <__aeabi_d2iz>
 8011148:	4605      	mov	r5, r0
 801114a:	f7ef f9eb 	bl	8000524 <__aeabi_i2d>
 801114e:	4b96      	ldr	r3, [pc, #600]	; (80113a8 <__kernel_rem_pio2+0x678>)
 8011150:	2200      	movs	r2, #0
 8011152:	f7ef fa51 	bl	80005f8 <__aeabi_dmul>
 8011156:	460b      	mov	r3, r1
 8011158:	4602      	mov	r2, r0
 801115a:	4639      	mov	r1, r7
 801115c:	4630      	mov	r0, r6
 801115e:	f7ef f893 	bl	8000288 <__aeabi_dsub>
 8011162:	f7ef fcf9 	bl	8000b58 <__aeabi_d2iz>
 8011166:	f104 0b01 	add.w	fp, r4, #1
 801116a:	ab0c      	add	r3, sp, #48	; 0x30
 801116c:	f10a 0a18 	add.w	sl, sl, #24
 8011170:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011174:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8011178:	e72b      	b.n	8010fd2 <__kernel_rem_pio2+0x2a2>
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef fceb 	bl	8000b58 <__aeabi_d2iz>
 8011182:	ab0c      	add	r3, sp, #48	; 0x30
 8011184:	46a3      	mov	fp, r4
 8011186:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801118a:	e722      	b.n	8010fd2 <__kernel_rem_pio2+0x2a2>
 801118c:	ab70      	add	r3, sp, #448	; 0x1c0
 801118e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8011192:	ab0c      	add	r3, sp, #48	; 0x30
 8011194:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011198:	f7ef f9c4 	bl	8000524 <__aeabi_i2d>
 801119c:	4622      	mov	r2, r4
 801119e:	462b      	mov	r3, r5
 80111a0:	f7ef fa2a 	bl	80005f8 <__aeabi_dmul>
 80111a4:	4632      	mov	r2, r6
 80111a6:	e9c9 0100 	strd	r0, r1, [r9]
 80111aa:	463b      	mov	r3, r7
 80111ac:	4620      	mov	r0, r4
 80111ae:	4629      	mov	r1, r5
 80111b0:	f7ef fa22 	bl	80005f8 <__aeabi_dmul>
 80111b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80111b8:	4604      	mov	r4, r0
 80111ba:	460d      	mov	r5, r1
 80111bc:	e713      	b.n	8010fe6 <__kernel_rem_pio2+0x2b6>
 80111be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80111c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80111c6:	f7ef fa17 	bl	80005f8 <__aeabi_dmul>
 80111ca:	4602      	mov	r2, r0
 80111cc:	460b      	mov	r3, r1
 80111ce:	4620      	mov	r0, r4
 80111d0:	4629      	mov	r1, r5
 80111d2:	f7ef f85b 	bl	800028c <__adddf3>
 80111d6:	3601      	adds	r6, #1
 80111d8:	4604      	mov	r4, r0
 80111da:	460d      	mov	r5, r1
 80111dc:	9b04      	ldr	r3, [sp, #16]
 80111de:	429e      	cmp	r6, r3
 80111e0:	dc01      	bgt.n	80111e6 <__kernel_rem_pio2+0x4b6>
 80111e2:	45b0      	cmp	r8, r6
 80111e4:	daeb      	bge.n	80111be <__kernel_rem_pio2+0x48e>
 80111e6:	ab48      	add	r3, sp, #288	; 0x120
 80111e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80111ec:	e9c3 4500 	strd	r4, r5, [r3]
 80111f0:	3f01      	subs	r7, #1
 80111f2:	f108 0801 	add.w	r8, r8, #1
 80111f6:	e6ff      	b.n	8010ff8 <__kernel_rem_pio2+0x2c8>
 80111f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	dc0b      	bgt.n	8011216 <__kernel_rem_pio2+0x4e6>
 80111fe:	2b00      	cmp	r3, #0
 8011200:	dc6e      	bgt.n	80112e0 <__kernel_rem_pio2+0x5b0>
 8011202:	d045      	beq.n	8011290 <__kernel_rem_pio2+0x560>
 8011204:	9b07      	ldr	r3, [sp, #28]
 8011206:	f003 0007 	and.w	r0, r3, #7
 801120a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801120e:	ecbd 8b02 	vpop	{d8}
 8011212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011216:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011218:	2b03      	cmp	r3, #3
 801121a:	d1f3      	bne.n	8011204 <__kernel_rem_pio2+0x4d4>
 801121c:	ab48      	add	r3, sp, #288	; 0x120
 801121e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8011222:	46d0      	mov	r8, sl
 8011224:	46d9      	mov	r9, fp
 8011226:	f1b9 0f00 	cmp.w	r9, #0
 801122a:	f1a8 0808 	sub.w	r8, r8, #8
 801122e:	dc64      	bgt.n	80112fa <__kernel_rem_pio2+0x5ca>
 8011230:	465c      	mov	r4, fp
 8011232:	2c01      	cmp	r4, #1
 8011234:	f1aa 0a08 	sub.w	sl, sl, #8
 8011238:	dc7e      	bgt.n	8011338 <__kernel_rem_pio2+0x608>
 801123a:	2000      	movs	r0, #0
 801123c:	2100      	movs	r1, #0
 801123e:	f1bb 0f01 	cmp.w	fp, #1
 8011242:	f300 8097 	bgt.w	8011374 <__kernel_rem_pio2+0x644>
 8011246:	9b02      	ldr	r3, [sp, #8]
 8011248:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801124c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011250:	2b00      	cmp	r3, #0
 8011252:	f040 8099 	bne.w	8011388 <__kernel_rem_pio2+0x658>
 8011256:	9b01      	ldr	r3, [sp, #4]
 8011258:	e9c3 5600 	strd	r5, r6, [r3]
 801125c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011260:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011264:	e7ce      	b.n	8011204 <__kernel_rem_pio2+0x4d4>
 8011266:	ab48      	add	r3, sp, #288	; 0x120
 8011268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	f7ef f80c 	bl	800028c <__adddf3>
 8011274:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011278:	f1bb 0f00 	cmp.w	fp, #0
 801127c:	daf3      	bge.n	8011266 <__kernel_rem_pio2+0x536>
 801127e:	9b02      	ldr	r3, [sp, #8]
 8011280:	b113      	cbz	r3, 8011288 <__kernel_rem_pio2+0x558>
 8011282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011286:	4619      	mov	r1, r3
 8011288:	9b01      	ldr	r3, [sp, #4]
 801128a:	e9c3 0100 	strd	r0, r1, [r3]
 801128e:	e7b9      	b.n	8011204 <__kernel_rem_pio2+0x4d4>
 8011290:	2000      	movs	r0, #0
 8011292:	2100      	movs	r1, #0
 8011294:	e7f0      	b.n	8011278 <__kernel_rem_pio2+0x548>
 8011296:	ab48      	add	r3, sp, #288	; 0x120
 8011298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a0:	f7ee fff4 	bl	800028c <__adddf3>
 80112a4:	3c01      	subs	r4, #1
 80112a6:	2c00      	cmp	r4, #0
 80112a8:	daf5      	bge.n	8011296 <__kernel_rem_pio2+0x566>
 80112aa:	9b02      	ldr	r3, [sp, #8]
 80112ac:	b1e3      	cbz	r3, 80112e8 <__kernel_rem_pio2+0x5b8>
 80112ae:	4602      	mov	r2, r0
 80112b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112b4:	9c01      	ldr	r4, [sp, #4]
 80112b6:	e9c4 2300 	strd	r2, r3, [r4]
 80112ba:	4602      	mov	r2, r0
 80112bc:	460b      	mov	r3, r1
 80112be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80112c2:	f7ee ffe1 	bl	8000288 <__aeabi_dsub>
 80112c6:	ad4a      	add	r5, sp, #296	; 0x128
 80112c8:	2401      	movs	r4, #1
 80112ca:	45a3      	cmp	fp, r4
 80112cc:	da0f      	bge.n	80112ee <__kernel_rem_pio2+0x5be>
 80112ce:	9b02      	ldr	r3, [sp, #8]
 80112d0:	b113      	cbz	r3, 80112d8 <__kernel_rem_pio2+0x5a8>
 80112d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112d6:	4619      	mov	r1, r3
 80112d8:	9b01      	ldr	r3, [sp, #4]
 80112da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80112de:	e791      	b.n	8011204 <__kernel_rem_pio2+0x4d4>
 80112e0:	465c      	mov	r4, fp
 80112e2:	2000      	movs	r0, #0
 80112e4:	2100      	movs	r1, #0
 80112e6:	e7de      	b.n	80112a6 <__kernel_rem_pio2+0x576>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	e7e2      	b.n	80112b4 <__kernel_rem_pio2+0x584>
 80112ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80112f2:	f7ee ffcb 	bl	800028c <__adddf3>
 80112f6:	3401      	adds	r4, #1
 80112f8:	e7e7      	b.n	80112ca <__kernel_rem_pio2+0x59a>
 80112fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80112fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8011302:	4620      	mov	r0, r4
 8011304:	4632      	mov	r2, r6
 8011306:	463b      	mov	r3, r7
 8011308:	4629      	mov	r1, r5
 801130a:	f7ee ffbf 	bl	800028c <__adddf3>
 801130e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f7ee ffb5 	bl	8000288 <__aeabi_dsub>
 801131e:	4632      	mov	r2, r6
 8011320:	463b      	mov	r3, r7
 8011322:	f7ee ffb3 	bl	800028c <__adddf3>
 8011326:	ed9d 7b04 	vldr	d7, [sp, #16]
 801132a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801132e:	ed88 7b00 	vstr	d7, [r8]
 8011332:	f109 39ff 	add.w	r9, r9, #4294967295
 8011336:	e776      	b.n	8011226 <__kernel_rem_pio2+0x4f6>
 8011338:	e9da 8900 	ldrd	r8, r9, [sl]
 801133c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011340:	4640      	mov	r0, r8
 8011342:	4632      	mov	r2, r6
 8011344:	463b      	mov	r3, r7
 8011346:	4649      	mov	r1, r9
 8011348:	f7ee ffa0 	bl	800028c <__adddf3>
 801134c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4640      	mov	r0, r8
 8011356:	4649      	mov	r1, r9
 8011358:	f7ee ff96 	bl	8000288 <__aeabi_dsub>
 801135c:	4632      	mov	r2, r6
 801135e:	463b      	mov	r3, r7
 8011360:	f7ee ff94 	bl	800028c <__adddf3>
 8011364:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801136c:	ed8a 7b00 	vstr	d7, [sl]
 8011370:	3c01      	subs	r4, #1
 8011372:	e75e      	b.n	8011232 <__kernel_rem_pio2+0x502>
 8011374:	ab48      	add	r3, sp, #288	; 0x120
 8011376:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137e:	f7ee ff85 	bl	800028c <__adddf3>
 8011382:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011386:	e75a      	b.n	801123e <__kernel_rem_pio2+0x50e>
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	9a01      	ldr	r2, [sp, #4]
 801138c:	601d      	str	r5, [r3, #0]
 801138e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011392:	605c      	str	r4, [r3, #4]
 8011394:	609f      	str	r7, [r3, #8]
 8011396:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801139a:	60d3      	str	r3, [r2, #12]
 801139c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113a0:	6110      	str	r0, [r2, #16]
 80113a2:	6153      	str	r3, [r2, #20]
 80113a4:	e72e      	b.n	8011204 <__kernel_rem_pio2+0x4d4>
 80113a6:	bf00      	nop
 80113a8:	41700000 	.word	0x41700000
 80113ac:	3e700000 	.word	0x3e700000

080113b0 <__kernel_sin>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ed2d 8b04 	vpush	{d8-d9}
 80113b8:	eeb0 8a41 	vmov.f32	s16, s2
 80113bc:	eef0 8a61 	vmov.f32	s17, s3
 80113c0:	ec55 4b10 	vmov	r4, r5, d0
 80113c4:	b083      	sub	sp, #12
 80113c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80113ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80113ce:	9001      	str	r0, [sp, #4]
 80113d0:	da06      	bge.n	80113e0 <__kernel_sin+0x30>
 80113d2:	ee10 0a10 	vmov	r0, s0
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ef fbbe 	bl	8000b58 <__aeabi_d2iz>
 80113dc:	2800      	cmp	r0, #0
 80113de:	d051      	beq.n	8011484 <__kernel_sin+0xd4>
 80113e0:	4622      	mov	r2, r4
 80113e2:	462b      	mov	r3, r5
 80113e4:	4620      	mov	r0, r4
 80113e6:	4629      	mov	r1, r5
 80113e8:	f7ef f906 	bl	80005f8 <__aeabi_dmul>
 80113ec:	4682      	mov	sl, r0
 80113ee:	468b      	mov	fp, r1
 80113f0:	4602      	mov	r2, r0
 80113f2:	460b      	mov	r3, r1
 80113f4:	4620      	mov	r0, r4
 80113f6:	4629      	mov	r1, r5
 80113f8:	f7ef f8fe 	bl	80005f8 <__aeabi_dmul>
 80113fc:	a341      	add	r3, pc, #260	; (adr r3, 8011504 <__kernel_sin+0x154>)
 80113fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011402:	4680      	mov	r8, r0
 8011404:	4689      	mov	r9, r1
 8011406:	4650      	mov	r0, sl
 8011408:	4659      	mov	r1, fp
 801140a:	f7ef f8f5 	bl	80005f8 <__aeabi_dmul>
 801140e:	a33f      	add	r3, pc, #252	; (adr r3, 801150c <__kernel_sin+0x15c>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	f7ee ff38 	bl	8000288 <__aeabi_dsub>
 8011418:	4652      	mov	r2, sl
 801141a:	465b      	mov	r3, fp
 801141c:	f7ef f8ec 	bl	80005f8 <__aeabi_dmul>
 8011420:	a33c      	add	r3, pc, #240	; (adr r3, 8011514 <__kernel_sin+0x164>)
 8011422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011426:	f7ee ff31 	bl	800028c <__adddf3>
 801142a:	4652      	mov	r2, sl
 801142c:	465b      	mov	r3, fp
 801142e:	f7ef f8e3 	bl	80005f8 <__aeabi_dmul>
 8011432:	a33a      	add	r3, pc, #232	; (adr r3, 801151c <__kernel_sin+0x16c>)
 8011434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011438:	f7ee ff26 	bl	8000288 <__aeabi_dsub>
 801143c:	4652      	mov	r2, sl
 801143e:	465b      	mov	r3, fp
 8011440:	f7ef f8da 	bl	80005f8 <__aeabi_dmul>
 8011444:	a337      	add	r3, pc, #220	; (adr r3, 8011524 <__kernel_sin+0x174>)
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	f7ee ff1f 	bl	800028c <__adddf3>
 801144e:	9b01      	ldr	r3, [sp, #4]
 8011450:	4606      	mov	r6, r0
 8011452:	460f      	mov	r7, r1
 8011454:	b9eb      	cbnz	r3, 8011492 <__kernel_sin+0xe2>
 8011456:	4602      	mov	r2, r0
 8011458:	460b      	mov	r3, r1
 801145a:	4650      	mov	r0, sl
 801145c:	4659      	mov	r1, fp
 801145e:	f7ef f8cb 	bl	80005f8 <__aeabi_dmul>
 8011462:	a325      	add	r3, pc, #148	; (adr r3, 80114f8 <__kernel_sin+0x148>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	f7ee ff0e 	bl	8000288 <__aeabi_dsub>
 801146c:	4642      	mov	r2, r8
 801146e:	464b      	mov	r3, r9
 8011470:	f7ef f8c2 	bl	80005f8 <__aeabi_dmul>
 8011474:	4602      	mov	r2, r0
 8011476:	460b      	mov	r3, r1
 8011478:	4620      	mov	r0, r4
 801147a:	4629      	mov	r1, r5
 801147c:	f7ee ff06 	bl	800028c <__adddf3>
 8011480:	4604      	mov	r4, r0
 8011482:	460d      	mov	r5, r1
 8011484:	ec45 4b10 	vmov	d0, r4, r5
 8011488:	b003      	add	sp, #12
 801148a:	ecbd 8b04 	vpop	{d8-d9}
 801148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011492:	4b1b      	ldr	r3, [pc, #108]	; (8011500 <__kernel_sin+0x150>)
 8011494:	ec51 0b18 	vmov	r0, r1, d8
 8011498:	2200      	movs	r2, #0
 801149a:	f7ef f8ad 	bl	80005f8 <__aeabi_dmul>
 801149e:	4632      	mov	r2, r6
 80114a0:	ec41 0b19 	vmov	d9, r0, r1
 80114a4:	463b      	mov	r3, r7
 80114a6:	4640      	mov	r0, r8
 80114a8:	4649      	mov	r1, r9
 80114aa:	f7ef f8a5 	bl	80005f8 <__aeabi_dmul>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	ec51 0b19 	vmov	r0, r1, d9
 80114b6:	f7ee fee7 	bl	8000288 <__aeabi_dsub>
 80114ba:	4652      	mov	r2, sl
 80114bc:	465b      	mov	r3, fp
 80114be:	f7ef f89b 	bl	80005f8 <__aeabi_dmul>
 80114c2:	ec53 2b18 	vmov	r2, r3, d8
 80114c6:	f7ee fedf 	bl	8000288 <__aeabi_dsub>
 80114ca:	a30b      	add	r3, pc, #44	; (adr r3, 80114f8 <__kernel_sin+0x148>)
 80114cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d0:	4606      	mov	r6, r0
 80114d2:	460f      	mov	r7, r1
 80114d4:	4640      	mov	r0, r8
 80114d6:	4649      	mov	r1, r9
 80114d8:	f7ef f88e 	bl	80005f8 <__aeabi_dmul>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4630      	mov	r0, r6
 80114e2:	4639      	mov	r1, r7
 80114e4:	f7ee fed2 	bl	800028c <__adddf3>
 80114e8:	4602      	mov	r2, r0
 80114ea:	460b      	mov	r3, r1
 80114ec:	4620      	mov	r0, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ee feca 	bl	8000288 <__aeabi_dsub>
 80114f4:	e7c4      	b.n	8011480 <__kernel_sin+0xd0>
 80114f6:	bf00      	nop
 80114f8:	55555549 	.word	0x55555549
 80114fc:	3fc55555 	.word	0x3fc55555
 8011500:	3fe00000 	.word	0x3fe00000
 8011504:	5acfd57c 	.word	0x5acfd57c
 8011508:	3de5d93a 	.word	0x3de5d93a
 801150c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011510:	3e5ae5e6 	.word	0x3e5ae5e6
 8011514:	57b1fe7d 	.word	0x57b1fe7d
 8011518:	3ec71de3 	.word	0x3ec71de3
 801151c:	19c161d5 	.word	0x19c161d5
 8011520:	3f2a01a0 	.word	0x3f2a01a0
 8011524:	1110f8a6 	.word	0x1110f8a6
 8011528:	3f811111 	.word	0x3f811111

0801152c <fabs>:
 801152c:	ec51 0b10 	vmov	r0, r1, d0
 8011530:	ee10 2a10 	vmov	r2, s0
 8011534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011538:	ec43 2b10 	vmov	d0, r2, r3
 801153c:	4770      	bx	lr
	...

08011540 <floor>:
 8011540:	ec51 0b10 	vmov	r0, r1, d0
 8011544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801154c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011550:	2e13      	cmp	r6, #19
 8011552:	ee10 5a10 	vmov	r5, s0
 8011556:	ee10 8a10 	vmov	r8, s0
 801155a:	460c      	mov	r4, r1
 801155c:	dc32      	bgt.n	80115c4 <floor+0x84>
 801155e:	2e00      	cmp	r6, #0
 8011560:	da14      	bge.n	801158c <floor+0x4c>
 8011562:	a333      	add	r3, pc, #204	; (adr r3, 8011630 <floor+0xf0>)
 8011564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011568:	f7ee fe90 	bl	800028c <__adddf3>
 801156c:	2200      	movs	r2, #0
 801156e:	2300      	movs	r3, #0
 8011570:	f7ef fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8011574:	b138      	cbz	r0, 8011586 <floor+0x46>
 8011576:	2c00      	cmp	r4, #0
 8011578:	da57      	bge.n	801162a <floor+0xea>
 801157a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801157e:	431d      	orrs	r5, r3
 8011580:	d001      	beq.n	8011586 <floor+0x46>
 8011582:	4c2d      	ldr	r4, [pc, #180]	; (8011638 <floor+0xf8>)
 8011584:	2500      	movs	r5, #0
 8011586:	4621      	mov	r1, r4
 8011588:	4628      	mov	r0, r5
 801158a:	e025      	b.n	80115d8 <floor+0x98>
 801158c:	4f2b      	ldr	r7, [pc, #172]	; (801163c <floor+0xfc>)
 801158e:	4137      	asrs	r7, r6
 8011590:	ea01 0307 	and.w	r3, r1, r7
 8011594:	4303      	orrs	r3, r0
 8011596:	d01f      	beq.n	80115d8 <floor+0x98>
 8011598:	a325      	add	r3, pc, #148	; (adr r3, 8011630 <floor+0xf0>)
 801159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159e:	f7ee fe75 	bl	800028c <__adddf3>
 80115a2:	2200      	movs	r2, #0
 80115a4:	2300      	movs	r3, #0
 80115a6:	f7ef fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d0eb      	beq.n	8011586 <floor+0x46>
 80115ae:	2c00      	cmp	r4, #0
 80115b0:	bfbe      	ittt	lt
 80115b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80115b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80115ba:	19a4      	addlt	r4, r4, r6
 80115bc:	ea24 0407 	bic.w	r4, r4, r7
 80115c0:	2500      	movs	r5, #0
 80115c2:	e7e0      	b.n	8011586 <floor+0x46>
 80115c4:	2e33      	cmp	r6, #51	; 0x33
 80115c6:	dd0b      	ble.n	80115e0 <floor+0xa0>
 80115c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80115cc:	d104      	bne.n	80115d8 <floor+0x98>
 80115ce:	ee10 2a10 	vmov	r2, s0
 80115d2:	460b      	mov	r3, r1
 80115d4:	f7ee fe5a 	bl	800028c <__adddf3>
 80115d8:	ec41 0b10 	vmov	d0, r0, r1
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80115e4:	f04f 33ff 	mov.w	r3, #4294967295
 80115e8:	fa23 f707 	lsr.w	r7, r3, r7
 80115ec:	4207      	tst	r7, r0
 80115ee:	d0f3      	beq.n	80115d8 <floor+0x98>
 80115f0:	a30f      	add	r3, pc, #60	; (adr r3, 8011630 <floor+0xf0>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	f7ee fe49 	bl	800028c <__adddf3>
 80115fa:	2200      	movs	r2, #0
 80115fc:	2300      	movs	r3, #0
 80115fe:	f7ef fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8011602:	2800      	cmp	r0, #0
 8011604:	d0bf      	beq.n	8011586 <floor+0x46>
 8011606:	2c00      	cmp	r4, #0
 8011608:	da02      	bge.n	8011610 <floor+0xd0>
 801160a:	2e14      	cmp	r6, #20
 801160c:	d103      	bne.n	8011616 <floor+0xd6>
 801160e:	3401      	adds	r4, #1
 8011610:	ea25 0507 	bic.w	r5, r5, r7
 8011614:	e7b7      	b.n	8011586 <floor+0x46>
 8011616:	2301      	movs	r3, #1
 8011618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801161c:	fa03 f606 	lsl.w	r6, r3, r6
 8011620:	4435      	add	r5, r6
 8011622:	4545      	cmp	r5, r8
 8011624:	bf38      	it	cc
 8011626:	18e4      	addcc	r4, r4, r3
 8011628:	e7f2      	b.n	8011610 <floor+0xd0>
 801162a:	2500      	movs	r5, #0
 801162c:	462c      	mov	r4, r5
 801162e:	e7aa      	b.n	8011586 <floor+0x46>
 8011630:	8800759c 	.word	0x8800759c
 8011634:	7e37e43c 	.word	0x7e37e43c
 8011638:	bff00000 	.word	0xbff00000
 801163c:	000fffff 	.word	0x000fffff

08011640 <scalbn>:
 8011640:	b570      	push	{r4, r5, r6, lr}
 8011642:	ec55 4b10 	vmov	r4, r5, d0
 8011646:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801164a:	4606      	mov	r6, r0
 801164c:	462b      	mov	r3, r5
 801164e:	b99a      	cbnz	r2, 8011678 <scalbn+0x38>
 8011650:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011654:	4323      	orrs	r3, r4
 8011656:	d036      	beq.n	80116c6 <scalbn+0x86>
 8011658:	4b39      	ldr	r3, [pc, #228]	; (8011740 <scalbn+0x100>)
 801165a:	4629      	mov	r1, r5
 801165c:	ee10 0a10 	vmov	r0, s0
 8011660:	2200      	movs	r2, #0
 8011662:	f7ee ffc9 	bl	80005f8 <__aeabi_dmul>
 8011666:	4b37      	ldr	r3, [pc, #220]	; (8011744 <scalbn+0x104>)
 8011668:	429e      	cmp	r6, r3
 801166a:	4604      	mov	r4, r0
 801166c:	460d      	mov	r5, r1
 801166e:	da10      	bge.n	8011692 <scalbn+0x52>
 8011670:	a32b      	add	r3, pc, #172	; (adr r3, 8011720 <scalbn+0xe0>)
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	e03a      	b.n	80116ee <scalbn+0xae>
 8011678:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801167c:	428a      	cmp	r2, r1
 801167e:	d10c      	bne.n	801169a <scalbn+0x5a>
 8011680:	ee10 2a10 	vmov	r2, s0
 8011684:	4620      	mov	r0, r4
 8011686:	4629      	mov	r1, r5
 8011688:	f7ee fe00 	bl	800028c <__adddf3>
 801168c:	4604      	mov	r4, r0
 801168e:	460d      	mov	r5, r1
 8011690:	e019      	b.n	80116c6 <scalbn+0x86>
 8011692:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011696:	460b      	mov	r3, r1
 8011698:	3a36      	subs	r2, #54	; 0x36
 801169a:	4432      	add	r2, r6
 801169c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80116a0:	428a      	cmp	r2, r1
 80116a2:	dd08      	ble.n	80116b6 <scalbn+0x76>
 80116a4:	2d00      	cmp	r5, #0
 80116a6:	a120      	add	r1, pc, #128	; (adr r1, 8011728 <scalbn+0xe8>)
 80116a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ac:	da1c      	bge.n	80116e8 <scalbn+0xa8>
 80116ae:	a120      	add	r1, pc, #128	; (adr r1, 8011730 <scalbn+0xf0>)
 80116b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116b4:	e018      	b.n	80116e8 <scalbn+0xa8>
 80116b6:	2a00      	cmp	r2, #0
 80116b8:	dd08      	ble.n	80116cc <scalbn+0x8c>
 80116ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80116be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80116c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80116c6:	ec45 4b10 	vmov	d0, r4, r5
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80116d0:	da19      	bge.n	8011706 <scalbn+0xc6>
 80116d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80116d6:	429e      	cmp	r6, r3
 80116d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80116dc:	dd0a      	ble.n	80116f4 <scalbn+0xb4>
 80116de:	a112      	add	r1, pc, #72	; (adr r1, 8011728 <scalbn+0xe8>)
 80116e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d1e2      	bne.n	80116ae <scalbn+0x6e>
 80116e8:	a30f      	add	r3, pc, #60	; (adr r3, 8011728 <scalbn+0xe8>)
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f7ee ff83 	bl	80005f8 <__aeabi_dmul>
 80116f2:	e7cb      	b.n	801168c <scalbn+0x4c>
 80116f4:	a10a      	add	r1, pc, #40	; (adr r1, 8011720 <scalbn+0xe0>)
 80116f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d0b8      	beq.n	8011670 <scalbn+0x30>
 80116fe:	a10e      	add	r1, pc, #56	; (adr r1, 8011738 <scalbn+0xf8>)
 8011700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011704:	e7b4      	b.n	8011670 <scalbn+0x30>
 8011706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801170a:	3236      	adds	r2, #54	; 0x36
 801170c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011710:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011714:	4620      	mov	r0, r4
 8011716:	4b0c      	ldr	r3, [pc, #48]	; (8011748 <scalbn+0x108>)
 8011718:	2200      	movs	r2, #0
 801171a:	e7e8      	b.n	80116ee <scalbn+0xae>
 801171c:	f3af 8000 	nop.w
 8011720:	c2f8f359 	.word	0xc2f8f359
 8011724:	01a56e1f 	.word	0x01a56e1f
 8011728:	8800759c 	.word	0x8800759c
 801172c:	7e37e43c 	.word	0x7e37e43c
 8011730:	8800759c 	.word	0x8800759c
 8011734:	fe37e43c 	.word	0xfe37e43c
 8011738:	c2f8f359 	.word	0xc2f8f359
 801173c:	81a56e1f 	.word	0x81a56e1f
 8011740:	43500000 	.word	0x43500000
 8011744:	ffff3cb0 	.word	0xffff3cb0
 8011748:	3c900000 	.word	0x3c900000

0801174c <atanf>:
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	ee10 5a10 	vmov	r5, s0
 8011752:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011756:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801175a:	eef0 7a40 	vmov.f32	s15, s0
 801175e:	db10      	blt.n	8011782 <atanf+0x36>
 8011760:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011764:	dd04      	ble.n	8011770 <atanf+0x24>
 8011766:	ee70 7a00 	vadd.f32	s15, s0, s0
 801176a:	eeb0 0a67 	vmov.f32	s0, s15
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80118a8 <atanf+0x15c>
 8011774:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80118ac <atanf+0x160>
 8011778:	2d00      	cmp	r5, #0
 801177a:	bfd8      	it	le
 801177c:	eef0 7a40 	vmovle.f32	s15, s0
 8011780:	e7f3      	b.n	801176a <atanf+0x1e>
 8011782:	4b4b      	ldr	r3, [pc, #300]	; (80118b0 <atanf+0x164>)
 8011784:	429c      	cmp	r4, r3
 8011786:	dc10      	bgt.n	80117aa <atanf+0x5e>
 8011788:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801178c:	da0a      	bge.n	80117a4 <atanf+0x58>
 801178e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80118b4 <atanf+0x168>
 8011792:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801179a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a2:	dce2      	bgt.n	801176a <atanf+0x1e>
 80117a4:	f04f 33ff 	mov.w	r3, #4294967295
 80117a8:	e013      	b.n	80117d2 <atanf+0x86>
 80117aa:	f000 f8a3 	bl	80118f4 <fabsf>
 80117ae:	4b42      	ldr	r3, [pc, #264]	; (80118b8 <atanf+0x16c>)
 80117b0:	429c      	cmp	r4, r3
 80117b2:	dc4f      	bgt.n	8011854 <atanf+0x108>
 80117b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80117b8:	429c      	cmp	r4, r3
 80117ba:	dc41      	bgt.n	8011840 <atanf+0xf4>
 80117bc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80117c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80117c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80117c8:	2300      	movs	r3, #0
 80117ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80117ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80117d2:	1c5a      	adds	r2, r3, #1
 80117d4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80117d8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80118bc <atanf+0x170>
 80117dc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80118c0 <atanf+0x174>
 80117e0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80118c4 <atanf+0x178>
 80117e4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80118c8 <atanf+0x17c>
 80117e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80117ec:	eea7 6a25 	vfma.f32	s12, s14, s11
 80117f0:	eddf 5a36 	vldr	s11, [pc, #216]	; 80118cc <atanf+0x180>
 80117f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80117f8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80118d0 <atanf+0x184>
 80117fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011800:	eddf 5a34 	vldr	s11, [pc, #208]	; 80118d4 <atanf+0x188>
 8011804:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011808:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80118d8 <atanf+0x18c>
 801180c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011810:	eddf 5a32 	vldr	s11, [pc, #200]	; 80118dc <atanf+0x190>
 8011814:	eee7 5a05 	vfma.f32	s11, s14, s10
 8011818:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80118e0 <atanf+0x194>
 801181c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8011820:	eddf 5a30 	vldr	s11, [pc, #192]	; 80118e4 <atanf+0x198>
 8011824:	eee5 5a07 	vfma.f32	s11, s10, s14
 8011828:	eea5 0a87 	vfma.f32	s0, s11, s14
 801182c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011830:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011834:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011838:	d121      	bne.n	801187e <atanf+0x132>
 801183a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801183e:	e794      	b.n	801176a <atanf+0x1e>
 8011840:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011844:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011848:	ee30 0a27 	vadd.f32	s0, s0, s15
 801184c:	2301      	movs	r3, #1
 801184e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011852:	e7be      	b.n	80117d2 <atanf+0x86>
 8011854:	4b24      	ldr	r3, [pc, #144]	; (80118e8 <atanf+0x19c>)
 8011856:	429c      	cmp	r4, r3
 8011858:	dc0b      	bgt.n	8011872 <atanf+0x126>
 801185a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801185e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011862:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011866:	2302      	movs	r3, #2
 8011868:	ee70 6a67 	vsub.f32	s13, s0, s15
 801186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011870:	e7af      	b.n	80117d2 <atanf+0x86>
 8011872:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011876:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801187a:	2303      	movs	r3, #3
 801187c:	e7a9      	b.n	80117d2 <atanf+0x86>
 801187e:	4a1b      	ldr	r2, [pc, #108]	; (80118ec <atanf+0x1a0>)
 8011880:	491b      	ldr	r1, [pc, #108]	; (80118f0 <atanf+0x1a4>)
 8011882:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011886:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801188a:	ed93 7a00 	vldr	s14, [r3]
 801188e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011892:	2d00      	cmp	r5, #0
 8011894:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011898:	ed92 0a00 	vldr	s0, [r2]
 801189c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80118a0:	bfb8      	it	lt
 80118a2:	eef1 7a67 	vneglt.f32	s15, s15
 80118a6:	e760      	b.n	801176a <atanf+0x1e>
 80118a8:	3fc90fdb 	.word	0x3fc90fdb
 80118ac:	bfc90fdb 	.word	0xbfc90fdb
 80118b0:	3edfffff 	.word	0x3edfffff
 80118b4:	7149f2ca 	.word	0x7149f2ca
 80118b8:	3f97ffff 	.word	0x3f97ffff
 80118bc:	3c8569d7 	.word	0x3c8569d7
 80118c0:	3d4bda59 	.word	0x3d4bda59
 80118c4:	bd15a221 	.word	0xbd15a221
 80118c8:	be4ccccd 	.word	0xbe4ccccd
 80118cc:	3d886b35 	.word	0x3d886b35
 80118d0:	3dba2e6e 	.word	0x3dba2e6e
 80118d4:	3e124925 	.word	0x3e124925
 80118d8:	3eaaaaab 	.word	0x3eaaaaab
 80118dc:	bd6ef16b 	.word	0xbd6ef16b
 80118e0:	bd9d8795 	.word	0xbd9d8795
 80118e4:	bde38e38 	.word	0xbde38e38
 80118e8:	401bffff 	.word	0x401bffff
 80118ec:	080124b0 	.word	0x080124b0
 80118f0:	080124c0 	.word	0x080124c0

080118f4 <fabsf>:
 80118f4:	ee10 3a10 	vmov	r3, s0
 80118f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118fc:	ee00 3a10 	vmov	s0, r3
 8011900:	4770      	bx	lr

08011902 <finitef>:
 8011902:	b082      	sub	sp, #8
 8011904:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011908:	9801      	ldr	r0, [sp, #4]
 801190a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801190e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011912:	bfac      	ite	ge
 8011914:	2000      	movge	r0, #0
 8011916:	2001      	movlt	r0, #1
 8011918:	b002      	add	sp, #8
 801191a:	4770      	bx	lr

0801191c <nanf>:
 801191c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011924 <nanf+0x8>
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	7fc00000 	.word	0x7fc00000

08011928 <rintf>:
 8011928:	ee10 2a10 	vmov	r2, s0
 801192c:	b513      	push	{r0, r1, r4, lr}
 801192e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011932:	397f      	subs	r1, #127	; 0x7f
 8011934:	2916      	cmp	r1, #22
 8011936:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801193a:	dc47      	bgt.n	80119cc <rintf+0xa4>
 801193c:	b32b      	cbz	r3, 801198a <rintf+0x62>
 801193e:	2900      	cmp	r1, #0
 8011940:	ee10 3a10 	vmov	r3, s0
 8011944:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8011948:	da21      	bge.n	801198e <rintf+0x66>
 801194a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801194e:	425b      	negs	r3, r3
 8011950:	4921      	ldr	r1, [pc, #132]	; (80119d8 <rintf+0xb0>)
 8011952:	0a5b      	lsrs	r3, r3, #9
 8011954:	0d12      	lsrs	r2, r2, #20
 8011956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801195a:	0512      	lsls	r2, r2, #20
 801195c:	4313      	orrs	r3, r2
 801195e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011962:	ee07 3a90 	vmov	s15, r3
 8011966:	edd1 6a00 	vldr	s13, [r1]
 801196a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801196e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8011972:	eddd 7a01 	vldr	s15, [sp, #4]
 8011976:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801197a:	ee17 3a90 	vmov	r3, s15
 801197e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011982:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8011986:	ee00 3a10 	vmov	s0, r3
 801198a:	b002      	add	sp, #8
 801198c:	bd10      	pop	{r4, pc}
 801198e:	4a13      	ldr	r2, [pc, #76]	; (80119dc <rintf+0xb4>)
 8011990:	410a      	asrs	r2, r1
 8011992:	4213      	tst	r3, r2
 8011994:	d0f9      	beq.n	801198a <rintf+0x62>
 8011996:	0854      	lsrs	r4, r2, #1
 8011998:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801199c:	d006      	beq.n	80119ac <rintf+0x84>
 801199e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80119a2:	ea23 0304 	bic.w	r3, r3, r4
 80119a6:	fa42 f101 	asr.w	r1, r2, r1
 80119aa:	430b      	orrs	r3, r1
 80119ac:	4a0a      	ldr	r2, [pc, #40]	; (80119d8 <rintf+0xb0>)
 80119ae:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80119b2:	ed90 7a00 	vldr	s14, [r0]
 80119b6:	ee07 3a90 	vmov	s15, r3
 80119ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119be:	edcd 7a01 	vstr	s15, [sp, #4]
 80119c2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80119c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80119ca:	e7de      	b.n	801198a <rintf+0x62>
 80119cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80119d0:	d3db      	bcc.n	801198a <rintf+0x62>
 80119d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80119d6:	e7d8      	b.n	801198a <rintf+0x62>
 80119d8:	080124d0 	.word	0x080124d0
 80119dc:	007fffff 	.word	0x007fffff

080119e0 <scalbnf>:
 80119e0:	ee10 3a10 	vmov	r3, s0
 80119e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80119e8:	d025      	beq.n	8011a36 <scalbnf+0x56>
 80119ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80119ee:	d302      	bcc.n	80119f6 <scalbnf+0x16>
 80119f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80119f4:	4770      	bx	lr
 80119f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80119fa:	d122      	bne.n	8011a42 <scalbnf+0x62>
 80119fc:	4b2a      	ldr	r3, [pc, #168]	; (8011aa8 <scalbnf+0xc8>)
 80119fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011aac <scalbnf+0xcc>
 8011a02:	4298      	cmp	r0, r3
 8011a04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011a08:	db16      	blt.n	8011a38 <scalbnf+0x58>
 8011a0a:	ee10 3a10 	vmov	r3, s0
 8011a0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011a12:	3a19      	subs	r2, #25
 8011a14:	4402      	add	r2, r0
 8011a16:	2afe      	cmp	r2, #254	; 0xfe
 8011a18:	dd15      	ble.n	8011a46 <scalbnf+0x66>
 8011a1a:	ee10 3a10 	vmov	r3, s0
 8011a1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011ab0 <scalbnf+0xd0>
 8011a22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8011ab4 <scalbnf+0xd4>
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	eeb0 7a67 	vmov.f32	s14, s15
 8011a2c:	bfb8      	it	lt
 8011a2e:	eef0 7a66 	vmovlt.f32	s15, s13
 8011a32:	ee27 0a27 	vmul.f32	s0, s14, s15
 8011a36:	4770      	bx	lr
 8011a38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011ab8 <scalbnf+0xd8>
 8011a3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011a40:	4770      	bx	lr
 8011a42:	0dd2      	lsrs	r2, r2, #23
 8011a44:	e7e6      	b.n	8011a14 <scalbnf+0x34>
 8011a46:	2a00      	cmp	r2, #0
 8011a48:	dd06      	ble.n	8011a58 <scalbnf+0x78>
 8011a4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011a52:	ee00 3a10 	vmov	s0, r3
 8011a56:	4770      	bx	lr
 8011a58:	f112 0f16 	cmn.w	r2, #22
 8011a5c:	da1a      	bge.n	8011a94 <scalbnf+0xb4>
 8011a5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011a62:	4298      	cmp	r0, r3
 8011a64:	ee10 3a10 	vmov	r3, s0
 8011a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a6c:	dd0a      	ble.n	8011a84 <scalbnf+0xa4>
 8011a6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8011ab0 <scalbnf+0xd0>
 8011a72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8011ab4 <scalbnf+0xd4>
 8011a76:	eef0 7a40 	vmov.f32	s15, s0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	bf18      	it	ne
 8011a7e:	eeb0 0a47 	vmovne.f32	s0, s14
 8011a82:	e7db      	b.n	8011a3c <scalbnf+0x5c>
 8011a84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011ab8 <scalbnf+0xd8>
 8011a88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011abc <scalbnf+0xdc>
 8011a8c:	eef0 7a40 	vmov.f32	s15, s0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	e7f3      	b.n	8011a7c <scalbnf+0x9c>
 8011a94:	3219      	adds	r2, #25
 8011a96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011a9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011ac0 <scalbnf+0xe0>
 8011aa2:	ee07 3a10 	vmov	s14, r3
 8011aa6:	e7c4      	b.n	8011a32 <scalbnf+0x52>
 8011aa8:	ffff3cb0 	.word	0xffff3cb0
 8011aac:	4c000000 	.word	0x4c000000
 8011ab0:	7149f2ca 	.word	0x7149f2ca
 8011ab4:	f149f2ca 	.word	0xf149f2ca
 8011ab8:	0da24260 	.word	0x0da24260
 8011abc:	8da24260 	.word	0x8da24260
 8011ac0:	33000000 	.word	0x33000000

08011ac4 <_init>:
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac6:	bf00      	nop
 8011ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aca:	bc08      	pop	{r3}
 8011acc:	469e      	mov	lr, r3
 8011ace:	4770      	bx	lr

08011ad0 <_fini>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	bf00      	nop
 8011ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ad6:	bc08      	pop	{r3}
 8011ad8:	469e      	mov	lr, r3
 8011ada:	4770      	bx	lr
